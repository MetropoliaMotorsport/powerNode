
motorsport_PowerNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bff4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800c1cc  0800c1cc  0001c1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2ec  0800c2ec  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800c2ec  0800c2ec  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c2ec  0800c2ec  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2ec  0800c2ec  0001c2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2f0  0800c2f0  0001c2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800c2f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae8  20000080  0800c374  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b68  0800c374  00020b68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7f5  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003251  00000000  00000000  0003c8a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018a8  00000000  00000000  0003faf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001738  00000000  00000000  000413a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002166d  00000000  00000000  00042ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e7c  00000000  00000000  00064145  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc7fd  00000000  00000000  00075fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001527be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000692c  00000000  00000000  0015283c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000080 	.word	0x20000080
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c1b4 	.word	0x0800c1b4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000084 	.word	0x20000084
 8000214:	0800c1b4 	.word	0x0800c1b4

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f001 fd4a 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f00b fa77 	bl	800b72c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f001 fd56 	bl	8001d22 <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f001 fd22 	bl	8001cd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	2000007c 	.word	0x2000007c
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	200000a8 	.word	0x200000a8
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	200000a8 	.word	0x200000a8

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	431a      	orrs	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	609a      	str	r2, [r3, #8]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	431a      	orrs	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	609a      	str	r2, [r3, #8]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000398:	4618      	mov	r0, r3
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80003a4:	b490      	push	{r4, r7}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	3360      	adds	r3, #96	; 0x60
 80003b6:	461a      	mov	r2, r3
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	4413      	add	r3, r2
 80003be:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80003c0:	6822      	ldr	r2, [r4, #0]
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <LL_ADC_SetOffset+0x40>)
 80003c4:	4013      	ands	r3, r2
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	430a      	orrs	r2, r1
 80003d0:	4313      	orrs	r3, r2
 80003d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003d6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc90      	pop	{r4, r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	03fff000 	.word	0x03fff000

080003e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80003e8:	b490      	push	{r4, r7}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3360      	adds	r3, #96	; 0x60
 80003f6:	461a      	mov	r2, r3
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000400:	6823      	ldr	r3, [r4, #0]
 8000402:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bc90      	pop	{r4, r7}
 800040e:	4770      	bx	lr

08000410 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000410:	b490      	push	{r4, r7}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	3360      	adds	r3, #96	; 0x60
 8000420:	461a      	mov	r2, r3
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800042a:	6823      	ldr	r3, [r4, #0]
 800042c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4313      	orrs	r3, r2
 8000434:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bc90      	pop	{r4, r7}
 800043e:	4770      	bx	lr

08000440 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000440:	b490      	push	{r4, r7}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3360      	adds	r3, #96	; 0x60
 8000450:	461a      	mov	r2, r3
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800045a:	6823      	ldr	r3, [r4, #0]
 800045c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4313      	orrs	r3, r2
 8000464:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bc90      	pop	{r4, r7}
 800046e:	4770      	bx	lr

08000470 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000470:	b490      	push	{r4, r7}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3360      	adds	r3, #96	; 0x60
 8000480:	461a      	mov	r2, r3
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4413      	add	r3, r2
 8000488:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800048a:	6823      	ldr	r3, [r4, #0]
 800048c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bc90      	pop	{r4, r7}
 800049e:	4770      	bx	lr

080004a0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	615a      	str	r2, [r3, #20]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d101      	bne.n	80004de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80004da:	2301      	movs	r3, #1
 80004dc:	e000      	b.n	80004e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80004de:	2300      	movs	r3, #0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004ec:	b490      	push	{r4, r7}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3330      	adds	r3, #48	; 0x30
 80004fc:	461a      	mov	r2, r3
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	0a1b      	lsrs	r3, r3, #8
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	f003 030c 	and.w	r3, r3, #12
 8000508:	4413      	add	r3, r2
 800050a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800050c:	6822      	ldr	r2, [r4, #0]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	f003 031f 	and.w	r3, r3, #31
 8000514:	211f      	movs	r1, #31
 8000516:	fa01 f303 	lsl.w	r3, r1, r3
 800051a:	43db      	mvns	r3, r3
 800051c:	401a      	ands	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	0e9b      	lsrs	r3, r3, #26
 8000522:	f003 011f 	and.w	r1, r3, #31
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	f003 031f 	and.w	r3, r3, #31
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	4313      	orrs	r3, r2
 8000532:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bc90      	pop	{r4, r7}
 800053c:	4770      	bx	lr

0800053e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800053e:	b490      	push	{r4, r7}
 8000540:	b084      	sub	sp, #16
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	3314      	adds	r3, #20
 800054e:	461a      	mov	r2, r3
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	0e5b      	lsrs	r3, r3, #25
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	4413      	add	r3, r2
 800055c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800055e:	6822      	ldr	r2, [r4, #0]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	0d1b      	lsrs	r3, r3, #20
 8000564:	f003 031f 	and.w	r3, r3, #31
 8000568:	2107      	movs	r1, #7
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	43db      	mvns	r3, r3
 8000570:	401a      	ands	r2, r3
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	0d1b      	lsrs	r3, r3, #20
 8000576:	f003 031f 	and.w	r3, r3, #31
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	4313      	orrs	r3, r2
 8000582:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bc90      	pop	{r4, r7}
 800058c:	4770      	bx	lr
	...

08000590 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005a8:	43db      	mvns	r3, r3
 80005aa:	401a      	ands	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f003 0318 	and.w	r3, r3, #24
 80005b2:	4908      	ldr	r1, [pc, #32]	; (80005d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80005b4:	40d9      	lsrs	r1, r3
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	400b      	ands	r3, r1
 80005ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005be:	431a      	orrs	r2, r3
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	0007ffff 	.word	0x0007ffff

080005d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80005e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	6093      	str	r3, [r2, #8]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800060c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000610:	d101      	bne.n	8000616 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000612:	2301      	movs	r3, #1
 8000614:	e000      	b.n	8000618 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000634:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000638:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000660:	d101      	bne.n	8000666 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000662:	2301      	movs	r3, #1
 8000664:	e000      	b.n	8000668 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000684:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000688:	f043 0201 	orr.w	r2, r3, #1
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80006ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006b0:	f043 0202 	orr.w	r2, r3, #2
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d101      	bne.n	80006dc <LL_ADC_IsEnabled+0x18>
 80006d8:	2301      	movs	r3, #1
 80006da:	e000      	b.n	80006de <LL_ADC_IsEnabled+0x1a>
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d101      	bne.n	8000702 <LL_ADC_IsDisableOngoing+0x18>
 80006fe:	2301      	movs	r3, #1
 8000700:	e000      	b.n	8000704 <LL_ADC_IsDisableOngoing+0x1a>
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000720:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000724:	f043 0210 	orr.w	r2, r3, #16
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f003 0304 	and.w	r3, r3, #4
 8000748:	2b04      	cmp	r3, #4
 800074a:	d101      	bne.n	8000750 <LL_ADC_REG_IsConversionOngoing+0x18>
 800074c:	2301      	movs	r3, #1
 800074e:	e000      	b.n	8000752 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800076e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000772:	f043 0220 	orr.w	r2, r3, #32
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	2b08      	cmp	r3, #8
 8000798:	d101      	bne.n	800079e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800079a:	2301      	movs	r3, #1
 800079c:	e000      	b.n	80007a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007b4:	2300      	movs	r3, #0
 80007b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e16b      	b.n	8000a9e <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d109      	bne.n	80007e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f00a ffcd 	bl	800b774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff05 	bl	80005fc <LL_ADC_IsDeepPowerDownEnabled>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d004      	beq.n	8000802 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff feeb 	bl	80005d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff20 	bl	800064c <LL_ADC_IsInternalRegulatorEnabled>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d113      	bne.n	800083a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff04 	bl	8000624 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800081c:	4ba2      	ldr	r3, [pc, #648]	; (8000aa8 <HAL_ADC_Init+0x2fc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	099b      	lsrs	r3, r3, #6
 8000822:	4aa2      	ldr	r2, [pc, #648]	; (8000aac <HAL_ADC_Init+0x300>)
 8000824:	fba2 2303 	umull	r2, r3, r2, r3
 8000828:	099b      	lsrs	r3, r3, #6
 800082a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800082c:	e002      	b.n	8000834 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	3b01      	subs	r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1f9      	bne.n	800082e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff04 	bl	800064c <LL_ADC_IsInternalRegulatorEnabled>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10d      	bne.n	8000866 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800084e:	f043 0210 	orr.w	r2, r3, #16
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085a:	f043 0201 	orr.w	r2, r3, #1
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff64 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 8000870:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	2b00      	cmp	r3, #0
 800087c:	f040 8106 	bne.w	8000a8c <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	2b00      	cmp	r3, #0
 8000884:	f040 8102 	bne.w	8000a8c <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800088c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000890:	f043 0202 	orr.w	r2, r3, #2
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff11 	bl	80006c4 <LL_ADC_IsEnabled>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d111      	bne.n	80008cc <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80008a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80008ac:	f7ff ff0a 	bl	80006c4 <LL_ADC_IsEnabled>
 80008b0:	4604      	mov	r4, r0
 80008b2:	487f      	ldr	r0, [pc, #508]	; (8000ab0 <HAL_ADC_Init+0x304>)
 80008b4:	f7ff ff06 	bl	80006c4 <LL_ADC_IsEnabled>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4323      	orrs	r3, r4
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d105      	bne.n	80008cc <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	4619      	mov	r1, r3
 80008c6:	487b      	ldr	r0, [pc, #492]	; (8000ab4 <HAL_ADC_Init+0x308>)
 80008c8:	f7ff fd38 	bl	800033c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	7f5b      	ldrb	r3, [r3, #29]
 80008d0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80008d6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80008dc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80008e2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008ea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80008ec:	4313      	orrs	r3, r2
 80008ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d106      	bne.n	8000908 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fe:	3b01      	subs	r3, #1
 8000900:	045b      	lsls	r3, r3, #17
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	4313      	orrs	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090c:	2b00      	cmp	r3, #0
 800090e:	d009      	beq.n	8000924 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	4b63      	ldr	r3, [pc, #396]	; (8000ab8 <HAL_ADC_Init+0x30c>)
 800092c:	4013      	ands	r3, r2
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	6812      	ldr	r2, [r2, #0]
 8000932:	69b9      	ldr	r1, [r7, #24]
 8000934:	430b      	orrs	r3, r1
 8000936:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	691b      	ldr	r3, [r3, #16]
 800093e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	430a      	orrs	r2, r1
 800094c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fef0 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 8000958:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff11 	bl	8000786 <LL_ADC_INJ_IsConversionOngoing>
 8000964:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d16d      	bne.n	8000a48 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d16a      	bne.n	8000a48 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000976:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800097e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000980:	4313      	orrs	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68db      	ldr	r3, [r3, #12]
 800098a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800098e:	f023 0302 	bic.w	r3, r3, #2
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	6812      	ldr	r2, [r2, #0]
 8000996:	69b9      	ldr	r1, [r7, #24]
 8000998:	430b      	orrs	r3, r1
 800099a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	691b      	ldr	r3, [r3, #16]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d017      	beq.n	80009d4 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	691a      	ldr	r2, [r3, #16]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80009b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80009bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	6911      	ldr	r1, [r2, #16]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	6812      	ldr	r2, [r2, #0]
 80009cc:	430b      	orrs	r3, r1
 80009ce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80009d2:	e013      	b.n	80009fc <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	691a      	ldr	r2, [r3, #16]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	6812      	ldr	r2, [r2, #0]
 80009f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009f8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d118      	bne.n	8000a38 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000a10:	f023 0304 	bic.w	r3, r3, #4
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000a1c:	4311      	orrs	r1, r2
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000a22:	4311      	orrs	r1, r2
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f042 0201 	orr.w	r2, r2, #1
 8000a34:	611a      	str	r2, [r3, #16]
 8000a36:	e007      	b.n	8000a48 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	691a      	ldr	r2, [r3, #16]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f022 0201 	bic.w	r2, r2, #1
 8000a46:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d10c      	bne.n	8000a6a <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f023 010f 	bic.w	r1, r3, #15
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6a1b      	ldr	r3, [r3, #32]
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	430a      	orrs	r2, r1
 8000a66:	631a      	str	r2, [r3, #48]	; 0x30
 8000a68:	e007      	b.n	8000a7a <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f022 020f 	bic.w	r2, r2, #15
 8000a78:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a7e:	f023 0303 	bic.w	r3, r3, #3
 8000a82:	f043 0201 	orr.w	r2, r3, #1
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	65da      	str	r2, [r3, #92]	; 0x5c
 8000a8a:	e007      	b.n	8000a9c <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a90:	f043 0210 	orr.w	r2, r3, #16
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000a9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	; 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd90      	pop	{r4, r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000007c 	.word	0x2000007c
 8000aac:	053e2d63 	.word	0x053e2d63
 8000ab0:	50000100 	.word	0x50000100
 8000ab4:	50000300 	.word	0x50000300
 8000ab8:	fff04007 	.word	0xfff04007

08000abc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b0a6      	sub	sp, #152	; 0x98
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d101      	bne.n	8000b06 <HAL_ADC_ConfigChannel+0x22>
 8000b02:	2302      	movs	r3, #2
 8000b04:	e348      	b.n	8001198 <HAL_ADC_ConfigChannel+0x6b4>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fe10 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f040 832d 	bne.w	800117a <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	6859      	ldr	r1, [r3, #4]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	f7ff fcdd 	bl	80004ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fdfe 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 8000b3c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fe1e 	bl	8000786 <LL_ADC_INJ_IsConversionOngoing>
 8000b4a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f040 817b 	bne.w	8000e4e <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	f040 8176 	bne.w	8000e4e <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b6a:	d10f      	bne.n	8000b8c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	f7ff fce1 	bl	800053e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fc8b 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>
 8000b8a:	e00e      	b.n	8000baa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	6819      	ldr	r1, [r3, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	f7ff fcd0 	bl	800053e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fc7b 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	695a      	ldr	r2, [r3, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	08db      	lsrs	r3, r3, #3
 8000bb6:	f003 0303 	and.w	r3, r3, #3
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	d022      	beq.n	8000c12 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	6919      	ldr	r1, [r3, #16]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000bdc:	f7ff fbe2 	bl	80003a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	6919      	ldr	r1, [r3, #16]
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	461a      	mov	r2, r3
 8000bee:	f7ff fc27 	bl	8000440 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	6919      	ldr	r1, [r3, #16]
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	7f1b      	ldrb	r3, [r3, #28]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d102      	bne.n	8000c08 <HAL_ADC_ConfigChannel+0x124>
 8000c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c06:	e000      	b.n	8000c0a <HAL_ADC_ConfigChannel+0x126>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	f7ff fc30 	bl	8000470 <LL_ADC_SetOffsetSaturation>
 8000c10:	e11d      	b.n	8000e4e <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fbe5 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10a      	bne.n	8000c3e <HAL_ADC_ConfigChannel+0x15a>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fbda 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	0e9b      	lsrs	r3, r3, #26
 8000c38:	f003 021f 	and.w	r2, r3, #31
 8000c3c:	e012      	b.n	8000c64 <HAL_ADC_ConfigChannel+0x180>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fbcf 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c54:	fa93 f3a3 	rbit	r3, r3
 8000c58:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c5c:	fab3 f383 	clz	r3, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d105      	bne.n	8000c7c <HAL_ADC_ConfigChannel+0x198>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	0e9b      	lsrs	r3, r3, #26
 8000c76:	f003 031f 	and.w	r3, r3, #31
 8000c7a:	e00a      	b.n	8000c92 <HAL_ADC_ConfigChannel+0x1ae>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c84:	fa93 f3a3 	rbit	r3, r3
 8000c88:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c8c:	fab3 f383 	clz	r3, r3
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d106      	bne.n	8000ca4 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fbb6 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2101      	movs	r1, #1
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fb9c 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10a      	bne.n	8000cd0 <HAL_ADC_ConfigChannel+0x1ec>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fb91 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	0e9b      	lsrs	r3, r3, #26
 8000cca:	f003 021f 	and.w	r2, r3, #31
 8000cce:	e010      	b.n	8000cf2 <HAL_ADC_ConfigChannel+0x20e>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fb86 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ce2:	fa93 f3a3 	rbit	r3, r3
 8000ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cea:	fab3 f383 	clz	r3, r3
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d105      	bne.n	8000d0a <HAL_ADC_ConfigChannel+0x226>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	0e9b      	lsrs	r3, r3, #26
 8000d04:	f003 031f 	and.w	r3, r3, #31
 8000d08:	e00a      	b.n	8000d20 <HAL_ADC_ConfigChannel+0x23c>
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d12:	fa93 f3a3 	rbit	r3, r3
 8000d16:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d1a:	fab3 f383 	clz	r3, r3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d106      	bne.n	8000d32 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fb6f 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2102      	movs	r1, #2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fb55 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10a      	bne.n	8000d5e <HAL_ADC_ConfigChannel+0x27a>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fb4a 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d54:	4603      	mov	r3, r0
 8000d56:	0e9b      	lsrs	r3, r3, #26
 8000d58:	f003 021f 	and.w	r2, r3, #31
 8000d5c:	e010      	b.n	8000d80 <HAL_ADC_ConfigChannel+0x29c>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2102      	movs	r1, #2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fb3f 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d70:	fa93 f3a3 	rbit	r3, r3
 8000d74:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d78:	fab3 f383 	clz	r3, r3
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	461a      	mov	r2, r3
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d105      	bne.n	8000d98 <HAL_ADC_ConfigChannel+0x2b4>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	0e9b      	lsrs	r3, r3, #26
 8000d92:	f003 031f 	and.w	r3, r3, #31
 8000d96:	e00a      	b.n	8000dae <HAL_ADC_ConfigChannel+0x2ca>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000da0:	fa93 f3a3 	rbit	r3, r3
 8000da4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000da8:	fab3 f383 	clz	r3, r3
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d106      	bne.n	8000dc0 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2200      	movs	r2, #0
 8000db8:	2102      	movs	r1, #2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fb28 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2103      	movs	r1, #3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fb0e 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10a      	bne.n	8000dec <HAL_ADC_ConfigChannel+0x308>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2103      	movs	r1, #3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fb03 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	0e9b      	lsrs	r3, r3, #26
 8000de6:	f003 021f 	and.w	r2, r3, #31
 8000dea:	e010      	b.n	8000e0e <HAL_ADC_ConfigChannel+0x32a>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2103      	movs	r1, #3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff faf8 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dfe:	fa93 f3a3 	rbit	r3, r3
 8000e02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e06:	fab3 f383 	clz	r3, r3
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d105      	bne.n	8000e26 <HAL_ADC_ConfigChannel+0x342>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	0e9b      	lsrs	r3, r3, #26
 8000e20:	f003 031f 	and.w	r3, r3, #31
 8000e24:	e00a      	b.n	8000e3c <HAL_ADC_ConfigChannel+0x358>
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e2e:	fa93 f3a3 	rbit	r3, r3
 8000e32:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e36:	fab3 f383 	clz	r3, r3
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d106      	bne.n	8000e4e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2200      	movs	r2, #0
 8000e46:	2103      	movs	r1, #3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fae1 	bl	8000410 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fc36 	bl	80006c4 <LL_ADC_IsEnabled>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f040 810c 	bne.w	8001078 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6818      	ldr	r0, [r3, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	6819      	ldr	r1, [r3, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	f7ff fb8f 	bl	8000590 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	4aab      	ldr	r2, [pc, #684]	; (8001124 <HAL_ADC_ConfigChannel+0x640>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	f040 80fd 	bne.w	8001078 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10b      	bne.n	8000ea6 <HAL_ADC_ConfigChannel+0x3c2>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	0e9b      	lsrs	r3, r3, #26
 8000e94:	3301      	adds	r3, #1
 8000e96:	f003 031f 	and.w	r3, r3, #31
 8000e9a:	2b09      	cmp	r3, #9
 8000e9c:	bf94      	ite	ls
 8000e9e:	2301      	movls	r3, #1
 8000ea0:	2300      	movhi	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	e012      	b.n	8000ecc <HAL_ADC_ConfigChannel+0x3e8>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eae:	fa93 f3a3 	rbit	r3, r3
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eb6:	fab3 f383 	clz	r3, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	f003 031f 	and.w	r3, r3, #31
 8000ec2:	2b09      	cmp	r3, #9
 8000ec4:	bf94      	ite	ls
 8000ec6:	2301      	movls	r3, #1
 8000ec8:	2300      	movhi	r3, #0
 8000eca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d064      	beq.n	8000f9a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d107      	bne.n	8000eec <HAL_ADC_ConfigChannel+0x408>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	0e9b      	lsrs	r3, r3, #26
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	069b      	lsls	r3, r3, #26
 8000ee6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000eea:	e00e      	b.n	8000f0a <HAL_ADC_ConfigChannel+0x426>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ef4:	fa93 f3a3 	rbit	r3, r3
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efc:	fab3 f383 	clz	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	3301      	adds	r3, #1
 8000f04:	069b      	lsls	r3, r3, #26
 8000f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d109      	bne.n	8000f2a <HAL_ADC_ConfigChannel+0x446>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	0e9b      	lsrs	r3, r3, #26
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f003 031f 	and.w	r3, r3, #31
 8000f22:	2101      	movs	r1, #1
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	e010      	b.n	8000f4c <HAL_ADC_ConfigChannel+0x468>
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8000f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3a:	fab3 f383 	clz	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	f003 031f 	and.w	r3, r3, #31
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	ea42 0103 	orr.w	r1, r2, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d10a      	bne.n	8000f72 <HAL_ADC_ConfigChannel+0x48e>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	0e9b      	lsrs	r3, r3, #26
 8000f62:	3301      	adds	r3, #1
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	051b      	lsls	r3, r3, #20
 8000f70:	e011      	b.n	8000f96 <HAL_ADC_ConfigChannel+0x4b2>
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7a:	fa93 f3a3 	rbit	r3, r3
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	fab3 f383 	clz	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	3301      	adds	r3, #1
 8000f8a:	f003 021f 	and.w	r2, r3, #31
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f96:	430b      	orrs	r3, r1
 8000f98:	e069      	b.n	800106e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d107      	bne.n	8000fb6 <HAL_ADC_ConfigChannel+0x4d2>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	0e9b      	lsrs	r3, r3, #26
 8000fac:	3301      	adds	r3, #1
 8000fae:	069b      	lsls	r3, r3, #26
 8000fb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fb4:	e00e      	b.n	8000fd4 <HAL_ADC_ConfigChannel+0x4f0>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	61fb      	str	r3, [r7, #28]
  return result;
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	fab3 f383 	clz	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	069b      	lsls	r3, r3, #26
 8000fd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d109      	bne.n	8000ff4 <HAL_ADC_ConfigChannel+0x510>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	0e9b      	lsrs	r3, r3, #26
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f003 031f 	and.w	r3, r3, #31
 8000fec:	2101      	movs	r1, #1
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	e010      	b.n	8001016 <HAL_ADC_ConfigChannel+0x532>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	617b      	str	r3, [r7, #20]
  return result;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	3301      	adds	r3, #1
 800100c:	f003 031f 	and.w	r3, r3, #31
 8001010:	2101      	movs	r1, #1
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	ea42 0103 	orr.w	r1, r2, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10d      	bne.n	8001042 <HAL_ADC_ConfigChannel+0x55e>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	0e9b      	lsrs	r3, r3, #26
 800102c:	3301      	adds	r3, #1
 800102e:	f003 021f 	and.w	r2, r3, #31
 8001032:	4613      	mov	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4413      	add	r3, r2
 8001038:	3b1e      	subs	r3, #30
 800103a:	051b      	lsls	r3, r3, #20
 800103c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001040:	e014      	b.n	800106c <HAL_ADC_ConfigChannel+0x588>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	60fb      	str	r3, [r7, #12]
  return result;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	fab3 f383 	clz	r3, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	3301      	adds	r3, #1
 800105a:	f003 021f 	and.w	r2, r3, #31
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	3b1e      	subs	r3, #30
 8001066:	051b      	lsls	r3, r3, #20
 8001068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800106c:	430b      	orrs	r3, r1
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	6892      	ldr	r2, [r2, #8]
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fa63 	bl	800053e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <HAL_ADC_ConfigChannel+0x644>)
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 8083 	beq.w	800118c <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001086:	4829      	ldr	r0, [pc, #164]	; (800112c <HAL_ADC_ConfigChannel+0x648>)
 8001088:	f7ff f97e 	bl	8000388 <LL_ADC_GetCommonPathInternalCh>
 800108c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a26      	ldr	r2, [pc, #152]	; (8001130 <HAL_ADC_ConfigChannel+0x64c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d004      	beq.n	80010a4 <HAL_ADC_ConfigChannel+0x5c0>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a25      	ldr	r2, [pc, #148]	; (8001134 <HAL_ADC_ConfigChannel+0x650>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d126      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80010a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d120      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010b8:	d168      	bne.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010c2:	4619      	mov	r1, r3
 80010c4:	4819      	ldr	r0, [pc, #100]	; (800112c <HAL_ADC_ConfigChannel+0x648>)
 80010c6:	f7ff f94c 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_ADC_ConfigChannel+0x654>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	099b      	lsrs	r3, r3, #6
 80010d0:	4a1a      	ldr	r2, [pc, #104]	; (800113c <HAL_ADC_ConfigChannel+0x658>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	099a      	lsrs	r2, r3, #6
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80010e2:	e002      	b.n	80010ea <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f9      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80010f0:	e04c      	b.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <HAL_ADC_ConfigChannel+0x65c>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d125      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x664>
 80010fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d11f      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <HAL_ADC_ConfigChannel+0x660>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d03c      	beq.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001112:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800111a:	4619      	mov	r1, r3
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <HAL_ADC_ConfigChannel+0x648>)
 800111e:	f7ff f920 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001122:	e033      	b.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
 8001124:	407f0000 	.word	0x407f0000
 8001128:	80080000 	.word	0x80080000
 800112c:	50000300 	.word	0x50000300
 8001130:	c3210000 	.word	0xc3210000
 8001134:	90c00010 	.word	0x90c00010
 8001138:	2000007c 	.word	0x2000007c
 800113c:	053e2d63 	.word	0x053e2d63
 8001140:	c7520000 	.word	0xc7520000
 8001144:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <HAL_ADC_ConfigChannel+0x6bc>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d11c      	bne.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d116      	bne.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_ADC_ConfigChannel+0x6c0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d011      	beq.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800116c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001170:	4619      	mov	r1, r3
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <HAL_ADC_ConfigChannel+0x6c4>)
 8001174:	f7ff f8f5 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
 8001178:	e008      	b.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117e:	f043 0220 	orr.w	r2, r3, #32
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001194:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001198:	4618      	mov	r0, r3
 800119a:	3798      	adds	r7, #152	; 0x98
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	cb840000 	.word	0xcb840000
 80011a4:	50000100 	.word	0x50000100
 80011a8:	50000300 	.word	0x50000300

080011ac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fab8 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 80011c8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fad9 	bl	8000786 <LL_ADC_INJ_IsConversionOngoing>
 80011d4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d103      	bne.n	80011e4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 8090 	beq.w	8001304 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d02a      	beq.n	8001248 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7f5b      	ldrb	r3, [r3, #29]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d126      	bne.n	8001248 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7f1b      	ldrb	r3, [r3, #28]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d122      	bne.n	8001248 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001202:	2301      	movs	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001206:	e014      	b.n	8001232 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	4a41      	ldr	r2, [pc, #260]	; (8001310 <ADC_ConversionStop+0x164>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d90d      	bls.n	800122c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	f043 0210 	orr.w	r2, r3, #16
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e06c      	b.n	8001306 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	3301      	adds	r3, #1
 8001230:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123c:	2b40      	cmp	r3, #64	; 0x40
 800123e:	d1e3      	bne.n	8001208 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2240      	movs	r2, #64	; 0x40
 8001246:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d014      	beq.n	8001278 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fa70 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00c      	beq.n	8001278 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fa41 	bl	80006ea <LL_ADC_IsDisableOngoing>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d104      	bne.n	8001278 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fa4c 	bl	8000710 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d014      	beq.n	80012a8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fa7f 	bl	8000786 <LL_ADC_INJ_IsConversionOngoing>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00c      	beq.n	80012a8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fa29 	bl	80006ea <LL_ADC_IsDisableOngoing>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d104      	bne.n	80012a8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fa5b 	bl	800075e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d004      	beq.n	80012b8 <ADC_ConversionStop+0x10c>
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d105      	bne.n	80012be <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80012b2:	230c      	movs	r3, #12
 80012b4:	617b      	str	r3, [r7, #20]
        break;
 80012b6:	e005      	b.n	80012c4 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80012b8:	2308      	movs	r3, #8
 80012ba:	617b      	str	r3, [r7, #20]
        break;
 80012bc:	e002      	b.n	80012c4 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80012be:	2304      	movs	r3, #4
 80012c0:	617b      	str	r3, [r7, #20]
        break;
 80012c2:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80012c4:	f7ff f80c 	bl	80002e0 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80012ca:	e014      	b.n	80012f6 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80012cc:	f7ff f808 	bl	80002e0 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d90d      	bls.n	80012f6 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012de:	f043 0210 	orr.w	r2, r3, #16
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ea:	f043 0201 	orr.w	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e007      	b.n	8001306 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	4013      	ands	r3, r2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1e3      	bne.n	80012cc <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	a33fffff 	.word	0xa33fffff

08001314 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f9cf 	bl	80006c4 <LL_ADC_IsEnabled>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d146      	bne.n	80013ba <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <ADC_Enable+0xb0>)
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00d      	beq.n	8001356 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133e:	f043 0210 	orr.w	r2, r3, #16
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134a:	f043 0201 	orr.w	r2, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e032      	b.n	80013bc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f98a 	bl	8000674 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001360:	f7fe ffbe 	bl	80002e0 <HAL_GetTick>
 8001364:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001366:	e021      	b.n	80013ac <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f9a9 	bl	80006c4 <LL_ADC_IsEnabled>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d104      	bne.n	8001382 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f979 	bl	8000674 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001382:	f7fe ffad 	bl	80002e0 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d90d      	bls.n	80013ac <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001394:	f043 0210 	orr.w	r2, r3, #16
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a0:	f043 0201 	orr.w	r2, r3, #1
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e007      	b.n	80013bc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d1d6      	bne.n	8001368 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	8000003f 	.word	0x8000003f

080013c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f988 	bl	80006ea <LL_ADC_IsDisableOngoing>
 80013da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f96f 	bl	80006c4 <LL_ADC_IsEnabled>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d040      	beq.n	800146e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d13d      	bne.n	800146e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 030d 	and.w	r3, r3, #13
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d10c      	bne.n	800141a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f949 	bl	800069c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2203      	movs	r2, #3
 8001410:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001412:	f7fe ff65 	bl	80002e0 <HAL_GetTick>
 8001416:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001418:	e022      	b.n	8001460 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141e:	f043 0210 	orr.w	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	f043 0201 	orr.w	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e01c      	b.n	8001470 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001436:	f7fe ff53 	bl	80002e0 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d90d      	bls.n	8001460 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001448:	f043 0210 	orr.w	r2, r3, #16
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001454:	f043 0201 	orr.w	r2, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e007      	b.n	8001470 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1e3      	bne.n	8001436 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800148e:	2b00      	cmp	r3, #0
 8001490:	d14b      	bne.n	800152a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001496:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d021      	beq.n	80014f0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f808 	bl	80004c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d032      	beq.n	8001522 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d12b      	bne.n	8001522 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d11f      	bne.n	8001522 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e6:	f043 0201 	orr.w	r2, r3, #1
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80014ee:	e018      	b.n	8001522 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d111      	bne.n	8001522 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d105      	bne.n	8001522 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151a:	f043 0201 	orr.w	r2, r3, #1
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f007 ff12 	bl	800934c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001528:	e00e      	b.n	8001548 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f7ff faca 	bl	8000ad0 <HAL_ADC_ErrorCallback>
}
 800153c:	e004      	b.n	8001548 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	4798      	blx	r3
}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7ff faac 	bl	8000abc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158a:	f043 0204 	orr.w	r2, r3, #4
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7ff fa9c 	bl	8000ad0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <LL_ADC_IsEnabled>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <LL_ADC_IsEnabled+0x18>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <LL_ADC_IsEnabled+0x1a>
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_ADC_StartCalibration>:
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80015e2:	4313      	orrs	r3, r2
 80015e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	609a      	str	r2, [r3, #8]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_IsCalibrationOnGoing>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800160c:	d101      	bne.n	8001612 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <LL_ADC_REG_StartConversion>:
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001630:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001634:	f043 0204 	orr.w	r2, r3, #4
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	609a      	str	r2, [r3, #8]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_ADC_REG_IsConversionOngoing>:
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b04      	cmp	r3, #4
 800165a:	d101      	bne.n	8001660 <LL_ADC_REG_IsConversionOngoing+0x18>
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <HAL_ADCEx_Calibration_Start+0x1c>
 8001688:	2302      	movs	r3, #2
 800168a:	e04d      	b.n	8001728 <HAL_ADCEx_Calibration_Start+0xb8>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fe97 	bl	80013c8 <ADC_Disable>
 800169a:	4603      	mov	r3, r0
 800169c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d136      	bne.n	8001712 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016ac:	f023 0302 	bic.w	r3, r3, #2
 80016b0:	f043 0202 	orr.w	r2, r3, #2
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6839      	ldr	r1, [r7, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff81 	bl	80015c6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80016c4:	e014      	b.n	80016f0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	3301      	adds	r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4a18      	ldr	r2, [pc, #96]	; (8001730 <HAL_ADCEx_Calibration_Start+0xc0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d90d      	bls.n	80016f0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	f023 0312 	bic.w	r3, r3, #18
 80016dc:	f043 0210 	orr.w	r2, r3, #16
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e01b      	b.n	8001728 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff7f 	bl	80015f8 <LL_ADC_IsCalibrationOnGoing>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1e2      	bne.n	80016c6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	f023 0303 	bic.w	r3, r3, #3
 8001708:	f043 0201 	orr.w	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001710:	e005      	b.n	800171e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001716:	f043 0210 	orr.w	r2, r3, #16
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	0004de01 	.word	0x0004de01

08001734 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b0a2      	sub	sp, #136	; 0x88
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff7f 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8001750:	2302      	movs	r3, #2
 8001752:	e07e      	b.n	8001852 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800175e:	2302      	movs	r3, #2
 8001760:	e077      	b.n	8001852 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001772:	d102      	bne.n	800177a <HAL_ADCEx_MultiModeStart_DMA+0x46>
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <HAL_ADCEx_MultiModeStart_DMA+0x128>)
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e001      	b.n	800177e <HAL_ADCEx_MultiModeStart_DMA+0x4a>
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10b      	bne.n	800179c <HAL_ADCEx_MultiModeStart_DMA+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	f043 0220 	orr.w	r2, r3, #32
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e05a      	b.n	8001852 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f7ff fdb9 	bl	8001314 <ADC_Enable>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 80017a8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d107      	bne.n	80017c0 <HAL_ADCEx_MultiModeStart_DMA+0x8c>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fdad 	bl	8001314 <ADC_Enable>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80017c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d13e      	bne.n	8001846 <HAL_ADCEx_MultiModeStart_DMA+0x112>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e6:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <HAL_ADCEx_MultiModeStart_DMA+0x12c>)
 80017e8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ee:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 80017f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f6:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 80017f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 80017fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	221c      	movs	r2, #28
 8001806:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0210 	orr.w	r2, r2, #16
 800181e:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001824:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001828:	330c      	adds	r3, #12
 800182a:	4619      	mov	r1, r3
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f000 fb2c 	bl	8001e8c <HAL_DMA_Start_IT>
 8001834:	4603      	mov	r3, r0
 8001836:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff feee 	bl	8001620 <LL_ADC_REG_StartConversion>
 8001844:	e003      	b.n	800184e <HAL_ADCEx_MultiModeStart_DMA+0x11a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800184e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 8001852:	4618      	mov	r0, r3
 8001854:	3788      	adds	r7, #136	; 0x88
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	50000100 	.word	0x50000100
 8001860:	08001479 	.word	0x08001479
 8001864:	08001551 	.word	0x08001551
 8001868:	0800156d 	.word	0x0800156d
 800186c:	50000300 	.word	0x50000300

08001870 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b0a2      	sub	sp, #136	; 0x88
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HAL_ADCEx_MultiModeStop_DMA+0x16>
 8001882:	2302      	movs	r3, #2
 8001884:	e0a3      	b.n	80019ce <HAL_ADCEx_MultiModeStop_DMA+0x15e>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800188e:	2103      	movs	r1, #3
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fc8b 	bl	80011ac <ADC_ConversionStop>
 8001896:	4603      	mov	r3, r0
 8001898:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800189c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f040 808e 	bne.w	80019c2 <HAL_ADCEx_MultiModeStop_DMA+0x152>
  {
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ae:	d102      	bne.n	80018b6 <HAL_ADCEx_MultiModeStop_DMA+0x46>
 80018b0:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <HAL_ADCEx_MultiModeStop_DMA+0x168>)
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e001      	b.n	80018ba <HAL_ADCEx_MultiModeStop_DMA+0x4a>
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]

    if (tmphadcSlave.Instance == NULL)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10b      	bne.n	80018d8 <HAL_ADCEx_MultiModeStop_DMA+0x68>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	f043 0220 	orr.w	r2, r3, #32
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e07a      	b.n	80019ce <HAL_ADCEx_MultiModeStop_DMA+0x15e>

    /* Procedure to disable the ADC peripheral: wait for conversions          */
    /* effectively stopped (ADC master and ADC slave), then disable ADC       */

    /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
    tickstart = HAL_GetTick();
 80018d8:	f7fe fd02 	bl	80002e0 <HAL_GetTick>
 80018dc:	67f8      	str	r0, [r7, #124]	; 0x7c

    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff feb1 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 80018e6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 80018ea:	e018      	b.n	800191e <HAL_ADCEx_MultiModeStop_DMA+0xae>
           || (tmphadcSlave_conversion_on_going == 1UL)
          )
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80018ec:	f7fe fcf8 	bl	80002e0 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	d90b      	bls.n	8001912 <HAL_ADCEx_MultiModeStop_DMA+0xa2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fe:	f043 0210 	orr.w	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e05d      	b.n	80019ce <HAL_ADCEx_MultiModeStop_DMA+0x15e>
      }

      tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fe97 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 800191a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fe90 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 8001928:	4603      	mov	r3, r0
 800192a:	2b01      	cmp	r3, #1
 800192c:	d0de      	beq.n	80018ec <HAL_ADCEx_MultiModeStop_DMA+0x7c>
           || (tmphadcSlave_conversion_on_going == 1UL)
 800192e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001932:	2b01      	cmp	r3, #1
 8001934:	d0da      	beq.n	80018ec <HAL_ADCEx_MultiModeStop_DMA+0x7c>

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    /* Note: DMA channel of ADC slave should be stopped after this function   */
    /*       with HAL_ADC_Stop_DMA() API.                                     */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fb21 	bl	8001f82 <HAL_DMA_Abort>
 8001940:	4603      	mov	r3, r0
 8001942:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_ERROR)
 8001946:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800194a:	2b01      	cmp	r3, #1
 800194c:	d105      	bne.n	800195a <HAL_ADCEx_MultiModeStop_DMA+0xea>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001952:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0210 	bic.w	r2, r2, #16
 8001968:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripherals: master and slave */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
    /* memory a potential failing status.                                     */
    if (tmp_hal_status == HAL_OK)
 800196a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800196e:	2b00      	cmp	r3, #0
 8001970:	d115      	bne.n	800199e <HAL_ADCEx_MultiModeStop_DMA+0x12e>
    {
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fd26 	bl	80013c8 <ADC_Disable>
 800197c:	4603      	mov	r3, r0
 800197e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fd20 	bl	80013c8 <ADC_Disable>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10f      	bne.n	80019ae <HAL_ADCEx_MultiModeStop_DMA+0x13e>
 800198e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10b      	bne.n	80019ae <HAL_ADCEx_MultiModeStop_DMA+0x13e>
          (tmphadcSlave_disable_status == HAL_OK))
      {
        tmp_hal_status = HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800199c:	e007      	b.n	80019ae <HAL_ADCEx_MultiModeStop_DMA+0x13e>
      }
    }
    else
    {
      /* In case of error, attempt to disable ADC master and slave without status assert */
      (void) ADC_Disable(hadc);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fd12 	bl	80013c8 <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fd0d 	bl	80013c8 <ADC_Disable>
    }

    /* Set ADC state (ADC master) */
    ADC_STATE_CLR_SET(hadc->State,
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	f043 0201 	orr.w	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80019ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3788      	adds	r7, #136	; 0x88
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	50000100 	.word	0x50000100

080019dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b0a1      	sub	sp, #132	; 0x84
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e087      	b.n	8001b0a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a0a:	d102      	bne.n	8001a12 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001a0c:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	e001      	b.n	8001a16 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10b      	bne.n	8001a34 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	f043 0220 	orr.w	r2, r3, #32
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e06a      	b.n	8001b0a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fe06 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 8001a3c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fe00 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d14c      	bne.n	8001ae8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d149      	bne.n	8001ae8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001a54:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001a56:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d028      	beq.n	8001ab2 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a72:	035b      	lsls	r3, r3, #13
 8001a74:	430b      	orrs	r3, r1
 8001a76:	431a      	orrs	r2, r3
 8001a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a80:	f7ff fd8e 	bl	80015a0 <LL_ADC_IsEnabled>
 8001a84:	4604      	mov	r4, r0
 8001a86:	4823      	ldr	r0, [pc, #140]	; (8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001a88:	f7ff fd8a 	bl	80015a0 <LL_ADC_IsEnabled>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4323      	orrs	r3, r4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d133      	bne.n	8001afc <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a9c:	f023 030f 	bic.w	r3, r3, #15
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	6811      	ldr	r1, [r2, #0]
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	6892      	ldr	r2, [r2, #8]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ab0:	e024      	b.n	8001afc <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001abc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001abe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ac2:	f7ff fd6d 	bl	80015a0 <LL_ADC_IsEnabled>
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	4812      	ldr	r0, [pc, #72]	; (8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001aca:	f7ff fd69 	bl	80015a0 <LL_ADC_IsEnabled>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4323      	orrs	r3, r4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d112      	bne.n	8001afc <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ade:	f023 030f 	bic.w	r3, r3, #15
 8001ae2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ae4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ae6:	e009      	b.n	8001afc <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aec:	f043 0220 	orr.w	r2, r3, #32
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001afa:	e000      	b.n	8001afe <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001afc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001b06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3784      	adds	r7, #132	; 0x84
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd90      	pop	{r4, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	50000100 	.word	0x50000100
 8001b18:	50000300 	.word	0x50000300

08001b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	60d3      	str	r3, [r2, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__NVIC_GetPriorityGrouping+0x18>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db0b      	blt.n	8001baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	4907      	ldr	r1, [pc, #28]	; (8001bb8 <__NVIC_EnableIRQ+0x38>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000e100 	.word	0xe000e100

08001bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db0a      	blt.n	8001be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	490c      	ldr	r1, [pc, #48]	; (8001c08 <__NVIC_SetPriority+0x4c>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	440b      	add	r3, r1
 8001be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be4:	e00a      	b.n	8001bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4908      	ldr	r1, [pc, #32]	; (8001c0c <__NVIC_SetPriority+0x50>)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	3b04      	subs	r3, #4
 8001bf4:	0112      	lsls	r2, r2, #4
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	761a      	strb	r2, [r3, #24]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000e100 	.word	0xe000e100
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f1c3 0307 	rsb	r3, r3, #7
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	bf28      	it	cs
 8001c2e:	2304      	movcs	r3, #4
 8001c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3304      	adds	r3, #4
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d902      	bls.n	8001c40 <NVIC_EncodePriority+0x30>
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3b03      	subs	r3, #3
 8001c3e:	e000      	b.n	8001c42 <NVIC_EncodePriority+0x32>
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	401a      	ands	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	43d9      	mvns	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	4313      	orrs	r3, r2
         );
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c88:	d301      	bcc.n	8001c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00f      	b.n	8001cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <SysTick_Config+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f7ff ff8e 	bl	8001bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff29 	bl	8001b1c <__NVIC_SetPriorityGrouping>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff40 	bl	8001b64 <__NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff90 	bl	8001c10 <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff5f 	bl	8001bbc <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff33 	bl	8001b80 <__NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffa4 	bl	8001c78 <SysTick_Config>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e08d      	b.n	8001e6a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b47      	ldr	r3, [pc, #284]	; (8001e74 <HAL_DMA_Init+0x138>)
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d80f      	bhi.n	8001d7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b45      	ldr	r3, [pc, #276]	; (8001e78 <HAL_DMA_Init+0x13c>)
 8001d62:	4413      	add	r3, r2
 8001d64:	4a45      	ldr	r2, [pc, #276]	; (8001e7c <HAL_DMA_Init+0x140>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	009a      	lsls	r2, r3, #2
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a42      	ldr	r2, [pc, #264]	; (8001e80 <HAL_DMA_Init+0x144>)
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
 8001d78:	e00e      	b.n	8001d98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b40      	ldr	r3, [pc, #256]	; (8001e84 <HAL_DMA_Init+0x148>)
 8001d82:	4413      	add	r3, r2
 8001d84:	4a3d      	ldr	r2, [pc, #244]	; (8001e7c <HAL_DMA_Init+0x140>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	009a      	lsls	r2, r3, #2
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a3c      	ldr	r2, [pc, #240]	; (8001e88 <HAL_DMA_Init+0x14c>)
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001db2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fa10 	bl	8002210 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df8:	d102      	bne.n	8001e00 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e14:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d010      	beq.n	8001e40 <HAL_DMA_Init+0x104>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d80c      	bhi.n	8001e40 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fa30 	bl	800228c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	e008      	b.n	8001e52 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40020407 	.word	0x40020407
 8001e78:	bffdfff8 	.word	0xbffdfff8
 8001e7c:	cccccccd 	.word	0xcccccccd
 8001e80:	40020000 	.word	0x40020000
 8001e84:	bffdfbf8 	.word	0xbffdfbf8
 8001e88:	40020400 	.word	0x40020400

08001e8c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_DMA_Start_IT+0x20>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e066      	b.n	8001f7a <HAL_DMA_Start_IT+0xee>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d155      	bne.n	8001f6c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	68b9      	ldr	r1, [r7, #8]
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 f954 	bl	8002192 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 020e 	orr.w	r2, r2, #14
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	e00f      	b.n	8001f24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0204 	bic.w	r2, r2, #4
 8001f12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 020a 	orr.w	r2, r2, #10
 8001f22:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f40:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f58:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0201 	orr.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e005      	b.n	8001f78 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f74:	2302      	movs	r3, #2
 8001f76:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d005      	beq.n	8001fa6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e037      	b.n	8002016 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 020e 	bic.w	r2, r2, #14
 8001fb4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fc4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0201 	bic.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f003 021f 	and.w	r2, r3, #31
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ff2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00c      	beq.n	8002016 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800200a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002014:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	2204      	movs	r2, #4
 8002056:	409a      	lsls	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d026      	beq.n	80020ae <HAL_DMA_IRQHandler+0x7a>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b00      	cmp	r3, #0
 8002068:	d021      	beq.n	80020ae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0320 	and.w	r3, r3, #32
 8002074:	2b00      	cmp	r3, #0
 8002076:	d107      	bne.n	8002088 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0204 	bic.w	r2, r2, #4
 8002086:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208c:	f003 021f 	and.w	r2, r3, #31
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	2104      	movs	r1, #4
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d071      	beq.n	8002188 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80020ac:	e06c      	b.n	8002188 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	2202      	movs	r2, #2
 80020b8:	409a      	lsls	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d02e      	beq.n	8002120 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d029      	beq.n	8002120 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10b      	bne.n	80020f2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 020a 	bic.w	r2, r2, #10
 80020e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f003 021f 	and.w	r2, r3, #31
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	2102      	movs	r1, #2
 8002100:	fa01 f202 	lsl.w	r2, r1, r2
 8002104:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d038      	beq.n	8002188 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800211e:	e033      	b.n	8002188 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	2208      	movs	r2, #8
 800212a:	409a      	lsls	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d02a      	beq.n	800218a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d025      	beq.n	800218a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 020e 	bic.w	r2, r2, #14
 800214c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f003 021f 	and.w	r2, r3, #31
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f202 	lsl.w	r2, r1, r2
 8002160:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002188:	bf00      	nop
 800218a:	bf00      	nop
}
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021a8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80021ba:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2101      	movs	r1, #1
 80021ca:	fa01 f202 	lsl.w	r2, r1, r2
 80021ce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b10      	cmp	r3, #16
 80021de:	d108      	bne.n	80021f2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021f0:	e007      	b.n	8002202 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	60da      	str	r2, [r3, #12]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002220:	429a      	cmp	r2, r3
 8002222:	d802      	bhi.n	800222a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	e001      	b.n	800222e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800222c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	3b08      	subs	r3, #8
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	009a      	lsls	r2, r3, #2
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	461a      	mov	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800225a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	2201      	movs	r2, #1
 8002264:	409a      	lsls	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	651a      	str	r2, [r3, #80]	; 0x50
}
 800226a:	bf00      	nop
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40020407 	.word	0x40020407
 800227c:	40020800 	.word	0x40020800
 8002280:	40020820 	.word	0x40020820
 8002284:	cccccccd 	.word	0xcccccccd
 8002288:	40020880 	.word	0x40020880

0800228c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	461a      	mov	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80022ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	2201      	movs	r2, #1
 80022ba:	409a      	lsls	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	1000823f 	.word	0x1000823f
 80022d0:	40020940 	.word	0x40020940

080022d4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e147      	b.n	8002576 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f009 fb18 	bl	800b930 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0210 	bic.w	r2, r2, #16
 800230e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002310:	f7fd ffe6 	bl	80002e0 <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002316:	e012      	b.n	800233e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002318:	f7fd ffe2 	bl	80002e0 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b0a      	cmp	r3, #10
 8002324:	d90b      	bls.n	800233e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232a:	f043 0201 	orr.w	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2203      	movs	r2, #3
 8002336:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e11b      	b.n	8002576 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b08      	cmp	r3, #8
 800234a:	d0e5      	beq.n	8002318 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800235c:	f7fd ffc0 	bl	80002e0 <HAL_GetTick>
 8002360:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002362:	e012      	b.n	800238a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002364:	f7fd ffbc 	bl	80002e0 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b0a      	cmp	r3, #10
 8002370:	d90b      	bls.n	800238a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2203      	movs	r2, #3
 8002382:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e0f5      	b.n	8002576 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0e5      	beq.n	8002364 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0202 	orr.w	r2, r2, #2
 80023a6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a74      	ldr	r2, [pc, #464]	; (8002580 <HAL_FDCAN_Init+0x2ac>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d103      	bne.n	80023ba <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80023b2:	4a74      	ldr	r2, [pc, #464]	; (8002584 <HAL_FDCAN_Init+0x2b0>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7c1b      	ldrb	r3, [r3, #16]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d108      	bne.n	80023d4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699a      	ldr	r2, [r3, #24]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d0:	619a      	str	r2, [r3, #24]
 80023d2:	e007      	b.n	80023e4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7c5b      	ldrb	r3, [r3, #17]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d108      	bne.n	80023fe <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023fa:	619a      	str	r2, [r3, #24]
 80023fc:	e007      	b.n	800240e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699a      	ldr	r2, [r3, #24]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800240c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7c9b      	ldrb	r3, [r3, #18]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d108      	bne.n	8002428 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002424:	619a      	str	r2, [r3, #24]
 8002426:	e007      	b.n	8002438 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002436:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699a      	ldr	r2, [r3, #24]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800245c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0210 	bic.w	r2, r2, #16
 800246c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d108      	bne.n	8002488 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699a      	ldr	r2, [r3, #24]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0204 	orr.w	r2, r2, #4
 8002484:	619a      	str	r2, [r3, #24]
 8002486:	e02c      	b.n	80024e2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d028      	beq.n	80024e2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d01c      	beq.n	80024d2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024a6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691a      	ldr	r2, [r3, #16]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0210 	orr.w	r2, r2, #16
 80024b6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d110      	bne.n	80024e2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0220 	orr.w	r2, r2, #32
 80024ce:	619a      	str	r2, [r3, #24]
 80024d0:	e007      	b.n	80024e2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699a      	ldr	r2, [r3, #24]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0220 	orr.w	r2, r2, #32
 80024e0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024f2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80024fa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	3b01      	subs	r3, #1
 8002504:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800250a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800250c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002516:	d115      	bne.n	8002544 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	3b01      	subs	r3, #1
 8002524:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002526:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	3b01      	subs	r3, #1
 800252e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002530:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	3b01      	subs	r3, #1
 800253a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002540:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002542:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fcb8 	bl	8002ed0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40006400 	.word	0x40006400
 8002584:	40006500 	.word	0x40006500

08002588 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002598:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800259a:	7dfb      	ldrb	r3, [r7, #23]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d002      	beq.n	80025a6 <HAL_FDCAN_ConfigFilter+0x1e>
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d13d      	bne.n	8002622 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d119      	bne.n	80025e2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80025ba:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80025c2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e01d      	b.n	800261e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	075a      	lsls	r2, r3, #29
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	079a      	lsls	r2, r3, #30
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3304      	adds	r3, #4
 8002616:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	e006      	b.n	8002630 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002626:	f043 0202 	orr.w	r2, r3, #2
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
  }
}
 8002630:	4618      	mov	r0, r3
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d116      	bne.n	8002684 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800265e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	011a      	lsls	r2, r3, #4
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	431a      	orrs	r2, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	431a      	orrs	r2, r3
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                         (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                                         (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                                         (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e006      	b.n	8002692 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002688:	f043 0204 	orr.w	r2, r3, #4
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 800269e:	b480      	push	{r7}
 80026a0:	b085      	sub	sp, #20
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d11f      	bne.n	80026f6 <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b40      	cmp	r3, #64	; 0x40
 80026ba:	d10d      	bne.n	80026d8 <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c4:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	025a      	lsls	r2, r3, #9
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80026d6:	e00c      	b.n	80026f2 <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026e0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	021a      	lsls	r2, r3, #8
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Return function status */
    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e006      	b.n	8002704 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fa:	f043 0204 	orr.w	r2, r3, #4
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
  }
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d110      	bne.n	8002746 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	e006      	b.n	8002754 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274a:	f043 0204 	orr.w	r2, r3, #4
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
  }
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d12c      	bne.n	80027d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e023      	b.n	80027e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80027a0:	0c1b      	lsrs	r3, r3, #16
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fbe4 	bl	8002f7c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2101      	movs	r1, #1
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	fa01 f202 	lsl.w	r2, r1, r2
 80027c0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80027c4:	2201      	movs	r2, #1
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	409a      	lsls	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	e006      	b.n	80027e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d6:	f043 0208 	orr.w	r2, r3, #8
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
  }
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b08b      	sub	sp, #44	; 0x2c
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027fc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80027fe:	7efb      	ldrb	r3, [r7, #27]
 8002800:	2b02      	cmp	r3, #2
 8002802:	f040 80bc 	bne.w	800297e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b40      	cmp	r3, #64	; 0x40
 800280a:	d121      	bne.n	8002850 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	2b00      	cmp	r3, #0
 800281a:	d107      	bne.n	800282c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002820:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0af      	b.n	800298c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
 800284e:	e020      	b.n	8002892 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002864:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e08d      	b.n	800298c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	4613      	mov	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	440b      	add	r3, r1
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	0c9b      	lsrs	r3, r3, #18
 80028ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	e005      	b.n	80028c2 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	3304      	adds	r3, #4
 80028de:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	0e1b      	lsrs	r3, r3, #24
 8002914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	0fda      	lsrs	r2, r3, #31
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	3304      	adds	r3, #4
 800292a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002930:	2300      	movs	r3, #0
 8002932:	623b      	str	r3, [r7, #32]
 8002934:	e00a      	b.n	800294c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	441a      	add	r2, r3
 800293c:	6839      	ldr	r1, [r7, #0]
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	440b      	add	r3, r1
 8002942:	7812      	ldrb	r2, [r2, #0]
 8002944:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	3301      	adds	r3, #1
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	4a11      	ldr	r2, [pc, #68]	; (8002998 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	461a      	mov	r2, r3
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	4293      	cmp	r3, r2
 800295c:	d3eb      	bcc.n	8002936 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b40      	cmp	r3, #64	; 0x40
 8002962:	d105      	bne.n	8002970 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800296e:	e004      	b.n	800297a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e006      	b.n	800298c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002982:	f043 0208 	orr.w	r2, r3, #8
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
  }
}
 800298c:	4618      	mov	r0, r3
 800298e:	372c      	adds	r7, #44	; 0x2c
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	0800c26c 	.word	0x0800c26c

0800299c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029d2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d003      	beq.n	80029e2 <HAL_FDCAN_ActivateNotification+0x22>
 80029da:	7dfb      	ldrb	r3, [r7, #23]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	f040 80c8 	bne.w	8002b72 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <HAL_FDCAN_ActivateNotification+0x3e>
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d03b      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d004      	beq.n	8002a12 <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d031      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d004      	beq.n	8002a26 <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d027      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d004      	beq.n	8002a3a <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01d      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d013      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d004      	beq.n	8002a62 <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00c      	beq.n	8002a86 <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d107      	bne.n	8002a86 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d004      	beq.n	8002a9a <HAL_FDCAN_ActivateNotification+0xda>
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d13b      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d004      	beq.n	8002aae <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d131      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d127      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d11d      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d113      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d004      	beq.n	8002afe <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00c      	beq.n	8002b22 <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0202 	orr.w	r2, r2, #2
 8002b20:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d009      	beq.n	8002b40 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e006      	b.n	8002b80 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	f043 0202 	orr.w	r2, r3, #2
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
  }
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba8:	4013      	ands	r3, r2
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	6a3a      	ldr	r2, [r7, #32]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bce:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be2:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8002be6:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002bfe:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d006      	beq.n	8002c36 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2240      	movs	r2, #64	; 0x40
 8002c2e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f92e 	bl	8002e92 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01b      	beq.n	8002c7c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d014      	beq.n	8002c7c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c5a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c72:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002c74:	6939      	ldr	r1, [r7, #16]
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f8ec 	bl	8002e54 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c88:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002c8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f8b6 	bl	8002dfe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d007      	beq.n	8002ca8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6a3a      	ldr	r2, [r7, #32]
 8002c9e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002ca0:	6a39      	ldr	r1, [r7, #32]
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f006 feae 	bl	8009a04 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002cb6:	69f9      	ldr	r1, [r7, #28]
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f8ab 	bl	8002e14 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00e      	beq.n	8002cea <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f8a0 	bl	8002e2a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01a      	beq.n	8002d2e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d013      	beq.n	8002d2e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002d0e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002d26:	68f9      	ldr	r1, [r7, #12]
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f888 	bl	8002e3e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00e      	beq.n	8002d5a <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d52:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f888 	bl	8002e6a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00e      	beq.n	8002d86 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d7e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f87c 	bl	8002e7e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d011      	beq.n	8002db8 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002daa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002dc6:	6979      	ldr	r1, [r7, #20]
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f876 	bl	8002eba <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d009      	beq.n	8002de8 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f858 	bl	8002ea6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002df6:	bf00      	nop
 8002df8:	3728      	adds	r7, #40	; 0x28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002ed8:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002eda:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eea:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef2:	041a      	lsls	r2, r3, #16
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f10:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	061a      	lsls	r2, r3, #24
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e005      	b.n	8002f5e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d3f3      	bcc.n	8002f52 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	4000a400 	.word	0x4000a400

08002f7c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002f9a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	e00a      	b.n	8002fbe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002fb0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002fb6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fbc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002fc8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002fce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002fd4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	3304      	adds	r3, #4
 8003006:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	e020      	b.n	8003050 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	3303      	adds	r3, #3
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	3302      	adds	r3, #2
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	440b      	add	r3, r1
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003026:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	3301      	adds	r3, #1
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	440b      	add	r3, r1
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003034:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	440a      	add	r2, r1
 800303c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800303e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	3304      	adds	r3, #4
 8003048:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	3304      	adds	r3, #4
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	4a06      	ldr	r2, [pc, #24]	; (8003070 <FDCAN_CopyMessageToRAM+0xf4>)
 8003058:	5cd3      	ldrb	r3, [r2, r3]
 800305a:	461a      	mov	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	4293      	cmp	r3, r2
 8003060:	d3d5      	bcc.n	800300e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8003062:	bf00      	nop
 8003064:	3724      	adds	r7, #36	; 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	0800c26c 	.word	0x0800c26c

08003074 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003086:	4b24      	ldr	r3, [pc, #144]	; (8003118 <HAL_FLASH_Program+0xa4>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_FLASH_Program+0x1e>
 800308e:	2302      	movs	r3, #2
 8003090:	e03e      	b.n	8003110 <HAL_FLASH_Program+0x9c>
 8003092:	4b21      	ldr	r3, [pc, #132]	; (8003118 <HAL_FLASH_Program+0xa4>)
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800309c:	f000 f87c 	bl	8003198 <FLASH_WaitForLastOperation>
 80030a0:	4603      	mov	r3, r0
 80030a2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d12e      	bne.n	8003108 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030aa:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_FLASH_Program+0xa4>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d107      	bne.n	80030c6 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80030b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030ba:	68b8      	ldr	r0, [r7, #8]
 80030bc:	f000 f8c0 	bl	8003240 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80030c0:	2301      	movs	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e010      	b.n	80030e8 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d002      	beq.n	80030d2 <HAL_FLASH_Program+0x5e>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d10a      	bne.n	80030e8 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	4619      	mov	r1, r3
 80030d6:	68b8      	ldr	r0, [r7, #8]
 80030d8:	f000 f8d6 	bl	8003288 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d102      	bne.n	80030e8 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80030e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030e6:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80030e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030ec:	f000 f854 	bl	8003198 <FLASH_WaitForLastOperation>
 80030f0:	4603      	mov	r3, r0
 80030f2:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <HAL_FLASH_Program+0xa8>)
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	43db      	mvns	r3, r3
 8003102:	4906      	ldr	r1, [pc, #24]	; (800311c <HAL_FLASH_Program+0xa8>)
 8003104:	4013      	ands	r3, r2
 8003106:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <HAL_FLASH_Program+0xa4>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800310e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000008 	.word	0x20000008
 800311c:	40022000 	.word	0x40022000

08003120 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_FLASH_Unlock+0x38>)
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	2b00      	cmp	r3, #0
 8003130:	da0b      	bge.n	800314a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003132:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_FLASH_Unlock+0x38>)
 8003134:	4a09      	ldr	r2, [pc, #36]	; (800315c <HAL_FLASH_Unlock+0x3c>)
 8003136:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003138:	4b07      	ldr	r3, [pc, #28]	; (8003158 <HAL_FLASH_Unlock+0x38>)
 800313a:	4a09      	ldr	r2, [pc, #36]	; (8003160 <HAL_FLASH_Unlock+0x40>)
 800313c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_FLASH_Unlock+0x38>)
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	da01      	bge.n	800314a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800314a:	79fb      	ldrb	r3, [r7, #7]
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	40022000 	.word	0x40022000
 800315c:	45670123 	.word	0x45670123
 8003160:	cdef89ab 	.word	0xcdef89ab

08003164 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_FLASH_Lock+0x30>)
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	4a08      	ldr	r2, [pc, #32]	; (8003194 <HAL_FLASH_Lock+0x30>)
 8003174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003178:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_FLASH_Lock+0x30>)
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	da01      	bge.n	8003186 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8003186:	79fb      	ldrb	r3, [r7, #7]
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40022000 	.word	0x40022000

08003198 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7fd f89e 	bl	80002e0 <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80031a6:	e009      	b.n	80031bc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80031a8:	f7fd f89a 	bl	80002e0 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d201      	bcs.n	80031bc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e038      	b.n	800322e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80031bc:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c8:	d0ee      	beq.n	80031a8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80031ca:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80031d2:	4013      	ands	r3, r2
 80031d4:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01e      	beq.n	800321a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80031dc:	4b17      	ldr	r3, [pc, #92]	; (800323c <FLASH_WaitForLastOperation+0xa4>)
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	4a15      	ldr	r2, [pc, #84]	; (800323c <FLASH_WaitForLastOperation+0xa4>)
 80031e6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <FLASH_WaitForLastOperation+0x6a>
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80031fc:	490e      	ldr	r1, [pc, #56]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	618b      	str	r3, [r1, #24]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d004      	beq.n	8003216 <FLASH_WaitForLastOperation+0x7e>
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003214:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e009      	b.n	800322e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d102      	bne.n	800322c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003226:	4b04      	ldr	r3, [pc, #16]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 8003228:	2201      	movs	r2, #1
 800322a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40022000 	.word	0x40022000
 800323c:	20000008 	.word	0x20000008

08003240 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003240:	b490      	push	{r4, r7}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800324c:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <FLASH_Program_DoubleWord+0x44>)
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	4a0c      	ldr	r2, [pc, #48]	; (8003284 <FLASH_Program_DoubleWord+0x44>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800325e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003262:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	f04f 0400 	mov.w	r4, #0
 800326e:	0013      	movs	r3, r2
 8003270:	2400      	movs	r4, #0
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	3204      	adds	r2, #4
 8003276:	6013      	str	r3, [r2, #0]
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bc90      	pop	{r4, r7}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40022000 	.word	0x40022000

08003288 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003288:	b480      	push	{r7}
 800328a:	b089      	sub	sp, #36	; 0x24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003292:	2340      	movs	r3, #64	; 0x40
 8003294:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800329e:	4b13      	ldr	r3, [pc, #76]	; (80032ec <FLASH_Program_Fast+0x64>)
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	4a12      	ldr	r2, [pc, #72]	; (80032ec <FLASH_Program_Fast+0x64>)
 80032a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032aa:	f3ef 8310 	mrs	r3, PRIMASK
 80032ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80032b0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80032b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80032b4:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	3304      	adds	r3, #4
 80032c2:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	3304      	adds	r3, #4
 80032c8:	617b      	str	r3, [r7, #20]
    row_index--;
 80032ca:	7ffb      	ldrb	r3, [r7, #31]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80032d0:	7ffb      	ldrb	r3, [r7, #31]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1ef      	bne.n	80032b6 <FLASH_Program_Fast+0x2e>
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80032e0:	bf00      	nop
 80032e2:	3724      	adds	r7, #36	; 0x24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40022000 	.word	0x40022000

080032f0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80032fa:	4b4a      	ldr	r3, [pc, #296]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_FLASHEx_Erase+0x16>
 8003302:	2302      	movs	r3, #2
 8003304:	e089      	b.n	800341a <HAL_FLASHEx_Erase+0x12a>
 8003306:	4b47      	ldr	r3, [pc, #284]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800330c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003310:	f7ff ff42 	bl	8003198 <FLASH_WaitForLastOperation>
 8003314:	4603      	mov	r3, r0
 8003316:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d179      	bne.n	8003412 <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800331e:	4b41      	ldr	r3, [pc, #260]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 8003320:	2200      	movs	r2, #0
 8003322:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003324:	4b40      	ldr	r3, [pc, #256]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332c:	2b00      	cmp	r3, #0
 800332e:	d019      	beq.n	8003364 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003330:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a3c      	ldr	r2, [pc, #240]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003336:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800333a:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800333c:	4b3a      	ldr	r3, [pc, #232]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003344:	2b00      	cmp	r3, #0
 8003346:	d009      	beq.n	800335c <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003348:	4b37      	ldr	r3, [pc, #220]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a36      	ldr	r2, [pc, #216]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 800334e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003352:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003354:	4b33      	ldr	r3, [pc, #204]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 8003356:	2203      	movs	r2, #3
 8003358:	771a      	strb	r2, [r3, #28]
 800335a:	e016      	b.n	800338a <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800335c:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 800335e:	2201      	movs	r2, #1
 8003360:	771a      	strb	r2, [r3, #28]
 8003362:	e012      	b.n	800338a <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003364:	4b30      	ldr	r3, [pc, #192]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d009      	beq.n	8003384 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003370:	4b2d      	ldr	r3, [pc, #180]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a2c      	ldr	r2, [pc, #176]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800337a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800337c:	4b29      	ldr	r3, [pc, #164]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 800337e:	2202      	movs	r2, #2
 8003380:	771a      	strb	r2, [r3, #28]
 8003382:	e002      	b.n	800338a <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003384:	4b27      	ldr	r3, [pc, #156]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 8003386:	2200      	movs	r2, #0
 8003388:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d111      	bne.n	80033b6 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f848 	bl	800342c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800339c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033a0:	f7ff fefa 	bl	8003198 <FLASH_WaitForLastOperation>
 80033a4:	4603      	mov	r3, r0
 80033a6:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80033a8:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	4a1e      	ldr	r2, [pc, #120]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 80033ae:	f023 0304 	bic.w	r3, r3, #4
 80033b2:	6153      	str	r3, [r2, #20]
 80033b4:	e02b      	b.n	800340e <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f04f 32ff 	mov.w	r2, #4294967295
 80033bc:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	e01b      	b.n	80033fe <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	4619      	mov	r1, r3
 80033cc:	68b8      	ldr	r0, [r7, #8]
 80033ce:	f000 f84b 	bl	8003468 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033d6:	f7ff fedf 	bl	8003198 <FLASH_WaitForLastOperation>
 80033da:	4603      	mov	r3, r0
 80033dc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80033de:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	4a11      	ldr	r2, [pc, #68]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 80033e4:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80033e8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	601a      	str	r2, [r3, #0]
          break;
 80033f6:	e00a      	b.n	800340e <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	3301      	adds	r3, #1
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	4413      	add	r3, r2
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	429a      	cmp	r2, r3
 800340c:	d3db      	bcc.n	80033c6 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800340e:	f000 f84f 	bl	80034b0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003412:	4b04      	ldr	r3, [pc, #16]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]

  return status;
 8003418:	7bfb      	ldrb	r3, [r7, #15]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000008 	.word	0x20000008
 8003428:	40022000 	.word	0x40022000

0800342c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800343e:	4b09      	ldr	r3, [pc, #36]	; (8003464 <FLASH_MassErase+0x38>)
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	4a08      	ldr	r2, [pc, #32]	; (8003464 <FLASH_MassErase+0x38>)
 8003444:	f043 0304 	orr.w	r3, r3, #4
 8003448:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <FLASH_MassErase+0x38>)
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4a05      	ldr	r2, [pc, #20]	; (8003464 <FLASH_MassErase+0x38>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003454:	6153      	str	r3, [r2, #20]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40022000 	.word	0x40022000

08003468 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <FLASH_PageErase+0x44>)
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8003482:	490a      	ldr	r1, [pc, #40]	; (80034ac <FLASH_PageErase+0x44>)
 8003484:	4313      	orrs	r3, r2
 8003486:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003488:	4b08      	ldr	r3, [pc, #32]	; (80034ac <FLASH_PageErase+0x44>)
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	4a07      	ldr	r2, [pc, #28]	; (80034ac <FLASH_PageErase+0x44>)
 800348e:	f043 0302 	orr.w	r3, r3, #2
 8003492:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <FLASH_PageErase+0x44>)
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <FLASH_PageErase+0x44>)
 800349a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349e:	6153      	str	r3, [r2, #20]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	40022000 	.word	0x40022000

080034b0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80034b6:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <FLASH_FlushCaches+0x80>)
 80034b8:	7f1b      	ldrb	r3, [r3, #28]
 80034ba:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d002      	beq.n	80034c8 <FLASH_FlushCaches+0x18>
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d111      	bne.n	80034ec <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a19      	ldr	r2, [pc, #100]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b17      	ldr	r3, [pc, #92]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a16      	ldr	r2, [pc, #88]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034de:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034e0:	4b14      	ldr	r3, [pc, #80]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a13      	ldr	r2, [pc, #76]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d002      	beq.n	80034f8 <FLASH_FlushCaches+0x48>
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d111      	bne.n	800351c <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80034f8:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0d      	ldr	r2, [pc, #52]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <FLASH_FlushCaches+0x84>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <FLASH_FlushCaches+0x84>)
 800350a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800350e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003510:	4b08      	ldr	r3, [pc, #32]	; (8003534 <FLASH_FlushCaches+0x84>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a07      	ldr	r2, [pc, #28]	; (8003534 <FLASH_FlushCaches+0x84>)
 8003516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800351a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <FLASH_FlushCaches+0x80>)
 800351e:	2200      	movs	r2, #0
 8003520:	771a      	strb	r2, [r3, #28]
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	20000008 	.word	0x20000008
 8003534:	40022000 	.word	0x40022000

08003538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003546:	e15a      	b.n	80037fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2101      	movs	r1, #1
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	4013      	ands	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 814c 	beq.w	80037f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x38>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b12      	cmp	r3, #18
 800356e:	d123      	bne.n	80035b8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	08da      	lsrs	r2, r3, #3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3208      	adds	r2, #8
 8003578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	220f      	movs	r2, #15
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4013      	ands	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	08da      	lsrs	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3208      	adds	r2, #8
 80035b2:	6939      	ldr	r1, [r7, #16]
 80035b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4013      	ands	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0203 	and.w	r2, r3, #3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d00b      	beq.n	800360c <HAL_GPIO_Init+0xd4>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d007      	beq.n	800360c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003600:	2b11      	cmp	r3, #17
 8003602:	d003      	beq.n	800360c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b12      	cmp	r3, #18
 800360a:	d130      	bne.n	800366e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	2203      	movs	r2, #3
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003642:	2201      	movs	r2, #1
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f003 0201 	and.w	r2, r3, #1
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	2203      	movs	r2, #3
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43db      	mvns	r3, r3
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4013      	ands	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80a6 	beq.w	80037f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ac:	4b5b      	ldr	r3, [pc, #364]	; (800381c <HAL_GPIO_Init+0x2e4>)
 80036ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b0:	4a5a      	ldr	r2, [pc, #360]	; (800381c <HAL_GPIO_Init+0x2e4>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6613      	str	r3, [r2, #96]	; 0x60
 80036b8:	4b58      	ldr	r3, [pc, #352]	; (800381c <HAL_GPIO_Init+0x2e4>)
 80036ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036c4:	4a56      	ldr	r2, [pc, #344]	; (8003820 <HAL_GPIO_Init+0x2e8>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	3302      	adds	r3, #2
 80036cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	220f      	movs	r2, #15
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036ee:	d01f      	beq.n	8003730 <HAL_GPIO_Init+0x1f8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a4c      	ldr	r2, [pc, #304]	; (8003824 <HAL_GPIO_Init+0x2ec>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d019      	beq.n	800372c <HAL_GPIO_Init+0x1f4>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a4b      	ldr	r2, [pc, #300]	; (8003828 <HAL_GPIO_Init+0x2f0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d013      	beq.n	8003728 <HAL_GPIO_Init+0x1f0>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a4a      	ldr	r2, [pc, #296]	; (800382c <HAL_GPIO_Init+0x2f4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00d      	beq.n	8003724 <HAL_GPIO_Init+0x1ec>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a49      	ldr	r2, [pc, #292]	; (8003830 <HAL_GPIO_Init+0x2f8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d007      	beq.n	8003720 <HAL_GPIO_Init+0x1e8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a48      	ldr	r2, [pc, #288]	; (8003834 <HAL_GPIO_Init+0x2fc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d101      	bne.n	800371c <HAL_GPIO_Init+0x1e4>
 8003718:	2305      	movs	r3, #5
 800371a:	e00a      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 800371c:	2306      	movs	r3, #6
 800371e:	e008      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003720:	2304      	movs	r3, #4
 8003722:	e006      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003724:	2303      	movs	r3, #3
 8003726:	e004      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003728:	2302      	movs	r3, #2
 800372a:	e002      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003730:	2300      	movs	r3, #0
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	f002 0203 	and.w	r2, r2, #3
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	4093      	lsls	r3, r2
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003742:	4937      	ldr	r1, [pc, #220]	; (8003820 <HAL_GPIO_Init+0x2e8>)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3302      	adds	r3, #2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003750:	4b39      	ldr	r3, [pc, #228]	; (8003838 <HAL_GPIO_Init+0x300>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003774:	4a30      	ldr	r2, [pc, #192]	; (8003838 <HAL_GPIO_Init+0x300>)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800377a:	4b2f      	ldr	r3, [pc, #188]	; (8003838 <HAL_GPIO_Init+0x300>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43db      	mvns	r3, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800379e:	4a26      	ldr	r2, [pc, #152]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037a4:	4b24      	ldr	r3, [pc, #144]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037ce:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037f2:	4a11      	ldr	r2, [pc, #68]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3301      	adds	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	f47f ae9d 	bne.w	8003548 <HAL_GPIO_Init+0x10>
  }
}
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000
 8003820:	40010000 	.word	0x40010000
 8003824:	48000400 	.word	0x48000400
 8003828:	48000800 	.word	0x48000800
 800382c:	48000c00 	.word	0x48000c00
 8003830:	48001000 	.word	0x48001000
 8003834:	48001400 	.word	0x48001400
 8003838:	40010400 	.word	0x40010400

0800383c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	887b      	ldrh	r3, [r7, #2]
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	e001      	b.n	800385e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800385e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
 8003878:	4613      	mov	r3, r2
 800387a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800387c:	787b      	ldrb	r3, [r7, #1]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003882:	887a      	ldrh	r2, [r7, #2]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003888:	e002      	b.n	8003890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695a      	ldr	r2, [r3, #20]
 80038ac:	887b      	ldrh	r3, [r7, #2]
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038b4:	887a      	ldrh	r2, [r7, #2]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80038ba:	e002      	b.n	80038c2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038bc:	887a      	ldrh	r2, [r7, #2]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	619a      	str	r2, [r3, #24]
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d006      	beq.n	80038f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038e6:	4a05      	ldr	r2, [pc, #20]	; (80038fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f005 fc4e 	bl	8009190 <HAL_GPIO_EXTI_Callback>
  }
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40010400 	.word	0x40010400

08003900 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e078      	b.n	8003a04 <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f008 faf8 	bl	800bf1c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d004      	beq.n	800394e <HAL_LPTIM_Init+0x4e>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800394c:	d103      	bne.n	8003956 <HAL_LPTIM_Init+0x56>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f023 031e 	bic.w	r3, r3, #30
 8003954:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800395e:	4293      	cmp	r3, r2
 8003960:	d003      	beq.n	800396a <HAL_LPTIM_Init+0x6a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4b29      	ldr	r3, [pc, #164]	; (8003a0c <HAL_LPTIM_Init+0x10c>)
 8003966:	4013      	ands	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4b28      	ldr	r3, [pc, #160]	; (8003a10 <HAL_LPTIM_Init+0x110>)
 800396e:	4013      	ands	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800397a:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003980:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003986:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800398c:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d004      	beq.n	80039a6 <HAL_LPTIM_Init+0xa6>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039a4:	d107      	bne.n	80039b6 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80039ae:	4313      	orrs	r3, r2
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00a      	beq.n	80039d8 <HAL_LPTIM_Init+0xd8>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80039ca:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80039d0:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <HAL_LPTIM_Init+0x114>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d107      	bne.n	80039fa <HAL_LPTIM_Init+0xfa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	dfff1f3f 	.word	0xdfff1f3f
 8003a10:	ff19f1f8 	.word	0xff19f1f8
 8003a14:	40007c00 	.word	0x40007c00

08003a18 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003a2c:	4b1c      	ldr	r3, [pc, #112]	; (8003aa0 <HAL_LPTIM_TimeOut_Start_IT+0x88>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4a1b      	ldr	r2, [pc, #108]	; (8003aa0 <HAL_LPTIM_TimeOut_Start_IT+0x88>)
 8003a32:	f043 0320 	orr.w	r3, r3, #32
 8003a36:	6213      	str	r3, [r2, #32]

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003a46:	60da      	str	r2, [r3, #12]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	619a      	str	r2, [r3, #24]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	615a      	str	r2, [r3, #20]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0204 	orr.w	r2, r2, #4
 8003a86:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40010400 	.word	0x40010400

08003aa4 <HAL_LPTIM_TimeOut_Stop_IT>:
  * @brief  Stop the Timeout function in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 8003ab4:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <HAL_LPTIM_TimeOut_Stop_IT+0x54>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	4a0f      	ldr	r2, [pc, #60]	; (8003af8 <HAL_LPTIM_TimeOut_Stop_IT+0x54>)
 8003aba:	f023 0320 	bic.w	r3, r3, #32
 8003abe:	6213      	str	r3, [r2, #32]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f8f3 	bl	8003cac <LPTIM_Disable>

  /* Reset TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_TIMOUT;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003ad4:	60da      	str	r2, [r3, #12]

  /* Disable Compare match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPM);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	609a      	str	r2, [r3, #8]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40010400 	.word	0x40010400

08003afc <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d10d      	bne.n	8003b2e <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d106      	bne.n	8003b2e <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2201      	movs	r2, #1
 8003b26:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f005 f98d 	bl	8008e48 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d10d      	bne.n	8003b58 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d106      	bne.n	8003b58 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f86d 	bl	8003c32 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d10d      	bne.n	8003b82 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d106      	bne.n	8003b82 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2204      	movs	r2, #4
 8003b7a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f862 	bl	8003c46 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d10d      	bne.n	8003bac <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d106      	bne.n	8003bac <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2208      	movs	r2, #8
 8003ba4:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f857 	bl	8003c5a <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d10d      	bne.n	8003bd6 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d106      	bne.n	8003bd6 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2210      	movs	r2, #16
 8003bce:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f84c 	bl	8003c6e <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d10d      	bne.n	8003c00 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d106      	bne.n	8003c00 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f841 	bl	8003c82 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0a:	2b40      	cmp	r3, #64	; 0x40
 8003c0c:	d10d      	bne.n	8003c2a <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c18:	2b40      	cmp	r3, #64	; 0x40
 8003c1a:	d106      	bne.n	8003c2a <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2240      	movs	r2, #64	; 0x40
 8003c22:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f836 	bl	8003c96 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *lptim)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb8:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)lptim->Instance)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4b61      	ldr	r3, [pc, #388]	; (8003e48 <LPTIM_Disable+0x19c>)
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d000      	beq.n	8003cc8 <LPTIM_Disable+0x1c>
  {
     case LPTIM1_BASE:
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
       break;
     default:
       break;
 8003cc6:	e006      	b.n	8003cd6 <LPTIM_Disable+0x2a>
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003cc8:	4b60      	ldr	r3, [pc, #384]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 8003cd4:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = lptim->Instance->IER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	623b      	str	r3, [r7, #32]
  tmpCFGR = lptim->Instance->CFGR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	61fb      	str	r3, [r7, #28]
  tmpCMP = lptim->Instance->CMP;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	61bb      	str	r3, [r7, #24]
  tmpARR = lptim->Instance->ARR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	617b      	str	r3, [r7, #20]
  tmpOR = lptim->Instance->OR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	613b      	str	r3, [r7, #16]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)lptim->Instance)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b50      	ldr	r3, [pc, #320]	; (8003e48 <LPTIM_Disable+0x19c>)
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d000      	beq.n	8003d0c <LPTIM_Disable+0x60>
     case LPTIM1_BASE:
       __HAL_RCC_LPTIM1_FORCE_RESET();
       __HAL_RCC_LPTIM1_RELEASE_RESET();
       break;
     default:
       break;
 8003d0a:	e00c      	b.n	8003d26 <LPTIM_Disable+0x7a>
       __HAL_RCC_LPTIM1_FORCE_RESET();
 8003d0c:	4b4f      	ldr	r3, [pc, #316]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	4a4e      	ldr	r2, [pc, #312]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003d12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d16:	6393      	str	r3, [r2, #56]	; 0x38
       __HAL_RCC_LPTIM1_RELEASE_RESET();
 8003d18:	4b4c      	ldr	r3, [pc, #304]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	4a4b      	ldr	r2, [pc, #300]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003d1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d22:	6393      	str	r3, [r2, #56]	; 0x38
       break;
 8003d24:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
  uint32_t Ref_Time;
  uint32_t Time_Elapsed;

  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <LPTIM_Disable+0x86>
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d06f      	beq.n	8003e12 <LPTIM_Disable+0x166>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)lptim->Instance)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	4b43      	ldr	r3, [pc, #268]	; (8003e48 <LPTIM_Disable+0x19c>)
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d000      	beq.n	8003d40 <LPTIM_Disable+0x94>
    {
       case LPTIM1_BASE:
         __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
         break;
       default:
         break;
 8003d3e:	e008      	b.n	8003d52 <LPTIM_Disable+0xa6>
         __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8003d40:	4b42      	ldr	r3, [pc, #264]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	4a41      	ldr	r2, [pc, #260]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003d48:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
         break;
 8003d50:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d023      	beq.n	8003da0 <LPTIM_Disable+0xf4>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	611a      	str	r2, [r3, #16]
      lptim->Instance->CMP = tmpCMP;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	615a      	str	r2, [r3, #20]
      /* Polling on CMP write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 8003d70:	f7fc fab6 	bl	80002e0 <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8003d76:	f7fc fab3 	bl	80002e0 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	60bb      	str	r3, [r7, #8]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_CMPOK))) && (Time_Elapsed <= TIMEOUT));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d003      	beq.n	8003d98 <LPTIM_Disable+0xec>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d96:	d9ee      	bls.n	8003d76 <LPTIM_Disable+0xca>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_CMPOK);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d023      	beq.n	8003dee <LPTIM_Disable+0x142>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0201 	orr.w	r2, r2, #1
 8003db4:	611a      	str	r2, [r3, #16]
      lptim->Instance->ARR = tmpARR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	619a      	str	r2, [r3, #24]
      /* Polling on ARR write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 8003dbe:	f7fc fa8f 	bl	80002e0 <HAL_GetTick>
 8003dc2:	60f8      	str	r0, [r7, #12]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8003dc4:	f7fc fa8c 	bl	80002e0 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	60bb      	str	r3, [r7, #8]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_ARROK))) && (Time_Elapsed <= TIMEOUT));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b10      	cmp	r3, #16
 8003ddc:	d003      	beq.n	8003de6 <LPTIM_Disable+0x13a>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003de4:	d9ee      	bls.n	8003dc4 <LPTIM_Disable+0x118>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_ARROK);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2210      	movs	r2, #16
 8003dec:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)lptim->Instance)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <LPTIM_Disable+0x19c>)
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d000      	beq.n	8003dfc <LPTIM_Disable+0x150>
    {
       case LPTIM1_BASE:
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
         break;
       default:
         break;
 8003dfa:	e00b      	b.n	8003e14 <LPTIM_Disable+0x168>
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e06:	4911      	ldr	r1, [pc, #68]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
         break;
 8003e10:	e000      	b.n	8003e14 <LPTIM_Disable+0x168>
    }
  }
 8003e12:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  lptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0201 	bic.w	r2, r2, #1
 8003e22:	611a      	str	r2, [r3, #16]
  lptim->Instance->IER = tmpIER;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6a3a      	ldr	r2, [r7, #32]
 8003e2a:	609a      	str	r2, [r3, #8]
  lptim->Instance->CFGR = tmpCFGR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	60da      	str	r2, [r3, #12]
  lptim->Instance->OR = tmpOR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e3c:	b662      	cpsie	i

  __enable_irq();
}
 8003e3e:	bf00      	nop
 8003e40:	3728      	adds	r7, #40	; 0x28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40007c00 	.word	0x40007c00
 8003e4c:	40021000 	.word	0x40021000

08003e50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d141      	bne.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e5e:	4b4b      	ldr	r3, [pc, #300]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6a:	d131      	bne.n	8003ed0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e6c:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e72:	4a46      	ldr	r2, [pc, #280]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e7c:	4b43      	ldr	r3, [pc, #268]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e84:	4a41      	ldr	r2, [pc, #260]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e8c:	4b40      	ldr	r3, [pc, #256]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2232      	movs	r2, #50	; 0x32
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	4a3f      	ldr	r2, [pc, #252]	; (8003f94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	0c9b      	lsrs	r3, r3, #18
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ea2:	e002      	b.n	8003eaa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eaa:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb6:	d102      	bne.n	8003ebe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f2      	bne.n	8003ea4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ebe:	4b33      	ldr	r3, [pc, #204]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eca:	d158      	bne.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e057      	b.n	8003f80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ed0:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed6:	4a2d      	ldr	r2, [pc, #180]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003edc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ee0:	e04d      	b.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee8:	d141      	bne.n	8003f6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eea:	4b28      	ldr	r3, [pc, #160]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef6:	d131      	bne.n	8003f5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ef8:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003efe:	4a23      	ldr	r2, [pc, #140]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f08:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f10:	4a1e      	ldr	r2, [pc, #120]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f18:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2232      	movs	r2, #50	; 0x32
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	4a1c      	ldr	r2, [pc, #112]	; (8003f94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	0c9b      	lsrs	r3, r3, #18
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f2e:	e002      	b.n	8003f36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f42:	d102      	bne.n	8003f4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f2      	bne.n	8003f30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f4a:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f56:	d112      	bne.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e011      	b.n	8003f80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f62:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f6c:	e007      	b.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f6e:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f76:	4a05      	ldr	r2, [pc, #20]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40007000 	.word	0x40007000
 8003f90:	2000007c 	.word	0x2000007c
 8003f94:	431bde83 	.word	0x431bde83

08003f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e308      	b.n	80045bc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d075      	beq.n	80040a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb6:	4ba3      	ldr	r3, [pc, #652]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fc0:	4ba0      	ldr	r3, [pc, #640]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0303 	and.w	r3, r3, #3
 8003fc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b0c      	cmp	r3, #12
 8003fce:	d102      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x3e>
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d002      	beq.n	8003fdc <HAL_RCC_OscConfig+0x44>
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d10b      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fdc:	4b99      	ldr	r3, [pc, #612]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d05b      	beq.n	80040a0 <HAL_RCC_OscConfig+0x108>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d157      	bne.n	80040a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e2e3      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffc:	d106      	bne.n	800400c <HAL_RCC_OscConfig+0x74>
 8003ffe:	4b91      	ldr	r3, [pc, #580]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a90      	ldr	r2, [pc, #576]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	e01d      	b.n	8004048 <HAL_RCC_OscConfig+0xb0>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004014:	d10c      	bne.n	8004030 <HAL_RCC_OscConfig+0x98>
 8004016:	4b8b      	ldr	r3, [pc, #556]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a8a      	ldr	r2, [pc, #552]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 800401c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	4b88      	ldr	r3, [pc, #544]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a87      	ldr	r2, [pc, #540]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	e00b      	b.n	8004048 <HAL_RCC_OscConfig+0xb0>
 8004030:	4b84      	ldr	r3, [pc, #528]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a83      	ldr	r2, [pc, #524]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	4b81      	ldr	r3, [pc, #516]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a80      	ldr	r2, [pc, #512]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d013      	beq.n	8004078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fc f946 	bl	80002e0 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004058:	f7fc f942 	bl	80002e0 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b64      	cmp	r3, #100	; 0x64
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e2a8      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800406a:	4b76      	ldr	r3, [pc, #472]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0xc0>
 8004076:	e014      	b.n	80040a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fc f932 	bl	80002e0 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004080:	f7fc f92e 	bl	80002e0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b64      	cmp	r3, #100	; 0x64
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e294      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004092:	4b6c      	ldr	r3, [pc, #432]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0xe8>
 800409e:	e000      	b.n	80040a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d075      	beq.n	800419a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ae:	4b65      	ldr	r3, [pc, #404]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040b8:	4b62      	ldr	r3, [pc, #392]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b0c      	cmp	r3, #12
 80040c6:	d102      	bne.n	80040ce <HAL_RCC_OscConfig+0x136>
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d002      	beq.n	80040d4 <HAL_RCC_OscConfig+0x13c>
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d11f      	bne.n	8004114 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d4:	4b5b      	ldr	r3, [pc, #364]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_OscConfig+0x154>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e267      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ec:	4b55      	ldr	r3, [pc, #340]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	061b      	lsls	r3, r3, #24
 80040fa:	4952      	ldr	r1, [pc, #328]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004100:	4b51      	ldr	r3, [pc, #324]	; (8004248 <HAL_RCC_OscConfig+0x2b0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f7fc f89f 	bl	8000248 <HAL_InitTick>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d043      	beq.n	8004198 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e253      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d023      	beq.n	8004164 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800411c:	4b49      	ldr	r3, [pc, #292]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a48      	ldr	r2, [pc, #288]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fc f8da 	bl	80002e0 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004130:	f7fc f8d6 	bl	80002e0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e23c      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004142:	4b40      	ldr	r3, [pc, #256]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414e:	4b3d      	ldr	r3, [pc, #244]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	061b      	lsls	r3, r3, #24
 800415c:	4939      	ldr	r1, [pc, #228]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]
 8004162:	e01a      	b.n	800419a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004164:	4b37      	ldr	r3, [pc, #220]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a36      	ldr	r2, [pc, #216]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 800416a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800416e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fc f8b6 	bl	80002e0 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004178:	f7fc f8b2 	bl	80002e0 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e218      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800418a:	4b2e      	ldr	r3, [pc, #184]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x1e0>
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004198:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d03c      	beq.n	8004220 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01c      	beq.n	80041e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ae:	4b25      	ldr	r3, [pc, #148]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b4:	4a23      	ldr	r2, [pc, #140]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041be:	f7fc f88f 	bl	80002e0 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c6:	f7fc f88b 	bl	80002e0 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e1f1      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041d8:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80041da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0ef      	beq.n	80041c6 <HAL_RCC_OscConfig+0x22e>
 80041e6:	e01b      	b.n	8004220 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e8:	4b16      	ldr	r3, [pc, #88]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80041ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ee:	4a15      	ldr	r2, [pc, #84]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f8:	f7fc f872 	bl	80002e0 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004200:	f7fc f86e 	bl	80002e0 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e1d4      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004212:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1ef      	bne.n	8004200 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80ab 	beq.w	8004384 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422e:	2300      	movs	r3, #0
 8004230:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004232:	4b04      	ldr	r3, [pc, #16]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_RCC_OscConfig+0x2b4>
 800423e:	2301      	movs	r3, #1
 8004240:	e005      	b.n	800424e <HAL_RCC_OscConfig+0x2b6>
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000
 8004248:	20000000 	.word	0x20000000
 800424c:	2300      	movs	r3, #0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00d      	beq.n	800426e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004252:	4baf      	ldr	r3, [pc, #700]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004256:	4aae      	ldr	r2, [pc, #696]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425c:	6593      	str	r3, [r2, #88]	; 0x58
 800425e:	4bac      	ldr	r3, [pc, #688]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800426a:	2301      	movs	r3, #1
 800426c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426e:	4ba9      	ldr	r3, [pc, #676]	; (8004514 <HAL_RCC_OscConfig+0x57c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d118      	bne.n	80042ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800427a:	4ba6      	ldr	r3, [pc, #664]	; (8004514 <HAL_RCC_OscConfig+0x57c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4aa5      	ldr	r2, [pc, #660]	; (8004514 <HAL_RCC_OscConfig+0x57c>)
 8004280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004286:	f7fc f82b 	bl	80002e0 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428e:	f7fc f827 	bl	80002e0 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e18d      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a0:	4b9c      	ldr	r3, [pc, #624]	; (8004514 <HAL_RCC_OscConfig+0x57c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f0      	beq.n	800428e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d108      	bne.n	80042c6 <HAL_RCC_OscConfig+0x32e>
 80042b4:	4b96      	ldr	r3, [pc, #600]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	4a95      	ldr	r2, [pc, #596]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042c4:	e024      	b.n	8004310 <HAL_RCC_OscConfig+0x378>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b05      	cmp	r3, #5
 80042cc:	d110      	bne.n	80042f0 <HAL_RCC_OscConfig+0x358>
 80042ce:	4b90      	ldr	r3, [pc, #576]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d4:	4a8e      	ldr	r2, [pc, #568]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042d6:	f043 0304 	orr.w	r3, r3, #4
 80042da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042de:	4b8c      	ldr	r3, [pc, #560]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e4:	4a8a      	ldr	r2, [pc, #552]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042ee:	e00f      	b.n	8004310 <HAL_RCC_OscConfig+0x378>
 80042f0:	4b87      	ldr	r3, [pc, #540]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f6:	4a86      	ldr	r2, [pc, #536]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004300:	4b83      	ldr	r3, [pc, #524]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	4a82      	ldr	r2, [pc, #520]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004308:	f023 0304 	bic.w	r3, r3, #4
 800430c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d016      	beq.n	8004346 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fb ffe2 	bl	80002e0 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800431e:	e00a      	b.n	8004336 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	f7fb ffde 	bl	80002e0 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	; 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e142      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004336:	4b76      	ldr	r3, [pc, #472]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0ed      	beq.n	8004320 <HAL_RCC_OscConfig+0x388>
 8004344:	e015      	b.n	8004372 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004346:	f7fb ffcb 	bl	80002e0 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800434c:	e00a      	b.n	8004364 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434e:	f7fb ffc7 	bl	80002e0 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	f241 3288 	movw	r2, #5000	; 0x1388
 800435c:	4293      	cmp	r3, r2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e12b      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004364:	4b6a      	ldr	r3, [pc, #424]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1ed      	bne.n	800434e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004372:	7ffb      	ldrb	r3, [r7, #31]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d105      	bne.n	8004384 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004378:	4b65      	ldr	r3, [pc, #404]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	4a64      	ldr	r2, [pc, #400]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800437e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004382:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d03c      	beq.n	800440a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01c      	beq.n	80043d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004398:	4b5d      	ldr	r3, [pc, #372]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800439a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800439e:	4a5c      	ldr	r2, [pc, #368]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a8:	f7fb ff9a 	bl	80002e0 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043b0:	f7fb ff96 	bl	80002e0 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e0fc      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043c2:	4b53      	ldr	r3, [pc, #332]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80043c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0ef      	beq.n	80043b0 <HAL_RCC_OscConfig+0x418>
 80043d0:	e01b      	b.n	800440a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043d2:	4b4f      	ldr	r3, [pc, #316]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80043d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043d8:	4a4d      	ldr	r2, [pc, #308]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e2:	f7fb ff7d 	bl	80002e0 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043ea:	f7fb ff79 	bl	80002e0 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e0df      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043fc:	4b44      	ldr	r3, [pc, #272]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80043fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1ef      	bne.n	80043ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80d3 	beq.w	80045ba <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004414:	4b3e      	ldr	r3, [pc, #248]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 030c 	and.w	r3, r3, #12
 800441c:	2b0c      	cmp	r3, #12
 800441e:	f000 808d 	beq.w	800453c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d15a      	bne.n	80044e0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442a:	4b39      	ldr	r3, [pc, #228]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a38      	ldr	r2, [pc, #224]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004430:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004436:	f7fb ff53 	bl	80002e0 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800443e:	f7fb ff4f 	bl	80002e0 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e0b5      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004450:	4b2f      	ldr	r3, [pc, #188]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f0      	bne.n	800443e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800445c:	4b2c      	ldr	r3, [pc, #176]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	4b2d      	ldr	r3, [pc, #180]	; (8004518 <HAL_RCC_OscConfig+0x580>)
 8004462:	4013      	ands	r3, r2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6a11      	ldr	r1, [r2, #32]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800446c:	3a01      	subs	r2, #1
 800446e:	0112      	lsls	r2, r2, #4
 8004470:	4311      	orrs	r1, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004476:	0212      	lsls	r2, r2, #8
 8004478:	4311      	orrs	r1, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800447e:	0852      	lsrs	r2, r2, #1
 8004480:	3a01      	subs	r2, #1
 8004482:	0552      	lsls	r2, r2, #21
 8004484:	4311      	orrs	r1, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800448a:	0852      	lsrs	r2, r2, #1
 800448c:	3a01      	subs	r2, #1
 800448e:	0652      	lsls	r2, r2, #25
 8004490:	4311      	orrs	r1, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004496:	06d2      	lsls	r2, r2, #27
 8004498:	430a      	orrs	r2, r1
 800449a:	491d      	ldr	r1, [pc, #116]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800449c:	4313      	orrs	r3, r2
 800449e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a0:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1a      	ldr	r2, [pc, #104]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044ac:	4b18      	ldr	r3, [pc, #96]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	4a17      	ldr	r2, [pc, #92]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b8:	f7fb ff12 	bl	80002e0 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c0:	f7fb ff0e 	bl	80002e0 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e074      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d2:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x528>
 80044de:	e06c      	b.n	80045ba <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80044ec:	4b08      	ldr	r3, [pc, #32]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4a07      	ldr	r2, [pc, #28]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044f2:	f023 0303 	bic.w	r3, r3, #3
 80044f6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4a04      	ldr	r2, [pc, #16]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044fe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004506:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fb feea 	bl	80002e0 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800450e:	e00e      	b.n	800452e <HAL_RCC_OscConfig+0x596>
 8004510:	40021000 	.word	0x40021000
 8004514:	40007000 	.word	0x40007000
 8004518:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800451c:	f7fb fee0 	bl	80002e0 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e046      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800452e:	4b25      	ldr	r3, [pc, #148]	; (80045c4 <HAL_RCC_OscConfig+0x62c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x584>
 800453a:	e03e      	b.n	80045ba <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e039      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004548:	4b1e      	ldr	r3, [pc, #120]	; (80045c4 <HAL_RCC_OscConfig+0x62c>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f003 0203 	and.w	r2, r3, #3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	429a      	cmp	r2, r3
 800455a:	d12c      	bne.n	80045b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	3b01      	subs	r3, #1
 8004568:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456a:	429a      	cmp	r2, r3
 800456c:	d123      	bne.n	80045b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800457a:	429a      	cmp	r2, r3
 800457c:	d11b      	bne.n	80045b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800458a:	429a      	cmp	r2, r3
 800458c:	d113      	bne.n	80045b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	3b01      	subs	r3, #1
 800459c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800459e:	429a      	cmp	r2, r3
 80045a0:	d109      	bne.n	80045b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ac:	085b      	lsrs	r3, r3, #1
 80045ae:	3b01      	subs	r3, #1
 80045b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d001      	beq.n	80045ba <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40021000 	.word	0x40021000

080045c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e11e      	b.n	800481e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045e0:	4b91      	ldr	r3, [pc, #580]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d910      	bls.n	8004610 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b8e      	ldr	r3, [pc, #568]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 020f 	bic.w	r2, r3, #15
 80045f6:	498c      	ldr	r1, [pc, #560]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	4b8a      	ldr	r3, [pc, #552]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e106      	b.n	800481e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d073      	beq.n	8004704 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b03      	cmp	r3, #3
 8004622:	d129      	bne.n	8004678 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004624:	4b81      	ldr	r3, [pc, #516]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0f4      	b.n	800481e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004634:	f000 f970 	bl	8004918 <RCC_GetSysClockFreqFromPLLSource>
 8004638:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4a7c      	ldr	r2, [pc, #496]	; (8004830 <HAL_RCC_ClockConfig+0x268>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d93f      	bls.n	80046c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004642:	4b7a      	ldr	r3, [pc, #488]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004656:	2b00      	cmp	r3, #0
 8004658:	d033      	beq.n	80046c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800465e:	2b00      	cmp	r3, #0
 8004660:	d12f      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004662:	4b72      	ldr	r3, [pc, #456]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800466a:	4a70      	ldr	r2, [pc, #448]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 800466c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004670:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004672:	2380      	movs	r3, #128	; 0x80
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	e024      	b.n	80046c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b02      	cmp	r3, #2
 800467e:	d107      	bne.n	8004690 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004680:	4b6a      	ldr	r3, [pc, #424]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d109      	bne.n	80046a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0c6      	b.n	800481e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004690:	4b66      	ldr	r3, [pc, #408]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0be      	b.n	800481e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80046a0:	f000 f8ce 	bl	8004840 <HAL_RCC_GetSysClockFreq>
 80046a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4a61      	ldr	r2, [pc, #388]	; (8004830 <HAL_RCC_ClockConfig+0x268>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d909      	bls.n	80046c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046ae:	4b5f      	ldr	r3, [pc, #380]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046b6:	4a5d      	ldr	r2, [pc, #372]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80046b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80046be:	2380      	movs	r3, #128	; 0x80
 80046c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046c2:	4b5a      	ldr	r3, [pc, #360]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f023 0203 	bic.w	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4957      	ldr	r1, [pc, #348]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d4:	f7fb fe04 	bl	80002e0 <HAL_GetTick>
 80046d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046da:	e00a      	b.n	80046f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046dc:	f7fb fe00 	bl	80002e0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e095      	b.n	800481e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f2:	4b4e      	ldr	r3, [pc, #312]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 020c 	and.w	r2, r3, #12
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	429a      	cmp	r2, r3
 8004702:	d1eb      	bne.n	80046dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d023      	beq.n	8004758 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800471c:	4b43      	ldr	r3, [pc, #268]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a42      	ldr	r2, [pc, #264]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004722:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004726:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d007      	beq.n	8004744 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004734:	4b3d      	ldr	r3, [pc, #244]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800473c:	4a3b      	ldr	r2, [pc, #236]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 800473e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004742:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004744:	4b39      	ldr	r3, [pc, #228]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4936      	ldr	r1, [pc, #216]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
 8004756:	e008      	b.n	800476a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b80      	cmp	r3, #128	; 0x80
 800475c:	d105      	bne.n	800476a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800475e:	4b33      	ldr	r3, [pc, #204]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	4a32      	ldr	r2, [pc, #200]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004768:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800476a:	4b2f      	ldr	r3, [pc, #188]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d21d      	bcs.n	80047b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004778:	4b2b      	ldr	r3, [pc, #172]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f023 020f 	bic.w	r2, r3, #15
 8004780:	4929      	ldr	r1, [pc, #164]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	4313      	orrs	r3, r2
 8004786:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004788:	f7fb fdaa 	bl	80002e0 <HAL_GetTick>
 800478c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004790:	f7fb fda6 	bl	80002e0 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	; 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e03b      	b.n	800481e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b20      	ldr	r3, [pc, #128]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d1ed      	bne.n	8004790 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c0:	4b1a      	ldr	r3, [pc, #104]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4917      	ldr	r1, [pc, #92]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d009      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047de:	4b13      	ldr	r3, [pc, #76]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	490f      	ldr	r1, [pc, #60]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047f2:	f000 f825 	bl	8004840 <HAL_RCC_GetSysClockFreq>
 80047f6:	4601      	mov	r1, r0
 80047f8:	4b0c      	ldr	r3, [pc, #48]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	4a0c      	ldr	r2, [pc, #48]	; (8004834 <HAL_RCC_ClockConfig+0x26c>)
 8004804:	5cd3      	ldrb	r3, [r2, r3]
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	fa21 f303 	lsr.w	r3, r1, r3
 800480e:	4a0a      	ldr	r2, [pc, #40]	; (8004838 <HAL_RCC_ClockConfig+0x270>)
 8004810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <HAL_RCC_ClockConfig+0x274>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7fb fd16 	bl	8000248 <HAL_InitTick>
 800481c:	4603      	mov	r3, r0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40022000 	.word	0x40022000
 800482c:	40021000 	.word	0x40021000
 8004830:	04c4b400 	.word	0x04c4b400
 8004834:	0800c2dc 	.word	0x0800c2dc
 8004838:	2000007c 	.word	0x2000007c
 800483c:	20000000 	.word	0x20000000

08004840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004846:	4b2c      	ldr	r3, [pc, #176]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 030c 	and.w	r3, r3, #12
 800484e:	2b04      	cmp	r3, #4
 8004850:	d102      	bne.n	8004858 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004852:	4b2a      	ldr	r3, [pc, #168]	; (80048fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	e047      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004858:	4b27      	ldr	r3, [pc, #156]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b08      	cmp	r3, #8
 8004862:	d102      	bne.n	800486a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004864:	4b25      	ldr	r3, [pc, #148]	; (80048fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	e03e      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800486a:	4b23      	ldr	r3, [pc, #140]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b0c      	cmp	r3, #12
 8004874:	d136      	bne.n	80048e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004876:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004880:	4b1d      	ldr	r3, [pc, #116]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	3301      	adds	r3, #1
 800488c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b03      	cmp	r3, #3
 8004892:	d10c      	bne.n	80048ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004894:	4a19      	ldr	r2, [pc, #100]	; (80048fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	4a16      	ldr	r2, [pc, #88]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800489e:	68d2      	ldr	r2, [r2, #12]
 80048a0:	0a12      	lsrs	r2, r2, #8
 80048a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	617b      	str	r3, [r7, #20]
      break;
 80048ac:	e00c      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048ae:	4a13      	ldr	r2, [pc, #76]	; (80048fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b6:	4a10      	ldr	r2, [pc, #64]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048b8:	68d2      	ldr	r2, [r2, #12]
 80048ba:	0a12      	lsrs	r2, r2, #8
 80048bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048c0:	fb02 f303 	mul.w	r3, r2, r3
 80048c4:	617b      	str	r3, [r7, #20]
      break;
 80048c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048c8:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	0e5b      	lsrs	r3, r3, #25
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	3301      	adds	r3, #1
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	e001      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048e8:	693b      	ldr	r3, [r7, #16]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40021000 	.word	0x40021000
 80048fc:	00f42400 	.word	0x00f42400

08004900 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004904:	4b03      	ldr	r3, [pc, #12]	; (8004914 <HAL_RCC_GetHCLKFreq+0x14>)
 8004906:	681b      	ldr	r3, [r3, #0]
}
 8004908:	4618      	mov	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	2000007c 	.word	0x2000007c

08004918 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800491e:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	3301      	adds	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b03      	cmp	r3, #3
 800493a:	d10c      	bne.n	8004956 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800493c:	4a17      	ldr	r2, [pc, #92]	; (800499c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	fbb2 f3f3 	udiv	r3, r2, r3
 8004944:	4a14      	ldr	r2, [pc, #80]	; (8004998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004946:	68d2      	ldr	r2, [r2, #12]
 8004948:	0a12      	lsrs	r2, r2, #8
 800494a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800494e:	fb02 f303 	mul.w	r3, r2, r3
 8004952:	617b      	str	r3, [r7, #20]
    break;
 8004954:	e00c      	b.n	8004970 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004956:	4a11      	ldr	r2, [pc, #68]	; (800499c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	fbb2 f3f3 	udiv	r3, r2, r3
 800495e:	4a0e      	ldr	r2, [pc, #56]	; (8004998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004960:	68d2      	ldr	r2, [r2, #12]
 8004962:	0a12      	lsrs	r2, r2, #8
 8004964:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004968:	fb02 f303 	mul.w	r3, r2, r3
 800496c:	617b      	str	r3, [r7, #20]
    break;
 800496e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004970:	4b09      	ldr	r3, [pc, #36]	; (8004998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	0e5b      	lsrs	r3, r3, #25
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	3301      	adds	r3, #1
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	fbb2 f3f3 	udiv	r3, r2, r3
 8004988:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800498a:	687b      	ldr	r3, [r7, #4]
}
 800498c:	4618      	mov	r0, r3
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	40021000 	.word	0x40021000
 800499c:	00f42400 	.word	0x00f42400

080049a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049a8:	2300      	movs	r3, #0
 80049aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049ac:	2300      	movs	r3, #0
 80049ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 8098 	beq.w	8004aee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049be:	2300      	movs	r3, #0
 80049c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c2:	4b43      	ldr	r3, [pc, #268]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10d      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ce:	4b40      	ldr	r3, [pc, #256]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d2:	4a3f      	ldr	r2, [pc, #252]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d8:	6593      	str	r3, [r2, #88]	; 0x58
 80049da:	4b3d      	ldr	r3, [pc, #244]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e6:	2301      	movs	r3, #1
 80049e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ea:	4b3a      	ldr	r3, [pc, #232]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a39      	ldr	r2, [pc, #228]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049f6:	f7fb fc73 	bl	80002e0 <HAL_GetTick>
 80049fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049fc:	e009      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049fe:	f7fb fc6f 	bl	80002e0 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d902      	bls.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	74fb      	strb	r3, [r7, #19]
        break;
 8004a10:	e005      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a12:	4b30      	ldr	r3, [pc, #192]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0ef      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a1e:	7cfb      	ldrb	r3, [r7, #19]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d159      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a24:	4b2a      	ldr	r3, [pc, #168]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01e      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d019      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a40:	4b23      	ldr	r3, [pc, #140]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a4c:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a52:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a5c:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a62:	4a1b      	ldr	r2, [pc, #108]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a6c:	4a18      	ldr	r2, [pc, #96]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d016      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7e:	f7fb fc2f 	bl	80002e0 <HAL_GetTick>
 8004a82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a84:	e00b      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a86:	f7fb fc2b 	bl	80002e0 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d902      	bls.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	74fb      	strb	r3, [r7, #19]
            break;
 8004a9c:	e006      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0ec      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004aac:	7cfb      	ldrb	r3, [r7, #19]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10b      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ab2:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	4903      	ldr	r1, [pc, #12]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ac8:	e008      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004aca:	7cfb      	ldrb	r3, [r7, #19]
 8004acc:	74bb      	strb	r3, [r7, #18]
 8004ace:	e005      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad8:	7cfb      	ldrb	r3, [r7, #19]
 8004ada:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004adc:	7c7b      	ldrb	r3, [r7, #17]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d105      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae2:	4ba6      	ldr	r3, [pc, #664]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	4aa5      	ldr	r2, [pc, #660]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004afa:	4ba0      	ldr	r3, [pc, #640]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b00:	f023 0203 	bic.w	r2, r3, #3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	499c      	ldr	r1, [pc, #624]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b1c:	4b97      	ldr	r3, [pc, #604]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b22:	f023 020c 	bic.w	r2, r3, #12
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	4994      	ldr	r1, [pc, #592]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b3e:	4b8f      	ldr	r3, [pc, #572]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	498b      	ldr	r1, [pc, #556]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b60:	4b86      	ldr	r3, [pc, #536]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	4983      	ldr	r1, [pc, #524]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b82:	4b7e      	ldr	r3, [pc, #504]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	497a      	ldr	r1, [pc, #488]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00a      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ba4:	4b75      	ldr	r3, [pc, #468]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	4972      	ldr	r1, [pc, #456]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bc6:	4b6d      	ldr	r3, [pc, #436]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	4969      	ldr	r1, [pc, #420]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004be8:	4b64      	ldr	r3, [pc, #400]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	4961      	ldr	r1, [pc, #388]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c0a:	4b5c      	ldr	r3, [pc, #368]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	4958      	ldr	r1, [pc, #352]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d015      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c2c:	4b53      	ldr	r3, [pc, #332]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	4950      	ldr	r1, [pc, #320]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c4a:	d105      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c4c:	4b4b      	ldr	r3, [pc, #300]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	4a4a      	ldr	r2, [pc, #296]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d015      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c64:	4b45      	ldr	r3, [pc, #276]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	4942      	ldr	r1, [pc, #264]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c82:	d105      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c84:	4b3d      	ldr	r3, [pc, #244]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4a3c      	ldr	r2, [pc, #240]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c8e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d015      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c9c:	4b37      	ldr	r3, [pc, #220]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	4934      	ldr	r1, [pc, #208]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cba:	d105      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cbc:	4b2f      	ldr	r3, [pc, #188]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4a2e      	ldr	r2, [pc, #184]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d015      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cd4:	4b29      	ldr	r3, [pc, #164]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce2:	4926      	ldr	r1, [pc, #152]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf2:	d105      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf4:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	4a20      	ldr	r2, [pc, #128]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cfe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d015      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	4918      	ldr	r1, [pc, #96]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d2a:	d105      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d2c:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4a12      	ldr	r2, [pc, #72]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d36:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d015      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d44:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d52:	490a      	ldr	r1, [pc, #40]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d62:	d105      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d64:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4a04      	ldr	r2, [pc, #16]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d70:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000

08004d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e01d      	b.n	8004dce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f006 fe0e 	bl	800b9c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f000 fd5c 	bl	800587c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <HAL_TIM_Base_Start_IT+0x50>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b06      	cmp	r3, #6
 8004e00:	d00b      	beq.n	8004e1a <HAL_TIM_Base_Start_IT+0x42>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e08:	d007      	beq.n	8004e1a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	00010007 	.word	0x00010007

08004e2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0201 	bic.w	r2, r2, #1
 8004e42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6a1a      	ldr	r2, [r3, #32]
 8004e4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10f      	bne.n	8004e74 <HAL_TIM_Base_Stop_IT+0x48>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6a1a      	ldr	r2, [r3, #32]
 8004e5a:	f244 4344 	movw	r3, #17476	; 0x4444
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d107      	bne.n	8004e74 <HAL_TIM_Base_Stop_IT+0x48>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e01d      	b.n	8004ed0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d106      	bne.n	8004eae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f006 ff21 	bl	800bcf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	f000 fcdb 	bl	800587c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	6839      	ldr	r1, [r7, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f001 fa99 	bl	8006422 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1e      	ldr	r2, [pc, #120]	; (8004f70 <HAL_TIM_PWM_Start+0x98>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d013      	beq.n	8004f22 <HAL_TIM_PWM_Start+0x4a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <HAL_TIM_PWM_Start+0x9c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00e      	beq.n	8004f22 <HAL_TIM_PWM_Start+0x4a>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1b      	ldr	r2, [pc, #108]	; (8004f78 <HAL_TIM_PWM_Start+0xa0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d009      	beq.n	8004f22 <HAL_TIM_PWM_Start+0x4a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1a      	ldr	r2, [pc, #104]	; (8004f7c <HAL_TIM_PWM_Start+0xa4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d004      	beq.n	8004f22 <HAL_TIM_PWM_Start+0x4a>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a18      	ldr	r2, [pc, #96]	; (8004f80 <HAL_TIM_PWM_Start+0xa8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d101      	bne.n	8004f26 <HAL_TIM_PWM_Start+0x4e>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <HAL_TIM_PWM_Start+0x50>
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <HAL_TIM_PWM_Start+0xac>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b06      	cmp	r3, #6
 8004f4c:	d00b      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x8e>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f54:	d007      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0201 	orr.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	40013400 	.word	0x40013400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800
 8004f84:	00010007 	.word	0x00010007

08004f88 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2200      	movs	r2, #0
 8004f98:	6839      	ldr	r1, [r7, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f001 fa41 	bl	8006422 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a2a      	ldr	r2, [pc, #168]	; (8005050 <HAL_TIM_PWM_Stop+0xc8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_TIM_PWM_Stop+0x4a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a29      	ldr	r2, [pc, #164]	; (8005054 <HAL_TIM_PWM_Stop+0xcc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_TIM_PWM_Stop+0x4a>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a27      	ldr	r2, [pc, #156]	; (8005058 <HAL_TIM_PWM_Stop+0xd0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_TIM_PWM_Stop+0x4a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a26      	ldr	r2, [pc, #152]	; (800505c <HAL_TIM_PWM_Stop+0xd4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_TIM_PWM_Stop+0x4a>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a24      	ldr	r2, [pc, #144]	; (8005060 <HAL_TIM_PWM_Stop+0xd8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_PWM_Stop+0x4e>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <HAL_TIM_PWM_Stop+0x50>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d017      	beq.n	800500c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6a1a      	ldr	r2, [r3, #32]
 8004fe2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10f      	bne.n	800500c <HAL_TIM_PWM_Stop+0x84>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6a1a      	ldr	r2, [r3, #32]
 8004ff2:	f244 4344 	movw	r3, #17476	; 0x4444
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d107      	bne.n	800500c <HAL_TIM_PWM_Stop+0x84>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800500a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6a1a      	ldr	r2, [r3, #32]
 8005012:	f241 1311 	movw	r3, #4369	; 0x1111
 8005016:	4013      	ands	r3, r2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10f      	bne.n	800503c <HAL_TIM_PWM_Stop+0xb4>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6a1a      	ldr	r2, [r3, #32]
 8005022:	f244 4344 	movw	r3, #17476	; 0x4444
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d107      	bne.n	800503c <HAL_TIM_PWM_Stop+0xb4>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40012c00 	.word	0x40012c00
 8005054:	40013400 	.word	0x40013400
 8005058:	40014000 	.word	0x40014000
 800505c:	40014400 	.word	0x40014400
 8005060:	40014800 	.word	0x40014800

08005064 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e01d      	b.n	80050b2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f006 fe8a 	bl	800bda4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f000 fbea 	bl	800587c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d122      	bne.n	8005116 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d11b      	bne.n	8005116 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f06f 0202 	mvn.w	r2, #2
 80050e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fb9f 	bl	8005840 <HAL_TIM_IC_CaptureCallback>
 8005102:	e005      	b.n	8005110 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fb91 	bl	800582c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fba2 	bl	8005854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b04      	cmp	r3, #4
 8005122:	d122      	bne.n	800516a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b04      	cmp	r3, #4
 8005130:	d11b      	bne.n	800516a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f06f 0204 	mvn.w	r2, #4
 800513a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fb75 	bl	8005840 <HAL_TIM_IC_CaptureCallback>
 8005156:	e005      	b.n	8005164 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fb67 	bl	800582c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fb78 	bl	8005854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b08      	cmp	r3, #8
 8005176:	d122      	bne.n	80051be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b08      	cmp	r3, #8
 8005184:	d11b      	bne.n	80051be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f06f 0208 	mvn.w	r2, #8
 800518e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2204      	movs	r2, #4
 8005194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fb4b 	bl	8005840 <HAL_TIM_IC_CaptureCallback>
 80051aa:	e005      	b.n	80051b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fb3d 	bl	800582c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fb4e 	bl	8005854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d122      	bne.n	8005212 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	d11b      	bne.n	8005212 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f06f 0210 	mvn.w	r2, #16
 80051e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2208      	movs	r2, #8
 80051e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fb21 	bl	8005840 <HAL_TIM_IC_CaptureCallback>
 80051fe:	e005      	b.n	800520c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fb13 	bl	800582c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fb24 	bl	8005854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b01      	cmp	r3, #1
 800521e:	d10e      	bne.n	800523e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b01      	cmp	r3, #1
 800522c:	d107      	bne.n	800523e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f06f 0201 	mvn.w	r2, #1
 8005236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f003 fd89 	bl	8008d50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005248:	2b80      	cmp	r3, #128	; 0x80
 800524a:	d10e      	bne.n	800526a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005256:	2b80      	cmp	r3, #128	; 0x80
 8005258:	d107      	bne.n	800526a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f001 fa09 	bl	800667c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005278:	d10e      	bne.n	8005298 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005284:	2b80      	cmp	r3, #128	; 0x80
 8005286:	d107      	bne.n	8005298 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f001 f9fc 	bl	8006690 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a2:	2b40      	cmp	r3, #64	; 0x40
 80052a4:	d10e      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d107      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fad2 	bl	8005868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	d10e      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d107      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0220 	mvn.w	r2, #32
 80052e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f001 f9bc 	bl	8006668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052fe:	d10f      	bne.n	8005320 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800530a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800530e:	d107      	bne.n	8005320 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f001 f9c2 	bl	80066a4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800532a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800532e:	d10f      	bne.n	8005350 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800533a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800533e:	d107      	bne.n	8005350 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f001 f9b4 	bl	80066b8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800535e:	d10f      	bne.n	8005380 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800536a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800536e:	d107      	bne.n	8005380 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f001 f9a6 	bl	80066cc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800538a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800538e:	d10f      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800539a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800539e:	d107      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80053a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f001 f998 	bl	80066e0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e08a      	b.n	80054e8 <HAL_TIM_IC_ConfigChannel+0x130>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2202      	movs	r2, #2
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d11b      	bne.n	8005420 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6819      	ldr	r1, [r3, #0]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f000 fe76 	bl	80060e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699a      	ldr	r2, [r3, #24]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 020c 	bic.w	r2, r2, #12
 800540a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6999      	ldr	r1, [r3, #24]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	619a      	str	r2, [r3, #24]
 800541e:	e05a      	b.n	80054d6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b04      	cmp	r3, #4
 8005424:	d11c      	bne.n	8005460 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	6819      	ldr	r1, [r3, #0]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f000 feee 	bl	8006216 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699a      	ldr	r2, [r3, #24]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005448:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6999      	ldr	r1, [r3, #24]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	021a      	lsls	r2, r3, #8
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	619a      	str	r2, [r3, #24]
 800545e:	e03a      	b.n	80054d6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b08      	cmp	r3, #8
 8005464:	d11b      	bne.n	800549e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	6819      	ldr	r1, [r3, #0]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f000 ff3b 	bl	80062f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 020c 	bic.w	r2, r2, #12
 8005488:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69d9      	ldr	r1, [r3, #28]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	61da      	str	r2, [r3, #28]
 800549c:	e01b      	b.n	80054d6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	6819      	ldr	r1, [r3, #0]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f000 ff5b 	bl	8006368 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69da      	ldr	r2, [r3, #28]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054c0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69d9      	ldr	r1, [r3, #28]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	021a      	lsls	r2, r3, #8
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005506:	2302      	movs	r3, #2
 8005508:	e105      	b.n	8005716 <HAL_TIM_PWM_ConfigChannel+0x226>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b14      	cmp	r3, #20
 800551e:	f200 80f0 	bhi.w	8005702 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	0800557d 	.word	0x0800557d
 800552c:	08005703 	.word	0x08005703
 8005530:	08005703 	.word	0x08005703
 8005534:	08005703 	.word	0x08005703
 8005538:	080055bd 	.word	0x080055bd
 800553c:	08005703 	.word	0x08005703
 8005540:	08005703 	.word	0x08005703
 8005544:	08005703 	.word	0x08005703
 8005548:	080055ff 	.word	0x080055ff
 800554c:	08005703 	.word	0x08005703
 8005550:	08005703 	.word	0x08005703
 8005554:	08005703 	.word	0x08005703
 8005558:	0800563f 	.word	0x0800563f
 800555c:	08005703 	.word	0x08005703
 8005560:	08005703 	.word	0x08005703
 8005564:	08005703 	.word	0x08005703
 8005568:	08005681 	.word	0x08005681
 800556c:	08005703 	.word	0x08005703
 8005570:	08005703 	.word	0x08005703
 8005574:	08005703 	.word	0x08005703
 8005578:	080056c1 	.word	0x080056c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fa0a 	bl	800599c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0208 	orr.w	r2, r2, #8
 8005596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0204 	bic.w	r2, r2, #4
 80055a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6999      	ldr	r1, [r3, #24]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	619a      	str	r2, [r3, #24]
      break;
 80055ba:	e0a3      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fa7a 	bl	8005abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6999      	ldr	r1, [r3, #24]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	021a      	lsls	r2, r3, #8
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	619a      	str	r2, [r3, #24]
      break;
 80055fc:	e082      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fae3 	bl	8005bd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0208 	orr.w	r2, r2, #8
 8005618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0204 	bic.w	r2, r2, #4
 8005628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69d9      	ldr	r1, [r3, #28]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	61da      	str	r2, [r3, #28]
      break;
 800563c:	e062      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fb4b 	bl	8005ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69d9      	ldr	r1, [r3, #28]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	021a      	lsls	r2, r3, #8
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	61da      	str	r2, [r3, #28]
      break;
 800567e:	e041      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fbb4 	bl	8005df4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0208 	orr.w	r2, r2, #8
 800569a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0204 	bic.w	r2, r2, #4
 80056aa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80056be:	e021      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fbf8 	bl	8005ebc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	021a      	lsls	r2, r3, #8
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005700:	e000      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005702:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop

08005720 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005734:	2302      	movs	r3, #2
 8005736:	e031      	b.n	800579c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005748:	6839      	ldr	r1, [r7, #0]
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fc1c 	bl	8005f88 <TIM_SlaveTimer_SetConfig>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e018      	b.n	800579c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005778:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005788:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b0c      	cmp	r3, #12
 80057b6:	d831      	bhi.n	800581c <HAL_TIM_ReadCapturedValue+0x78>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057f5 	.word	0x080057f5
 80057c4:	0800581d 	.word	0x0800581d
 80057c8:	0800581d 	.word	0x0800581d
 80057cc:	0800581d 	.word	0x0800581d
 80057d0:	080057ff 	.word	0x080057ff
 80057d4:	0800581d 	.word	0x0800581d
 80057d8:	0800581d 	.word	0x0800581d
 80057dc:	0800581d 	.word	0x0800581d
 80057e0:	08005809 	.word	0x08005809
 80057e4:	0800581d 	.word	0x0800581d
 80057e8:	0800581d 	.word	0x0800581d
 80057ec:	0800581d 	.word	0x0800581d
 80057f0:	08005813 	.word	0x08005813
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fa:	60fb      	str	r3, [r7, #12]

      break;
 80057fc:	e00f      	b.n	800581e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	60fb      	str	r3, [r7, #12]

      break;
 8005806:	e00a      	b.n	800581e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580e:	60fb      	str	r3, [r7, #12]

      break;
 8005810:	e005      	b.n	800581e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	60fb      	str	r3, [r7, #12]

      break;
 800581a:	e000      	b.n	800581e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800581c:	bf00      	nop
  }

  return tmpreg;
 800581e:	68fb      	ldr	r3, [r7, #12]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a3c      	ldr	r2, [pc, #240]	; (8005980 <TIM_Base_SetConfig+0x104>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00f      	beq.n	80058b4 <TIM_Base_SetConfig+0x38>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589a:	d00b      	beq.n	80058b4 <TIM_Base_SetConfig+0x38>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a39      	ldr	r2, [pc, #228]	; (8005984 <TIM_Base_SetConfig+0x108>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <TIM_Base_SetConfig+0x38>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a38      	ldr	r2, [pc, #224]	; (8005988 <TIM_Base_SetConfig+0x10c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_Base_SetConfig+0x38>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a37      	ldr	r2, [pc, #220]	; (800598c <TIM_Base_SetConfig+0x110>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d108      	bne.n	80058c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a2d      	ldr	r2, [pc, #180]	; (8005980 <TIM_Base_SetConfig+0x104>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01b      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d4:	d017      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a2a      	ldr	r2, [pc, #168]	; (8005984 <TIM_Base_SetConfig+0x108>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a29      	ldr	r2, [pc, #164]	; (8005988 <TIM_Base_SetConfig+0x10c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00f      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a28      	ldr	r2, [pc, #160]	; (800598c <TIM_Base_SetConfig+0x110>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00b      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a27      	ldr	r2, [pc, #156]	; (8005990 <TIM_Base_SetConfig+0x114>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a26      	ldr	r2, [pc, #152]	; (8005994 <TIM_Base_SetConfig+0x118>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a25      	ldr	r2, [pc, #148]	; (8005998 <TIM_Base_SetConfig+0x11c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d108      	bne.n	8005918 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800590c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a10      	ldr	r2, [pc, #64]	; (8005980 <TIM_Base_SetConfig+0x104>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00f      	beq.n	8005964 <TIM_Base_SetConfig+0xe8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a11      	ldr	r2, [pc, #68]	; (800598c <TIM_Base_SetConfig+0x110>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00b      	beq.n	8005964 <TIM_Base_SetConfig+0xe8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a10      	ldr	r2, [pc, #64]	; (8005990 <TIM_Base_SetConfig+0x114>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d007      	beq.n	8005964 <TIM_Base_SetConfig+0xe8>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a0f      	ldr	r2, [pc, #60]	; (8005994 <TIM_Base_SetConfig+0x118>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_Base_SetConfig+0xe8>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a0e      	ldr	r2, [pc, #56]	; (8005998 <TIM_Base_SetConfig+0x11c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d103      	bne.n	800596c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	615a      	str	r2, [r3, #20]
}
 8005972:	bf00      	nop
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800
 800598c:	40013400 	.word	0x40013400
 8005990:	40014000 	.word	0x40014000
 8005994:	40014400 	.word	0x40014400
 8005998:	40014800 	.word	0x40014800

0800599c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	f023 0201 	bic.w	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0303 	bic.w	r3, r3, #3
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f023 0302 	bic.w	r3, r3, #2
 80059e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a2c      	ldr	r2, [pc, #176]	; (8005aa8 <TIM_OC1_SetConfig+0x10c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00f      	beq.n	8005a1c <TIM_OC1_SetConfig+0x80>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a2b      	ldr	r2, [pc, #172]	; (8005aac <TIM_OC1_SetConfig+0x110>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00b      	beq.n	8005a1c <TIM_OC1_SetConfig+0x80>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a2a      	ldr	r2, [pc, #168]	; (8005ab0 <TIM_OC1_SetConfig+0x114>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d007      	beq.n	8005a1c <TIM_OC1_SetConfig+0x80>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a29      	ldr	r2, [pc, #164]	; (8005ab4 <TIM_OC1_SetConfig+0x118>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <TIM_OC1_SetConfig+0x80>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a28      	ldr	r2, [pc, #160]	; (8005ab8 <TIM_OC1_SetConfig+0x11c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d10c      	bne.n	8005a36 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f023 0308 	bic.w	r3, r3, #8
 8005a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f023 0304 	bic.w	r3, r3, #4
 8005a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1b      	ldr	r2, [pc, #108]	; (8005aa8 <TIM_OC1_SetConfig+0x10c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00f      	beq.n	8005a5e <TIM_OC1_SetConfig+0xc2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a1a      	ldr	r2, [pc, #104]	; (8005aac <TIM_OC1_SetConfig+0x110>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00b      	beq.n	8005a5e <TIM_OC1_SetConfig+0xc2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a19      	ldr	r2, [pc, #100]	; (8005ab0 <TIM_OC1_SetConfig+0x114>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d007      	beq.n	8005a5e <TIM_OC1_SetConfig+0xc2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a18      	ldr	r2, [pc, #96]	; (8005ab4 <TIM_OC1_SetConfig+0x118>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_OC1_SetConfig+0xc2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a17      	ldr	r2, [pc, #92]	; (8005ab8 <TIM_OC1_SetConfig+0x11c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d111      	bne.n	8005a82 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	621a      	str	r2, [r3, #32]
}
 8005a9c:	bf00      	nop
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	40012c00 	.word	0x40012c00
 8005aac:	40013400 	.word	0x40013400
 8005ab0:	40014000 	.word	0x40014000
 8005ab4:	40014400 	.word	0x40014400
 8005ab8:	40014800 	.word	0x40014800

08005abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	f023 0210 	bic.w	r2, r3, #16
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f023 0320 	bic.w	r3, r3, #32
 8005b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a28      	ldr	r2, [pc, #160]	; (8005bbc <TIM_OC2_SetConfig+0x100>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <TIM_OC2_SetConfig+0x6c>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a27      	ldr	r2, [pc, #156]	; (8005bc0 <TIM_OC2_SetConfig+0x104>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d10d      	bne.n	8005b44 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a1d      	ldr	r2, [pc, #116]	; (8005bbc <TIM_OC2_SetConfig+0x100>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00f      	beq.n	8005b6c <TIM_OC2_SetConfig+0xb0>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a1c      	ldr	r2, [pc, #112]	; (8005bc0 <TIM_OC2_SetConfig+0x104>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00b      	beq.n	8005b6c <TIM_OC2_SetConfig+0xb0>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a1b      	ldr	r2, [pc, #108]	; (8005bc4 <TIM_OC2_SetConfig+0x108>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d007      	beq.n	8005b6c <TIM_OC2_SetConfig+0xb0>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a1a      	ldr	r2, [pc, #104]	; (8005bc8 <TIM_OC2_SetConfig+0x10c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d003      	beq.n	8005b6c <TIM_OC2_SetConfig+0xb0>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <TIM_OC2_SetConfig+0x110>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d113      	bne.n	8005b94 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	621a      	str	r2, [r3, #32]
}
 8005bae:	bf00      	nop
 8005bb0:	371c      	adds	r7, #28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40013400 	.word	0x40013400
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40014400 	.word	0x40014400
 8005bcc:	40014800 	.word	0x40014800

08005bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0303 	bic.w	r3, r3, #3
 8005c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a27      	ldr	r2, [pc, #156]	; (8005ccc <TIM_OC3_SetConfig+0xfc>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d003      	beq.n	8005c3a <TIM_OC3_SetConfig+0x6a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a26      	ldr	r2, [pc, #152]	; (8005cd0 <TIM_OC3_SetConfig+0x100>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d10d      	bne.n	8005c56 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a1c      	ldr	r2, [pc, #112]	; (8005ccc <TIM_OC3_SetConfig+0xfc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00f      	beq.n	8005c7e <TIM_OC3_SetConfig+0xae>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a1b      	ldr	r2, [pc, #108]	; (8005cd0 <TIM_OC3_SetConfig+0x100>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00b      	beq.n	8005c7e <TIM_OC3_SetConfig+0xae>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a1a      	ldr	r2, [pc, #104]	; (8005cd4 <TIM_OC3_SetConfig+0x104>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d007      	beq.n	8005c7e <TIM_OC3_SetConfig+0xae>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a19      	ldr	r2, [pc, #100]	; (8005cd8 <TIM_OC3_SetConfig+0x108>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d003      	beq.n	8005c7e <TIM_OC3_SetConfig+0xae>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a18      	ldr	r2, [pc, #96]	; (8005cdc <TIM_OC3_SetConfig+0x10c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d113      	bne.n	8005ca6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	621a      	str	r2, [r3, #32]
}
 8005cc0:	bf00      	nop
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	40012c00 	.word	0x40012c00
 8005cd0:	40013400 	.word	0x40013400
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	40014400 	.word	0x40014400
 8005cdc:	40014800 	.word	0x40014800

08005ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	031b      	lsls	r3, r3, #12
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a28      	ldr	r2, [pc, #160]	; (8005de0 <TIM_OC4_SetConfig+0x100>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_OC4_SetConfig+0x6c>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a27      	ldr	r2, [pc, #156]	; (8005de4 <TIM_OC4_SetConfig+0x104>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d10d      	bne.n	8005d68 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	031b      	lsls	r3, r3, #12
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <TIM_OC4_SetConfig+0x100>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00f      	beq.n	8005d90 <TIM_OC4_SetConfig+0xb0>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a1c      	ldr	r2, [pc, #112]	; (8005de4 <TIM_OC4_SetConfig+0x104>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00b      	beq.n	8005d90 <TIM_OC4_SetConfig+0xb0>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a1b      	ldr	r2, [pc, #108]	; (8005de8 <TIM_OC4_SetConfig+0x108>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d007      	beq.n	8005d90 <TIM_OC4_SetConfig+0xb0>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a1a      	ldr	r2, [pc, #104]	; (8005dec <TIM_OC4_SetConfig+0x10c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_OC4_SetConfig+0xb0>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a19      	ldr	r2, [pc, #100]	; (8005df0 <TIM_OC4_SetConfig+0x110>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d113      	bne.n	8005db8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d96:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d9e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	019b      	lsls	r3, r3, #6
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	019b      	lsls	r3, r3, #6
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40013400 	.word	0x40013400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40014800 	.word	0x40014800

08005df4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	041b      	lsls	r3, r3, #16
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a17      	ldr	r2, [pc, #92]	; (8005ea8 <TIM_OC5_SetConfig+0xb4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00f      	beq.n	8005e6e <TIM_OC5_SetConfig+0x7a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a16      	ldr	r2, [pc, #88]	; (8005eac <TIM_OC5_SetConfig+0xb8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00b      	beq.n	8005e6e <TIM_OC5_SetConfig+0x7a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <TIM_OC5_SetConfig+0xbc>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <TIM_OC5_SetConfig+0x7a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a14      	ldr	r2, [pc, #80]	; (8005eb4 <TIM_OC5_SetConfig+0xc0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_OC5_SetConfig+0x7a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <TIM_OC5_SetConfig+0xc4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d109      	bne.n	8005e82 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	021b      	lsls	r3, r3, #8
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	621a      	str	r2, [r3, #32]
}
 8005e9c:	bf00      	nop
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	40012c00 	.word	0x40012c00
 8005eac:	40013400 	.word	0x40013400
 8005eb0:	40014000 	.word	0x40014000
 8005eb4:	40014400 	.word	0x40014400
 8005eb8:	40014800 	.word	0x40014800

08005ebc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	051b      	lsls	r3, r3, #20
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a18      	ldr	r2, [pc, #96]	; (8005f74 <TIM_OC6_SetConfig+0xb8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00f      	beq.n	8005f38 <TIM_OC6_SetConfig+0x7c>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a17      	ldr	r2, [pc, #92]	; (8005f78 <TIM_OC6_SetConfig+0xbc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00b      	beq.n	8005f38 <TIM_OC6_SetConfig+0x7c>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a16      	ldr	r2, [pc, #88]	; (8005f7c <TIM_OC6_SetConfig+0xc0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d007      	beq.n	8005f38 <TIM_OC6_SetConfig+0x7c>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a15      	ldr	r2, [pc, #84]	; (8005f80 <TIM_OC6_SetConfig+0xc4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_OC6_SetConfig+0x7c>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a14      	ldr	r2, [pc, #80]	; (8005f84 <TIM_OC6_SetConfig+0xc8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d109      	bne.n	8005f4c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	029b      	lsls	r3, r3, #10
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	40013400 	.word	0x40013400
 8005f7c:	40014000 	.word	0x40014000
 8005f80:	40014400 	.word	0x40014400
 8005f84:	40014800 	.word	0x40014800

08005f88 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fb6:	f023 0307 	bic.w	r3, r3, #7
 8005fba:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2b60      	cmp	r3, #96	; 0x60
 8005fd4:	d06d      	beq.n	80060b2 <TIM_SlaveTimer_SetConfig+0x12a>
 8005fd6:	2b60      	cmp	r3, #96	; 0x60
 8005fd8:	d80f      	bhi.n	8005ffa <TIM_SlaveTimer_SetConfig+0x72>
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d073      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	d804      	bhi.n	8005fec <TIM_SlaveTimer_SetConfig+0x64>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d06f      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
 8005fe6:	2b10      	cmp	r3, #16
 8005fe8:	d06d      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8005fea:	e06d      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d028      	beq.n	8006042 <TIM_SlaveTimer_SetConfig+0xba>
 8005ff0:	2b50      	cmp	r3, #80	; 0x50
 8005ff2:	d054      	beq.n	800609e <TIM_SlaveTimer_SetConfig+0x116>
 8005ff4:	2b30      	cmp	r3, #48	; 0x30
 8005ff6:	d066      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8005ff8:	e066      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8005ffa:	4a36      	ldr	r2, [pc, #216]	; (80060d4 <TIM_SlaveTimer_SetConfig+0x14c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d062      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
 8006000:	4a34      	ldr	r2, [pc, #208]	; (80060d4 <TIM_SlaveTimer_SetConfig+0x14c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d808      	bhi.n	8006018 <TIM_SlaveTimer_SetConfig+0x90>
 8006006:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800600a:	d05c      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
 800600c:	4a32      	ldr	r2, [pc, #200]	; (80060d8 <TIM_SlaveTimer_SetConfig+0x150>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d059      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
 8006012:	2b70      	cmp	r3, #112	; 0x70
 8006014:	d00a      	beq.n	800602c <TIM_SlaveTimer_SetConfig+0xa4>
      break;
 8006016:	e057      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8006018:	4a30      	ldr	r2, [pc, #192]	; (80060dc <TIM_SlaveTimer_SetConfig+0x154>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d053      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
 800601e:	4a30      	ldr	r2, [pc, #192]	; (80060e0 <TIM_SlaveTimer_SetConfig+0x158>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d050      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
 8006024:	4a2f      	ldr	r2, [pc, #188]	; (80060e4 <TIM_SlaveTimer_SetConfig+0x15c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d04d      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 800602a:	e04d      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_ETR_SetConfig(htim->Instance,
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6818      	ldr	r0, [r3, #0]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	68d9      	ldr	r1, [r3, #12]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f000 f9d1 	bl	80063e2 <TIM_ETR_SetConfig>
      break;
 8006040:	e042      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x140>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b05      	cmp	r3, #5
 8006048:	d004      	beq.n	8006054 <TIM_SlaveTimer_SetConfig+0xcc>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006052:	d101      	bne.n	8006058 <TIM_SlaveTimer_SetConfig+0xd0>
        return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e038      	b.n	80060ca <TIM_SlaveTimer_SetConfig+0x142>
      tmpccer = htim->Instance->CCER;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6a1a      	ldr	r2, [r3, #32]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0201 	bic.w	r2, r2, #1
 800606e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800607e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	621a      	str	r2, [r3, #32]
      break;
 800609c:	e014      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	6899      	ldr	r1, [r3, #8]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	461a      	mov	r2, r3
 80060ac:	f000 f884 	bl	80061b8 <TIM_TI1_ConfigInputStage>
      break;
 80060b0:	e00a      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	6899      	ldr	r1, [r3, #8]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	461a      	mov	r2, r3
 80060c0:	f000 f8e6 	bl	8006290 <TIM_TI2_ConfigInputStage>
      break;
 80060c4:	e000      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x140>
      break;
 80060c6:	bf00      	nop
  }
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	00100030 	.word	0x00100030
 80060d8:	00100020 	.word	0x00100020
 80060dc:	00100060 	.word	0x00100060
 80060e0:	00100070 	.word	0x00100070
 80060e4:	00100040 	.word	0x00100040

080060e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f023 0201 	bic.w	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4a24      	ldr	r2, [pc, #144]	; (80061a4 <TIM_TI1_SetConfig+0xbc>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <TIM_TI1_SetConfig+0x56>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611c:	d00f      	beq.n	800613e <TIM_TI1_SetConfig+0x56>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4a21      	ldr	r2, [pc, #132]	; (80061a8 <TIM_TI1_SetConfig+0xc0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00b      	beq.n	800613e <TIM_TI1_SetConfig+0x56>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4a20      	ldr	r2, [pc, #128]	; (80061ac <TIM_TI1_SetConfig+0xc4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d007      	beq.n	800613e <TIM_TI1_SetConfig+0x56>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4a1f      	ldr	r2, [pc, #124]	; (80061b0 <TIM_TI1_SetConfig+0xc8>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d003      	beq.n	800613e <TIM_TI1_SetConfig+0x56>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4a1e      	ldr	r2, [pc, #120]	; (80061b4 <TIM_TI1_SetConfig+0xcc>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d101      	bne.n	8006142 <TIM_TI1_SetConfig+0x5a>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <TIM_TI1_SetConfig+0x5c>
 8006142:	2300      	movs	r3, #0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d008      	beq.n	800615a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f023 0303 	bic.w	r3, r3, #3
 800614e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e003      	b.n	8006162 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	b2db      	uxtb	r3, r3
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f023 030a 	bic.w	r3, r3, #10
 800617c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f003 030a 	and.w	r3, r3, #10
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40012c00 	.word	0x40012c00
 80061a8:	40000400 	.word	0x40000400
 80061ac:	40000800 	.word	0x40000800
 80061b0:	40013400 	.word	0x40013400
 80061b4:	40014000 	.word	0x40014000

080061b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f023 0201 	bic.w	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f023 030a 	bic.w	r3, r3, #10
 80061f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006216:	b480      	push	{r7}
 8006218:	b087      	sub	sp, #28
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607a      	str	r2, [r7, #4]
 8006222:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	f023 0210 	bic.w	r2, r3, #16
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006242:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	021b      	lsls	r3, r3, #8
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006254:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	031b      	lsls	r3, r3, #12
 800625a:	b29b      	uxth	r3, r3
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	4313      	orrs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006268:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	621a      	str	r2, [r3, #32]
}
 8006284:	bf00      	nop
 8006286:	371c      	adds	r7, #28
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f023 0210 	bic.w	r2, r3, #16
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	031b      	lsls	r3, r3, #12
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	621a      	str	r2, [r3, #32]
}
 80062e4:	bf00      	nop
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f023 0303 	bic.w	r3, r3, #3
 800631c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800632c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	b2db      	uxtb	r3, r3
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006340:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	621a      	str	r2, [r3, #32]
}
 800635c:	bf00      	nop
 800635e:	371c      	adds	r7, #28
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006394:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	031b      	lsls	r3, r3, #12
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80063ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	031b      	lsls	r3, r3, #12
 80063c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	621a      	str	r2, [r3, #32]
}
 80063d6:	bf00      	nop
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b087      	sub	sp, #28
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	607a      	str	r2, [r7, #4]
 80063ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	021a      	lsls	r2, r3, #8
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	431a      	orrs	r2, r3
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	4313      	orrs	r3, r2
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	609a      	str	r2, [r3, #8]
}
 8006416:	bf00      	nop
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006422:	b480      	push	{r7}
 8006424:	b087      	sub	sp, #28
 8006426:	af00      	add	r7, sp, #0
 8006428:	60f8      	str	r0, [r7, #12]
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f003 031f 	and.w	r3, r3, #31
 8006434:	2201      	movs	r2, #1
 8006436:	fa02 f303 	lsl.w	r3, r2, r3
 800643a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a1a      	ldr	r2, [r3, #32]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	43db      	mvns	r3, r3
 8006444:	401a      	ands	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1a      	ldr	r2, [r3, #32]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	fa01 f303 	lsl.w	r3, r1, r3
 800645a:	431a      	orrs	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	621a      	str	r2, [r3, #32]
}
 8006460:	bf00      	nop
 8006462:	371c      	adds	r7, #28
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006480:	2302      	movs	r3, #2
 8006482:	e047      	b.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1d      	ldr	r2, [pc, #116]	; (8006520 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d004      	beq.n	80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1c      	ldr	r2, [pc, #112]	; (8006524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d108      	bne.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80064d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064e6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	40012c00 	.word	0x40012c00
 8006524:	40013400 	.word	0x40013400

08006528 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006540:	2302      	movs	r3, #2
 8006542:	e087      	b.n	8006654 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	4313      	orrs	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	041b      	lsls	r3, r3, #16
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a27      	ldr	r2, [pc, #156]	; (8006660 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d004      	beq.n	80065d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a25      	ldr	r2, [pc, #148]	; (8006664 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d106      	bne.n	80065e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1e      	ldr	r2, [pc, #120]	; (8006660 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d004      	beq.n	80065f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d126      	bne.n	8006642 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	051b      	lsls	r3, r3, #20
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a0e      	ldr	r2, [pc, #56]	; (8006660 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d004      	beq.n	8006634 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a0d      	ldr	r2, [pc, #52]	; (8006664 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d106      	bne.n	8006642 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	40012c00 	.word	0x40012c00
 8006664:	40013400 	.word	0x40013400

08006668 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <Set_Can_Bytes>:
#include "main.h"
#include "canconfig.h"


void Set_Can_Bytes(uint32_t *pos, uint32_t message)
{
 80066f4:	b590      	push	{r4, r7, lr}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
	//Can_Config_Bytes[message][*pos];

	uint32_t transmit=0;
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]

	switch(Can_Config_Datas[message][*pos])
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	49a0      	ldr	r1, [pc, #640]	; (8006988 <Set_Can_Bytes+0x294>)
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	00d2      	lsls	r2, r2, #3
 800670c:	440a      	add	r2, r1
 800670e:	4413      	add	r3, r2
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	3b01      	subs	r3, #1
 8006714:	2b12      	cmp	r3, #18
 8006716:	f200 8100 	bhi.w	800691a <Set_Can_Bytes+0x226>
 800671a:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <Set_Can_Bytes+0x2c>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	0800676d 	.word	0x0800676d
 8006724:	08006775 	.word	0x08006775
 8006728:	0800677d 	.word	0x0800677d
 800672c:	08006785 	.word	0x08006785
 8006730:	0800678d 	.word	0x0800678d
 8006734:	08006795 	.word	0x08006795
 8006738:	08006923 	.word	0x08006923
 800673c:	08006923 	.word	0x08006923
 8006740:	08006923 	.word	0x08006923
 8006744:	0800679d 	.word	0x0800679d
 8006748:	080067d9 	.word	0x080067d9
 800674c:	08006815 	.word	0x08006815
 8006750:	08006851 	.word	0x08006851
 8006754:	080068df 	.word	0x080068df
 8006758:	080068e9 	.word	0x080068e9
 800675c:	080068f3 	.word	0x080068f3
 8006760:	080068fd 	.word	0x080068fd
 8006764:	08006907 	.word	0x08006907
 8006768:	08006911 	.word	0x08006911
	{
	case MESS_U5I0:
		transmit=1000;
 800676c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006770:	617b      	str	r3, [r7, #20]
		break;
 8006772:	e0d7      	b.n	8006924 <Set_Can_Bytes+0x230>

	case MESS_U5I1:
		transmit=1000;
 8006774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006778:	617b      	str	r3, [r7, #20]
		break;
 800677a:	e0d3      	b.n	8006924 <Set_Can_Bytes+0x230>

	case MESS_U6I0:
		transmit=1000;
 800677c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006780:	617b      	str	r3, [r7, #20]
		break;
 8006782:	e0cf      	b.n	8006924 <Set_Can_Bytes+0x230>

	case MESS_U6I1:
		transmit=1000;
 8006784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006788:	617b      	str	r3, [r7, #20]
		break;
 800678a:	e0cb      	b.n	8006924 <Set_Can_Bytes+0x230>

	case MESS_U7I0:
		transmit=1000;
 800678c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006790:	617b      	str	r3, [r7, #20]
		break;
 8006792:	e0c7      	b.n	8006924 <Set_Can_Bytes+0x230>

	case MESS_U7I1:
		transmit=1000;
 8006794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006798:	617b      	str	r3, [r7, #20]
		break;
 800679a:	e0c3      	b.n	8006924 <Set_Can_Bytes+0x230>
	case MESS_U7T:

		break;

	case MESS_U5V:
		switch(Can_Config_Bytes[message][*pos])
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	497a      	ldr	r1, [pc, #488]	; (800698c <Set_Can_Bytes+0x298>)
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	00d2      	lsls	r2, r2, #3
 80067a6:	440a      	add	r2, r1
 80067a8:	4413      	add	r3, r2
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d002      	beq.n	80067b6 <Set_Can_Bytes+0xc2>
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d008      	beq.n	80067c6 <Set_Can_Bytes+0xd2>
 80067b4:	e00b      	b.n	80067ce <Set_Can_Bytes+0xda>
		{
		case 1:
			transmit=(U5V_real/1000); //transmit number in V
 80067b6:	4b76      	ldr	r3, [pc, #472]	; (8006990 <Set_Can_Bytes+0x29c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a76      	ldr	r2, [pc, #472]	; (8006994 <Set_Can_Bytes+0x2a0>)
 80067bc:	fba2 2303 	umull	r2, r3, r2, r3
 80067c0:	099b      	lsrs	r3, r3, #6
 80067c2:	617b      	str	r3, [r7, #20]
			break;
 80067c4:	e007      	b.n	80067d6 <Set_Can_Bytes+0xe2>
		case 2:
			transmit=U5V_real; //transmit number in mV
 80067c6:	4b72      	ldr	r3, [pc, #456]	; (8006990 <Set_Can_Bytes+0x29c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	617b      	str	r3, [r7, #20]
			break;
 80067cc:	e003      	b.n	80067d6 <Set_Can_Bytes+0xe2>
		default:
			Set_Error(ERR_MESS_INVALID_BYTES);
 80067ce:	2061      	movs	r0, #97	; 0x61
 80067d0:	f003 fc1a 	bl	800a008 <Set_Error>
			break;
 80067d4:	bf00      	nop
		}
		break;
 80067d6:	e0a5      	b.n	8006924 <Set_Can_Bytes+0x230>

	case MESS_U6V:
		switch(Can_Config_Bytes[message][*pos])
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	496b      	ldr	r1, [pc, #428]	; (800698c <Set_Can_Bytes+0x298>)
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	00d2      	lsls	r2, r2, #3
 80067e2:	440a      	add	r2, r1
 80067e4:	4413      	add	r3, r2
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d002      	beq.n	80067f2 <Set_Can_Bytes+0xfe>
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d008      	beq.n	8006802 <Set_Can_Bytes+0x10e>
 80067f0:	e00b      	b.n	800680a <Set_Can_Bytes+0x116>
		{
		case 1:
			transmit=(U6V_real/1000); //transmit number in V
 80067f2:	4b69      	ldr	r3, [pc, #420]	; (8006998 <Set_Can_Bytes+0x2a4>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a67      	ldr	r2, [pc, #412]	; (8006994 <Set_Can_Bytes+0x2a0>)
 80067f8:	fba2 2303 	umull	r2, r3, r2, r3
 80067fc:	099b      	lsrs	r3, r3, #6
 80067fe:	617b      	str	r3, [r7, #20]
			break;
 8006800:	e007      	b.n	8006812 <Set_Can_Bytes+0x11e>
		case 2:
			transmit=U6V_real; //transmit number in mV
 8006802:	4b65      	ldr	r3, [pc, #404]	; (8006998 <Set_Can_Bytes+0x2a4>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	617b      	str	r3, [r7, #20]
			break;
 8006808:	e003      	b.n	8006812 <Set_Can_Bytes+0x11e>
		default:
			Set_Error(ERR_MESS_INVALID_BYTES);
 800680a:	2061      	movs	r0, #97	; 0x61
 800680c:	f003 fbfc 	bl	800a008 <Set_Error>
			break;
 8006810:	bf00      	nop
		}
		break;
 8006812:	e087      	b.n	8006924 <Set_Can_Bytes+0x230>

	case MESS_U7V:
		switch(Can_Config_Bytes[message][*pos])
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	495c      	ldr	r1, [pc, #368]	; (800698c <Set_Can_Bytes+0x298>)
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	00d2      	lsls	r2, r2, #3
 800681e:	440a      	add	r2, r1
 8006820:	4413      	add	r3, r2
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d002      	beq.n	800682e <Set_Can_Bytes+0x13a>
 8006828:	2b02      	cmp	r3, #2
 800682a:	d008      	beq.n	800683e <Set_Can_Bytes+0x14a>
 800682c:	e00b      	b.n	8006846 <Set_Can_Bytes+0x152>
		{
		case 1:
			transmit=(U7V_real/1000); //transmit number in V
 800682e:	4b5b      	ldr	r3, [pc, #364]	; (800699c <Set_Can_Bytes+0x2a8>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a58      	ldr	r2, [pc, #352]	; (8006994 <Set_Can_Bytes+0x2a0>)
 8006834:	fba2 2303 	umull	r2, r3, r2, r3
 8006838:	099b      	lsrs	r3, r3, #6
 800683a:	617b      	str	r3, [r7, #20]
			break;
 800683c:	e007      	b.n	800684e <Set_Can_Bytes+0x15a>
		case 2:
			transmit=U7V_real; //transmit number in mV
 800683e:	4b57      	ldr	r3, [pc, #348]	; (800699c <Set_Can_Bytes+0x2a8>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	617b      	str	r3, [r7, #20]
			break;
 8006844:	e003      	b.n	800684e <Set_Can_Bytes+0x15a>
		default:
			Set_Error(ERR_MESS_INVALID_BYTES);
 8006846:	2061      	movs	r0, #97	; 0x61
 8006848:	f003 fbde 	bl	800a008 <Set_Error>
			break;
 800684c:	bf00      	nop
		}
		break;
 800684e:	e069      	b.n	8006924 <Set_Can_Bytes+0x230>

	case MESS_DI:
		switch(Can_Config_Bytes[message][*pos])
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	494d      	ldr	r1, [pc, #308]	; (800698c <Set_Can_Bytes+0x298>)
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	00d2      	lsls	r2, r2, #3
 800685a:	440a      	add	r2, r1
 800685c:	4413      	add	r3, r2
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d137      	bne.n	80068d4 <Set_Can_Bytes+0x1e0>
		{
		case 1:
			//DIO4 still not working, but we send whatever it says anyway
			transmit=(HAL_GPIO_ReadPin(DIO3.PORT, DIO3.PIN)<<0)|(HAL_GPIO_ReadPin(DIO4.PORT, DIO4.PIN)<<1)|(HAL_GPIO_ReadPin(DIO5.PORT, DIO5.PIN)<<2)|(HAL_GPIO_ReadPin(DIO6.PORT, DIO6.PIN)<<3)|(HAL_GPIO_ReadPin(DIO15.PORT, DIO15.PIN)<<4);
 8006864:	4b4e      	ldr	r3, [pc, #312]	; (80069a0 <Set_Can_Bytes+0x2ac>)
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	4b4d      	ldr	r3, [pc, #308]	; (80069a0 <Set_Can_Bytes+0x2ac>)
 800686a:	889b      	ldrh	r3, [r3, #4]
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f7fc ffe4 	bl	800383c <HAL_GPIO_ReadPin>
 8006874:	4603      	mov	r3, r0
 8006876:	461c      	mov	r4, r3
 8006878:	4b4a      	ldr	r3, [pc, #296]	; (80069a4 <Set_Can_Bytes+0x2b0>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	4b49      	ldr	r3, [pc, #292]	; (80069a4 <Set_Can_Bytes+0x2b0>)
 800687e:	889b      	ldrh	r3, [r3, #4]
 8006880:	4619      	mov	r1, r3
 8006882:	4610      	mov	r0, r2
 8006884:	f7fc ffda 	bl	800383c <HAL_GPIO_ReadPin>
 8006888:	4603      	mov	r3, r0
 800688a:	005b      	lsls	r3, r3, #1
 800688c:	431c      	orrs	r4, r3
 800688e:	4b46      	ldr	r3, [pc, #280]	; (80069a8 <Set_Can_Bytes+0x2b4>)
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	4b45      	ldr	r3, [pc, #276]	; (80069a8 <Set_Can_Bytes+0x2b4>)
 8006894:	889b      	ldrh	r3, [r3, #4]
 8006896:	4619      	mov	r1, r3
 8006898:	4610      	mov	r0, r2
 800689a:	f7fc ffcf 	bl	800383c <HAL_GPIO_ReadPin>
 800689e:	4603      	mov	r3, r0
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	431c      	orrs	r4, r3
 80068a4:	4b41      	ldr	r3, [pc, #260]	; (80069ac <Set_Can_Bytes+0x2b8>)
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	4b40      	ldr	r3, [pc, #256]	; (80069ac <Set_Can_Bytes+0x2b8>)
 80068aa:	889b      	ldrh	r3, [r3, #4]
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f7fc ffc4 	bl	800383c <HAL_GPIO_ReadPin>
 80068b4:	4603      	mov	r3, r0
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	431c      	orrs	r4, r3
 80068ba:	4b3d      	ldr	r3, [pc, #244]	; (80069b0 <Set_Can_Bytes+0x2bc>)
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	4b3c      	ldr	r3, [pc, #240]	; (80069b0 <Set_Can_Bytes+0x2bc>)
 80068c0:	889b      	ldrh	r3, [r3, #4]
 80068c2:	4619      	mov	r1, r3
 80068c4:	4610      	mov	r0, r2
 80068c6:	f7fc ffb9 	bl	800383c <HAL_GPIO_ReadPin>
 80068ca:	4603      	mov	r3, r0
 80068cc:	011b      	lsls	r3, r3, #4
 80068ce:	4323      	orrs	r3, r4
 80068d0:	617b      	str	r3, [r7, #20]
			break;
 80068d2:	e003      	b.n	80068dc <Set_Can_Bytes+0x1e8>
		default:
			Set_Error(ERR_MESS_INVALID_BYTES);
 80068d4:	2061      	movs	r0, #97	; 0x61
 80068d6:	f003 fb97 	bl	800a008 <Set_Error>
			break;
 80068da:	bf00      	nop
		}
		break;
 80068dc:	e022      	b.n	8006924 <Set_Can_Bytes+0x230>

	//for these we have the same transmit regardless of how many bytes it will use; this means it is easy to overflow if one byte is used, but we want to send smaller frequencies (up to 255Hz) on one byte
	//this also means there is no warning for wrong number of bytes though
	case MESS_PWM0_Freq:
		transmit=Calculate_PWM_Freq(0);
 80068de:	2000      	movs	r0, #0
 80068e0:	f004 feb4 	bl	800b64c <Calculate_PWM_Freq>
 80068e4:	6178      	str	r0, [r7, #20]
		break;
 80068e6:	e01d      	b.n	8006924 <Set_Can_Bytes+0x230>
	case MESS_PWM0_DC:
		transmit=Calculate_PWM_DC(0);
 80068e8:	2000      	movs	r0, #0
 80068ea:	f004 fe3f 	bl	800b56c <Calculate_PWM_DC>
 80068ee:	6178      	str	r0, [r7, #20]
		break;
 80068f0:	e018      	b.n	8006924 <Set_Can_Bytes+0x230>
	case MESS_PWM3_Freq:
		transmit=Calculate_PWM_Freq(3);
 80068f2:	2003      	movs	r0, #3
 80068f4:	f004 feaa 	bl	800b64c <Calculate_PWM_Freq>
 80068f8:	6178      	str	r0, [r7, #20]
		break;
 80068fa:	e013      	b.n	8006924 <Set_Can_Bytes+0x230>
	case MESS_PWM3_DC:
		transmit=Calculate_PWM_DC(3);
 80068fc:	2003      	movs	r0, #3
 80068fe:	f004 fe35 	bl	800b56c <Calculate_PWM_DC>
 8006902:	6178      	str	r0, [r7, #20]
		break;
 8006904:	e00e      	b.n	8006924 <Set_Can_Bytes+0x230>
	case MESS_PWM4_Freq:
		transmit=Calculate_PWM_Freq(4);
 8006906:	2004      	movs	r0, #4
 8006908:	f004 fea0 	bl	800b64c <Calculate_PWM_Freq>
 800690c:	6178      	str	r0, [r7, #20]
		break;
 800690e:	e009      	b.n	8006924 <Set_Can_Bytes+0x230>
	case MESS_PWM4_DC:
		transmit=Calculate_PWM_DC(4);
 8006910:	2004      	movs	r0, #4
 8006912:	f004 fe2b 	bl	800b56c <Calculate_PWM_DC>
 8006916:	6178      	str	r0, [r7, #20]
		break;
 8006918:	e004      	b.n	8006924 <Set_Can_Bytes+0x230>

	default:
		Set_Error(ERR_MESS_UNDEFINED);
 800691a:	2062      	movs	r0, #98	; 0x62
 800691c:	f003 fb74 	bl	800a008 <Set_Error>
		break;
 8006920:	e000      	b.n	8006924 <Set_Can_Bytes+0x230>
		break;
 8006922:	bf00      	nop
	}

	uint32_t temp_pos = *pos;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<Can_Config_Bytes[message][temp_pos]; i++)
 800692a:	2300      	movs	r3, #0
 800692c:	613b      	str	r3, [r7, #16]
 800692e:	e01c      	b.n	800696a <Set_Can_Bytes+0x276>
	{
		//fill the least significant byte first
		CANTxData[temp_pos+(Can_Config_Bytes[message][temp_pos]-i-1)] = transmit>>(i*8) & 0xFF;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	fa22 f103 	lsr.w	r1, r2, r3
 800693a:	4a14      	ldr	r2, [pc, #80]	; (800698c <Set_Can_Bytes+0x298>)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	441a      	add	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4413      	add	r3, r2
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad2      	subs	r2, r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	3b01      	subs	r3, #1
 8006954:	b2c9      	uxtb	r1, r1
 8006956:	4a17      	ldr	r2, [pc, #92]	; (80069b4 <Set_Can_Bytes+0x2c0>)
 8006958:	54d1      	strb	r1, [r2, r3]
		//TODO: seems sometimes transmit value is corrrupted when writing to flash, after I have sending without errors check if that is a thing still

		*pos+=1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	601a      	str	r2, [r3, #0]
	for(uint32_t i=0; i<Can_Config_Bytes[message][temp_pos]; i++)
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	3301      	adds	r3, #1
 8006968:	613b      	str	r3, [r7, #16]
 800696a:	4a08      	ldr	r2, [pc, #32]	; (800698c <Set_Can_Bytes+0x298>)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	441a      	add	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	4293      	cmp	r3, r2
 800697e:	d3d7      	bcc.n	8006930 <Set_Can_Bytes+0x23c>
	}

}
 8006980:	bf00      	nop
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	bd90      	pop	{r4, r7, pc}
 8006988:	2000019c 	.word	0x2000019c
 800698c:	200002f4 	.word	0x200002f4
 8006990:	20000b24 	.word	0x20000b24
 8006994:	10624dd3 	.word	0x10624dd3
 8006998:	20000938 	.word	0x20000938
 800699c:	20000728 	.word	0x20000728
 80069a0:	0800c284 	.word	0x0800c284
 80069a4:	0800c28c 	.word	0x0800c28c
 80069a8:	0800c294 	.word	0x0800c294
 80069ac:	0800c29c 	.word	0x0800c29c
 80069b0:	0800c2a4 	.word	0x0800c2a4
 80069b4:	20000920 	.word	0x20000920

080069b8 <Check_I0_Warn>:
uint8_t U6I1_active_counter;
uint8_t U7I0_active_counter;
uint8_t U7I1_active_counter;

void Check_I0_Warn()
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
	//for currents calculation is done in the interrupt
	if (U5I0_real>warn_overcurrent_U5I0)
 80069bc:	4b53      	ldr	r3, [pc, #332]	; (8006b0c <Check_I0_Warn+0x154>)
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	4b53      	ldr	r3, [pc, #332]	; (8006b10 <Check_I0_Warn+0x158>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d202      	bcs.n	80069d0 <Check_I0_Warn+0x18>
	{
		Set_Error(WARN_OVERCURR_U5I0);
 80069ca:	20c6      	movs	r0, #198	; 0xc6
 80069cc:	f003 fb1c 	bl	800a008 <Set_Error>
	}
	if (U5I0_real<warn_undercurrent_U5I0 && warn_undercurrent_U5I0>0 && U5I0_active && U5I0_active_counter>I_ROLLING_AVERAGE)
 80069d0:	4b50      	ldr	r3, [pc, #320]	; (8006b14 <Check_I0_Warn+0x15c>)
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	461a      	mov	r2, r3
 80069d6:	4b4e      	ldr	r3, [pc, #312]	; (8006b10 <Check_I0_Warn+0x158>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d90f      	bls.n	80069fe <Check_I0_Warn+0x46>
 80069de:	4b4d      	ldr	r3, [pc, #308]	; (8006b14 <Check_I0_Warn+0x15c>)
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00b      	beq.n	80069fe <Check_I0_Warn+0x46>
 80069e6:	4b4c      	ldr	r3, [pc, #304]	; (8006b18 <Check_I0_Warn+0x160>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d007      	beq.n	80069fe <Check_I0_Warn+0x46>
 80069ee:	4b4b      	ldr	r3, [pc, #300]	; (8006b1c <Check_I0_Warn+0x164>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	2b10      	cmp	r3, #16
 80069f4:	d903      	bls.n	80069fe <Check_I0_Warn+0x46>
	{
		Set_Error(WARN_UNDERCURR_U5I0);
 80069f6:	20c5      	movs	r0, #197	; 0xc5
 80069f8:	f003 fb06 	bl	800a008 <Set_Error>
 80069fc:	e015      	b.n	8006a2a <Check_I0_Warn+0x72>
	}
	else if (U5I0_active && U5I0_active_counter<=I_ROLLING_AVERAGE)
 80069fe:	4b46      	ldr	r3, [pc, #280]	; (8006b18 <Check_I0_Warn+0x160>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00a      	beq.n	8006a1c <Check_I0_Warn+0x64>
 8006a06:	4b45      	ldr	r3, [pc, #276]	; (8006b1c <Check_I0_Warn+0x164>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b10      	cmp	r3, #16
 8006a0c:	d806      	bhi.n	8006a1c <Check_I0_Warn+0x64>
	{
		U5I0_active_counter++;
 8006a0e:	4b43      	ldr	r3, [pc, #268]	; (8006b1c <Check_I0_Warn+0x164>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	3301      	adds	r3, #1
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	4b41      	ldr	r3, [pc, #260]	; (8006b1c <Check_I0_Warn+0x164>)
 8006a18:	701a      	strb	r2, [r3, #0]
 8006a1a:	e006      	b.n	8006a2a <Check_I0_Warn+0x72>
	}
	else if (U5I0_active_counter)
 8006a1c:	4b3f      	ldr	r3, [pc, #252]	; (8006b1c <Check_I0_Warn+0x164>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <Check_I0_Warn+0x72>
	{
		U5I0_active_counter=0;
 8006a24:	4b3d      	ldr	r3, [pc, #244]	; (8006b1c <Check_I0_Warn+0x164>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	701a      	strb	r2, [r3, #0]
	}

	if (U6I0_real>warn_overcurrent_U6I0)
 8006a2a:	4b3d      	ldr	r3, [pc, #244]	; (8006b20 <Check_I0_Warn+0x168>)
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	4b3c      	ldr	r3, [pc, #240]	; (8006b24 <Check_I0_Warn+0x16c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d202      	bcs.n	8006a3e <Check_I0_Warn+0x86>
	{
		Set_Error(WARN_OVERCURR_U6I0);
 8006a38:	20cf      	movs	r0, #207	; 0xcf
 8006a3a:	f003 fae5 	bl	800a008 <Set_Error>
	}
	if (U6I0_real<warn_undercurrent_U6I0 && warn_undercurrent_U6I0>0 && U6I0_active && U6I0_active_counter>I_ROLLING_AVERAGE)
 8006a3e:	4b3a      	ldr	r3, [pc, #232]	; (8006b28 <Check_I0_Warn+0x170>)
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	4b37      	ldr	r3, [pc, #220]	; (8006b24 <Check_I0_Warn+0x16c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d90f      	bls.n	8006a6c <Check_I0_Warn+0xb4>
 8006a4c:	4b36      	ldr	r3, [pc, #216]	; (8006b28 <Check_I0_Warn+0x170>)
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <Check_I0_Warn+0xb4>
 8006a54:	4b35      	ldr	r3, [pc, #212]	; (8006b2c <Check_I0_Warn+0x174>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d007      	beq.n	8006a6c <Check_I0_Warn+0xb4>
 8006a5c:	4b34      	ldr	r3, [pc, #208]	; (8006b30 <Check_I0_Warn+0x178>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b10      	cmp	r3, #16
 8006a62:	d903      	bls.n	8006a6c <Check_I0_Warn+0xb4>
	{
		Set_Error(WARN_UNDERCURR_U6I0);
 8006a64:	20ce      	movs	r0, #206	; 0xce
 8006a66:	f003 facf 	bl	800a008 <Set_Error>
 8006a6a:	e015      	b.n	8006a98 <Check_I0_Warn+0xe0>
	}
	else if (U6I0_active && U6I0_active_counter<=I_ROLLING_AVERAGE)
 8006a6c:	4b2f      	ldr	r3, [pc, #188]	; (8006b2c <Check_I0_Warn+0x174>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00a      	beq.n	8006a8a <Check_I0_Warn+0xd2>
 8006a74:	4b2e      	ldr	r3, [pc, #184]	; (8006b30 <Check_I0_Warn+0x178>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b10      	cmp	r3, #16
 8006a7a:	d806      	bhi.n	8006a8a <Check_I0_Warn+0xd2>
	{
		U6I0_active_counter++;
 8006a7c:	4b2c      	ldr	r3, [pc, #176]	; (8006b30 <Check_I0_Warn+0x178>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	3301      	adds	r3, #1
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	4b2a      	ldr	r3, [pc, #168]	; (8006b30 <Check_I0_Warn+0x178>)
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	e006      	b.n	8006a98 <Check_I0_Warn+0xe0>
	}
	else if (U6I0_active_counter)
 8006a8a:	4b29      	ldr	r3, [pc, #164]	; (8006b30 <Check_I0_Warn+0x178>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d002      	beq.n	8006a98 <Check_I0_Warn+0xe0>
	{
		U6I0_active_counter=0;
 8006a92:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <Check_I0_Warn+0x178>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	701a      	strb	r2, [r3, #0]
	}

	if (U7I0_real>warn_overcurrent_U7I0)
 8006a98:	4b26      	ldr	r3, [pc, #152]	; (8006b34 <Check_I0_Warn+0x17c>)
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4b26      	ldr	r3, [pc, #152]	; (8006b38 <Check_I0_Warn+0x180>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d202      	bcs.n	8006aac <Check_I0_Warn+0xf4>
	{
		Set_Error(WARN_OVERCURR_U7I0);
 8006aa6:	20d8      	movs	r0, #216	; 0xd8
 8006aa8:	f003 faae 	bl	800a008 <Set_Error>
	}
	if (U7I0_real<warn_undercurrent_U7I0 && warn_undercurrent_U7I0>0 && U7I0_active && U7I0_active_counter>I_ROLLING_AVERAGE)
 8006aac:	4b23      	ldr	r3, [pc, #140]	; (8006b3c <Check_I0_Warn+0x184>)
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	4b21      	ldr	r3, [pc, #132]	; (8006b38 <Check_I0_Warn+0x180>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d90f      	bls.n	8006ada <Check_I0_Warn+0x122>
 8006aba:	4b20      	ldr	r3, [pc, #128]	; (8006b3c <Check_I0_Warn+0x184>)
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00b      	beq.n	8006ada <Check_I0_Warn+0x122>
 8006ac2:	4b1f      	ldr	r3, [pc, #124]	; (8006b40 <Check_I0_Warn+0x188>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d007      	beq.n	8006ada <Check_I0_Warn+0x122>
 8006aca:	4b1e      	ldr	r3, [pc, #120]	; (8006b44 <Check_I0_Warn+0x18c>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	2b10      	cmp	r3, #16
 8006ad0:	d903      	bls.n	8006ada <Check_I0_Warn+0x122>
	{
		Set_Error(WARN_UNDERCURR_U7I0);
 8006ad2:	20d7      	movs	r0, #215	; 0xd7
 8006ad4:	f003 fa98 	bl	800a008 <Set_Error>
 8006ad8:	e016      	b.n	8006b08 <Check_I0_Warn+0x150>
	}
	else if (U7I0_active && U7I0_active_counter<=I_ROLLING_AVERAGE)
 8006ada:	4b19      	ldr	r3, [pc, #100]	; (8006b40 <Check_I0_Warn+0x188>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <Check_I0_Warn+0x140>
 8006ae2:	4b18      	ldr	r3, [pc, #96]	; (8006b44 <Check_I0_Warn+0x18c>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b10      	cmp	r3, #16
 8006ae8:	d806      	bhi.n	8006af8 <Check_I0_Warn+0x140>
	{
		U7I0_active_counter++;
 8006aea:	4b16      	ldr	r3, [pc, #88]	; (8006b44 <Check_I0_Warn+0x18c>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	3301      	adds	r3, #1
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	4b14      	ldr	r3, [pc, #80]	; (8006b44 <Check_I0_Warn+0x18c>)
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	e007      	b.n	8006b08 <Check_I0_Warn+0x150>
	}
	else if (U7I0_active_counter)
 8006af8:	4b12      	ldr	r3, [pc, #72]	; (8006b44 <Check_I0_Warn+0x18c>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <Check_I0_Warn+0x150>
	{
		U7I0_active_counter=0;
 8006b00:	4b10      	ldr	r3, [pc, #64]	; (8006b44 <Check_I0_Warn+0x18c>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	701a      	strb	r2, [r3, #0]
	}
}
 8006b06:	e7ff      	b.n	8006b08 <Check_I0_Warn+0x150>
 8006b08:	bf00      	nop
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	200005ec 	.word	0x200005ec
 8006b10:	200005a8 	.word	0x200005a8
 8006b14:	20000220 	.word	0x20000220
 8006b18:	20000784 	.word	0x20000784
 8006b1c:	200000ad 	.word	0x200000ad
 8006b20:	20000244 	.word	0x20000244
 8006b24:	20000788 	.word	0x20000788
 8006b28:	20000b1c 	.word	0x20000b1c
 8006b2c:	2000077d 	.word	0x2000077d
 8006b30:	200000af 	.word	0x200000af
 8006b34:	20000660 	.word	0x20000660
 8006b38:	20000378 	.word	0x20000378
 8006b3c:	2000093c 	.word	0x2000093c
 8006b40:	200003be 	.word	0x200003be
 8006b44:	200000ae 	.word	0x200000ae

08006b48 <Check_I1_Warn>:

void Check_I1_Warn()
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
	//for currents calculation is done in the interrupt
	if (U5I1_real>warn_overcurrent_U5I1)
 8006b4c:	4b53      	ldr	r3, [pc, #332]	; (8006c9c <Check_I1_Warn+0x154>)
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	461a      	mov	r2, r3
 8006b52:	4b53      	ldr	r3, [pc, #332]	; (8006ca0 <Check_I1_Warn+0x158>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d202      	bcs.n	8006b60 <Check_I1_Warn+0x18>
	{
		Set_Error(WARN_OVERCURR_U5I1);
 8006b5a:	20c8      	movs	r0, #200	; 0xc8
 8006b5c:	f003 fa54 	bl	800a008 <Set_Error>
	}
	if (U5I1_real<warn_undercurrent_U5I1 && warn_undercurrent_U5I1>0 && U5I1_active && U5I1_active_counter>I_ROLLING_AVERAGE)
 8006b60:	4b50      	ldr	r3, [pc, #320]	; (8006ca4 <Check_I1_Warn+0x15c>)
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	4b4e      	ldr	r3, [pc, #312]	; (8006ca0 <Check_I1_Warn+0x158>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d90f      	bls.n	8006b8e <Check_I1_Warn+0x46>
 8006b6e:	4b4d      	ldr	r3, [pc, #308]	; (8006ca4 <Check_I1_Warn+0x15c>)
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00b      	beq.n	8006b8e <Check_I1_Warn+0x46>
 8006b76:	4b4c      	ldr	r3, [pc, #304]	; (8006ca8 <Check_I1_Warn+0x160>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d007      	beq.n	8006b8e <Check_I1_Warn+0x46>
 8006b7e:	4b4b      	ldr	r3, [pc, #300]	; (8006cac <Check_I1_Warn+0x164>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	2b10      	cmp	r3, #16
 8006b84:	d903      	bls.n	8006b8e <Check_I1_Warn+0x46>
	{
		Set_Error(WARN_UNDERCURR_U5I1);
 8006b86:	20c7      	movs	r0, #199	; 0xc7
 8006b88:	f003 fa3e 	bl	800a008 <Set_Error>
 8006b8c:	e015      	b.n	8006bba <Check_I1_Warn+0x72>
	}
	else if (U5I1_active && U5I1_active_counter<=I_ROLLING_AVERAGE)
 8006b8e:	4b46      	ldr	r3, [pc, #280]	; (8006ca8 <Check_I1_Warn+0x160>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <Check_I1_Warn+0x64>
 8006b96:	4b45      	ldr	r3, [pc, #276]	; (8006cac <Check_I1_Warn+0x164>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	2b10      	cmp	r3, #16
 8006b9c:	d806      	bhi.n	8006bac <Check_I1_Warn+0x64>
	{
		U5I1_active_counter++;
 8006b9e:	4b43      	ldr	r3, [pc, #268]	; (8006cac <Check_I1_Warn+0x164>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	4b41      	ldr	r3, [pc, #260]	; (8006cac <Check_I1_Warn+0x164>)
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	e006      	b.n	8006bba <Check_I1_Warn+0x72>
	}
	else if (U5I1_active_counter)
 8006bac:	4b3f      	ldr	r3, [pc, #252]	; (8006cac <Check_I1_Warn+0x164>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <Check_I1_Warn+0x72>
	{
		U5I1_active_counter=0;
 8006bb4:	4b3d      	ldr	r3, [pc, #244]	; (8006cac <Check_I1_Warn+0x164>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	701a      	strb	r2, [r3, #0]
	}

	if (U6I1_real>warn_overcurrent_U6I1)
 8006bba:	4b3d      	ldr	r3, [pc, #244]	; (8006cb0 <Check_I1_Warn+0x168>)
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	4b3c      	ldr	r3, [pc, #240]	; (8006cb4 <Check_I1_Warn+0x16c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d202      	bcs.n	8006bce <Check_I1_Warn+0x86>
	{
		Set_Error(WARN_OVERCURR_U6I1);
 8006bc8:	20d1      	movs	r0, #209	; 0xd1
 8006bca:	f003 fa1d 	bl	800a008 <Set_Error>
	}
	if (U6I1_real<warn_undercurrent_U6I1 && warn_undercurrent_U6I1>0 && U6I1_active && U6I1_active_counter>I_ROLLING_AVERAGE)
 8006bce:	4b3a      	ldr	r3, [pc, #232]	; (8006cb8 <Check_I1_Warn+0x170>)
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	4b37      	ldr	r3, [pc, #220]	; (8006cb4 <Check_I1_Warn+0x16c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d90f      	bls.n	8006bfc <Check_I1_Warn+0xb4>
 8006bdc:	4b36      	ldr	r3, [pc, #216]	; (8006cb8 <Check_I1_Warn+0x170>)
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00b      	beq.n	8006bfc <Check_I1_Warn+0xb4>
 8006be4:	4b35      	ldr	r3, [pc, #212]	; (8006cbc <Check_I1_Warn+0x174>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d007      	beq.n	8006bfc <Check_I1_Warn+0xb4>
 8006bec:	4b34      	ldr	r3, [pc, #208]	; (8006cc0 <Check_I1_Warn+0x178>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b10      	cmp	r3, #16
 8006bf2:	d903      	bls.n	8006bfc <Check_I1_Warn+0xb4>
	{
		Set_Error(WARN_UNDERCURR_U6I1);
 8006bf4:	20d0      	movs	r0, #208	; 0xd0
 8006bf6:	f003 fa07 	bl	800a008 <Set_Error>
 8006bfa:	e015      	b.n	8006c28 <Check_I1_Warn+0xe0>
	}
	else if (U6I1_active && U6I1_active_counter<=I_ROLLING_AVERAGE)
 8006bfc:	4b2f      	ldr	r3, [pc, #188]	; (8006cbc <Check_I1_Warn+0x174>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00a      	beq.n	8006c1a <Check_I1_Warn+0xd2>
 8006c04:	4b2e      	ldr	r3, [pc, #184]	; (8006cc0 <Check_I1_Warn+0x178>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b10      	cmp	r3, #16
 8006c0a:	d806      	bhi.n	8006c1a <Check_I1_Warn+0xd2>
	{
		U6I1_active_counter++;
 8006c0c:	4b2c      	ldr	r3, [pc, #176]	; (8006cc0 <Check_I1_Warn+0x178>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	3301      	adds	r3, #1
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	4b2a      	ldr	r3, [pc, #168]	; (8006cc0 <Check_I1_Warn+0x178>)
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	e006      	b.n	8006c28 <Check_I1_Warn+0xe0>
	}
	else if (U6I1_active_counter)
 8006c1a:	4b29      	ldr	r3, [pc, #164]	; (8006cc0 <Check_I1_Warn+0x178>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <Check_I1_Warn+0xe0>
	{
		U6I1_active_counter=0;
 8006c22:	4b27      	ldr	r3, [pc, #156]	; (8006cc0 <Check_I1_Warn+0x178>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	701a      	strb	r2, [r3, #0]
	}

	if (U7I1_real>warn_overcurrent_U7I1)
 8006c28:	4b26      	ldr	r3, [pc, #152]	; (8006cc4 <Check_I1_Warn+0x17c>)
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	4b26      	ldr	r3, [pc, #152]	; (8006cc8 <Check_I1_Warn+0x180>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d202      	bcs.n	8006c3c <Check_I1_Warn+0xf4>
	{
		Set_Error(WARN_OVERCURR_U7I1);
 8006c36:	20da      	movs	r0, #218	; 0xda
 8006c38:	f003 f9e6 	bl	800a008 <Set_Error>
	}
	if (U7I1_real<warn_undercurrent_U7I1 && warn_undercurrent_U7I1>0 && U7I1_active && U7I1_active_counter>I_ROLLING_AVERAGE)
 8006c3c:	4b23      	ldr	r3, [pc, #140]	; (8006ccc <Check_I1_Warn+0x184>)
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	4b21      	ldr	r3, [pc, #132]	; (8006cc8 <Check_I1_Warn+0x180>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d90f      	bls.n	8006c6a <Check_I1_Warn+0x122>
 8006c4a:	4b20      	ldr	r3, [pc, #128]	; (8006ccc <Check_I1_Warn+0x184>)
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00b      	beq.n	8006c6a <Check_I1_Warn+0x122>
 8006c52:	4b1f      	ldr	r3, [pc, #124]	; (8006cd0 <Check_I1_Warn+0x188>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d007      	beq.n	8006c6a <Check_I1_Warn+0x122>
 8006c5a:	4b1e      	ldr	r3, [pc, #120]	; (8006cd4 <Check_I1_Warn+0x18c>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b10      	cmp	r3, #16
 8006c60:	d903      	bls.n	8006c6a <Check_I1_Warn+0x122>
	{
		Set_Error(WARN_UNDERCURR_U7I1);
 8006c62:	20d9      	movs	r0, #217	; 0xd9
 8006c64:	f003 f9d0 	bl	800a008 <Set_Error>
 8006c68:	e016      	b.n	8006c98 <Check_I1_Warn+0x150>
	}
	else if (U7I1_active && U7I1_active_counter<=I_ROLLING_AVERAGE)
 8006c6a:	4b19      	ldr	r3, [pc, #100]	; (8006cd0 <Check_I1_Warn+0x188>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <Check_I1_Warn+0x140>
 8006c72:	4b18      	ldr	r3, [pc, #96]	; (8006cd4 <Check_I1_Warn+0x18c>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b10      	cmp	r3, #16
 8006c78:	d806      	bhi.n	8006c88 <Check_I1_Warn+0x140>
	{
		U7I1_active_counter++;
 8006c7a:	4b16      	ldr	r3, [pc, #88]	; (8006cd4 <Check_I1_Warn+0x18c>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	4b14      	ldr	r3, [pc, #80]	; (8006cd4 <Check_I1_Warn+0x18c>)
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	e007      	b.n	8006c98 <Check_I1_Warn+0x150>
	}
	else if (U7I1_active_counter)
 8006c88:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <Check_I1_Warn+0x18c>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <Check_I1_Warn+0x150>
	{
		U7I1_active_counter=0;
 8006c90:	4b10      	ldr	r3, [pc, #64]	; (8006cd4 <Check_I1_Warn+0x18c>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	701a      	strb	r2, [r3, #0]
	}
}
 8006c96:	e7ff      	b.n	8006c98 <Check_I1_Warn+0x150>
 8006c98:	bf00      	nop
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20000a80 	.word	0x20000a80
 8006ca0:	200006b0 	.word	0x200006b0
 8006ca4:	2000098a 	.word	0x2000098a
 8006ca8:	2000088c 	.word	0x2000088c
 8006cac:	200000b1 	.word	0x200000b1
 8006cb0:	20000874 	.word	0x20000874
 8006cb4:	20000b20 	.word	0x20000b20
 8006cb8:	20000914 	.word	0x20000914
 8006cbc:	200006b5 	.word	0x200006b5
 8006cc0:	200000b0 	.word	0x200000b0
 8006cc4:	200004a8 	.word	0x200004a8
 8006cc8:	20000590 	.word	0x20000590
 8006ccc:	20000116 	.word	0x20000116
 8006cd0:	20000442 	.word	0x20000442
 8006cd4:	200000ac 	.word	0x200000ac

08006cd8 <Check_T_Warn>:

void Check_T_Warn()
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
	uint32_t U5T_raw=0; uint32_t U6T_raw=1; uint32_t U7T_raw=0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	60bb      	str	r3, [r7, #8]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	607b      	str	r3, [r7, #4]
	for(uint32_t i=0; i<T_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 8006cea:	2300      	movs	r3, #0
 8006cec:	603b      	str	r3, [r7, #0]
 8006cee:	e017      	b.n	8006d20 <Check_T_Warn+0x48>
	{
		U5T_raw+=U5T[i];
 8006cf0:	4a3a      	ldr	r2, [pc, #232]	; (8006ddc <Check_T_Warn+0x104>)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]
		U6T_raw+=U6T[i];
 8006cfe:	4a38      	ldr	r2, [pc, #224]	; (8006de0 <Check_T_Warn+0x108>)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	4413      	add	r3, r2
 8006d0a:	60bb      	str	r3, [r7, #8]
		U7T_raw+=U7T[i];
 8006d0c:	4a35      	ldr	r2, [pc, #212]	; (8006de4 <Check_T_Warn+0x10c>)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	4413      	add	r3, r2
 8006d18:	607b      	str	r3, [r7, #4]
	for(uint32_t i=0; i<T_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b0f      	cmp	r3, #15
 8006d24:	d9e4      	bls.n	8006cf0 <Check_T_Warn+0x18>
	}
	U5T_raw/=T_ROLLING_AVERAGE; U6T_raw/=T_ROLLING_AVERAGE; U7T_raw/=T_ROLLING_AVERAGE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	091b      	lsrs	r3, r3, #4
 8006d2a:	60fb      	str	r3, [r7, #12]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	091b      	lsrs	r3, r3, #4
 8006d30:	60bb      	str	r3, [r7, #8]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	091b      	lsrs	r3, r3, #4
 8006d36:	607b      	str	r3, [r7, #4]
	U5T_real=Parse_Temperature(U5T_raw); U6T_real=Parse_Temperature(U6T_raw); U7T_real=Parse_Temperature(U7T_raw);
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f004 fbfd 	bl	800b538 <Parse_Temperature>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	4b29      	ldr	r3, [pc, #164]	; (8006de8 <Check_T_Warn+0x110>)
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	68b8      	ldr	r0, [r7, #8]
 8006d46:	f004 fbf7 	bl	800b538 <Parse_Temperature>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	4b27      	ldr	r3, [pc, #156]	; (8006dec <Check_T_Warn+0x114>)
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f004 fbf1 	bl	800b538 <Parse_Temperature>
 8006d56:	4602      	mov	r2, r0
 8006d58:	4b25      	ldr	r3, [pc, #148]	; (8006df0 <Check_T_Warn+0x118>)
 8006d5a:	601a      	str	r2, [r3, #0]

	if (U5T_real>warn_overtemperature_U5)
 8006d5c:	4b25      	ldr	r3, [pc, #148]	; (8006df4 <Check_T_Warn+0x11c>)
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	461a      	mov	r2, r3
 8006d62:	4b21      	ldr	r3, [pc, #132]	; (8006de8 <Check_T_Warn+0x110>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d202      	bcs.n	8006d70 <Check_T_Warn+0x98>
	{
		Set_Error(WARN_OVERTEMP_U5);
 8006d6a:	20c4      	movs	r0, #196	; 0xc4
 8006d6c:	f003 f94c 	bl	800a008 <Set_Error>
	}
	if (U5T_real<warn_undertemperature_U5)
 8006d70:	4b21      	ldr	r3, [pc, #132]	; (8006df8 <Check_T_Warn+0x120>)
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	461a      	mov	r2, r3
 8006d76:	4b1c      	ldr	r3, [pc, #112]	; (8006de8 <Check_T_Warn+0x110>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d902      	bls.n	8006d84 <Check_T_Warn+0xac>
	{
		Set_Error(WARN_UNDERTEMP_U5);
 8006d7e:	20c3      	movs	r0, #195	; 0xc3
 8006d80:	f003 f942 	bl	800a008 <Set_Error>
	}
	if (U6T_real>warn_overtemperature_U6)
 8006d84:	4b1d      	ldr	r3, [pc, #116]	; (8006dfc <Check_T_Warn+0x124>)
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	4b18      	ldr	r3, [pc, #96]	; (8006dec <Check_T_Warn+0x114>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d202      	bcs.n	8006d98 <Check_T_Warn+0xc0>
	{
		Set_Error(WARN_OVERTEMP_U6);
 8006d92:	20cd      	movs	r0, #205	; 0xcd
 8006d94:	f003 f938 	bl	800a008 <Set_Error>
	}
	if (U6T_real<warn_undertemperature_U6)
 8006d98:	4b19      	ldr	r3, [pc, #100]	; (8006e00 <Check_T_Warn+0x128>)
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	4b13      	ldr	r3, [pc, #76]	; (8006dec <Check_T_Warn+0x114>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d902      	bls.n	8006dac <Check_T_Warn+0xd4>
	{
		Set_Error(WARN_UNDERTEMP_U6);
 8006da6:	20cc      	movs	r0, #204	; 0xcc
 8006da8:	f003 f92e 	bl	800a008 <Set_Error>
	}
	if (U7T_real>warn_overtemperature_U7)
 8006dac:	4b15      	ldr	r3, [pc, #84]	; (8006e04 <Check_T_Warn+0x12c>)
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	461a      	mov	r2, r3
 8006db2:	4b0f      	ldr	r3, [pc, #60]	; (8006df0 <Check_T_Warn+0x118>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d202      	bcs.n	8006dc0 <Check_T_Warn+0xe8>
	{
		Set_Error(WARN_OVERTEMP_U7);
 8006dba:	20d6      	movs	r0, #214	; 0xd6
 8006dbc:	f003 f924 	bl	800a008 <Set_Error>
	}
	if (U7T_real<warn_undertemperature_U7)
 8006dc0:	4b11      	ldr	r3, [pc, #68]	; (8006e08 <Check_T_Warn+0x130>)
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <Check_T_Warn+0x118>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d902      	bls.n	8006dd4 <Check_T_Warn+0xfc>
	{
		Set_Error(WARN_UNDERTEMP_U7);
 8006dce:	20d5      	movs	r0, #213	; 0xd5
 8006dd0:	f003 f91a 	bl	800a008 <Set_Error>
	}
}
 8006dd4:	bf00      	nop
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	20000b28 	.word	0x20000b28
 8006de0:	200000cc 	.word	0x200000cc
 8006de4:	200002b4 	.word	0x200002b4
 8006de8:	200006b8 	.word	0x200006b8
 8006dec:	20000940 	.word	0x20000940
 8006df0:	20000780 	.word	0x20000780
 8006df4:	2000072c 	.word	0x2000072c
 8006df8:	20000944 	.word	0x20000944
 8006dfc:	20000584 	.word	0x20000584
 8006e00:	2000098e 	.word	0x2000098e
 8006e04:	20000246 	.word	0x20000246
 8006e08:	2000065c 	.word	0x2000065c

08006e0c <Check_V_Warn>:

void Check_V_Warn()
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af00      	add	r7, sp, #0
	uint32_t U5V_raw=0; uint32_t U6V_raw=0; uint32_t U7V_raw=0; uint32_t U5GNDV_raw=0; uint32_t U6GNDV_raw=0; uint32_t U7GNDV_raw=0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	61fb      	str	r3, [r7, #28]
 8006e16:	2300      	movs	r3, #0
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	613b      	str	r3, [r7, #16]
 8006e22:	2300      	movs	r3, #0
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	2300      	movs	r3, #0
 8006e28:	60bb      	str	r3, [r7, #8]
	for(uint32_t i=0; i<V_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	607b      	str	r3, [r7, #4]
 8006e2e:	e02c      	b.n	8006e8a <Check_V_Warn+0x7e>
	{
		U5V_raw+=U5V[i]; U5GNDV_raw+=U5GNDV[i];
 8006e30:	4a4b      	ldr	r2, [pc, #300]	; (8006f60 <Check_V_Warn+0x154>)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	61fb      	str	r3, [r7, #28]
 8006e3e:	4a49      	ldr	r2, [pc, #292]	; (8006f64 <Check_V_Warn+0x158>)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4413      	add	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]
		U6V_raw+=U6V[i]; U6GNDV_raw+=U6GNDV[i];
 8006e4c:	4a46      	ldr	r2, [pc, #280]	; (8006f68 <Check_V_Warn+0x15c>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	4413      	add	r3, r2
 8006e58:	61bb      	str	r3, [r7, #24]
 8006e5a:	4a44      	ldr	r2, [pc, #272]	; (8006f6c <Check_V_Warn+0x160>)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	4413      	add	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
		U7V_raw+=U7V[i]; U7GNDV_raw+=U7GNDV[i];
 8006e68:	4a41      	ldr	r2, [pc, #260]	; (8006f70 <Check_V_Warn+0x164>)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	4413      	add	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]
 8006e76:	4a3f      	ldr	r2, [pc, #252]	; (8006f74 <Check_V_Warn+0x168>)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	4413      	add	r3, r2
 8006e82:	60bb      	str	r3, [r7, #8]
	for(uint32_t i=0; i<V_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3301      	adds	r3, #1
 8006e88:	607b      	str	r3, [r7, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b0f      	cmp	r3, #15
 8006e8e:	d9cf      	bls.n	8006e30 <Check_V_Warn+0x24>
	}
	U5V_raw/=V_ROLLING_AVERAGE; U6V_raw/=V_ROLLING_AVERAGE; U7V_raw/=V_ROLLING_AVERAGE; U5GNDV_raw/=V_ROLLING_AVERAGE; U6GNDV_raw/=V_ROLLING_AVERAGE; U7GNDV_raw/=V_ROLLING_AVERAGE;
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	091b      	lsrs	r3, r3, #4
 8006e94:	61fb      	str	r3, [r7, #28]
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	091b      	lsrs	r3, r3, #4
 8006e9a:	61bb      	str	r3, [r7, #24]
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	091b      	lsrs	r3, r3, #4
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	091b      	lsrs	r3, r3, #4
 8006ea6:	613b      	str	r3, [r7, #16]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	091b      	lsrs	r3, r3, #4
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	091b      	lsrs	r3, r3, #4
 8006eb2:	60bb      	str	r3, [r7, #8]
	U5V_real=Parse_Voltage(U5V_raw, U5GNDV_raw); U6V_real=Parse_Voltage(U6V_raw, U6GNDV_raw); U7V_real=Parse_Voltage(U7V_raw, U7GNDV_raw);
 8006eb4:	6939      	ldr	r1, [r7, #16]
 8006eb6:	69f8      	ldr	r0, [r7, #28]
 8006eb8:	f004 fb20 	bl	800b4fc <Parse_Voltage>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	4b2e      	ldr	r3, [pc, #184]	; (8006f78 <Check_V_Warn+0x16c>)
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	68f9      	ldr	r1, [r7, #12]
 8006ec4:	69b8      	ldr	r0, [r7, #24]
 8006ec6:	f004 fb19 	bl	800b4fc <Parse_Voltage>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	4b2b      	ldr	r3, [pc, #172]	; (8006f7c <Check_V_Warn+0x170>)
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	6978      	ldr	r0, [r7, #20]
 8006ed4:	f004 fb12 	bl	800b4fc <Parse_Voltage>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	4b29      	ldr	r3, [pc, #164]	; (8006f80 <Check_V_Warn+0x174>)
 8006edc:	601a      	str	r2, [r3, #0]

	if (U5V_real>warn_overvoltage_U5)
 8006ede:	4b29      	ldr	r3, [pc, #164]	; (8006f84 <Check_V_Warn+0x178>)
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	4b24      	ldr	r3, [pc, #144]	; (8006f78 <Check_V_Warn+0x16c>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d202      	bcs.n	8006ef2 <Check_V_Warn+0xe6>
	{
		Set_Error(WARN_OVERVOLT_U5);
 8006eec:	20c2      	movs	r0, #194	; 0xc2
 8006eee:	f003 f88b 	bl	800a008 <Set_Error>
	}
	if (U5V_real<warn_undervoltage_U5)
 8006ef2:	4b25      	ldr	r3, [pc, #148]	; (8006f88 <Check_V_Warn+0x17c>)
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	4b1f      	ldr	r3, [pc, #124]	; (8006f78 <Check_V_Warn+0x16c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d902      	bls.n	8006f06 <Check_V_Warn+0xfa>
	{
		Set_Error(WARN_UNDERVOLT_U5);
 8006f00:	20c1      	movs	r0, #193	; 0xc1
 8006f02:	f003 f881 	bl	800a008 <Set_Error>
	}
	if (U6V_real>warn_overvoltage_U6)
 8006f06:	4b21      	ldr	r3, [pc, #132]	; (8006f8c <Check_V_Warn+0x180>)
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	4b1b      	ldr	r3, [pc, #108]	; (8006f7c <Check_V_Warn+0x170>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d202      	bcs.n	8006f1a <Check_V_Warn+0x10e>
	{
		Set_Error(WARN_OVERVOLT_U6);
 8006f14:	20cb      	movs	r0, #203	; 0xcb
 8006f16:	f003 f877 	bl	800a008 <Set_Error>
	}
	if (U6V_real<warn_undervoltage_U6)
 8006f1a:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <Check_V_Warn+0x184>)
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	4b16      	ldr	r3, [pc, #88]	; (8006f7c <Check_V_Warn+0x170>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d902      	bls.n	8006f2e <Check_V_Warn+0x122>
	{
		Set_Error(WARN_UNDERVOLT_U6);
 8006f28:	20ca      	movs	r0, #202	; 0xca
 8006f2a:	f003 f86d 	bl	800a008 <Set_Error>
	}
	if (U7V_real>warn_overvoltage_U7)
 8006f2e:	4b19      	ldr	r3, [pc, #100]	; (8006f94 <Check_V_Warn+0x188>)
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	4b12      	ldr	r3, [pc, #72]	; (8006f80 <Check_V_Warn+0x174>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d202      	bcs.n	8006f42 <Check_V_Warn+0x136>
	{
		Set_Error(WARN_OVERVOLT_U7);
 8006f3c:	20d4      	movs	r0, #212	; 0xd4
 8006f3e:	f003 f863 	bl	800a008 <Set_Error>
	}
	if (U7V_real<warn_undervoltage_U7)
 8006f42:	4b15      	ldr	r3, [pc, #84]	; (8006f98 <Check_V_Warn+0x18c>)
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	4b0d      	ldr	r3, [pc, #52]	; (8006f80 <Check_V_Warn+0x174>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d902      	bls.n	8006f56 <Check_V_Warn+0x14a>
	{
		Set_Error(WARN_UNDERVOLT_U7);
 8006f50:	20d3      	movs	r0, #211	; 0xd3
 8006f52:	f003 f859 	bl	800a008 <Set_Error>
	}
}
 8006f56:	bf00      	nop
 8006f58:	3720      	adds	r7, #32
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20000504 	.word	0x20000504
 8006f64:	2000011c 	.word	0x2000011c
 8006f68:	200004c0 	.word	0x200004c0
 8006f6c:	20000794 	.word	0x20000794
 8006f70:	20000a40 	.word	0x20000a40
 8006f74:	200003c0 	.word	0x200003c0
 8006f78:	20000b24 	.word	0x20000b24
 8006f7c:	20000938 	.word	0x20000938
 8006f80:	20000728 	.word	0x20000728
 8006f84:	2000098c 	.word	0x2000098c
 8006f88:	20000928 	.word	0x20000928
 8006f8c:	200009f2 	.word	0x200009f2
 8006f90:	20000596 	.word	0x20000596
 8006f94:	20000594 	.word	0x20000594
 8006f98:	20000112 	.word	0x20000112

08006f9c <Acknowledge>:
uint32_t ack_k=0;
uint32_t blnk_k=0;
extern pinPort LED;

void Acknowledge(uint8_t cmd)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08c      	sub	sp, #48	; 0x30
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	71fb      	strb	r3, [r7, #7]
	FDCAN_TxHeaderTypeDef TxHeader;

	TxHeader.Identifier = CANID_ACK;
 8006fa6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8006faa:	60fb      	str	r3, [r7, #12]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8006fac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006fb0:	61bb      	str	r3, [r7, #24]

	CANTxData[0]=ID;
 8006fb2:	4b34      	ldr	r3, [pc, #208]	; (8007084 <Acknowledge+0xe8>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	701a      	strb	r2, [r3, #0]
	CANTxData[1]=cmd;
 8006fb8:	4a32      	ldr	r2, [pc, #200]	; (8007084 <Acknowledge+0xe8>)
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	7053      	strb	r3, [r2, #1]
	CANTxData[2]=(ack_k>>24)*0xFF;
 8006fbe:	4b32      	ldr	r3, [pc, #200]	; (8007088 <Acknowledge+0xec>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	0e1b      	lsrs	r3, r3, #24
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	425b      	negs	r3, r3
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	4b2e      	ldr	r3, [pc, #184]	; (8007084 <Acknowledge+0xe8>)
 8006fcc:	709a      	strb	r2, [r3, #2]
	CANTxData[3]=(ack_k>>16)*0xFF;
 8006fce:	4b2e      	ldr	r3, [pc, #184]	; (8007088 <Acknowledge+0xec>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	0c1b      	lsrs	r3, r3, #16
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	425b      	negs	r3, r3
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	4b2a      	ldr	r3, [pc, #168]	; (8007084 <Acknowledge+0xe8>)
 8006fdc:	70da      	strb	r2, [r3, #3]
	CANTxData[4]=(ack_k>>8)*0xFF;
 8006fde:	4b2a      	ldr	r3, [pc, #168]	; (8007088 <Acknowledge+0xec>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	0a1b      	lsrs	r3, r3, #8
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	425b      	negs	r3, r3
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	4b26      	ldr	r3, [pc, #152]	; (8007084 <Acknowledge+0xe8>)
 8006fec:	711a      	strb	r2, [r3, #4]
	CANTxData[5]=ack_k&0xFF;
 8006fee:	4b26      	ldr	r3, [pc, #152]	; (8007088 <Acknowledge+0xec>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	4b23      	ldr	r3, [pc, #140]	; (8007084 <Acknowledge+0xe8>)
 8006ff6:	715a      	strb	r2, [r3, #5]
	CANTxData[6]=cmd;
 8006ff8:	4a22      	ldr	r2, [pc, #136]	; (8007084 <Acknowledge+0xe8>)
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	7193      	strb	r3, [r2, #6]
	CANTxData[7]=0xFF;
 8006ffe:	4b21      	ldr	r3, [pc, #132]	; (8007084 <Acknowledge+0xe8>)
 8007000:	22ff      	movs	r2, #255	; 0xff
 8007002:	71da      	strb	r2, [r3, #7]

	TxHeader.IdType = FDCAN_STANDARD_ID;
 8007004:	2300      	movs	r3, #0
 8007006:	613b      	str	r3, [r7, #16]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8007008:	2300      	movs	r3, #0
 800700a:	617b      	str	r3, [r7, #20]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800700c:	2300      	movs	r3, #0
 800700e:	61fb      	str	r3, [r7, #28]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8007010:	2300      	movs	r3, #0
 8007012:	623b      	str	r3, [r7, #32]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8007014:	2300      	movs	r3, #0
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007018:	2300      	movs	r3, #0
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.MessageMarker = 0;
 800701c:	2300      	movs	r3, #0
 800701e:	62fb      	str	r3, [r7, #44]	; 0x2c

	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) < 1)
 8007020:	e014      	b.n	800704c <Acknowledge+0xb0>
	{
		//blinking at .5 Hz means something has gone wrong here, this should only happen during configuration so it is considered acceptable infinite loop location
		blnk_k++;
 8007022:	4b1a      	ldr	r3, [pc, #104]	; (800708c <Acknowledge+0xf0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3301      	adds	r3, #1
 8007028:	4a18      	ldr	r2, [pc, #96]	; (800708c <Acknowledge+0xf0>)
 800702a:	6013      	str	r3, [r2, #0]
		if(blnk_k>340000000)
 800702c:	4b17      	ldr	r3, [pc, #92]	; (800708c <Acknowledge+0xf0>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a17      	ldr	r2, [pc, #92]	; (8007090 <Acknowledge+0xf4>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d90a      	bls.n	800704c <Acknowledge+0xb0>
		{
			blnk_k=0;
 8007036:	4b15      	ldr	r3, [pc, #84]	; (800708c <Acknowledge+0xf0>)
 8007038:	2200      	movs	r2, #0
 800703a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED.PORT, LED.PIN);
 800703c:	4b15      	ldr	r3, [pc, #84]	; (8007094 <Acknowledge+0xf8>)
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	4b14      	ldr	r3, [pc, #80]	; (8007094 <Acknowledge+0xf8>)
 8007042:	889b      	ldrh	r3, [r3, #4]
 8007044:	4619      	mov	r1, r3
 8007046:	4610      	mov	r0, r2
 8007048:	f7fc fc28 	bl	800389c <HAL_GPIO_TogglePin>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) < 1)
 800704c:	4812      	ldr	r0, [pc, #72]	; (8007098 <Acknowledge+0xfc>)
 800704e:	f7fb fca5 	bl	800299c <HAL_FDCAN_GetTxFifoFreeLevel>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d0e4      	beq.n	8007022 <Acknowledge+0x86>
		}
	}

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 8007058:	f107 030c 	add.w	r3, r7, #12
 800705c:	4a09      	ldr	r2, [pc, #36]	; (8007084 <Acknowledge+0xe8>)
 800705e:	4619      	mov	r1, r3
 8007060:	480d      	ldr	r0, [pc, #52]	; (8007098 <Acknowledge+0xfc>)
 8007062:	f7fb fb7d 	bl	8002760 <HAL_FDCAN_AddMessageToTxFifoQ>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <Acknowledge+0xd8>
	{
		Set_Error(ERR_SEND_FAILED);
 800706c:	2006      	movs	r0, #6
 800706e:	f002 ffcb 	bl	800a008 <Set_Error>
 8007072:	e004      	b.n	800707e <Acknowledge+0xe2>
		return;
	}

	ack_k++;
 8007074:	4b04      	ldr	r3, [pc, #16]	; (8007088 <Acknowledge+0xec>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3301      	adds	r3, #1
 800707a:	4a03      	ldr	r2, [pc, #12]	; (8007088 <Acknowledge+0xec>)
 800707c:	6013      	str	r3, [r2, #0]
}
 800707e:	3730      	adds	r7, #48	; 0x30
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000920 	.word	0x20000920
 8007088:	2000009c 	.word	0x2000009c
 800708c:	200000a0 	.word	0x200000a0
 8007090:	1443fd00 	.word	0x1443fd00
 8007094:	0800c27c 	.word	0x0800c27c
 8007098:	20000444 	.word	0x20000444

0800709c <Save_Config>:

extern TIM_HandleTypeDef htim15;

void Save_Config()
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
	Config_Write_Flash();
 80070a0:	f000 fe18 	bl	8007cd4 <Config_Write_Flash>

	Config_Read_Flash();
 80070a4:	f001 f940 	bl	8008328 <Config_Read_Flash>

	Acknowledge(SAVE_CONFIGS);
 80070a8:	2080      	movs	r0, #128	; 0x80
 80070aa:	f7ff ff77 	bl	8006f9c <Acknowledge>
}
 80070ae:	bf00      	nop
 80070b0:	bd80      	pop	{r7, pc}
	...

080070b4 <Switch_Power>:

const pinPort *switches[] = {&U5IN0, &U5IN1, &U6IN0, &U6IN1, &U7IN0, &U7IN1};
uint8_t *actives[] = {&U5I0_active, &U5I1_active, &U6I0_active, &U6I1_active, &U7I0_active, &U7I1_active};

void Switch_Power(uint8_t enableSwitching, uint8_t newState)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	4603      	mov	r3, r0
 80070bc:	460a      	mov	r2, r1
 80070be:	71fb      	strb	r3, [r7, #7]
 80070c0:	4613      	mov	r3, r2
 80070c2:	71bb      	strb	r3, [r7, #6]
	for(uint32_t i=0; i<5; i++)
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	e026      	b.n	8007118 <Switch_Power+0x64>
	{
		if ((1<<i) & enableSwitching)
 80070ca:	79fa      	ldrb	r2, [r7, #7]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	fa42 f303 	asr.w	r3, r2, r3
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01b      	beq.n	8007112 <Switch_Power+0x5e>
		{
			HAL_GPIO_WritePin(switches[i]->PORT, switches[i]->PIN, ((1<<i)&newState)>>i);
 80070da:	4a14      	ldr	r2, [pc, #80]	; (800712c <Switch_Power+0x78>)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	4a11      	ldr	r2, [pc, #68]	; (800712c <Switch_Power+0x78>)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070ec:	8899      	ldrh	r1, [r3, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	409a      	lsls	r2, r3
 80070f4:	79bb      	ldrb	r3, [r7, #6]
 80070f6:	401a      	ands	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	fa42 f303 	asr.w	r3, r2, r3
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	f7fc fbb3 	bl	800386c <HAL_GPIO_WritePin>
			*actives[i]=newState;
 8007106:	4a0a      	ldr	r2, [pc, #40]	; (8007130 <Switch_Power+0x7c>)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800710e:	79ba      	ldrb	r2, [r7, #6]
 8007110:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<5; i++)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3301      	adds	r3, #1
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b04      	cmp	r3, #4
 800711c:	d9d5      	bls.n	80070ca <Switch_Power+0x16>
		}
	}

	Acknowledge(SWITCH_POWER);
 800711e:	2001      	movs	r0, #1
 8007120:	f7ff ff3c 	bl	8006f9c <Acknowledge>
}
 8007124:	bf00      	nop
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	20000028 	.word	0x20000028
 8007130:	20000040 	.word	0x20000040

08007134 <Switch_DC>:

void Switch_DC(uint8_t channelEN, uint8_t newDC[8])
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	6039      	str	r1, [r7, #0]
 800713e:	71fb      	strb	r3, [r7, #7]
	uint32_t pos=3; //start at pos 3 and use a length 8 array so that we can just pass rx data
 8007140:	2303      	movs	r3, #3
 8007142:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 8007144:	2300      	movs	r3, #0
 8007146:	60bb      	str	r3, [r7, #8]
 8007148:	e016      	b.n	8007178 <Switch_DC+0x44>
	{
		if ((1<<i) & channelEN)
 800714a:	79fa      	ldrb	r2, [r7, #7]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	fa42 f303 	asr.w	r3, r2, r3
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00b      	beq.n	8007172 <Switch_DC+0x3e>
		{
			Write_PWM(i, newDC[pos]);
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	b29b      	uxth	r3, r3
 8007164:	4619      	mov	r1, r3
 8007166:	68b8      	ldr	r0, [r7, #8]
 8007168:	f002 fffc 	bl	800a164 <Write_PWM>
			pos++;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	3301      	adds	r3, #1
 8007170:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	3301      	adds	r3, #1
 8007176:	60bb      	str	r3, [r7, #8]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2b04      	cmp	r3, #4
 800717c:	d9e5      	bls.n	800714a <Switch_DC+0x16>
		}
	}

	Acknowledge(CHANGE_DC);
 800717e:	2002      	movs	r0, #2
 8007180:	f7ff ff0c 	bl	8006f9c <Acknowledge>
}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <Buffer_Can_Message>:
extern uint8_t CanMessagesToSend;
extern uint8_t CanBufferReadPos;
extern uint8_t CanBufferWritePos;

void Buffer_Can_Message(uint8_t message)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	71fb      	strb	r3, [r7, #7]
	if(CanBuffer[CanBufferWritePos]!=255)
 8007196:	4b14      	ldr	r3, [pc, #80]	; (80071e8 <Buffer_Can_Message+0x5c>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	4b13      	ldr	r3, [pc, #76]	; (80071ec <Buffer_Can_Message+0x60>)
 800719e:	5c9b      	ldrb	r3, [r3, r2]
 80071a0:	2bff      	cmp	r3, #255	; 0xff
 80071a2:	d002      	beq.n	80071aa <Buffer_Can_Message+0x1e>
	{
		Set_Error(ERR_CAN_BUFFER_FULL);
 80071a4:	2001      	movs	r0, #1
 80071a6:	f002 ff2f 	bl	800a008 <Set_Error>
	}
	//overwrite unsent messages
	CanBuffer[CanBufferWritePos]=message;
 80071aa:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <Buffer_Can_Message+0x5c>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	4619      	mov	r1, r3
 80071b0:	4a0e      	ldr	r2, [pc, #56]	; (80071ec <Buffer_Can_Message+0x60>)
 80071b2:	79fb      	ldrb	r3, [r7, #7]
 80071b4:	5453      	strb	r3, [r2, r1]

	if(CanBufferWritePos>=30)
 80071b6:	4b0c      	ldr	r3, [pc, #48]	; (80071e8 <Buffer_Can_Message+0x5c>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2b1d      	cmp	r3, #29
 80071bc:	d903      	bls.n	80071c6 <Buffer_Can_Message+0x3a>
	{
		CanBufferWritePos=0;
 80071be:	4b0a      	ldr	r3, [pc, #40]	; (80071e8 <Buffer_Can_Message+0x5c>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	e005      	b.n	80071d2 <Buffer_Can_Message+0x46>
	}
	else
	{
		CanBufferWritePos++;
 80071c6:	4b08      	ldr	r3, [pc, #32]	; (80071e8 <Buffer_Can_Message+0x5c>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	3301      	adds	r3, #1
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <Buffer_Can_Message+0x5c>)
 80071d0:	701a      	strb	r2, [r3, #0]
	}
	CanMessagesToSend++;
 80071d2:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <Buffer_Can_Message+0x64>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	3301      	adds	r3, #1
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <Buffer_Can_Message+0x64>)
 80071dc:	701a      	strb	r2, [r3, #0]
}
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	200001dc 	.word	0x200001dc
 80071ec:	20000058 	.word	0x20000058
 80071f0:	200006b4 	.word	0x200006b4

080071f4 <Sample_Temperature_Voltage>:

extern uint32_t sample_temperature;
extern uint32_t sample_voltage;

void Sample_Temperature_Voltage(uint8_t temperature_samples, uint8_t voltage_samples)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	460a      	mov	r2, r1
 80071fe:	71fb      	strb	r3, [r7, #7]
 8007200:	4613      	mov	r3, r2
 8007202:	71bb      	strb	r3, [r7, #6]
	sample_temperature+=temperature_samples;
 8007204:	79fa      	ldrb	r2, [r7, #7]
 8007206:	4b08      	ldr	r3, [pc, #32]	; (8007228 <Sample_Temperature_Voltage+0x34>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4413      	add	r3, r2
 800720c:	4a06      	ldr	r2, [pc, #24]	; (8007228 <Sample_Temperature_Voltage+0x34>)
 800720e:	6013      	str	r3, [r2, #0]
	sample_voltage+=voltage_samples;
 8007210:	79ba      	ldrb	r2, [r7, #6]
 8007212:	4b06      	ldr	r3, [pc, #24]	; (800722c <Sample_Temperature_Voltage+0x38>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4413      	add	r3, r2
 8007218:	4a04      	ldr	r2, [pc, #16]	; (800722c <Sample_Temperature_Voltage+0x38>)
 800721a:	6013      	str	r3, [r2, #0]
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	200004b4 	.word	0x200004b4
 800722c:	200000bc 	.word	0x200000bc

08007230 <Config_Message>:


void Config_Message(uint8_t message, uint8_t change, uint16_t data)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	71fb      	strb	r3, [r7, #7]
 800723a:	460b      	mov	r3, r1
 800723c:	71bb      	strb	r3, [r7, #6]
 800723e:	4613      	mov	r3, r2
 8007240:	80bb      	strh	r3, [r7, #4]
	if(message>7)
 8007242:	79fb      	ldrb	r3, [r7, #7]
 8007244:	2b07      	cmp	r3, #7
 8007246:	d903      	bls.n	8007250 <Config_Message+0x20>
	{
		Set_Error(ERR_MODIFY_INVALID_MESSAGE);
 8007248:	2021      	movs	r0, #33	; 0x21
 800724a:	f002 fedd 	bl	800a008 <Set_Error>
		return;
 800724e:	e035      	b.n	80072bc <Config_Message+0x8c>
	}

	if(change<8)
 8007250:	79bb      	ldrb	r3, [r7, #6]
 8007252:	2b07      	cmp	r3, #7
 8007254:	d80a      	bhi.n	800726c <Config_Message+0x3c>
	{
		Can_Config_Bytes[message][change]=data;
 8007256:	79fa      	ldrb	r2, [r7, #7]
 8007258:	79bb      	ldrb	r3, [r7, #6]
 800725a:	88b9      	ldrh	r1, [r7, #4]
 800725c:	b2c8      	uxtb	r0, r1
 800725e:	4919      	ldr	r1, [pc, #100]	; (80072c4 <Config_Message+0x94>)
 8007260:	00d2      	lsls	r2, r2, #3
 8007262:	440a      	add	r2, r1
 8007264:	4413      	add	r3, r2
 8007266:	4602      	mov	r2, r0
 8007268:	701a      	strb	r2, [r3, #0]
 800726a:	e024      	b.n	80072b6 <Config_Message+0x86>
	}
	else if(change<16)
 800726c:	79bb      	ldrb	r3, [r7, #6]
 800726e:	2b0f      	cmp	r3, #15
 8007270:	d80b      	bhi.n	800728a <Config_Message+0x5a>
	{
		Can_Config_Datas[message][change-8]=data;
 8007272:	79fa      	ldrb	r2, [r7, #7]
 8007274:	79bb      	ldrb	r3, [r7, #6]
 8007276:	3b08      	subs	r3, #8
 8007278:	88b9      	ldrh	r1, [r7, #4]
 800727a:	b2c8      	uxtb	r0, r1
 800727c:	4912      	ldr	r1, [pc, #72]	; (80072c8 <Config_Message+0x98>)
 800727e:	00d2      	lsls	r2, r2, #3
 8007280:	440a      	add	r2, r1
 8007282:	4413      	add	r3, r2
 8007284:	4602      	mov	r2, r0
 8007286:	701a      	strb	r2, [r3, #0]
 8007288:	e015      	b.n	80072b6 <Config_Message+0x86>
	}
	else if(change==16)
 800728a:	79bb      	ldrb	r3, [r7, #6]
 800728c:	2b10      	cmp	r3, #16
 800728e:	d105      	bne.n	800729c <Config_Message+0x6c>
	{
		Can_IDs[message]=data;
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	490e      	ldr	r1, [pc, #56]	; (80072cc <Config_Message+0x9c>)
 8007294:	88ba      	ldrh	r2, [r7, #4]
 8007296:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800729a:	e00c      	b.n	80072b6 <Config_Message+0x86>
	}
	else if(change==17)
 800729c:	79bb      	ldrb	r3, [r7, #6]
 800729e:	2b11      	cmp	r3, #17
 80072a0:	d105      	bne.n	80072ae <Config_Message+0x7e>
	{
		Can_DLCs[message]=data;
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	88ba      	ldrh	r2, [r7, #4]
 80072a6:	b2d1      	uxtb	r1, r2
 80072a8:	4a09      	ldr	r2, [pc, #36]	; (80072d0 <Config_Message+0xa0>)
 80072aa:	54d1      	strb	r1, [r2, r3]
 80072ac:	e003      	b.n	80072b6 <Config_Message+0x86>
	}
	else
	{
		Set_Error(ERR_MODIFY_INVALID_THING);
 80072ae:	2022      	movs	r0, #34	; 0x22
 80072b0:	f002 feaa 	bl	800a008 <Set_Error>
		return;
 80072b4:	e002      	b.n	80072bc <Config_Message+0x8c>
	}

	Acknowledge(CONFIG_MESSAGE);
 80072b6:	2081      	movs	r0, #129	; 0x81
 80072b8:	f7ff fe70 	bl	8006f9c <Acknowledge>
}
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	200002f4 	.word	0x200002f4
 80072c8:	2000019c 	.word	0x2000019c
 80072cc:	2000087c 	.word	0x2000087c
 80072d0:	2000092c 	.word	0x2000092c

080072d4 <Config_Switch_Defaults>:

void Config_Switch_Defaults(uint8_t enableChanges, uint8_t newState)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	4603      	mov	r3, r0
 80072dc:	460a      	mov	r2, r1
 80072de:	71fb      	strb	r3, [r7, #7]
 80072e0:	4613      	mov	r3, r2
 80072e2:	71bb      	strb	r3, [r7, #6]
	for(uint32_t i=0; i<6; i++)
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	e02f      	b.n	800734a <Config_Switch_Defaults+0x76>
	{
		if (((enableChanges>>i)&0b1))
 80072ea:	79fa      	ldrb	r2, [r7, #7]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	fa42 f303 	asr.w	r3, r2, r3
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d024      	beq.n	8007344 <Config_Switch_Defaults+0x70>
		{
			if(((newState>>i)&0b1))
 80072fa:	79ba      	ldrb	r2, [r7, #6]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	fa42 f303 	asr.w	r3, r2, r3
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00d      	beq.n	8007326 <Config_Switch_Defaults+0x52>
			{
				Default_Switch_State|=(1<<i);
 800730a:	2201      	movs	r2, #1
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	fa02 f303 	lsl.w	r3, r2, r3
 8007312:	b25a      	sxtb	r2, r3
 8007314:	4b12      	ldr	r3, [pc, #72]	; (8007360 <Config_Switch_Defaults+0x8c>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	b25b      	sxtb	r3, r3
 800731a:	4313      	orrs	r3, r2
 800731c:	b25b      	sxtb	r3, r3
 800731e:	b2da      	uxtb	r2, r3
 8007320:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <Config_Switch_Defaults+0x8c>)
 8007322:	701a      	strb	r2, [r3, #0]
 8007324:	e00e      	b.n	8007344 <Config_Switch_Defaults+0x70>
			}
			else
			{
				Default_Switch_State&=~(1<<i);
 8007326:	2201      	movs	r2, #1
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	fa02 f303 	lsl.w	r3, r2, r3
 800732e:	b25b      	sxtb	r3, r3
 8007330:	43db      	mvns	r3, r3
 8007332:	b25a      	sxtb	r2, r3
 8007334:	4b0a      	ldr	r3, [pc, #40]	; (8007360 <Config_Switch_Defaults+0x8c>)
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	b25b      	sxtb	r3, r3
 800733a:	4013      	ands	r3, r2
 800733c:	b25b      	sxtb	r3, r3
 800733e:	b2da      	uxtb	r2, r3
 8007340:	4b07      	ldr	r3, [pc, #28]	; (8007360 <Config_Switch_Defaults+0x8c>)
 8007342:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<6; i++)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3301      	adds	r3, #1
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b05      	cmp	r3, #5
 800734e:	d9cc      	bls.n	80072ea <Config_Switch_Defaults+0x16>
			}
		}
	}

	Acknowledge(CONFIG_SWITCHES_DEFAULT);
 8007350:	2082      	movs	r0, #130	; 0x82
 8007352:	f7ff fe23 	bl	8006f9c <Acknowledge>
}
 8007356:	bf00      	nop
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	200004ab 	.word	0x200004ab

08007364 <Config_Can_Sync>:

void Config_Can_Sync(uint8_t enableChanges, uint8_t newState)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	4603      	mov	r3, r0
 800736c:	460a      	mov	r2, r1
 800736e:	71fb      	strb	r3, [r7, #7]
 8007370:	4613      	mov	r3, r2
 8007372:	71bb      	strb	r3, [r7, #6]
	for(uint32_t i=0; i<8; i++)
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	e02f      	b.n	80073da <Config_Can_Sync+0x76>
	{
		if (((enableChanges>>i)&0b1))
 800737a:	79fa      	ldrb	r2, [r7, #7]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	fa42 f303 	asr.w	r3, r2, r3
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	d024      	beq.n	80073d4 <Config_Can_Sync+0x70>
		{
			if(((newState>>i)&0b1))
 800738a:	79ba      	ldrb	r2, [r7, #6]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	fa42 f303 	asr.w	r3, r2, r3
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00d      	beq.n	80073b6 <Config_Can_Sync+0x52>
			{
				Can_Sync_Enable|=(1<<i);
 800739a:	2201      	movs	r2, #1
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	fa02 f303 	lsl.w	r3, r2, r3
 80073a2:	b25a      	sxtb	r2, r3
 80073a4:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <Config_Can_Sync+0x8c>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	b25b      	sxtb	r3, r3
 80073aa:	4313      	orrs	r3, r2
 80073ac:	b25b      	sxtb	r3, r3
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <Config_Can_Sync+0x8c>)
 80073b2:	701a      	strb	r2, [r3, #0]
 80073b4:	e00e      	b.n	80073d4 <Config_Can_Sync+0x70>
			}
			else
			{
				Can_Sync_Enable&=~(1<<i);
 80073b6:	2201      	movs	r2, #1
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	fa02 f303 	lsl.w	r3, r2, r3
 80073be:	b25b      	sxtb	r3, r3
 80073c0:	43db      	mvns	r3, r3
 80073c2:	b25a      	sxtb	r2, r3
 80073c4:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <Config_Can_Sync+0x8c>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	b25b      	sxtb	r3, r3
 80073ca:	4013      	ands	r3, r2
 80073cc:	b25b      	sxtb	r3, r3
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <Config_Can_Sync+0x8c>)
 80073d2:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3301      	adds	r3, #1
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2b07      	cmp	r3, #7
 80073de:	d9cc      	bls.n	800737a <Config_Can_Sync+0x16>
			}
		}
	}

	Acknowledge(CONFIG_CAN_SYNC);
 80073e0:	2083      	movs	r0, #131	; 0x83
 80073e2:	f7ff fddb 	bl	8006f9c <Acknowledge>
}
 80073e6:	bf00      	nop
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	20000500 	.word	0x20000500

080073f4 <Config_Can_Timed>:

void Config_Can_Timed(uint8_t enableChanges, uint8_t newState)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	460a      	mov	r2, r1
 80073fe:	71fb      	strb	r3, [r7, #7]
 8007400:	4613      	mov	r3, r2
 8007402:	71bb      	strb	r3, [r7, #6]
	for(uint32_t i=0; i<8; i++)
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	e02f      	b.n	800746a <Config_Can_Timed+0x76>
	{
		if (((enableChanges>>i)&0b1))
 800740a:	79fa      	ldrb	r2, [r7, #7]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	fa42 f303 	asr.w	r3, r2, r3
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d024      	beq.n	8007464 <Config_Can_Timed+0x70>
		{
			if(((newState>>i)&0b1))
 800741a:	79ba      	ldrb	r2, [r7, #6]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	fa42 f303 	asr.w	r3, r2, r3
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00d      	beq.n	8007446 <Config_Can_Timed+0x52>
			{
				Can_Timed_Enable|=(1<<i);
 800742a:	2201      	movs	r2, #1
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	fa02 f303 	lsl.w	r3, r2, r3
 8007432:	b25a      	sxtb	r2, r3
 8007434:	4b12      	ldr	r3, [pc, #72]	; (8007480 <Config_Can_Timed+0x8c>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	b25b      	sxtb	r3, r3
 800743a:	4313      	orrs	r3, r2
 800743c:	b25b      	sxtb	r3, r3
 800743e:	b2da      	uxtb	r2, r3
 8007440:	4b0f      	ldr	r3, [pc, #60]	; (8007480 <Config_Can_Timed+0x8c>)
 8007442:	701a      	strb	r2, [r3, #0]
 8007444:	e00e      	b.n	8007464 <Config_Can_Timed+0x70>
			}
			else
			{
				Can_Timed_Enable&=~(1<<i);
 8007446:	2201      	movs	r2, #1
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	fa02 f303 	lsl.w	r3, r2, r3
 800744e:	b25b      	sxtb	r3, r3
 8007450:	43db      	mvns	r3, r3
 8007452:	b25a      	sxtb	r2, r3
 8007454:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <Config_Can_Timed+0x8c>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	b25b      	sxtb	r3, r3
 800745a:	4013      	ands	r3, r2
 800745c:	b25b      	sxtb	r3, r3
 800745e:	b2da      	uxtb	r2, r3
 8007460:	4b07      	ldr	r3, [pc, #28]	; (8007480 <Config_Can_Timed+0x8c>)
 8007462:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3301      	adds	r3, #1
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b07      	cmp	r3, #7
 800746e:	d9cc      	bls.n	800740a <Config_Can_Timed+0x16>
			}
		}
	}

	Acknowledge(CONFIG_CAN_TIMED);
 8007470:	2084      	movs	r0, #132	; 0x84
 8007472:	f7ff fd93 	bl	8006f9c <Acknowledge>
}
 8007476:	bf00      	nop
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20000115 	.word	0x20000115

08007484 <Config_Can_Interval>:

void Config_Can_Interval(uint16_t newInterval)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	80fb      	strh	r3, [r7, #6]
	Can_Interval=newInterval;
 800748e:	4a05      	ldr	r2, [pc, #20]	; (80074a4 <Config_Can_Interval+0x20>)
 8007490:	88fb      	ldrh	r3, [r7, #6]
 8007492:	8013      	strh	r3, [r2, #0]

	Acknowledge(CONFIG_CAN_INTERVAL);
 8007494:	2085      	movs	r0, #133	; 0x85
 8007496:	f7ff fd81 	bl	8006f9c <Acknowledge>
}
 800749a:	bf00      	nop
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	20000118 	.word	0x20000118

080074a8 <Config_Can_Sync_Delay>:

void Config_Can_Sync_Delay(uint16_t newDelay)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	80fb      	strh	r3, [r7, #6]
	Can_Sync_Delay=newDelay;
 80074b2:	4a05      	ldr	r2, [pc, #20]	; (80074c8 <Config_Can_Sync_Delay+0x20>)
 80074b4:	88fb      	ldrh	r3, [r7, #6]
 80074b6:	8013      	strh	r3, [r2, #0]

	Acknowledge(CONFIG_CAN_SYNC_DELAY);
 80074b8:	2086      	movs	r0, #134	; 0x86
 80074ba:	f7ff fd6f 	bl	8006f9c <Acknowledge>
}
 80074be:	bf00      	nop
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20000440 	.word	0x20000440

080074cc <Config_Temperature_Voltage_Reading>:

void Config_Temperature_Voltage_Reading(uint16_t interval, uint8_t tempBurst, uint8_t voltBurst)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	80fb      	strh	r3, [r7, #6]
 80074d6:	460b      	mov	r3, r1
 80074d8:	717b      	strb	r3, [r7, #5]
 80074da:	4613      	mov	r3, r2
 80074dc:	713b      	strb	r3, [r7, #4]
	if(tempBurst==255)
 80074de:	797b      	ldrb	r3, [r7, #5]
 80074e0:	2bff      	cmp	r3, #255	; 0xff
 80074e2:	d106      	bne.n	80074f2 <Config_Temperature_Voltage_Reading+0x26>
	{
		sample_temperature=255;
 80074e4:	4b13      	ldr	r3, [pc, #76]	; (8007534 <Config_Temperature_Voltage_Reading+0x68>)
 80074e6:	22ff      	movs	r2, #255	; 0xff
 80074e8:	601a      	str	r2, [r3, #0]
		SampleTemperatureBurst=0;
 80074ea:	4b13      	ldr	r3, [pc, #76]	; (8007538 <Config_Temperature_Voltage_Reading+0x6c>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]
 80074f0:	e005      	b.n	80074fe <Config_Temperature_Voltage_Reading+0x32>
	}
	else
	{
		sample_temperature=0;
 80074f2:	4b10      	ldr	r3, [pc, #64]	; (8007534 <Config_Temperature_Voltage_Reading+0x68>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	601a      	str	r2, [r3, #0]
		SampleTemperatureBurst=tempBurst;
 80074f8:	4a0f      	ldr	r2, [pc, #60]	; (8007538 <Config_Temperature_Voltage_Reading+0x6c>)
 80074fa:	797b      	ldrb	r3, [r7, #5]
 80074fc:	7013      	strb	r3, [r2, #0]
	}

	if(voltBurst==255)
 80074fe:	793b      	ldrb	r3, [r7, #4]
 8007500:	2bff      	cmp	r3, #255	; 0xff
 8007502:	d106      	bne.n	8007512 <Config_Temperature_Voltage_Reading+0x46>
	{
		sample_voltage=255;
 8007504:	4b0d      	ldr	r3, [pc, #52]	; (800753c <Config_Temperature_Voltage_Reading+0x70>)
 8007506:	22ff      	movs	r2, #255	; 0xff
 8007508:	601a      	str	r2, [r3, #0]
		SampleVoltageBurst=0;
 800750a:	4b0d      	ldr	r3, [pc, #52]	; (8007540 <Config_Temperature_Voltage_Reading+0x74>)
 800750c:	2200      	movs	r2, #0
 800750e:	701a      	strb	r2, [r3, #0]
 8007510:	e005      	b.n	800751e <Config_Temperature_Voltage_Reading+0x52>
	}
	else
	{
		sample_voltage=0;
 8007512:	4b0a      	ldr	r3, [pc, #40]	; (800753c <Config_Temperature_Voltage_Reading+0x70>)
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]
		SampleVoltageBurst=voltBurst;
 8007518:	4a09      	ldr	r2, [pc, #36]	; (8007540 <Config_Temperature_Voltage_Reading+0x74>)
 800751a:	793b      	ldrb	r3, [r7, #4]
 800751c:	7013      	strb	r3, [r2, #0]
	}

	SampleTemperatureVoltagePeriod=interval;
 800751e:	4a09      	ldr	r2, [pc, #36]	; (8007544 <Config_Temperature_Voltage_Reading+0x78>)
 8007520:	88fb      	ldrh	r3, [r7, #6]
 8007522:	8013      	strh	r3, [r2, #0]

	Acknowledge(CONFIG_CAN_TV_READING);
 8007524:	2087      	movs	r0, #135	; 0x87
 8007526:	f7ff fd39 	bl	8006f9c <Acknowledge>
}
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	200004b4 	.word	0x200004b4
 8007538:	2000091d 	.word	0x2000091d
 800753c:	200000bc 	.word	0x200000bc
 8007540:	200001dd 	.word	0x200001dd
 8007544:	20000988 	.word	0x20000988

08007548 <Config_Default_DC>:

void Config_Default_DC(uint8_t channelEN, uint8_t newDC[8])
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	6039      	str	r1, [r7, #0]
 8007552:	71fb      	strb	r3, [r7, #7]
	uint32_t pos=3; //start at pos 3 and use a length 8 array so that we can just pass rx data
 8007554:	2303      	movs	r3, #3
 8007556:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 8007558:	2300      	movs	r3, #0
 800755a:	60bb      	str	r3, [r7, #8]
 800755c:	e016      	b.n	800758c <Config_Default_DC+0x44>
	{
		if ((1<<i) & channelEN)
 800755e:	79fa      	ldrb	r2, [r7, #7]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	fa42 f303 	asr.w	r3, r2, r3
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00b      	beq.n	8007586 <Config_Default_DC+0x3e>
		{
			PWM_Pulses[i]=newDC[pos];
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	b299      	uxth	r1, r3
 8007578:	4a09      	ldr	r2, [pc, #36]	; (80075a0 <Config_Default_DC+0x58>)
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pos++;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	3301      	adds	r3, #1
 8007584:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	3301      	adds	r3, #1
 800758a:	60bb      	str	r3, [r7, #8]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b04      	cmp	r3, #4
 8007590:	d9e5      	bls.n	800755e <Config_Default_DC+0x16>
		}
	}

	Acknowledge(CONFIG_DEFAULT_DC);
 8007592:	2088      	movs	r0, #136	; 0x88
 8007594:	f7ff fd02 	bl	8006f9c <Acknowledge>
}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20000828 	.word	0x20000828

080075a4 <Config_PWM_Prescalers>:

void Config_PWM_Prescalers(uint8_t channelEN, uint8_t newPrescalers[8])
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	4603      	mov	r3, r0
 80075ac:	6039      	str	r1, [r7, #0]
 80075ae:	71fb      	strb	r3, [r7, #7]
	uint32_t pos=3; //start at pos 3 and use a length 8 array so that we can just pass rx data
 80075b0:	2303      	movs	r3, #3
 80075b2:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 80075b4:	2300      	movs	r3, #0
 80075b6:	60bb      	str	r3, [r7, #8]
 80075b8:	e016      	b.n	80075e8 <Config_PWM_Prescalers+0x44>
	{
		if ((1<<i) & channelEN)
 80075ba:	79fa      	ldrb	r2, [r7, #7]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	fa42 f303 	asr.w	r3, r2, r3
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00b      	beq.n	80075e2 <Config_PWM_Prescalers+0x3e>
		{
			PWM_Prescalers[i]=newPrescalers[pos];
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	b299      	uxth	r1, r3
 80075d4:	4a09      	ldr	r2, [pc, #36]	; (80075fc <Config_PWM_Prescalers+0x58>)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pos++;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	3301      	adds	r3, #1
 80075e6:	60bb      	str	r3, [r7, #8]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d9e5      	bls.n	80075ba <Config_PWM_Prescalers+0x16>
		}
	}

	Acknowledge(CONFIG_PWM_PRESCALERS);
 80075ee:	2089      	movs	r0, #137	; 0x89
 80075f0:	f7ff fcd4 	bl	8006f9c <Acknowledge>
}
 80075f4:	bf00      	nop
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	2000059c 	.word	0x2000059c

08007600 <Config_DIO_Pins>:

void Config_DIO_Pins(uint8_t EN, uint8_t new_Din_EN, uint8_t new_PWM_Out_EN, uint8_t new_PWM_In_EN)
{
 8007600:	b590      	push	{r4, r7, lr}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	4604      	mov	r4, r0
 8007608:	4608      	mov	r0, r1
 800760a:	4611      	mov	r1, r2
 800760c:	461a      	mov	r2, r3
 800760e:	4623      	mov	r3, r4
 8007610:	71fb      	strb	r3, [r7, #7]
 8007612:	4603      	mov	r3, r0
 8007614:	71bb      	strb	r3, [r7, #6]
 8007616:	460b      	mov	r3, r1
 8007618:	717b      	strb	r3, [r7, #5]
 800761a:	4613      	mov	r3, r2
 800761c:	713b      	strb	r3, [r7, #4]
	for(uint32_t i=0; i<5; i++)
 800761e:	2300      	movs	r3, #0
 8007620:	60fb      	str	r3, [r7, #12]
 8007622:	e081      	b.n	8007728 <Config_DIO_Pins+0x128>
	{
		if ((EN>>i)&1)
 8007624:	79fa      	ldrb	r2, [r7, #7]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	fa42 f303 	asr.w	r3, r2, r3
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	2b00      	cmp	r3, #0
 8007632:	d076      	beq.n	8007722 <Config_DIO_Pins+0x122>
		{
			Digital_In_EN &= ~(1<<i);
 8007634:	2201      	movs	r2, #1
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	fa02 f303 	lsl.w	r3, r2, r3
 800763c:	b25b      	sxtb	r3, r3
 800763e:	43db      	mvns	r3, r3
 8007640:	b25a      	sxtb	r2, r3
 8007642:	4b3f      	ldr	r3, [pc, #252]	; (8007740 <Config_DIO_Pins+0x140>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	b25b      	sxtb	r3, r3
 8007648:	4013      	ands	r3, r2
 800764a:	b25b      	sxtb	r3, r3
 800764c:	b2da      	uxtb	r2, r3
 800764e:	4b3c      	ldr	r3, [pc, #240]	; (8007740 <Config_DIO_Pins+0x140>)
 8007650:	701a      	strb	r2, [r3, #0]
			PWM_Out_EN &= ~(1<<i);
 8007652:	2201      	movs	r2, #1
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	fa02 f303 	lsl.w	r3, r2, r3
 800765a:	b25b      	sxtb	r3, r3
 800765c:	43db      	mvns	r3, r3
 800765e:	b25a      	sxtb	r2, r3
 8007660:	4b38      	ldr	r3, [pc, #224]	; (8007744 <Config_DIO_Pins+0x144>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	b25b      	sxtb	r3, r3
 8007666:	4013      	ands	r3, r2
 8007668:	b25b      	sxtb	r3, r3
 800766a:	b2da      	uxtb	r2, r3
 800766c:	4b35      	ldr	r3, [pc, #212]	; (8007744 <Config_DIO_Pins+0x144>)
 800766e:	701a      	strb	r2, [r3, #0]
			PWM_In_EN &= ~(1<<i);
 8007670:	2201      	movs	r2, #1
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	fa02 f303 	lsl.w	r3, r2, r3
 8007678:	b25b      	sxtb	r3, r3
 800767a:	43db      	mvns	r3, r3
 800767c:	b25a      	sxtb	r2, r3
 800767e:	4b32      	ldr	r3, [pc, #200]	; (8007748 <Config_DIO_Pins+0x148>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	b25b      	sxtb	r3, r3
 8007684:	4013      	ands	r3, r2
 8007686:	b25b      	sxtb	r3, r3
 8007688:	b2da      	uxtb	r2, r3
 800768a:	4b2f      	ldr	r3, [pc, #188]	; (8007748 <Config_DIO_Pins+0x148>)
 800768c:	701a      	strb	r2, [r3, #0]

			if ((new_Din_EN>>i)&1)
 800768e:	79ba      	ldrb	r2, [r7, #6]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	fa42 f303 	asr.w	r3, r2, r3
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d010      	beq.n	80076c0 <Config_DIO_Pins+0xc0>
			{
				if (i != 1) //disable PB4 as input
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d03e      	beq.n	8007722 <Config_DIO_Pins+0x122>
				{
					Digital_In_EN |= (1<<i);
 80076a4:	2201      	movs	r2, #1
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ac:	b25a      	sxtb	r2, r3
 80076ae:	4b24      	ldr	r3, [pc, #144]	; (8007740 <Config_DIO_Pins+0x140>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	b25b      	sxtb	r3, r3
 80076b4:	4313      	orrs	r3, r2
 80076b6:	b25b      	sxtb	r3, r3
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	4b21      	ldr	r3, [pc, #132]	; (8007740 <Config_DIO_Pins+0x140>)
 80076bc:	701a      	strb	r2, [r3, #0]
 80076be:	e030      	b.n	8007722 <Config_DIO_Pins+0x122>
				}
			}
			else if ((new_PWM_Out_EN>>i)&1)
 80076c0:	797a      	ldrb	r2, [r7, #5]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	fa42 f303 	asr.w	r3, r2, r3
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00d      	beq.n	80076ec <Config_DIO_Pins+0xec>
			{
				if (1)
				{
					PWM_Out_EN |= (1<<i);
 80076d0:	2201      	movs	r2, #1
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	fa02 f303 	lsl.w	r3, r2, r3
 80076d8:	b25a      	sxtb	r2, r3
 80076da:	4b1a      	ldr	r3, [pc, #104]	; (8007744 <Config_DIO_Pins+0x144>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	b25b      	sxtb	r3, r3
 80076e0:	4313      	orrs	r3, r2
 80076e2:	b25b      	sxtb	r3, r3
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	4b17      	ldr	r3, [pc, #92]	; (8007744 <Config_DIO_Pins+0x144>)
 80076e8:	701a      	strb	r2, [r3, #0]
 80076ea:	e01a      	b.n	8007722 <Config_DIO_Pins+0x122>
				}
			}
			else if ((new_PWM_In_EN>>i)&1)
 80076ec:	793a      	ldrb	r2, [r7, #4]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	fa42 f303 	asr.w	r3, r2, r3
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d012      	beq.n	8007722 <Config_DIO_Pins+0x122>
			{
				if ( (i!=1) && (i!=2) ) //disable PB4 as input, PB5 doesn't have functionality as PWM input
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d00f      	beq.n	8007722 <Config_DIO_Pins+0x122>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b02      	cmp	r3, #2
 8007706:	d00c      	beq.n	8007722 <Config_DIO_Pins+0x122>
				{
					PWM_In_EN |= (1<<i);
 8007708:	2201      	movs	r2, #1
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	fa02 f303 	lsl.w	r3, r2, r3
 8007710:	b25a      	sxtb	r2, r3
 8007712:	4b0d      	ldr	r3, [pc, #52]	; (8007748 <Config_DIO_Pins+0x148>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	b25b      	sxtb	r3, r3
 8007718:	4313      	orrs	r3, r2
 800771a:	b25b      	sxtb	r3, r3
 800771c:	b2da      	uxtb	r2, r3
 800771e:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <Config_DIO_Pins+0x148>)
 8007720:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<5; i++)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3301      	adds	r3, #1
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b04      	cmp	r3, #4
 800772c:	f67f af7a 	bls.w	8007624 <Config_DIO_Pins+0x24>
				}
			}
		}
	}

	Acknowledge(CONFIG_DIO);
 8007730:	208a      	movs	r0, #138	; 0x8a
 8007732:	f7ff fc33 	bl	8006f9c <Acknowledge>
}
 8007736:	bf00      	nop
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	bd90      	pop	{r4, r7, pc}
 800773e:	bf00      	nop
 8007740:	20000114 	.word	0x20000114
 8007744:	200009f0 	.word	0x200009f0
 8007748:	200004aa 	.word	0x200004aa

0800774c <Config_Interrupt_Power>:

void Config_Interrupt_Power(uint8_t gpio, uint8_t Power_High_Falling, uint8_t Power_High_Rising, uint8_t Power_Low_Falling, uint8_t Power_Low_Rising)
{
 800774c:	b590      	push	{r4, r7, lr}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	4604      	mov	r4, r0
 8007754:	4608      	mov	r0, r1
 8007756:	4611      	mov	r1, r2
 8007758:	461a      	mov	r2, r3
 800775a:	4623      	mov	r3, r4
 800775c:	71fb      	strb	r3, [r7, #7]
 800775e:	4603      	mov	r3, r0
 8007760:	71bb      	strb	r3, [r7, #6]
 8007762:	460b      	mov	r3, r1
 8007764:	717b      	strb	r3, [r7, #5]
 8007766:	4613      	mov	r3, r2
 8007768:	713b      	strb	r3, [r7, #4]

	Digital_In_Interrupt_Power_High_Falling[gpio]=Power_High_Falling;
 800776a:	79fb      	ldrb	r3, [r7, #7]
 800776c:	490a      	ldr	r1, [pc, #40]	; (8007798 <Config_Interrupt_Power+0x4c>)
 800776e:	79ba      	ldrb	r2, [r7, #6]
 8007770:	54ca      	strb	r2, [r1, r3]
	Digital_In_Interrupt_Power_High_Rising[gpio]=Power_High_Rising;
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	4909      	ldr	r1, [pc, #36]	; (800779c <Config_Interrupt_Power+0x50>)
 8007776:	797a      	ldrb	r2, [r7, #5]
 8007778:	54ca      	strb	r2, [r1, r3]
	Digital_In_Interrupt_Power_Low_Falling[gpio]=Power_Low_Falling;
 800777a:	79fb      	ldrb	r3, [r7, #7]
 800777c:	4908      	ldr	r1, [pc, #32]	; (80077a0 <Config_Interrupt_Power+0x54>)
 800777e:	793a      	ldrb	r2, [r7, #4]
 8007780:	54ca      	strb	r2, [r1, r3]
	Digital_In_Interrupt_Power_Low_Rising[gpio]=Power_Low_Rising;
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	4907      	ldr	r1, [pc, #28]	; (80077a4 <Config_Interrupt_Power+0x58>)
 8007786:	7e3a      	ldrb	r2, [r7, #24]
 8007788:	54ca      	strb	r2, [r1, r3]

	Acknowledge(CONFIG_INTERRUPT_POWER);
 800778a:	208b      	movs	r0, #139	; 0x8b
 800778c:	f7ff fc06 	bl	8006f9c <Acknowledge>
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	bd90      	pop	{r4, r7, pc}
 8007798:	2000078c 	.word	0x2000078c
 800779c:	20000588 	.word	0x20000588
 80077a0:	20000918 	.word	0x20000918
 80077a4:	200004b8 	.word	0x200004b8

080077a8 <Config_Interrupt_Can>:

void Config_Interrupt_Can(uint8_t gpio, uint8_t Can_Falling, uint8_t Can_Rising)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	4603      	mov	r3, r0
 80077b0:	71fb      	strb	r3, [r7, #7]
 80077b2:	460b      	mov	r3, r1
 80077b4:	71bb      	strb	r3, [r7, #6]
 80077b6:	4613      	mov	r3, r2
 80077b8:	717b      	strb	r3, [r7, #5]
	Digital_In_Interrupt_Can_Falling[gpio]=Can_Falling;
 80077ba:	79fb      	ldrb	r3, [r7, #7]
 80077bc:	4906      	ldr	r1, [pc, #24]	; (80077d8 <Config_Interrupt_Can+0x30>)
 80077be:	79ba      	ldrb	r2, [r7, #6]
 80077c0:	54ca      	strb	r2, [r1, r3]
	Digital_In_Interrupt_Can_Rising[gpio]=Can_Rising;
 80077c2:	79fb      	ldrb	r3, [r7, #7]
 80077c4:	4905      	ldr	r1, [pc, #20]	; (80077dc <Config_Interrupt_Can+0x34>)
 80077c6:	797a      	ldrb	r2, [r7, #5]
 80077c8:	54ca      	strb	r2, [r1, r3]

	Acknowledge(CONFIG_INTERRUPT_CAN);
 80077ca:	208c      	movs	r0, #140	; 0x8c
 80077cc:	f7ff fbe6 	bl	8006f9c <Acknowledge>
}
 80077d0:	bf00      	nop
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	200000b4 	.word	0x200000b4
 80077dc:	200000c0 	.word	0x200000c0

080077e0 <Config_Setup>:
#include "main.h"
#include "config.h"


void Config_Setup(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	af00      	add	r7, sp, #0
	if(Flash_Read(FLASH_PAGE_63)==0xFFFFFFFF) //initialize the flash to avoid errors
 80077e4:	4807      	ldr	r0, [pc, #28]	; (8007804 <Config_Setup+0x24>)
 80077e6:	f001 f997 	bl	8008b18 <Flash_Read>
 80077ea:	4603      	mov	r3, r0
 80077ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f0:	d104      	bne.n	80077fc <Config_Setup+0x1c>

		Config_1();

#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_0();
 80077f2:	f000 f809 	bl	8007808 <Config_0>

#endif

		Config_Write_Flash();
 80077f6:	f000 fa6d 	bl	8007cd4 <Config_Write_Flash>
	}
	else //if flash is not blank read in values from flash
	{
		Config_Read_Flash();
	}
}
 80077fa:	e001      	b.n	8007800 <Config_Setup+0x20>
		Config_Read_Flash();
 80077fc:	f000 fd94 	bl	8008328 <Config_Read_Flash>
}
 8007800:	bf00      	nop
 8007802:	bd80      	pop	{r7, pc}
 8007804:	0801f800 	.word	0x0801f800

08007808 <Config_0>:


void Config_0(void)
{
 8007808:	b4b0      	push	{r4, r5, r7}
 800780a:	b0cd      	sub	sp, #308	; 0x134
 800780c:	af00      	add	r7, sp, #0
	//TODO: check that these work properly
	warn_undervoltage_U5=18000;
 800780e:	4b61      	ldr	r3, [pc, #388]	; (8007994 <Config_0+0x18c>)
 8007810:	f244 6250 	movw	r2, #18000	; 0x4650
 8007814:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U5=28000;
 8007816:	4b60      	ldr	r3, [pc, #384]	; (8007998 <Config_0+0x190>)
 8007818:	f646 5260 	movw	r2, #28000	; 0x6d60
 800781c:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U5=0;
 800781e:	4b5f      	ldr	r3, [pc, #380]	; (800799c <Config_0+0x194>)
 8007820:	2200      	movs	r2, #0
 8007822:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U5=1023;
 8007824:	4b5e      	ldr	r3, [pc, #376]	; (80079a0 <Config_0+0x198>)
 8007826:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800782a:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U5I0=0;
 800782c:	4b5d      	ldr	r3, [pc, #372]	; (80079a4 <Config_0+0x19c>)
 800782e:	2200      	movs	r2, #0
 8007830:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U5I0=1000;
 8007832:	4b5d      	ldr	r3, [pc, #372]	; (80079a8 <Config_0+0x1a0>)
 8007834:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007838:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U5I1=0;
 800783a:	4b5c      	ldr	r3, [pc, #368]	; (80079ac <Config_0+0x1a4>)
 800783c:	2200      	movs	r2, #0
 800783e:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U5I1=1000;
 8007840:	4b5b      	ldr	r3, [pc, #364]	; (80079b0 <Config_0+0x1a8>)
 8007842:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007846:	801a      	strh	r2, [r3, #0]
	warn_undervoltage_U6=18000;
 8007848:	4b5a      	ldr	r3, [pc, #360]	; (80079b4 <Config_0+0x1ac>)
 800784a:	f244 6250 	movw	r2, #18000	; 0x4650
 800784e:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U6=28000;
 8007850:	4b59      	ldr	r3, [pc, #356]	; (80079b8 <Config_0+0x1b0>)
 8007852:	f646 5260 	movw	r2, #28000	; 0x6d60
 8007856:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U6=0;
 8007858:	4b58      	ldr	r3, [pc, #352]	; (80079bc <Config_0+0x1b4>)
 800785a:	2200      	movs	r2, #0
 800785c:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U6=1023;
 800785e:	4b58      	ldr	r3, [pc, #352]	; (80079c0 <Config_0+0x1b8>)
 8007860:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007864:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U6I0=0;
 8007866:	4b57      	ldr	r3, [pc, #348]	; (80079c4 <Config_0+0x1bc>)
 8007868:	2200      	movs	r2, #0
 800786a:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U6I0=1000;
 800786c:	4b56      	ldr	r3, [pc, #344]	; (80079c8 <Config_0+0x1c0>)
 800786e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007872:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U6I1=0;
 8007874:	4b55      	ldr	r3, [pc, #340]	; (80079cc <Config_0+0x1c4>)
 8007876:	2200      	movs	r2, #0
 8007878:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U6I1=1000;
 800787a:	4b55      	ldr	r3, [pc, #340]	; (80079d0 <Config_0+0x1c8>)
 800787c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007880:	801a      	strh	r2, [r3, #0]
	warn_undervoltage_U7=18000;
 8007882:	4b54      	ldr	r3, [pc, #336]	; (80079d4 <Config_0+0x1cc>)
 8007884:	f244 6250 	movw	r2, #18000	; 0x4650
 8007888:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U7=28000;
 800788a:	4b53      	ldr	r3, [pc, #332]	; (80079d8 <Config_0+0x1d0>)
 800788c:	f646 5260 	movw	r2, #28000	; 0x6d60
 8007890:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U7=0;
 8007892:	4b52      	ldr	r3, [pc, #328]	; (80079dc <Config_0+0x1d4>)
 8007894:	2200      	movs	r2, #0
 8007896:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U7=1023;
 8007898:	4b51      	ldr	r3, [pc, #324]	; (80079e0 <Config_0+0x1d8>)
 800789a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800789e:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U7I0=0;
 80078a0:	4b50      	ldr	r3, [pc, #320]	; (80079e4 <Config_0+0x1dc>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U7I0=1000;
 80078a6:	4b50      	ldr	r3, [pc, #320]	; (80079e8 <Config_0+0x1e0>)
 80078a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80078ac:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U7I1=0;
 80078ae:	4b4f      	ldr	r3, [pc, #316]	; (80079ec <Config_0+0x1e4>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U7I1=1000;
 80078b4:	4b4e      	ldr	r3, [pc, #312]	; (80079f0 <Config_0+0x1e8>)
 80078b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80078ba:	801a      	strh	r2, [r3, #0]
	PWM_Pulses[0] = 64; PWM_Pulses[1] = 96; PWM_Pulses[2] = 128; PWM_Pulses[3] = 160; PWM_Pulses[4] = 204;
	PWM_In_EN = 0b00000000;

#else //in this case we test digital inputs

	Digital_In_EN = 0b00011101; //bit for PB4 is 0 to ensure it isn't used as PB4 seemed to have hardware problems
 80078bc:	4b4d      	ldr	r3, [pc, #308]	; (80079f4 <Config_0+0x1ec>)
 80078be:	221d      	movs	r2, #29
 80078c0:	701a      	strb	r2, [r3, #0]
	PWM_Out_EN = 0b00000000;
 80078c2:	4b4d      	ldr	r3, [pc, #308]	; (80079f8 <Config_0+0x1f0>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	701a      	strb	r2, [r3, #0]
	PWM_Prescalers[0] = 0; PWM_Prescalers[1] = 0; PWM_Prescalers[2] = 0; PWM_Prescalers[3] = 0; PWM_Prescalers[4] = 0;
 80078c8:	4b4c      	ldr	r3, [pc, #304]	; (80079fc <Config_0+0x1f4>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	801a      	strh	r2, [r3, #0]
 80078ce:	4b4b      	ldr	r3, [pc, #300]	; (80079fc <Config_0+0x1f4>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	805a      	strh	r2, [r3, #2]
 80078d4:	4b49      	ldr	r3, [pc, #292]	; (80079fc <Config_0+0x1f4>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	809a      	strh	r2, [r3, #4]
 80078da:	4b48      	ldr	r3, [pc, #288]	; (80079fc <Config_0+0x1f4>)
 80078dc:	2200      	movs	r2, #0
 80078de:	80da      	strh	r2, [r3, #6]
 80078e0:	4b46      	ldr	r3, [pc, #280]	; (80079fc <Config_0+0x1f4>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	811a      	strh	r2, [r3, #8]
	PWM_Pulses[0] = 0; PWM_Pulses[1] = 0; PWM_Pulses[2] = 0; PWM_Pulses[3] = 0; PWM_Pulses[4] = 0;
 80078e6:	4b46      	ldr	r3, [pc, #280]	; (8007a00 <Config_0+0x1f8>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	801a      	strh	r2, [r3, #0]
 80078ec:	4b44      	ldr	r3, [pc, #272]	; (8007a00 <Config_0+0x1f8>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	805a      	strh	r2, [r3, #2]
 80078f2:	4b43      	ldr	r3, [pc, #268]	; (8007a00 <Config_0+0x1f8>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	809a      	strh	r2, [r3, #4]
 80078f8:	4b41      	ldr	r3, [pc, #260]	; (8007a00 <Config_0+0x1f8>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	80da      	strh	r2, [r3, #6]
 80078fe:	4b40      	ldr	r3, [pc, #256]	; (8007a00 <Config_0+0x1f8>)
 8007900:	2200      	movs	r2, #0
 8007902:	811a      	strh	r2, [r3, #8]
	PWM_In_EN = 0b00000000;
 8007904:	4b3f      	ldr	r3, [pc, #252]	; (8007a04 <Config_0+0x1fc>)
 8007906:	2200      	movs	r2, #0
 8007908:	701a      	strb	r2, [r3, #0]

#endif

	uint32_t temp_Digital_In_Interrupt_Can_Falling[5]={ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };
 800790a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800790e:	2200      	movs	r2, #0
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	605a      	str	r2, [r3, #4]
 8007914:	609a      	str	r2, [r3, #8]
 8007916:	60da      	str	r2, [r3, #12]
 8007918:	611a      	str	r2, [r3, #16]
	uint32_t temp_Digital_In_Interrupt_Can_Rising[5]={ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };
 800791a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	605a      	str	r2, [r3, #4]
 8007924:	609a      	str	r2, [r3, #8]
 8007926:	60da      	str	r2, [r3, #12]
 8007928:	611a      	str	r2, [r3, #16]
	uint32_t temp_Digital_In_Interrupt_Power_High_Rising[5]={ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };
 800792a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	605a      	str	r2, [r3, #4]
 8007934:	609a      	str	r2, [r3, #8]
 8007936:	60da      	str	r2, [r3, #12]
 8007938:	611a      	str	r2, [r3, #16]
	uint32_t temp_Digital_In_Interrupt_Power_High_Falling[5]={ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };
 800793a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800793e:	2200      	movs	r2, #0
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	605a      	str	r2, [r3, #4]
 8007944:	609a      	str	r2, [r3, #8]
 8007946:	60da      	str	r2, [r3, #12]
 8007948:	611a      	str	r2, [r3, #16]
	uint32_t temp_Digital_In_Interrupt_PWM_Rising[5]={ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };
 800794a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	605a      	str	r2, [r3, #4]
 8007954:	609a      	str	r2, [r3, #8]
 8007956:	60da      	str	r2, [r3, #12]
 8007958:	611a      	str	r2, [r3, #16]
	uint32_t temp_Digital_In_Interrupt_PWM_Falling[5]={ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };
 800795a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	605a      	str	r2, [r3, #4]
 8007964:	609a      	str	r2, [r3, #8]
 8007966:	60da      	str	r2, [r3, #12]
 8007968:	611a      	str	r2, [r3, #16]
	uint32_t temp_Digital_In_Interrupt_Power_Low_Rising[5]={ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };
 800796a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	605a      	str	r2, [r3, #4]
 8007974:	609a      	str	r2, [r3, #8]
 8007976:	60da      	str	r2, [r3, #12]
 8007978:	611a      	str	r2, [r3, #16]
	uint32_t temp_Digital_In_Interrupt_Power_Low_Falling[5]={ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };
 800797a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800797e:	2200      	movs	r2, #0
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	605a      	str	r2, [r3, #4]
 8007984:	609a      	str	r2, [r3, #8]
 8007986:	60da      	str	r2, [r3, #12]
 8007988:	611a      	str	r2, [r3, #16]
	for(uint32_t i=0; i<5; i++)
 800798a:	2300      	movs	r3, #0
 800798c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007990:	e0b7      	b.n	8007b02 <Config_0+0x2fa>
 8007992:	bf00      	nop
 8007994:	20000928 	.word	0x20000928
 8007998:	2000098c 	.word	0x2000098c
 800799c:	20000944 	.word	0x20000944
 80079a0:	2000072c 	.word	0x2000072c
 80079a4:	20000220 	.word	0x20000220
 80079a8:	200005ec 	.word	0x200005ec
 80079ac:	2000098a 	.word	0x2000098a
 80079b0:	20000a80 	.word	0x20000a80
 80079b4:	20000596 	.word	0x20000596
 80079b8:	200009f2 	.word	0x200009f2
 80079bc:	2000098e 	.word	0x2000098e
 80079c0:	20000584 	.word	0x20000584
 80079c4:	20000b1c 	.word	0x20000b1c
 80079c8:	20000244 	.word	0x20000244
 80079cc:	20000914 	.word	0x20000914
 80079d0:	20000874 	.word	0x20000874
 80079d4:	20000112 	.word	0x20000112
 80079d8:	20000594 	.word	0x20000594
 80079dc:	2000065c 	.word	0x2000065c
 80079e0:	20000246 	.word	0x20000246
 80079e4:	2000093c 	.word	0x2000093c
 80079e8:	20000660 	.word	0x20000660
 80079ec:	20000116 	.word	0x20000116
 80079f0:	200004a8 	.word	0x200004a8
 80079f4:	20000114 	.word	0x20000114
 80079f8:	200009f0 	.word	0x200009f0
 80079fc:	2000059c 	.word	0x2000059c
 8007a00:	20000828 	.word	0x20000828
 8007a04:	200004aa 	.word	0x200004aa
	{
		Digital_In_Interrupt_Can_Falling[i]=temp_Digital_In_Interrupt_Can_Falling[i];
 8007a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a12:	4413      	add	r3, r2
 8007a14:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007a18:	b2d9      	uxtb	r1, r3
 8007a1a:	4a96      	ldr	r2, [pc, #600]	; (8007c74 <Config_0+0x46c>)
 8007a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a20:	4413      	add	r3, r2
 8007a22:	460a      	mov	r2, r1
 8007a24:	701a      	strb	r2, [r3, #0]
		Digital_In_Interrupt_Can_Rising[i]=temp_Digital_In_Interrupt_Can_Rising[i];
 8007a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a30:	4413      	add	r3, r2
 8007a32:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8007a36:	b2d9      	uxtb	r1, r3
 8007a38:	4a8f      	ldr	r2, [pc, #572]	; (8007c78 <Config_0+0x470>)
 8007a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a3e:	4413      	add	r3, r2
 8007a40:	460a      	mov	r2, r1
 8007a42:	701a      	strb	r2, [r3, #0]
		Digital_In_Interrupt_Power_High_Falling[i]=temp_Digital_In_Interrupt_Power_High_Falling[i];
 8007a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a4e:	4413      	add	r3, r2
 8007a50:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8007a54:	b2d9      	uxtb	r1, r3
 8007a56:	4a89      	ldr	r2, [pc, #548]	; (8007c7c <Config_0+0x474>)
 8007a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a5c:	4413      	add	r3, r2
 8007a5e:	460a      	mov	r2, r1
 8007a60:	701a      	strb	r2, [r3, #0]
		Digital_In_Interrupt_Power_High_Rising[i]=temp_Digital_In_Interrupt_Power_High_Rising[i];
 8007a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8007a72:	b2d9      	uxtb	r1, r3
 8007a74:	4a82      	ldr	r2, [pc, #520]	; (8007c80 <Config_0+0x478>)
 8007a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a7a:	4413      	add	r3, r2
 8007a7c:	460a      	mov	r2, r1
 8007a7e:	701a      	strb	r2, [r3, #0]
		Digital_In_Interrupt_Power_Low_Falling[i]=temp_Digital_In_Interrupt_Power_Low_Falling[i];
 8007a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8007a90:	b2d9      	uxtb	r1, r3
 8007a92:	4a7c      	ldr	r2, [pc, #496]	; (8007c84 <Config_0+0x47c>)
 8007a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a98:	4413      	add	r3, r2
 8007a9a:	460a      	mov	r2, r1
 8007a9c:	701a      	strb	r2, [r3, #0]
		Digital_In_Interrupt_Power_Low_Rising[i]=temp_Digital_In_Interrupt_Power_Low_Rising[i];
 8007a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8007aae:	b2d9      	uxtb	r1, r3
 8007ab0:	4a75      	ldr	r2, [pc, #468]	; (8007c88 <Config_0+0x480>)
 8007ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab6:	4413      	add	r3, r2
 8007ab8:	460a      	mov	r2, r1
 8007aba:	701a      	strb	r2, [r3, #0]
		Digital_In_Interrupt_PWM_Falling[i]=temp_Digital_In_Interrupt_PWM_Falling[i];
 8007abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8007acc:	b2d9      	uxtb	r1, r3
 8007ace:	4a6f      	ldr	r2, [pc, #444]	; (8007c8c <Config_0+0x484>)
 8007ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ad4:	4413      	add	r3, r2
 8007ad6:	460a      	mov	r2, r1
 8007ad8:	701a      	strb	r2, [r3, #0]
		Digital_In_Interrupt_PWM_Rising[i]=temp_Digital_In_Interrupt_PWM_Rising[i];
 8007ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8007aea:	b2d9      	uxtb	r1, r3
 8007aec:	4a68      	ldr	r2, [pc, #416]	; (8007c90 <Config_0+0x488>)
 8007aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af2:	4413      	add	r3, r2
 8007af4:	460a      	mov	r2, r1
 8007af6:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<5; i++)
 8007af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007afc:	3301      	adds	r3, #1
 8007afe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	f67f af7e 	bls.w	8007a08 <Config_0+0x200>
	}

	Default_Switch_State = 0b00000000;
 8007b0c:	4b61      	ldr	r3, [pc, #388]	; (8007c94 <Config_0+0x48c>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	701a      	strb	r2, [r3, #0]

	Can_IDs[0] = 0x0F; Can_IDs[1] = 0x10; Can_IDs[2] = 0x11; Can_IDs[3] = 0x12; Can_IDs[4] = 0x13; Can_IDs[5] = 0x14; Can_IDs[6] = 0x15; Can_IDs[7] = 0x16;
 8007b12:	4b61      	ldr	r3, [pc, #388]	; (8007c98 <Config_0+0x490>)
 8007b14:	220f      	movs	r2, #15
 8007b16:	801a      	strh	r2, [r3, #0]
 8007b18:	4b5f      	ldr	r3, [pc, #380]	; (8007c98 <Config_0+0x490>)
 8007b1a:	2210      	movs	r2, #16
 8007b1c:	805a      	strh	r2, [r3, #2]
 8007b1e:	4b5e      	ldr	r3, [pc, #376]	; (8007c98 <Config_0+0x490>)
 8007b20:	2211      	movs	r2, #17
 8007b22:	809a      	strh	r2, [r3, #4]
 8007b24:	4b5c      	ldr	r3, [pc, #368]	; (8007c98 <Config_0+0x490>)
 8007b26:	2212      	movs	r2, #18
 8007b28:	80da      	strh	r2, [r3, #6]
 8007b2a:	4b5b      	ldr	r3, [pc, #364]	; (8007c98 <Config_0+0x490>)
 8007b2c:	2213      	movs	r2, #19
 8007b2e:	811a      	strh	r2, [r3, #8]
 8007b30:	4b59      	ldr	r3, [pc, #356]	; (8007c98 <Config_0+0x490>)
 8007b32:	2214      	movs	r2, #20
 8007b34:	815a      	strh	r2, [r3, #10]
 8007b36:	4b58      	ldr	r3, [pc, #352]	; (8007c98 <Config_0+0x490>)
 8007b38:	2215      	movs	r2, #21
 8007b3a:	819a      	strh	r2, [r3, #12]
 8007b3c:	4b56      	ldr	r3, [pc, #344]	; (8007c98 <Config_0+0x490>)
 8007b3e:	2216      	movs	r2, #22
 8007b40:	81da      	strh	r2, [r3, #14]
	Can_DLCs[0] = 8; Can_DLCs[1] = 8; Can_DLCs[2] = 3; Can_DLCs[3] = 1; Can_DLCs[4] = 2; Can_DLCs[5] = 8; Can_DLCs[6] = 3; Can_DLCs[7] = 7;
 8007b42:	4b56      	ldr	r3, [pc, #344]	; (8007c9c <Config_0+0x494>)
 8007b44:	2208      	movs	r2, #8
 8007b46:	701a      	strb	r2, [r3, #0]
 8007b48:	4b54      	ldr	r3, [pc, #336]	; (8007c9c <Config_0+0x494>)
 8007b4a:	2208      	movs	r2, #8
 8007b4c:	705a      	strb	r2, [r3, #1]
 8007b4e:	4b53      	ldr	r3, [pc, #332]	; (8007c9c <Config_0+0x494>)
 8007b50:	2203      	movs	r2, #3
 8007b52:	709a      	strb	r2, [r3, #2]
 8007b54:	4b51      	ldr	r3, [pc, #324]	; (8007c9c <Config_0+0x494>)
 8007b56:	2201      	movs	r2, #1
 8007b58:	70da      	strb	r2, [r3, #3]
 8007b5a:	4b50      	ldr	r3, [pc, #320]	; (8007c9c <Config_0+0x494>)
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	711a      	strb	r2, [r3, #4]
 8007b60:	4b4e      	ldr	r3, [pc, #312]	; (8007c9c <Config_0+0x494>)
 8007b62:	2208      	movs	r2, #8
 8007b64:	715a      	strb	r2, [r3, #5]
 8007b66:	4b4d      	ldr	r3, [pc, #308]	; (8007c9c <Config_0+0x494>)
 8007b68:	2203      	movs	r2, #3
 8007b6a:	719a      	strb	r2, [r3, #6]
 8007b6c:	4b4b      	ldr	r3, [pc, #300]	; (8007c9c <Config_0+0x494>)
 8007b6e:	2207      	movs	r2, #7
 8007b70:	71da      	strb	r2, [r3, #7]

	uint8_t temp_Can_Config_Bytes[8][8]={	{ 1, 1, 1, 1, 1, 1, 1, 1 },
 8007b72:	4b4b      	ldr	r3, [pc, #300]	; (8007ca0 <Config_0+0x498>)
 8007b74:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8007b78:	461d      	mov	r5, r3
 8007b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b86:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
											{ 1, 1, 1, 0, 0, 0, 0, 0 },
											{ 2, 0, 0, 0, 0, 0, 0, 0 },
											{ 2, 0, 1, 1, 1, 2, 0, 1 },
											{ 0, 0, 0, 0, 0, 0, 0, 0 },
											{ 1, 2, 0, 2, 0, 2, 0, 0 }	};
	uint8_t temp_Can_Config_Datas[8][8]={	{ 1, 1, 1, 1, 1, 1, 1, 1 },
 8007b8e:	1d3b      	adds	r3, r7, #4
 8007b90:	4a44      	ldr	r2, [pc, #272]	; (8007ca4 <Config_0+0x49c>)
 8007b92:	461c      	mov	r4, r3
 8007b94:	4615      	mov	r5, r2
 8007b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ba2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007ba6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
											{ MESS_U5V, MESS_U6V, MESS_U7V, 0, 0, 0, 0, 0 },
											{ MESS_U5V, 0, 0, 0, 0, 0, 0, 0 },
											{ MESS_PWM0_Freq, 0, MESS_PWM0_DC, MESS_PWM3_Freq, MESS_PWM3_DC, MESS_PWM4_Freq, 0, MESS_PWM4_DC },
											{ 0, 0, 0, 0, 0, 0, 0, 0 },
											{ MESS_DI, MESS_U5V, 0, MESS_U6V, 0, MESS_U7V, 0, 0 }	};
	for(uint32_t i=0; i<8; i++)
 8007baa:	2300      	movs	r3, #0
 8007bac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007bb0:	e039      	b.n	8007c26 <Config_0+0x41e>
	{
		for(uint32_t j=0; j<8; j++)
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007bb8:	e02c      	b.n	8007c14 <Config_0+0x40c>
		{
			Can_Config_Bytes[i][j]=temp_Can_Config_Bytes[i][j];
 8007bba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007bc4:	441a      	add	r2, r3
 8007bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007bca:	4413      	add	r3, r2
 8007bcc:	3bec      	subs	r3, #236	; 0xec
 8007bce:	7819      	ldrb	r1, [r3, #0]
 8007bd0:	4a35      	ldr	r2, [pc, #212]	; (8007ca8 <Config_0+0x4a0>)
 8007bd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	441a      	add	r2, r3
 8007bda:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007bde:	4413      	add	r3, r2
 8007be0:	460a      	mov	r2, r1
 8007be2:	701a      	strb	r2, [r3, #0]
			Can_Config_Datas[i][j]=temp_Can_Config_Datas[i][j];
 8007be4:	1d3a      	adds	r2, r7, #4
 8007be6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	441a      	add	r2, r3
 8007bee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007bf2:	4413      	add	r3, r2
 8007bf4:	7819      	ldrb	r1, [r3, #0]
 8007bf6:	4a2d      	ldr	r2, [pc, #180]	; (8007cac <Config_0+0x4a4>)
 8007bf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bfc:	00db      	lsls	r3, r3, #3
 8007bfe:	441a      	add	r2, r3
 8007c00:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007c04:	4413      	add	r3, r2
 8007c06:	460a      	mov	r2, r1
 8007c08:	701a      	strb	r2, [r3, #0]
		for(uint32_t j=0; j<8; j++)
 8007c0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007c0e:	3301      	adds	r3, #1
 8007c10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007c14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007c18:	2b07      	cmp	r3, #7
 8007c1a:	d9ce      	bls.n	8007bba <Config_0+0x3b2>
	for(uint32_t i=0; i<8; i++)
 8007c1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c20:	3301      	adds	r3, #1
 8007c22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007c26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c2a:	2b07      	cmp	r3, #7
 8007c2c:	d9c1      	bls.n	8007bb2 <Config_0+0x3aa>
		}
	}
	Can_Sync_Enable = 0b00100000;
 8007c2e:	4b20      	ldr	r3, [pc, #128]	; (8007cb0 <Config_0+0x4a8>)
 8007c30:	2220      	movs	r2, #32
 8007c32:	701a      	strb	r2, [r3, #0]
	Can_Timed_Enable = 0b10000000;
 8007c34:	4b1f      	ldr	r3, [pc, #124]	; (8007cb4 <Config_0+0x4ac>)
 8007c36:	2280      	movs	r2, #128	; 0x80
 8007c38:	701a      	strb	r2, [r3, #0]
	Can_Interval=1000;
 8007c3a:	4b1f      	ldr	r3, [pc, #124]	; (8007cb8 <Config_0+0x4b0>)
 8007c3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c40:	801a      	strh	r2, [r3, #0]
	Can_Sync_Delay=0; //500 corresponds to 5ms delay
 8007c42:	4b1e      	ldr	r3, [pc, #120]	; (8007cbc <Config_0+0x4b4>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	801a      	strh	r2, [r3, #0]

	sample_temperature=0; //these are only saved to allow configuration of continous temperature/voltage reading
 8007c48:	4b1d      	ldr	r3, [pc, #116]	; (8007cc0 <Config_0+0x4b8>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]
	sample_voltage=0;
 8007c4e:	4b1d      	ldr	r3, [pc, #116]	; (8007cc4 <Config_0+0x4bc>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]
	SampleTemperatureVoltagePeriod=10; //1ms is a good compromise for now with temperature and whatnot, can test higher numbers if too hot
 8007c54:	4b1c      	ldr	r3, [pc, #112]	; (8007cc8 <Config_0+0x4c0>)
 8007c56:	220a      	movs	r2, #10
 8007c58:	801a      	strh	r2, [r3, #0]
	SampleTemperatureBurst=0;
 8007c5a:	4b1c      	ldr	r3, [pc, #112]	; (8007ccc <Config_0+0x4c4>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	701a      	strb	r2, [r3, #0]
	SampleVoltageBurst=0;
 8007c60:	4b1b      	ldr	r3, [pc, #108]	; (8007cd0 <Config_0+0x4c8>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	701a      	strb	r2, [r3, #0]
}
 8007c66:	bf00      	nop
 8007c68:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bcb0      	pop	{r4, r5, r7}
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	200000b4 	.word	0x200000b4
 8007c78:	200000c0 	.word	0x200000c0
 8007c7c:	2000078c 	.word	0x2000078c
 8007c80:	20000588 	.word	0x20000588
 8007c84:	20000918 	.word	0x20000918
 8007c88:	200004b8 	.word	0x200004b8
 8007c8c:	2000010c 	.word	0x2000010c
 8007c90:	200004ac 	.word	0x200004ac
 8007c94:	200004ab 	.word	0x200004ab
 8007c98:	2000087c 	.word	0x2000087c
 8007c9c:	2000092c 	.word	0x2000092c
 8007ca0:	0800c1cc 	.word	0x0800c1cc
 8007ca4:	0800c20c 	.word	0x0800c20c
 8007ca8:	200002f4 	.word	0x200002f4
 8007cac:	2000019c 	.word	0x2000019c
 8007cb0:	20000500 	.word	0x20000500
 8007cb4:	20000115 	.word	0x20000115
 8007cb8:	20000118 	.word	0x20000118
 8007cbc:	20000440 	.word	0x20000440
 8007cc0:	200004b4 	.word	0x200004b4
 8007cc4:	200000bc 	.word	0x200000bc
 8007cc8:	20000988 	.word	0x20000988
 8007ccc:	2000091d 	.word	0x2000091d
 8007cd0:	200001dd 	.word	0x200001dd

08007cd4 <Config_Write_Flash>:
	//TODO: setup code for each node that will be in the car
}


void Config_Write_Flash(void)
{
 8007cd4:	b5b0      	push	{r4, r5, r7, lr}
 8007cd6:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 8007cda:	af00      	add	r7, sp, #0
	uint32_t data[512] = {0};
 8007cdc:	f107 0320 	add.w	r3, r7, #32
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	2100      	movs	r1, #0
 8007cea:	f004 fa5b 	bl	800c1a4 <memset>

	//bytes: [underlimit high], [underlimit low], [overlimit high], [overlimit low]
	data[U5_VOLTAGE_WARNING_LIMIT_POS]=((warn_undervoltage_U5<<0)&0xFFFF)+((warn_overvoltage_U5<<16)&0xFFFF0000);
 8007cee:	4bb2      	ldr	r3, [pc, #712]	; (8007fb8 <Config_Write_Flash+0x2e4>)
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	4bb1      	ldr	r3, [pc, #708]	; (8007fbc <Config_Write_Flash+0x2e8>)
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	041b      	lsls	r3, r3, #16
 8007cfa:	441a      	add	r2, r3
 8007cfc:	f107 0320 	add.w	r3, r7, #32
 8007d00:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	data[U5_TEMPERATURE_WARNING_LIMIT_POS]=((warn_undertemperature_U5<<0)&0xFFFF)+((warn_overtemperature_U5<<16)&0xFFFF0000);
 8007d04:	4bae      	ldr	r3, [pc, #696]	; (8007fc0 <Config_Write_Flash+0x2ec>)
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	4bae      	ldr	r3, [pc, #696]	; (8007fc4 <Config_Write_Flash+0x2f0>)
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	041b      	lsls	r3, r3, #16
 8007d10:	441a      	add	r2, r3
 8007d12:	f107 0320 	add.w	r3, r7, #32
 8007d16:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	data[U5_CURRENT_WARNING_LIMIT_I0_POS]=((warn_undercurrent_U5I0<<0)&0xFFFF)+((warn_overcurrent_U5I0<<16)&0xFFFF0000);
 8007d1a:	4bab      	ldr	r3, [pc, #684]	; (8007fc8 <Config_Write_Flash+0x2f4>)
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	4baa      	ldr	r3, [pc, #680]	; (8007fcc <Config_Write_Flash+0x2f8>)
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	041b      	lsls	r3, r3, #16
 8007d26:	441a      	add	r2, r3
 8007d28:	f107 0320 	add.w	r3, r7, #32
 8007d2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	data[U5_CURRENT_WARNING_LIMIT_I1_POS]=((warn_undercurrent_U5I1<<0)&0xFFFF)+((warn_overcurrent_U5I1<<16)&0xFFFF0000);
 8007d30:	4ba7      	ldr	r3, [pc, #668]	; (8007fd0 <Config_Write_Flash+0x2fc>)
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	461a      	mov	r2, r3
 8007d36:	4ba7      	ldr	r3, [pc, #668]	; (8007fd4 <Config_Write_Flash+0x300>)
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	041b      	lsls	r3, r3, #16
 8007d3c:	441a      	add	r2, r3
 8007d3e:	f107 0320 	add.w	r3, r7, #32
 8007d42:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	data[U6_VOLTAGE_WARNING_LIMIT_POS]=((warn_undervoltage_U6<<0)&0xFFFF)+((warn_overvoltage_U6<<16)&0xFFFF0000);
 8007d46:	4ba4      	ldr	r3, [pc, #656]	; (8007fd8 <Config_Write_Flash+0x304>)
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	4ba3      	ldr	r3, [pc, #652]	; (8007fdc <Config_Write_Flash+0x308>)
 8007d4e:	881b      	ldrh	r3, [r3, #0]
 8007d50:	041b      	lsls	r3, r3, #16
 8007d52:	441a      	add	r2, r3
 8007d54:	f107 0320 	add.w	r3, r7, #32
 8007d58:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	data[U6_TEMPERATURE_WARNING_LIMIT_POS]=((warn_undertemperature_U6<<0)&0xFFFF)+((warn_overtemperature_U6<<16)&0xFFFF0000);
 8007d5c:	4ba0      	ldr	r3, [pc, #640]	; (8007fe0 <Config_Write_Flash+0x30c>)
 8007d5e:	881b      	ldrh	r3, [r3, #0]
 8007d60:	461a      	mov	r2, r3
 8007d62:	4ba0      	ldr	r3, [pc, #640]	; (8007fe4 <Config_Write_Flash+0x310>)
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	041b      	lsls	r3, r3, #16
 8007d68:	441a      	add	r2, r3
 8007d6a:	f107 0320 	add.w	r3, r7, #32
 8007d6e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	data[U6_CURRENT_WARNING_LIMIT_I0_POS]=((warn_undercurrent_U6I0<<0)&0xFFFF)+((warn_overcurrent_U6I0<<16)&0xFFFF0000);
 8007d72:	4b9d      	ldr	r3, [pc, #628]	; (8007fe8 <Config_Write_Flash+0x314>)
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	4b9c      	ldr	r3, [pc, #624]	; (8007fec <Config_Write_Flash+0x318>)
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	041b      	lsls	r3, r3, #16
 8007d7e:	441a      	add	r2, r3
 8007d80:	f107 0320 	add.w	r3, r7, #32
 8007d84:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	data[U6_CURRENT_WARNING_LIMIT_I1_POS]=((warn_undercurrent_U6I1<<0)&0xFFFF)+((warn_overcurrent_U6I1<<16)&0xFFFF0000);
 8007d88:	4b99      	ldr	r3, [pc, #612]	; (8007ff0 <Config_Write_Flash+0x31c>)
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	4b99      	ldr	r3, [pc, #612]	; (8007ff4 <Config_Write_Flash+0x320>)
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	041b      	lsls	r3, r3, #16
 8007d94:	441a      	add	r2, r3
 8007d96:	f107 0320 	add.w	r3, r7, #32
 8007d9a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	data[U7_VOLTAGE_WARNING_LIMIT_POS]=((warn_undervoltage_U7<<0)&0xFFFF)+((warn_overvoltage_U7<<16)&0xFFFF0000);
 8007d9e:	4b96      	ldr	r3, [pc, #600]	; (8007ff8 <Config_Write_Flash+0x324>)
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	4b95      	ldr	r3, [pc, #596]	; (8007ffc <Config_Write_Flash+0x328>)
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	041b      	lsls	r3, r3, #16
 8007daa:	441a      	add	r2, r3
 8007dac:	f107 0320 	add.w	r3, r7, #32
 8007db0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	data[U7_TEMPERATURE_WARNING_LIMIT_POS]=((warn_undertemperature_U7<<0)&0xFFFF)+((warn_overtemperature_U7<<16)&0xFFFF0000);
 8007db4:	4b92      	ldr	r3, [pc, #584]	; (8008000 <Config_Write_Flash+0x32c>)
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	4b92      	ldr	r3, [pc, #584]	; (8008004 <Config_Write_Flash+0x330>)
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	041b      	lsls	r3, r3, #16
 8007dc0:	441a      	add	r2, r3
 8007dc2:	f107 0320 	add.w	r3, r7, #32
 8007dc6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	data[U7_CURRENT_WARNING_LIMIT_I0_POS]=((warn_undercurrent_U7I0<<0)&0xFFFF)+((warn_overcurrent_U7I0<<16)&0xFFFF0000);
 8007dca:	4b8f      	ldr	r3, [pc, #572]	; (8008008 <Config_Write_Flash+0x334>)
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	4b8e      	ldr	r3, [pc, #568]	; (800800c <Config_Write_Flash+0x338>)
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	041b      	lsls	r3, r3, #16
 8007dd6:	441a      	add	r2, r3
 8007dd8:	f107 0320 	add.w	r3, r7, #32
 8007ddc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	data[U7_CURRENT_WARNING_LIMIT_I1_POS]=((warn_undercurrent_U7I1<<0)&0xFFFF)+((warn_overcurrent_U7I1<<16)&0xFFFF0000);
 8007de0:	4b8b      	ldr	r3, [pc, #556]	; (8008010 <Config_Write_Flash+0x33c>)
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	461a      	mov	r2, r3
 8007de6:	4b8b      	ldr	r3, [pc, #556]	; (8008014 <Config_Write_Flash+0x340>)
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	041b      	lsls	r3, r3, #16
 8007dec:	441a      	add	r2, r3
 8007dee:	f107 0320 	add.w	r3, r7, #32
 8007df2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	//bytes: [x], [x], [digital in interrupt enable], [digital in enable]
	data[DIGITAL_IN_0_POS]=(Digital_In_EN&0xFF)+((Digital_In_Interrupt_EN&0xFF)<<8);
 8007df6:	4b88      	ldr	r3, [pc, #544]	; (8008018 <Config_Write_Flash+0x344>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	4b87      	ldr	r3, [pc, #540]	; (800801c <Config_Write_Flash+0x348>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	021b      	lsls	r3, r3, #8
 8007e02:	4413      	add	r3, r2
 8007e04:	461a      	mov	r2, r3
 8007e06:	f107 0320 	add.w	r3, r7, #32
 8007e0a:	601a      	str	r2, [r3, #0]

	//oh boy
	data[DIGITAL_IN_1_POS+0]=((Digital_In_Interrupt_Can_Falling[0]&0xFF)<<0)+((Digital_In_Interrupt_Can_Falling[1]&0xFF)<<8)+((Digital_In_Interrupt_Can_Falling[2])<<16)+((Digital_In_Interrupt_Can_Falling[3]&0xFF)<<24);
 8007e0c:	4b84      	ldr	r3, [pc, #528]	; (8008020 <Config_Write_Flash+0x34c>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	461a      	mov	r2, r3
 8007e12:	4b83      	ldr	r3, [pc, #524]	; (8008020 <Config_Write_Flash+0x34c>)
 8007e14:	785b      	ldrb	r3, [r3, #1]
 8007e16:	021b      	lsls	r3, r3, #8
 8007e18:	441a      	add	r2, r3
 8007e1a:	4b81      	ldr	r3, [pc, #516]	; (8008020 <Config_Write_Flash+0x34c>)
 8007e1c:	789b      	ldrb	r3, [r3, #2]
 8007e1e:	041b      	lsls	r3, r3, #16
 8007e20:	441a      	add	r2, r3
 8007e22:	4b7f      	ldr	r3, [pc, #508]	; (8008020 <Config_Write_Flash+0x34c>)
 8007e24:	78db      	ldrb	r3, [r3, #3]
 8007e26:	061b      	lsls	r3, r3, #24
 8007e28:	4413      	add	r3, r2
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f107 0320 	add.w	r3, r7, #32
 8007e30:	605a      	str	r2, [r3, #4]
	data[DIGITAL_IN_1_POS+1]=((Digital_In_Interrupt_Can_Falling[4]&0xFF)<<0)+((Digital_In_Interrupt_Can_Rising[0]&0xFF)<<8)+((Digital_In_Interrupt_Can_Rising[1]&0xFF)<<16)+((Digital_In_Interrupt_Can_Rising[2]&0xFF)<<24);
 8007e32:	4b7b      	ldr	r3, [pc, #492]	; (8008020 <Config_Write_Flash+0x34c>)
 8007e34:	791b      	ldrb	r3, [r3, #4]
 8007e36:	461a      	mov	r2, r3
 8007e38:	4b7a      	ldr	r3, [pc, #488]	; (8008024 <Config_Write_Flash+0x350>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	021b      	lsls	r3, r3, #8
 8007e3e:	441a      	add	r2, r3
 8007e40:	4b78      	ldr	r3, [pc, #480]	; (8008024 <Config_Write_Flash+0x350>)
 8007e42:	785b      	ldrb	r3, [r3, #1]
 8007e44:	041b      	lsls	r3, r3, #16
 8007e46:	441a      	add	r2, r3
 8007e48:	4b76      	ldr	r3, [pc, #472]	; (8008024 <Config_Write_Flash+0x350>)
 8007e4a:	789b      	ldrb	r3, [r3, #2]
 8007e4c:	061b      	lsls	r3, r3, #24
 8007e4e:	4413      	add	r3, r2
 8007e50:	461a      	mov	r2, r3
 8007e52:	f107 0320 	add.w	r3, r7, #32
 8007e56:	609a      	str	r2, [r3, #8]
	data[DIGITAL_IN_1_POS+2]=((Digital_In_Interrupt_Can_Rising[3]&0xFF)<<0)+((Digital_In_Interrupt_Can_Rising[4]&0xFF)<<8)+((Digital_In_Interrupt_Power_High_Rising[0]&0xFF)<<16)+((Digital_In_Interrupt_Power_High_Rising[1]&0xFF)<<24);
 8007e58:	4b72      	ldr	r3, [pc, #456]	; (8008024 <Config_Write_Flash+0x350>)
 8007e5a:	78db      	ldrb	r3, [r3, #3]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	4b71      	ldr	r3, [pc, #452]	; (8008024 <Config_Write_Flash+0x350>)
 8007e60:	791b      	ldrb	r3, [r3, #4]
 8007e62:	021b      	lsls	r3, r3, #8
 8007e64:	441a      	add	r2, r3
 8007e66:	4b70      	ldr	r3, [pc, #448]	; (8008028 <Config_Write_Flash+0x354>)
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	041b      	lsls	r3, r3, #16
 8007e6c:	441a      	add	r2, r3
 8007e6e:	4b6e      	ldr	r3, [pc, #440]	; (8008028 <Config_Write_Flash+0x354>)
 8007e70:	785b      	ldrb	r3, [r3, #1]
 8007e72:	061b      	lsls	r3, r3, #24
 8007e74:	4413      	add	r3, r2
 8007e76:	461a      	mov	r2, r3
 8007e78:	f107 0320 	add.w	r3, r7, #32
 8007e7c:	60da      	str	r2, [r3, #12]
	data[DIGITAL_IN_1_POS+3]=((Digital_In_Interrupt_Power_High_Rising[2]&0xFF)<<0)+((Digital_In_Interrupt_Power_High_Rising[3]&0xFF)<<8)+((Digital_In_Interrupt_Power_High_Rising[4]&0xFF)<<16)+((Digital_In_Interrupt_Power_High_Falling[0]&0xFF)<<24);
 8007e7e:	4b6a      	ldr	r3, [pc, #424]	; (8008028 <Config_Write_Flash+0x354>)
 8007e80:	789b      	ldrb	r3, [r3, #2]
 8007e82:	461a      	mov	r2, r3
 8007e84:	4b68      	ldr	r3, [pc, #416]	; (8008028 <Config_Write_Flash+0x354>)
 8007e86:	78db      	ldrb	r3, [r3, #3]
 8007e88:	021b      	lsls	r3, r3, #8
 8007e8a:	441a      	add	r2, r3
 8007e8c:	4b66      	ldr	r3, [pc, #408]	; (8008028 <Config_Write_Flash+0x354>)
 8007e8e:	791b      	ldrb	r3, [r3, #4]
 8007e90:	041b      	lsls	r3, r3, #16
 8007e92:	441a      	add	r2, r3
 8007e94:	4b65      	ldr	r3, [pc, #404]	; (800802c <Config_Write_Flash+0x358>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	061b      	lsls	r3, r3, #24
 8007e9a:	4413      	add	r3, r2
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	f107 0320 	add.w	r3, r7, #32
 8007ea2:	611a      	str	r2, [r3, #16]
	data[DIGITAL_IN_1_POS+4]=((Digital_In_Interrupt_Power_High_Falling[1]&0xFF)<<0)+((Digital_In_Interrupt_Power_High_Falling[2]&0xFF)<<8)+((Digital_In_Interrupt_Power_High_Falling[3]&0xFF)<<16)+((Digital_In_Interrupt_Power_High_Falling[4]&0xFF)<<24);
 8007ea4:	4b61      	ldr	r3, [pc, #388]	; (800802c <Config_Write_Flash+0x358>)
 8007ea6:	785b      	ldrb	r3, [r3, #1]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	4b60      	ldr	r3, [pc, #384]	; (800802c <Config_Write_Flash+0x358>)
 8007eac:	789b      	ldrb	r3, [r3, #2]
 8007eae:	021b      	lsls	r3, r3, #8
 8007eb0:	441a      	add	r2, r3
 8007eb2:	4b5e      	ldr	r3, [pc, #376]	; (800802c <Config_Write_Flash+0x358>)
 8007eb4:	78db      	ldrb	r3, [r3, #3]
 8007eb6:	041b      	lsls	r3, r3, #16
 8007eb8:	441a      	add	r2, r3
 8007eba:	4b5c      	ldr	r3, [pc, #368]	; (800802c <Config_Write_Flash+0x358>)
 8007ebc:	791b      	ldrb	r3, [r3, #4]
 8007ebe:	061b      	lsls	r3, r3, #24
 8007ec0:	4413      	add	r3, r2
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	f107 0320 	add.w	r3, r7, #32
 8007ec8:	615a      	str	r2, [r3, #20]
	data[DIGITAL_IN_1_POS+5]=((Digital_In_Interrupt_PWM_Rising[0]&0xFF)<<0)+((Digital_In_Interrupt_PWM_Rising[1]&0xFF)<<8)+((Digital_In_Interrupt_PWM_Rising[2]&0xFF)<<16)+((Digital_In_Interrupt_PWM_Rising[3]&0xFF)<<24);
 8007eca:	4b59      	ldr	r3, [pc, #356]	; (8008030 <Config_Write_Flash+0x35c>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	4b57      	ldr	r3, [pc, #348]	; (8008030 <Config_Write_Flash+0x35c>)
 8007ed2:	785b      	ldrb	r3, [r3, #1]
 8007ed4:	021b      	lsls	r3, r3, #8
 8007ed6:	441a      	add	r2, r3
 8007ed8:	4b55      	ldr	r3, [pc, #340]	; (8008030 <Config_Write_Flash+0x35c>)
 8007eda:	789b      	ldrb	r3, [r3, #2]
 8007edc:	041b      	lsls	r3, r3, #16
 8007ede:	441a      	add	r2, r3
 8007ee0:	4b53      	ldr	r3, [pc, #332]	; (8008030 <Config_Write_Flash+0x35c>)
 8007ee2:	78db      	ldrb	r3, [r3, #3]
 8007ee4:	061b      	lsls	r3, r3, #24
 8007ee6:	4413      	add	r3, r2
 8007ee8:	461a      	mov	r2, r3
 8007eea:	f107 0320 	add.w	r3, r7, #32
 8007eee:	619a      	str	r2, [r3, #24]
	data[DIGITAL_IN_1_POS+6]=((Digital_In_Interrupt_PWM_Rising[4]&0xFF)<<0)+((Digital_In_Interrupt_PWM_Falling[0]&0xFF)<<8)+((Digital_In_Interrupt_PWM_Falling[1]&0xFF)<<16)+((Digital_In_Interrupt_PWM_Falling[2]&0xFF)<<24);
 8007ef0:	4b4f      	ldr	r3, [pc, #316]	; (8008030 <Config_Write_Flash+0x35c>)
 8007ef2:	791b      	ldrb	r3, [r3, #4]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	4b4f      	ldr	r3, [pc, #316]	; (8008034 <Config_Write_Flash+0x360>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	021b      	lsls	r3, r3, #8
 8007efc:	441a      	add	r2, r3
 8007efe:	4b4d      	ldr	r3, [pc, #308]	; (8008034 <Config_Write_Flash+0x360>)
 8007f00:	785b      	ldrb	r3, [r3, #1]
 8007f02:	041b      	lsls	r3, r3, #16
 8007f04:	441a      	add	r2, r3
 8007f06:	4b4b      	ldr	r3, [pc, #300]	; (8008034 <Config_Write_Flash+0x360>)
 8007f08:	789b      	ldrb	r3, [r3, #2]
 8007f0a:	061b      	lsls	r3, r3, #24
 8007f0c:	4413      	add	r3, r2
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f107 0320 	add.w	r3, r7, #32
 8007f14:	61da      	str	r2, [r3, #28]
	data[DIGITAL_IN_1_POS+7]=((Digital_In_Interrupt_PWM_Falling[3]&0xFF)<<0)+((Digital_In_Interrupt_PWM_Falling[4]&0xFF)<<8)+((Digital_In_Interrupt_Power_Low_Rising[0]&0xFF)<<16)+((Digital_In_Interrupt_Power_Low_Rising[1]&0xFF)<<24);
 8007f16:	4b47      	ldr	r3, [pc, #284]	; (8008034 <Config_Write_Flash+0x360>)
 8007f18:	78db      	ldrb	r3, [r3, #3]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	4b45      	ldr	r3, [pc, #276]	; (8008034 <Config_Write_Flash+0x360>)
 8007f1e:	791b      	ldrb	r3, [r3, #4]
 8007f20:	021b      	lsls	r3, r3, #8
 8007f22:	441a      	add	r2, r3
 8007f24:	4b44      	ldr	r3, [pc, #272]	; (8008038 <Config_Write_Flash+0x364>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	041b      	lsls	r3, r3, #16
 8007f2a:	441a      	add	r2, r3
 8007f2c:	4b42      	ldr	r3, [pc, #264]	; (8008038 <Config_Write_Flash+0x364>)
 8007f2e:	785b      	ldrb	r3, [r3, #1]
 8007f30:	061b      	lsls	r3, r3, #24
 8007f32:	4413      	add	r3, r2
 8007f34:	461a      	mov	r2, r3
 8007f36:	f107 0320 	add.w	r3, r7, #32
 8007f3a:	621a      	str	r2, [r3, #32]
	data[DIGITAL_IN_1_POS+8]=((Digital_In_Interrupt_Power_Low_Rising[2]&0xFF)<<0)+((Digital_In_Interrupt_Power_Low_Rising[3]&0xFF)<<8)+((Digital_In_Interrupt_Power_Low_Rising[4]&0xFF)<<16)+((Digital_In_Interrupt_Power_Low_Falling[0]&0xFF)<<24);
 8007f3c:	4b3e      	ldr	r3, [pc, #248]	; (8008038 <Config_Write_Flash+0x364>)
 8007f3e:	789b      	ldrb	r3, [r3, #2]
 8007f40:	461a      	mov	r2, r3
 8007f42:	4b3d      	ldr	r3, [pc, #244]	; (8008038 <Config_Write_Flash+0x364>)
 8007f44:	78db      	ldrb	r3, [r3, #3]
 8007f46:	021b      	lsls	r3, r3, #8
 8007f48:	441a      	add	r2, r3
 8007f4a:	4b3b      	ldr	r3, [pc, #236]	; (8008038 <Config_Write_Flash+0x364>)
 8007f4c:	791b      	ldrb	r3, [r3, #4]
 8007f4e:	041b      	lsls	r3, r3, #16
 8007f50:	441a      	add	r2, r3
 8007f52:	4b3a      	ldr	r3, [pc, #232]	; (800803c <Config_Write_Flash+0x368>)
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	061b      	lsls	r3, r3, #24
 8007f58:	4413      	add	r3, r2
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	f107 0320 	add.w	r3, r7, #32
 8007f60:	625a      	str	r2, [r3, #36]	; 0x24
	data[DIGITAL_IN_1_POS+9]=((Digital_In_Interrupt_Power_Low_Falling[1]&0xFF)<<0)+((Digital_In_Interrupt_Power_Low_Falling[2]&0xFF)<<8)+((Digital_In_Interrupt_Power_Low_Falling[3]&0xFF)<<16)+((Digital_In_Interrupt_Power_Low_Falling[4]&0xFF)<<24);
 8007f62:	4b36      	ldr	r3, [pc, #216]	; (800803c <Config_Write_Flash+0x368>)
 8007f64:	785b      	ldrb	r3, [r3, #1]
 8007f66:	461a      	mov	r2, r3
 8007f68:	4b34      	ldr	r3, [pc, #208]	; (800803c <Config_Write_Flash+0x368>)
 8007f6a:	789b      	ldrb	r3, [r3, #2]
 8007f6c:	021b      	lsls	r3, r3, #8
 8007f6e:	441a      	add	r2, r3
 8007f70:	4b32      	ldr	r3, [pc, #200]	; (800803c <Config_Write_Flash+0x368>)
 8007f72:	78db      	ldrb	r3, [r3, #3]
 8007f74:	041b      	lsls	r3, r3, #16
 8007f76:	441a      	add	r2, r3
 8007f78:	4b30      	ldr	r3, [pc, #192]	; (800803c <Config_Write_Flash+0x368>)
 8007f7a:	791b      	ldrb	r3, [r3, #4]
 8007f7c:	061b      	lsls	r3, r3, #24
 8007f7e:	4413      	add	r3, r2
 8007f80:	461a      	mov	r2, r3
 8007f82:	f107 0320 	add.w	r3, r7, #32
 8007f86:	629a      	str	r2, [r3, #40]	; 0x28

	//bytes: [x], [x], [x], [x x U7/1 U7/0 U6/1 U6/0 U5/1 U5/0]
	data[DEFAULT_SWITCH_STATE_POS]=Default_Switch_State&0xFF;
 8007f88:	4b2d      	ldr	r3, [pc, #180]	; (8008040 <Config_Write_Flash+0x36c>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	f107 0320 	add.w	r3, r7, #32
 8007f92:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	//bytes: [x], [x], [pwm input enable], [pwm output enable]
	data[PWM_EN_POS]=(PWM_Out_EN&0xFF)+((PWM_In_EN&0xFF)<<8);
 8007f96:	4b2b      	ldr	r3, [pc, #172]	; (8008044 <Config_Write_Flash+0x370>)
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	4b2a      	ldr	r3, [pc, #168]	; (8008048 <Config_Write_Flash+0x374>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	021b      	lsls	r3, r3, #8
 8007fa2:	4413      	add	r3, r2
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	f107 0320 	add.w	r3, r7, #32
 8007faa:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	//bytes: [pwm prescaler high], [pwm prescaler low], [pwm DC high], [pwm DC low]; note that prescaler=32 is ~20kHz, so probably will never be more than one byte; also DC is currently set up so 255 = 100% and 0 = 0%; so is only one byte
	data[PWM_0_POS]=((PWM_Prescalers[0]&0xFFFF)<<16)+((PWM_Pulses[0]&0xFFFF)<<0);
 8007fae:	4b27      	ldr	r3, [pc, #156]	; (800804c <Config_Write_Flash+0x378>)
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	041b      	lsls	r3, r3, #16
 8007fb4:	e04c      	b.n	8008050 <Config_Write_Flash+0x37c>
 8007fb6:	bf00      	nop
 8007fb8:	20000928 	.word	0x20000928
 8007fbc:	2000098c 	.word	0x2000098c
 8007fc0:	20000944 	.word	0x20000944
 8007fc4:	2000072c 	.word	0x2000072c
 8007fc8:	20000220 	.word	0x20000220
 8007fcc:	200005ec 	.word	0x200005ec
 8007fd0:	2000098a 	.word	0x2000098a
 8007fd4:	20000a80 	.word	0x20000a80
 8007fd8:	20000596 	.word	0x20000596
 8007fdc:	200009f2 	.word	0x200009f2
 8007fe0:	2000098e 	.word	0x2000098e
 8007fe4:	20000584 	.word	0x20000584
 8007fe8:	20000b1c 	.word	0x20000b1c
 8007fec:	20000244 	.word	0x20000244
 8007ff0:	20000914 	.word	0x20000914
 8007ff4:	20000874 	.word	0x20000874
 8007ff8:	20000112 	.word	0x20000112
 8007ffc:	20000594 	.word	0x20000594
 8008000:	2000065c 	.word	0x2000065c
 8008004:	20000246 	.word	0x20000246
 8008008:	2000093c 	.word	0x2000093c
 800800c:	20000660 	.word	0x20000660
 8008010:	20000116 	.word	0x20000116
 8008014:	200004a8 	.word	0x200004a8
 8008018:	20000114 	.word	0x20000114
 800801c:	20000724 	.word	0x20000724
 8008020:	200000b4 	.word	0x200000b4
 8008024:	200000c0 	.word	0x200000c0
 8008028:	20000588 	.word	0x20000588
 800802c:	2000078c 	.word	0x2000078c
 8008030:	200004ac 	.word	0x200004ac
 8008034:	2000010c 	.word	0x2000010c
 8008038:	200004b8 	.word	0x200004b8
 800803c:	20000918 	.word	0x20000918
 8008040:	200004ab 	.word	0x200004ab
 8008044:	200009f0 	.word	0x200009f0
 8008048:	200004aa 	.word	0x200004aa
 800804c:	2000059c 	.word	0x2000059c
 8008050:	4aa4      	ldr	r2, [pc, #656]	; (80082e4 <Config_Write_Flash+0x610>)
 8008052:	8812      	ldrh	r2, [r2, #0]
 8008054:	4413      	add	r3, r2
 8008056:	461a      	mov	r2, r3
 8008058:	f107 0320 	add.w	r3, r7, #32
 800805c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	data[PWM_1_POS]=((PWM_Prescalers[1]&0xFFFF)<<16)+((PWM_Pulses[1]&0xFFFF)<<0);
 8008060:	4ba1      	ldr	r3, [pc, #644]	; (80082e8 <Config_Write_Flash+0x614>)
 8008062:	885b      	ldrh	r3, [r3, #2]
 8008064:	041b      	lsls	r3, r3, #16
 8008066:	4a9f      	ldr	r2, [pc, #636]	; (80082e4 <Config_Write_Flash+0x610>)
 8008068:	8852      	ldrh	r2, [r2, #2]
 800806a:	4413      	add	r3, r2
 800806c:	461a      	mov	r2, r3
 800806e:	f107 0320 	add.w	r3, r7, #32
 8008072:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	data[PWM_2_POS]=((PWM_Prescalers[2]&0xFFFF)<<16)+((PWM_Pulses[2]&0xFFFF)<<0);
 8008076:	4b9c      	ldr	r3, [pc, #624]	; (80082e8 <Config_Write_Flash+0x614>)
 8008078:	889b      	ldrh	r3, [r3, #4]
 800807a:	041b      	lsls	r3, r3, #16
 800807c:	4a99      	ldr	r2, [pc, #612]	; (80082e4 <Config_Write_Flash+0x610>)
 800807e:	8892      	ldrh	r2, [r2, #4]
 8008080:	4413      	add	r3, r2
 8008082:	461a      	mov	r2, r3
 8008084:	f107 0320 	add.w	r3, r7, #32
 8008088:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	data[PWM_3_POS]=((PWM_Prescalers[3]&0xFFFF)<<16)+((PWM_Pulses[3]&0xFFFF)<<0);
 800808c:	4b96      	ldr	r3, [pc, #600]	; (80082e8 <Config_Write_Flash+0x614>)
 800808e:	88db      	ldrh	r3, [r3, #6]
 8008090:	041b      	lsls	r3, r3, #16
 8008092:	4a94      	ldr	r2, [pc, #592]	; (80082e4 <Config_Write_Flash+0x610>)
 8008094:	88d2      	ldrh	r2, [r2, #6]
 8008096:	4413      	add	r3, r2
 8008098:	461a      	mov	r2, r3
 800809a:	f107 0320 	add.w	r3, r7, #32
 800809e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	data[PWM_4_POS]=((PWM_Prescalers[4]&0xFFFF)<<16)+((PWM_Pulses[4]&0xFFFF)<<0);
 80080a2:	4b91      	ldr	r3, [pc, #580]	; (80082e8 <Config_Write_Flash+0x614>)
 80080a4:	891b      	ldrh	r3, [r3, #8]
 80080a6:	041b      	lsls	r3, r3, #16
 80080a8:	4a8e      	ldr	r2, [pc, #568]	; (80082e4 <Config_Write_Flash+0x610>)
 80080aa:	8912      	ldrh	r2, [r2, #8]
 80080ac:	4413      	add	r3, r2
 80080ae:	461a      	mov	r2, r3
 80080b0:	f107 0320 	add.w	r3, r7, #32
 80080b4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	uint32_t CanPos[8] = {CAN_ID_0_POS, CAN_ID_1_POS, CAN_ID_2_POS, CAN_ID_3_POS, CAN_ID_4_POS, CAN_ID_5_POS, CAN_ID_6_POS, CAN_ID_7_POS};
 80080b8:	463b      	mov	r3, r7
 80080ba:	4a8c      	ldr	r2, [pc, #560]	; (80082ec <Config_Write_Flash+0x618>)
 80080bc:	461c      	mov	r4, r3
 80080be:	4615      	mov	r5, r2
 80080c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80080c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(uint32_t i=0; i<8; i++)
 80080cc:	2300      	movs	r3, #0
 80080ce:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 80080d2:	e019      	b.n	8008108 <Config_Write_Flash+0x434>
	{
		//bytes: [unused], [can dlc], [can id high], [can id low] x8 //any can id outside the valid range of 0 to 2047 should be treated as disabled
		data[CanPos[i]]=(0)+((Can_DLCs[i]&0xFF)<<16)+(Can_IDs[i]&0xFFFF);
 80080d4:	4a86      	ldr	r2, [pc, #536]	; (80082f0 <Config_Write_Flash+0x61c>)
 80080d6:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80080da:	4413      	add	r3, r2
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	041b      	lsls	r3, r3, #16
 80080e0:	4984      	ldr	r1, [pc, #528]	; (80082f4 <Config_Write_Flash+0x620>)
 80080e2:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 80080e6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80080ea:	1899      	adds	r1, r3, r2
 80080ec:	463b      	mov	r3, r7
 80080ee:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 80080f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080f6:	f107 0320 	add.w	r3, r7, #32
 80080fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint32_t i=0; i<8; i++)
 80080fe:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8008102:	3301      	adds	r3, #1
 8008104:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8008108:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 800810c:	2b07      	cmp	r3, #7
 800810e:	d9e1      	bls.n	80080d4 <Config_Write_Flash+0x400>
	data[CAN_ID_4_POS]=(0)+(Can_DLCs[4]<<16)+(Can_IDs[4]&0xFFFF);
	data[CAN_ID_5_POS]=(0)+(Can_DLCs[5]<<16)+(Can_IDs[5]&0xFFFF);
	data[CAN_ID_6_POS]=(0)+(Can_DLCs[6]<<16)+(Can_IDs[6]&0xFFFF);
	data[CAN_ID_7_POS]=(0)+(Can_DLCs[7]<<16)+(Can_IDs[7]&0xFFFF);*/

	for(uint32_t i=0; i<8; i++)
 8008110:	2300      	movs	r3, #0
 8008112:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 8008116:	e0a0      	b.n	800825a <Config_Write_Flash+0x586>
	{
		//byte: [bytes of specific data]
		data[CAN_BYTES_1ST_POS+i*2]=Can_Config_Bytes[i][0]+(Can_Config_Bytes[i][1]<<8)+(Can_Config_Bytes[i][2]<<16)+(Can_Config_Bytes[i][3]<<24);
 8008118:	4a77      	ldr	r2, [pc, #476]	; (80082f8 <Config_Write_Flash+0x624>)
 800811a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800811e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8008122:	4619      	mov	r1, r3
 8008124:	4a74      	ldr	r2, [pc, #464]	; (80082f8 <Config_Write_Flash+0x624>)
 8008126:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	4413      	add	r3, r2
 800812e:	785b      	ldrb	r3, [r3, #1]
 8008130:	021b      	lsls	r3, r3, #8
 8008132:	18ca      	adds	r2, r1, r3
 8008134:	4970      	ldr	r1, [pc, #448]	; (80082f8 <Config_Write_Flash+0x624>)
 8008136:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800813a:	00db      	lsls	r3, r3, #3
 800813c:	440b      	add	r3, r1
 800813e:	789b      	ldrb	r3, [r3, #2]
 8008140:	041b      	lsls	r3, r3, #16
 8008142:	441a      	add	r2, r3
 8008144:	496c      	ldr	r1, [pc, #432]	; (80082f8 <Config_Write_Flash+0x624>)
 8008146:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	440b      	add	r3, r1
 800814e:	78db      	ldrb	r3, [r3, #3]
 8008150:	061b      	lsls	r3, r3, #24
 8008152:	18d1      	adds	r1, r2, r3
 8008154:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	f103 0213 	add.w	r2, r3, #19
 800815e:	f107 0320 	add.w	r3, r7, #32
 8008162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		data[CAN_BYTES_1ST_POS+i*2+1]=Can_Config_Bytes[i][4]+(Can_Config_Bytes[i][5]<<8)+(Can_Config_Bytes[i][6]<<16)+(Can_Config_Bytes[i][7]<<24);
 8008166:	4a64      	ldr	r2, [pc, #400]	; (80082f8 <Config_Write_Flash+0x624>)
 8008168:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800816c:	00db      	lsls	r3, r3, #3
 800816e:	4413      	add	r3, r2
 8008170:	791b      	ldrb	r3, [r3, #4]
 8008172:	4619      	mov	r1, r3
 8008174:	4a60      	ldr	r2, [pc, #384]	; (80082f8 <Config_Write_Flash+0x624>)
 8008176:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800817a:	00db      	lsls	r3, r3, #3
 800817c:	4413      	add	r3, r2
 800817e:	795b      	ldrb	r3, [r3, #5]
 8008180:	021b      	lsls	r3, r3, #8
 8008182:	18ca      	adds	r2, r1, r3
 8008184:	495c      	ldr	r1, [pc, #368]	; (80082f8 <Config_Write_Flash+0x624>)
 8008186:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	440b      	add	r3, r1
 800818e:	799b      	ldrb	r3, [r3, #6]
 8008190:	041b      	lsls	r3, r3, #16
 8008192:	441a      	add	r2, r3
 8008194:	4958      	ldr	r1, [pc, #352]	; (80082f8 <Config_Write_Flash+0x624>)
 8008196:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	440b      	add	r3, r1
 800819e:	79db      	ldrb	r3, [r3, #7]
 80081a0:	061b      	lsls	r3, r3, #24
 80081a2:	18d1      	adds	r1, r2, r3
 80081a4:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 80081a8:	330a      	adds	r3, #10
 80081aa:	005a      	lsls	r2, r3, #1
 80081ac:	f107 0320 	add.w	r3, r7, #32
 80081b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		//byte: [id of data to send]
		data[CAN_DATAS_1ST_POS+i*2]=Can_Config_Datas[i][0]+(Can_Config_Datas[i][1]<<8)+(Can_Config_Datas[i][2]<<16)+(Can_Config_Datas[i][3]<<24);
 80081b4:	4a51      	ldr	r2, [pc, #324]	; (80082fc <Config_Write_Flash+0x628>)
 80081b6:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 80081ba:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80081be:	4619      	mov	r1, r3
 80081c0:	4a4e      	ldr	r2, [pc, #312]	; (80082fc <Config_Write_Flash+0x628>)
 80081c2:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	4413      	add	r3, r2
 80081ca:	785b      	ldrb	r3, [r3, #1]
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	18ca      	adds	r2, r1, r3
 80081d0:	494a      	ldr	r1, [pc, #296]	; (80082fc <Config_Write_Flash+0x628>)
 80081d2:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	440b      	add	r3, r1
 80081da:	789b      	ldrb	r3, [r3, #2]
 80081dc:	041b      	lsls	r3, r3, #16
 80081de:	441a      	add	r2, r3
 80081e0:	4946      	ldr	r1, [pc, #280]	; (80082fc <Config_Write_Flash+0x628>)
 80081e2:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	440b      	add	r3, r1
 80081ea:	78db      	ldrb	r3, [r3, #3]
 80081ec:	061b      	lsls	r3, r3, #24
 80081ee:	18d1      	adds	r1, r2, r3
 80081f0:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	f103 0223 	add.w	r2, r3, #35	; 0x23
 80081fa:	f107 0320 	add.w	r3, r7, #32
 80081fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		data[CAN_DATAS_1ST_POS+i*2+1]=Can_Config_Datas[i][4]+(Can_Config_Datas[i][5]<<8)+(Can_Config_Datas[i][6]<<16)+(Can_Config_Datas[i][7]<<24);
 8008202:	4a3e      	ldr	r2, [pc, #248]	; (80082fc <Config_Write_Flash+0x628>)
 8008204:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8008208:	00db      	lsls	r3, r3, #3
 800820a:	4413      	add	r3, r2
 800820c:	791b      	ldrb	r3, [r3, #4]
 800820e:	4619      	mov	r1, r3
 8008210:	4a3a      	ldr	r2, [pc, #232]	; (80082fc <Config_Write_Flash+0x628>)
 8008212:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	4413      	add	r3, r2
 800821a:	795b      	ldrb	r3, [r3, #5]
 800821c:	021b      	lsls	r3, r3, #8
 800821e:	18ca      	adds	r2, r1, r3
 8008220:	4936      	ldr	r1, [pc, #216]	; (80082fc <Config_Write_Flash+0x628>)
 8008222:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8008226:	00db      	lsls	r3, r3, #3
 8008228:	440b      	add	r3, r1
 800822a:	799b      	ldrb	r3, [r3, #6]
 800822c:	041b      	lsls	r3, r3, #16
 800822e:	441a      	add	r2, r3
 8008230:	4932      	ldr	r1, [pc, #200]	; (80082fc <Config_Write_Flash+0x628>)
 8008232:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	440b      	add	r3, r1
 800823a:	79db      	ldrb	r3, [r3, #7]
 800823c:	061b      	lsls	r3, r3, #24
 800823e:	18d1      	adds	r1, r2, r3
 8008240:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8008244:	3312      	adds	r3, #18
 8008246:	005a      	lsls	r2, r3, #1
 8008248:	f107 0320 	add.w	r3, r7, #32
 800824c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint32_t i=0; i<8; i++)
 8008250:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8008254:	3301      	adds	r3, #1
 8008256:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 800825a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800825e:	2b07      	cmp	r3, #7
 8008260:	f67f af5a 	bls.w	8008118 <Config_Write_Flash+0x444>
	}
	//note that only two messages may be sent on sync, or 3 if absolutely no other messages are being sent (including errors)
	//bytes: [can interval (.1 ms) high], [can interval (.1 ms) low], [send can message on timer], [send can messages on sync]
	data[CAN_SEND_EN_POS]=((Can_Sync_Enable&0xFF)<<0)+((Can_Timed_Enable&0xFF)<<8)+((Can_Interval&0xFFFF)<<16);
 8008264:	4b26      	ldr	r3, [pc, #152]	; (8008300 <Config_Write_Flash+0x62c>)
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	4b26      	ldr	r3, [pc, #152]	; (8008304 <Config_Write_Flash+0x630>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	021b      	lsls	r3, r3, #8
 8008270:	441a      	add	r2, r3
 8008272:	4b25      	ldr	r3, [pc, #148]	; (8008308 <Config_Write_Flash+0x634>)
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	041b      	lsls	r3, r3, #16
 8008278:	4413      	add	r3, r2
 800827a:	461a      	mov	r2, r3
 800827c:	f107 0320 	add.w	r3, r7, #32
 8008280:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	//bytes: [can sync delay (10 us) high], [can sync delay (10 us) low], [x], [x]
	data[CAN_SYNC_DELAY_POS]=((Can_Sync_Delay&0xFFFF)<<16);
 8008284:	4b21      	ldr	r3, [pc, #132]	; (800830c <Config_Write_Flash+0x638>)
 8008286:	881b      	ldrh	r3, [r3, #0]
 8008288:	041b      	lsls	r3, r3, #16
 800828a:	461a      	mov	r2, r3
 800828c:	f107 0320 	add.w	r3, r7, #32
 8008290:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	//bytes: [temperature samples to take / continuous sampling], [voltage samples to take / continuous sampling], [temperature samples to take per interval], [voltage samples to take per inteval]
	data[TV_BURST_POS]=((sample_temperature&0xFF)<<0)+((sample_voltage&0xFF)<<8)+((SampleTemperatureBurst&0xFF)<<16)+((SampleVoltageBurst&0xFF)<<24);
 8008294:	4b1e      	ldr	r3, [pc, #120]	; (8008310 <Config_Write_Flash+0x63c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	b2da      	uxtb	r2, r3
 800829a:	4b1e      	ldr	r3, [pc, #120]	; (8008314 <Config_Write_Flash+0x640>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	021b      	lsls	r3, r3, #8
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	4413      	add	r3, r2
 80082a4:	4a1c      	ldr	r2, [pc, #112]	; (8008318 <Config_Write_Flash+0x644>)
 80082a6:	7812      	ldrb	r2, [r2, #0]
 80082a8:	0412      	lsls	r2, r2, #16
 80082aa:	4413      	add	r3, r2
 80082ac:	4a1b      	ldr	r2, [pc, #108]	; (800831c <Config_Write_Flash+0x648>)
 80082ae:	7812      	ldrb	r2, [r2, #0]
 80082b0:	0612      	lsls	r2, r2, #24
 80082b2:	441a      	add	r2, r3
 80082b4:	f107 0320 	add.w	r3, r7, #32
 80082b8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	//bytes: [x], [x], [temperature/voltage sampling interval (.1 ms) high], [temperature/voltage sampling interval (.1 ms) low]
	data[TV_BURST_TIMING_POS]=((SampleTemperatureVoltagePeriod&0xFFFF)<<0);
 80082bc:	4b18      	ldr	r3, [pc, #96]	; (8008320 <Config_Write_Flash+0x64c>)
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	461a      	mov	r2, r3
 80082c2:	f107 0320 	add.w	r3, r7, #32
 80082c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	Flash_Write(FLASH_PAGE_63, 63, data, 512);
 80082ca:	f107 0220 	add.w	r2, r7, #32
 80082ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082d2:	213f      	movs	r1, #63	; 0x3f
 80082d4:	4813      	ldr	r0, [pc, #76]	; (8008324 <Config_Write_Flash+0x650>)
 80082d6:	f000 fb89 	bl	80089ec <Flash_Write>
}
 80082da:	bf00      	nop
 80082dc:	f607 0728 	addw	r7, r7, #2088	; 0x828
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bdb0      	pop	{r4, r5, r7, pc}
 80082e4:	20000828 	.word	0x20000828
 80082e8:	2000059c 	.word	0x2000059c
 80082ec:	0800c24c 	.word	0x0800c24c
 80082f0:	2000092c 	.word	0x2000092c
 80082f4:	2000087c 	.word	0x2000087c
 80082f8:	200002f4 	.word	0x200002f4
 80082fc:	2000019c 	.word	0x2000019c
 8008300:	20000500 	.word	0x20000500
 8008304:	20000115 	.word	0x20000115
 8008308:	20000118 	.word	0x20000118
 800830c:	20000440 	.word	0x20000440
 8008310:	200004b4 	.word	0x200004b4
 8008314:	200000bc 	.word	0x200000bc
 8008318:	2000091d 	.word	0x2000091d
 800831c:	200001dd 	.word	0x200001dd
 8008320:	20000988 	.word	0x20000988
 8008324:	0801f800 	.word	0x0801f800

08008328 <Config_Read_Flash>:

void Config_Read_Flash(void)
{
 8008328:	b480      	push	{r7}
 800832a:	b091      	sub	sp, #68	; 0x44
 800832c:	af00      	add	r7, sp, #0
	warn_undervoltage_U5=((U5_VOLTAGE_WARNING_LIMIT>>0)&0xFFFF);
 800832e:	4b8e      	ldr	r3, [pc, #568]	; (8008568 <Config_Read_Flash+0x240>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	b29a      	uxth	r2, r3
 8008334:	4b8d      	ldr	r3, [pc, #564]	; (800856c <Config_Read_Flash+0x244>)
 8008336:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U5=((U5_VOLTAGE_WARNING_LIMIT>>16)&0xFFFF);
 8008338:	4b8b      	ldr	r3, [pc, #556]	; (8008568 <Config_Read_Flash+0x240>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	0c1b      	lsrs	r3, r3, #16
 800833e:	b29a      	uxth	r2, r3
 8008340:	4b8b      	ldr	r3, [pc, #556]	; (8008570 <Config_Read_Flash+0x248>)
 8008342:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U5=((U5_TEMPERATURE_WARNING_LIMIT>>0)&0xFFFF);
 8008344:	4b8b      	ldr	r3, [pc, #556]	; (8008574 <Config_Read_Flash+0x24c>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	b29a      	uxth	r2, r3
 800834a:	4b8b      	ldr	r3, [pc, #556]	; (8008578 <Config_Read_Flash+0x250>)
 800834c:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U5=((U5_TEMPERATURE_WARNING_LIMIT>>16)&0xFFFF);
 800834e:	4b89      	ldr	r3, [pc, #548]	; (8008574 <Config_Read_Flash+0x24c>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	0c1b      	lsrs	r3, r3, #16
 8008354:	b29a      	uxth	r2, r3
 8008356:	4b89      	ldr	r3, [pc, #548]	; (800857c <Config_Read_Flash+0x254>)
 8008358:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U5I0=((U5_CURRENT_WARNING_LIMIT_I0>>0)&0xFFFF);
 800835a:	4b89      	ldr	r3, [pc, #548]	; (8008580 <Config_Read_Flash+0x258>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	b29a      	uxth	r2, r3
 8008360:	4b88      	ldr	r3, [pc, #544]	; (8008584 <Config_Read_Flash+0x25c>)
 8008362:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U5I0=((U5_CURRENT_WARNING_LIMIT_I0>>16)&0xFFFF);
 8008364:	4b86      	ldr	r3, [pc, #536]	; (8008580 <Config_Read_Flash+0x258>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	0c1b      	lsrs	r3, r3, #16
 800836a:	b29a      	uxth	r2, r3
 800836c:	4b86      	ldr	r3, [pc, #536]	; (8008588 <Config_Read_Flash+0x260>)
 800836e:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U5I1=((U5_CURRENT_WARNING_LIMIT_I1>>0)&0xFFFF);
 8008370:	4b86      	ldr	r3, [pc, #536]	; (800858c <Config_Read_Flash+0x264>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	b29a      	uxth	r2, r3
 8008376:	4b86      	ldr	r3, [pc, #536]	; (8008590 <Config_Read_Flash+0x268>)
 8008378:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U5I1=((U5_CURRENT_WARNING_LIMIT_I1>>16)&0xFFFF);
 800837a:	4b84      	ldr	r3, [pc, #528]	; (800858c <Config_Read_Flash+0x264>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	0c1b      	lsrs	r3, r3, #16
 8008380:	b29a      	uxth	r2, r3
 8008382:	4b84      	ldr	r3, [pc, #528]	; (8008594 <Config_Read_Flash+0x26c>)
 8008384:	801a      	strh	r2, [r3, #0]
	warn_undervoltage_U6=((U6_VOLTAGE_WARNING_LIMIT>>0)&0xFFFF);
 8008386:	4b84      	ldr	r3, [pc, #528]	; (8008598 <Config_Read_Flash+0x270>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	b29a      	uxth	r2, r3
 800838c:	4b83      	ldr	r3, [pc, #524]	; (800859c <Config_Read_Flash+0x274>)
 800838e:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U6=((U6_VOLTAGE_WARNING_LIMIT>>16)&0xFFFF);
 8008390:	4b81      	ldr	r3, [pc, #516]	; (8008598 <Config_Read_Flash+0x270>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	0c1b      	lsrs	r3, r3, #16
 8008396:	b29a      	uxth	r2, r3
 8008398:	4b81      	ldr	r3, [pc, #516]	; (80085a0 <Config_Read_Flash+0x278>)
 800839a:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U6=((U6_TEMPERATURE_WARNING_LIMIT>>0)&0xFFFF);
 800839c:	4b81      	ldr	r3, [pc, #516]	; (80085a4 <Config_Read_Flash+0x27c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	4b81      	ldr	r3, [pc, #516]	; (80085a8 <Config_Read_Flash+0x280>)
 80083a4:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U6=((U6_TEMPERATURE_WARNING_LIMIT>>16)&0xFFFF);
 80083a6:	4b7f      	ldr	r3, [pc, #508]	; (80085a4 <Config_Read_Flash+0x27c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	0c1b      	lsrs	r3, r3, #16
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	4b7f      	ldr	r3, [pc, #508]	; (80085ac <Config_Read_Flash+0x284>)
 80083b0:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U6I0=((U6_CURRENT_WARNING_LIMIT_I0>>0)&0xFFFF);
 80083b2:	4b7f      	ldr	r3, [pc, #508]	; (80085b0 <Config_Read_Flash+0x288>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	4b7e      	ldr	r3, [pc, #504]	; (80085b4 <Config_Read_Flash+0x28c>)
 80083ba:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U6I0=((U6_CURRENT_WARNING_LIMIT_I0>>16)&0xFFFF);
 80083bc:	4b7c      	ldr	r3, [pc, #496]	; (80085b0 <Config_Read_Flash+0x288>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	0c1b      	lsrs	r3, r3, #16
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	4b7c      	ldr	r3, [pc, #496]	; (80085b8 <Config_Read_Flash+0x290>)
 80083c6:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U6I1=((U6_CURRENT_WARNING_LIMIT_I1>>0)&0xFFFF);
 80083c8:	4b7c      	ldr	r3, [pc, #496]	; (80085bc <Config_Read_Flash+0x294>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	4b7c      	ldr	r3, [pc, #496]	; (80085c0 <Config_Read_Flash+0x298>)
 80083d0:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U6I1=((U6_CURRENT_WARNING_LIMIT_I1>>16)&0xFFFF);
 80083d2:	4b7a      	ldr	r3, [pc, #488]	; (80085bc <Config_Read_Flash+0x294>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	0c1b      	lsrs	r3, r3, #16
 80083d8:	b29a      	uxth	r2, r3
 80083da:	4b7a      	ldr	r3, [pc, #488]	; (80085c4 <Config_Read_Flash+0x29c>)
 80083dc:	801a      	strh	r2, [r3, #0]
	warn_undervoltage_U7=((U7_VOLTAGE_WARNING_LIMIT>>0)&0xFFFF);
 80083de:	4b7a      	ldr	r3, [pc, #488]	; (80085c8 <Config_Read_Flash+0x2a0>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	4b79      	ldr	r3, [pc, #484]	; (80085cc <Config_Read_Flash+0x2a4>)
 80083e6:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U7=((U7_VOLTAGE_WARNING_LIMIT>>16)&0xFFFF);
 80083e8:	4b77      	ldr	r3, [pc, #476]	; (80085c8 <Config_Read_Flash+0x2a0>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	0c1b      	lsrs	r3, r3, #16
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	4b77      	ldr	r3, [pc, #476]	; (80085d0 <Config_Read_Flash+0x2a8>)
 80083f2:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U7=((U7_TEMPERATURE_WARNING_LIMIT>>0)&0xFFFF);
 80083f4:	4b77      	ldr	r3, [pc, #476]	; (80085d4 <Config_Read_Flash+0x2ac>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	4b77      	ldr	r3, [pc, #476]	; (80085d8 <Config_Read_Flash+0x2b0>)
 80083fc:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U7=((U7_TEMPERATURE_WARNING_LIMIT>>16)&0xFFFF);
 80083fe:	4b75      	ldr	r3, [pc, #468]	; (80085d4 <Config_Read_Flash+0x2ac>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	0c1b      	lsrs	r3, r3, #16
 8008404:	b29a      	uxth	r2, r3
 8008406:	4b75      	ldr	r3, [pc, #468]	; (80085dc <Config_Read_Flash+0x2b4>)
 8008408:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U7I0=((U7_CURRENT_WARNING_LIMIT_I0>>0)&0xFFFF);
 800840a:	4b75      	ldr	r3, [pc, #468]	; (80085e0 <Config_Read_Flash+0x2b8>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	b29a      	uxth	r2, r3
 8008410:	4b74      	ldr	r3, [pc, #464]	; (80085e4 <Config_Read_Flash+0x2bc>)
 8008412:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U7I0=((U7_CURRENT_WARNING_LIMIT_I0>>16)&0xFFFF);
 8008414:	4b72      	ldr	r3, [pc, #456]	; (80085e0 <Config_Read_Flash+0x2b8>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	0c1b      	lsrs	r3, r3, #16
 800841a:	b29a      	uxth	r2, r3
 800841c:	4b72      	ldr	r3, [pc, #456]	; (80085e8 <Config_Read_Flash+0x2c0>)
 800841e:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U7I1=((U7_CURRENT_WARNING_LIMIT_I1>>0)&0xFFFF);
 8008420:	4b72      	ldr	r3, [pc, #456]	; (80085ec <Config_Read_Flash+0x2c4>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	b29a      	uxth	r2, r3
 8008426:	4b72      	ldr	r3, [pc, #456]	; (80085f0 <Config_Read_Flash+0x2c8>)
 8008428:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U7I1=((U7_CURRENT_WARNING_LIMIT_I1>>16)&0xFFFF);
 800842a:	4b70      	ldr	r3, [pc, #448]	; (80085ec <Config_Read_Flash+0x2c4>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	0c1b      	lsrs	r3, r3, #16
 8008430:	b29a      	uxth	r2, r3
 8008432:	4b70      	ldr	r3, [pc, #448]	; (80085f4 <Config_Read_Flash+0x2cc>)
 8008434:	801a      	strh	r2, [r3, #0]

	Digital_In_EN = ((DIGITAL_IN_0>>0)&0b00011101); //bit for PB4 is 0 to ensure it isn't used as PB4 seemed to have hardware problems
 8008436:	4b70      	ldr	r3, [pc, #448]	; (80085f8 <Config_Read_Flash+0x2d0>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	b2db      	uxtb	r3, r3
 800843c:	f003 031d 	and.w	r3, r3, #29
 8008440:	b2da      	uxtb	r2, r3
 8008442:	4b6e      	ldr	r3, [pc, #440]	; (80085fc <Config_Read_Flash+0x2d4>)
 8008444:	701a      	strb	r2, [r3, #0]
	Default_Switch_State=((DEFAULT_SWITCH_STATE>>0)&0b00111111);
 8008446:	4b6e      	ldr	r3, [pc, #440]	; (8008600 <Config_Read_Flash+0x2d8>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	b2db      	uxtb	r3, r3
 800844c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008450:	b2da      	uxtb	r2, r3
 8008452:	4b6c      	ldr	r3, [pc, #432]	; (8008604 <Config_Read_Flash+0x2dc>)
 8008454:	701a      	strb	r2, [r3, #0]


	//oh boy
	Digital_In_Interrupt_Can_Falling[0]=((*(&DIGITAL_IN_1+0))>>0)&0xFF;
 8008456:	4b6c      	ldr	r3, [pc, #432]	; (8008608 <Config_Read_Flash+0x2e0>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	b2da      	uxtb	r2, r3
 800845c:	4b6b      	ldr	r3, [pc, #428]	; (800860c <Config_Read_Flash+0x2e4>)
 800845e:	701a      	strb	r2, [r3, #0]
	Digital_In_Interrupt_Can_Falling[1]=((*(&DIGITAL_IN_1+0))>>8)&0xFF;
 8008460:	4b69      	ldr	r3, [pc, #420]	; (8008608 <Config_Read_Flash+0x2e0>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	0a1b      	lsrs	r3, r3, #8
 8008466:	b2da      	uxtb	r2, r3
 8008468:	4b68      	ldr	r3, [pc, #416]	; (800860c <Config_Read_Flash+0x2e4>)
 800846a:	705a      	strb	r2, [r3, #1]
	Digital_In_Interrupt_Can_Falling[2]=((*(&DIGITAL_IN_1+0))>>16)&0xFF;
 800846c:	4b66      	ldr	r3, [pc, #408]	; (8008608 <Config_Read_Flash+0x2e0>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	0c1b      	lsrs	r3, r3, #16
 8008472:	b2da      	uxtb	r2, r3
 8008474:	4b65      	ldr	r3, [pc, #404]	; (800860c <Config_Read_Flash+0x2e4>)
 8008476:	709a      	strb	r2, [r3, #2]
	Digital_In_Interrupt_Can_Falling[3]=((*(&DIGITAL_IN_1+0))>>24)&0xFF;
 8008478:	4b63      	ldr	r3, [pc, #396]	; (8008608 <Config_Read_Flash+0x2e0>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	0e1b      	lsrs	r3, r3, #24
 800847e:	b2da      	uxtb	r2, r3
 8008480:	4b62      	ldr	r3, [pc, #392]	; (800860c <Config_Read_Flash+0x2e4>)
 8008482:	70da      	strb	r2, [r3, #3]
	Digital_In_Interrupt_Can_Falling[4]=((*(&DIGITAL_IN_1+1))>>0)&0xFF;
 8008484:	4b62      	ldr	r3, [pc, #392]	; (8008610 <Config_Read_Flash+0x2e8>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	b2da      	uxtb	r2, r3
 800848a:	4b60      	ldr	r3, [pc, #384]	; (800860c <Config_Read_Flash+0x2e4>)
 800848c:	711a      	strb	r2, [r3, #4]
	Digital_In_Interrupt_Can_Rising[0]=((*(&DIGITAL_IN_1+1))>>8)&0xFF;
 800848e:	4b60      	ldr	r3, [pc, #384]	; (8008610 <Config_Read_Flash+0x2e8>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	0a1b      	lsrs	r3, r3, #8
 8008494:	b2da      	uxtb	r2, r3
 8008496:	4b5f      	ldr	r3, [pc, #380]	; (8008614 <Config_Read_Flash+0x2ec>)
 8008498:	701a      	strb	r2, [r3, #0]
	Digital_In_Interrupt_Can_Rising[1]=((*(&DIGITAL_IN_1+1))>>16)&0xFF;
 800849a:	4b5d      	ldr	r3, [pc, #372]	; (8008610 <Config_Read_Flash+0x2e8>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	0c1b      	lsrs	r3, r3, #16
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	4b5c      	ldr	r3, [pc, #368]	; (8008614 <Config_Read_Flash+0x2ec>)
 80084a4:	705a      	strb	r2, [r3, #1]
	Digital_In_Interrupt_Can_Rising[2]=((*(&DIGITAL_IN_1+1))>>24)&0xFF;
 80084a6:	4b5a      	ldr	r3, [pc, #360]	; (8008610 <Config_Read_Flash+0x2e8>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	0e1b      	lsrs	r3, r3, #24
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	4b59      	ldr	r3, [pc, #356]	; (8008614 <Config_Read_Flash+0x2ec>)
 80084b0:	709a      	strb	r2, [r3, #2]
	Digital_In_Interrupt_Can_Rising[3]=((*(&DIGITAL_IN_1+2))>>0)&0xFF;
 80084b2:	4b59      	ldr	r3, [pc, #356]	; (8008618 <Config_Read_Flash+0x2f0>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	4b56      	ldr	r3, [pc, #344]	; (8008614 <Config_Read_Flash+0x2ec>)
 80084ba:	70da      	strb	r2, [r3, #3]
	Digital_In_Interrupt_Can_Rising[4]=((*(&DIGITAL_IN_1+2))>>8)&0xFF;
 80084bc:	4b56      	ldr	r3, [pc, #344]	; (8008618 <Config_Read_Flash+0x2f0>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	0a1b      	lsrs	r3, r3, #8
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	4b53      	ldr	r3, [pc, #332]	; (8008614 <Config_Read_Flash+0x2ec>)
 80084c6:	711a      	strb	r2, [r3, #4]

	Digital_In_Interrupt_Power_High_Rising[0]=((*(&DIGITAL_IN_1+2))>>16)&0xFF;
 80084c8:	4b53      	ldr	r3, [pc, #332]	; (8008618 <Config_Read_Flash+0x2f0>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	0c1b      	lsrs	r3, r3, #16
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	4b52      	ldr	r3, [pc, #328]	; (800861c <Config_Read_Flash+0x2f4>)
 80084d2:	701a      	strb	r2, [r3, #0]
	Digital_In_Interrupt_Power_High_Rising[1]=((*(&DIGITAL_IN_1+2))>>24)&0xFF;
 80084d4:	4b50      	ldr	r3, [pc, #320]	; (8008618 <Config_Read_Flash+0x2f0>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	0e1b      	lsrs	r3, r3, #24
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	4b4f      	ldr	r3, [pc, #316]	; (800861c <Config_Read_Flash+0x2f4>)
 80084de:	705a      	strb	r2, [r3, #1]
	Digital_In_Interrupt_Power_High_Rising[2]=((*(&DIGITAL_IN_1+3))>>0)&0xFF;
 80084e0:	4b4f      	ldr	r3, [pc, #316]	; (8008620 <Config_Read_Flash+0x2f8>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	4b4d      	ldr	r3, [pc, #308]	; (800861c <Config_Read_Flash+0x2f4>)
 80084e8:	709a      	strb	r2, [r3, #2]
	Digital_In_Interrupt_Power_High_Rising[3]=((*(&DIGITAL_IN_1+3))>>8)&0xFF;
 80084ea:	4b4d      	ldr	r3, [pc, #308]	; (8008620 <Config_Read_Flash+0x2f8>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	0a1b      	lsrs	r3, r3, #8
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	4b4a      	ldr	r3, [pc, #296]	; (800861c <Config_Read_Flash+0x2f4>)
 80084f4:	70da      	strb	r2, [r3, #3]
	Digital_In_Interrupt_Power_High_Rising[4]=((*(&DIGITAL_IN_1+3))>>16)&0xFF;
 80084f6:	4b4a      	ldr	r3, [pc, #296]	; (8008620 <Config_Read_Flash+0x2f8>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	0c1b      	lsrs	r3, r3, #16
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	4b47      	ldr	r3, [pc, #284]	; (800861c <Config_Read_Flash+0x2f4>)
 8008500:	711a      	strb	r2, [r3, #4]
	Digital_In_Interrupt_Power_High_Falling[0]=((*(&DIGITAL_IN_1+3))>>24)&0xFF;
 8008502:	4b47      	ldr	r3, [pc, #284]	; (8008620 <Config_Read_Flash+0x2f8>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	0e1b      	lsrs	r3, r3, #24
 8008508:	b2da      	uxtb	r2, r3
 800850a:	4b46      	ldr	r3, [pc, #280]	; (8008624 <Config_Read_Flash+0x2fc>)
 800850c:	701a      	strb	r2, [r3, #0]
	Digital_In_Interrupt_Power_High_Falling[1]=((*(&DIGITAL_IN_1+4))>>0)&0xFF;
 800850e:	4b46      	ldr	r3, [pc, #280]	; (8008628 <Config_Read_Flash+0x300>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	b2da      	uxtb	r2, r3
 8008514:	4b43      	ldr	r3, [pc, #268]	; (8008624 <Config_Read_Flash+0x2fc>)
 8008516:	705a      	strb	r2, [r3, #1]
	Digital_In_Interrupt_Power_High_Falling[2]=((*(&DIGITAL_IN_1+4))>>8)&0xFF;
 8008518:	4b43      	ldr	r3, [pc, #268]	; (8008628 <Config_Read_Flash+0x300>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	0a1b      	lsrs	r3, r3, #8
 800851e:	b2da      	uxtb	r2, r3
 8008520:	4b40      	ldr	r3, [pc, #256]	; (8008624 <Config_Read_Flash+0x2fc>)
 8008522:	709a      	strb	r2, [r3, #2]
	Digital_In_Interrupt_Power_High_Falling[3]=((*(&DIGITAL_IN_1+4))>>16)&0xFF;
 8008524:	4b40      	ldr	r3, [pc, #256]	; (8008628 <Config_Read_Flash+0x300>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	0c1b      	lsrs	r3, r3, #16
 800852a:	b2da      	uxtb	r2, r3
 800852c:	4b3d      	ldr	r3, [pc, #244]	; (8008624 <Config_Read_Flash+0x2fc>)
 800852e:	70da      	strb	r2, [r3, #3]
	Digital_In_Interrupt_Power_High_Falling[4]=((*(&DIGITAL_IN_1+4))>>24)&0xFF;
 8008530:	4b3d      	ldr	r3, [pc, #244]	; (8008628 <Config_Read_Flash+0x300>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	0e1b      	lsrs	r3, r3, #24
 8008536:	b2da      	uxtb	r2, r3
 8008538:	4b3a      	ldr	r3, [pc, #232]	; (8008624 <Config_Read_Flash+0x2fc>)
 800853a:	711a      	strb	r2, [r3, #4]

	Digital_In_Interrupt_PWM_Rising[0]=((*(&DIGITAL_IN_1+5))>>0)&0xFF;
 800853c:	4b3b      	ldr	r3, [pc, #236]	; (800862c <Config_Read_Flash+0x304>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	b2da      	uxtb	r2, r3
 8008542:	4b3b      	ldr	r3, [pc, #236]	; (8008630 <Config_Read_Flash+0x308>)
 8008544:	701a      	strb	r2, [r3, #0]
	Digital_In_Interrupt_PWM_Rising[1]=((*(&DIGITAL_IN_1+5))>>8)&0xFF;
 8008546:	4b39      	ldr	r3, [pc, #228]	; (800862c <Config_Read_Flash+0x304>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	0a1b      	lsrs	r3, r3, #8
 800854c:	b2da      	uxtb	r2, r3
 800854e:	4b38      	ldr	r3, [pc, #224]	; (8008630 <Config_Read_Flash+0x308>)
 8008550:	705a      	strb	r2, [r3, #1]
	Digital_In_Interrupt_PWM_Rising[2]=((*(&DIGITAL_IN_1+5))>>16)&0xFF;
 8008552:	4b36      	ldr	r3, [pc, #216]	; (800862c <Config_Read_Flash+0x304>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	0c1b      	lsrs	r3, r3, #16
 8008558:	b2da      	uxtb	r2, r3
 800855a:	4b35      	ldr	r3, [pc, #212]	; (8008630 <Config_Read_Flash+0x308>)
 800855c:	709a      	strb	r2, [r3, #2]
	Digital_In_Interrupt_PWM_Rising[3]=((*(&DIGITAL_IN_1+5))>>24)&0xFF;
 800855e:	4b33      	ldr	r3, [pc, #204]	; (800862c <Config_Read_Flash+0x304>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	0e1b      	lsrs	r3, r3, #24
 8008564:	e066      	b.n	8008634 <Config_Read_Flash+0x30c>
 8008566:	bf00      	nop
 8008568:	0801f8d8 	.word	0x0801f8d8
 800856c:	20000928 	.word	0x20000928
 8008570:	2000098c 	.word	0x2000098c
 8008574:	0801f8dc 	.word	0x0801f8dc
 8008578:	20000944 	.word	0x20000944
 800857c:	2000072c 	.word	0x2000072c
 8008580:	0801f8e0 	.word	0x0801f8e0
 8008584:	20000220 	.word	0x20000220
 8008588:	200005ec 	.word	0x200005ec
 800858c:	0801f8e4 	.word	0x0801f8e4
 8008590:	2000098a 	.word	0x2000098a
 8008594:	20000a80 	.word	0x20000a80
 8008598:	0801f8e8 	.word	0x0801f8e8
 800859c:	20000596 	.word	0x20000596
 80085a0:	200009f2 	.word	0x200009f2
 80085a4:	0801f8ec 	.word	0x0801f8ec
 80085a8:	2000098e 	.word	0x2000098e
 80085ac:	20000584 	.word	0x20000584
 80085b0:	0801f8f0 	.word	0x0801f8f0
 80085b4:	20000b1c 	.word	0x20000b1c
 80085b8:	20000244 	.word	0x20000244
 80085bc:	0801f8f4 	.word	0x0801f8f4
 80085c0:	20000914 	.word	0x20000914
 80085c4:	20000874 	.word	0x20000874
 80085c8:	0801f8f8 	.word	0x0801f8f8
 80085cc:	20000112 	.word	0x20000112
 80085d0:	20000594 	.word	0x20000594
 80085d4:	0801f8fc 	.word	0x0801f8fc
 80085d8:	2000065c 	.word	0x2000065c
 80085dc:	20000246 	.word	0x20000246
 80085e0:	0801f900 	.word	0x0801f900
 80085e4:	2000093c 	.word	0x2000093c
 80085e8:	20000660 	.word	0x20000660
 80085ec:	0801f904 	.word	0x0801f904
 80085f0:	20000116 	.word	0x20000116
 80085f4:	200004a8 	.word	0x200004a8
 80085f8:	0801f800 	.word	0x0801f800
 80085fc:	20000114 	.word	0x20000114
 8008600:	0801f8cc 	.word	0x0801f8cc
 8008604:	200004ab 	.word	0x200004ab
 8008608:	0801f804 	.word	0x0801f804
 800860c:	200000b4 	.word	0x200000b4
 8008610:	0801f808 	.word	0x0801f808
 8008614:	200000c0 	.word	0x200000c0
 8008618:	0801f80c 	.word	0x0801f80c
 800861c:	20000588 	.word	0x20000588
 8008620:	0801f810 	.word	0x0801f810
 8008624:	2000078c 	.word	0x2000078c
 8008628:	0801f814 	.word	0x0801f814
 800862c:	0801f818 	.word	0x0801f818
 8008630:	200004ac 	.word	0x200004ac
 8008634:	b2da      	uxtb	r2, r3
 8008636:	4b80      	ldr	r3, [pc, #512]	; (8008838 <Config_Read_Flash+0x510>)
 8008638:	70da      	strb	r2, [r3, #3]
	Digital_In_Interrupt_PWM_Rising[4]=((*(&DIGITAL_IN_1+6))>>0)&0xFF;
 800863a:	4b80      	ldr	r3, [pc, #512]	; (800883c <Config_Read_Flash+0x514>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	b2da      	uxtb	r2, r3
 8008640:	4b7d      	ldr	r3, [pc, #500]	; (8008838 <Config_Read_Flash+0x510>)
 8008642:	711a      	strb	r2, [r3, #4]
	Digital_In_Interrupt_PWM_Falling[0]=((*(&DIGITAL_IN_1+6))>>8)&0xFF;
 8008644:	4b7d      	ldr	r3, [pc, #500]	; (800883c <Config_Read_Flash+0x514>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	0a1b      	lsrs	r3, r3, #8
 800864a:	b2da      	uxtb	r2, r3
 800864c:	4b7c      	ldr	r3, [pc, #496]	; (8008840 <Config_Read_Flash+0x518>)
 800864e:	701a      	strb	r2, [r3, #0]
	Digital_In_Interrupt_PWM_Falling[1]=((*(&DIGITAL_IN_1+6))>>16)&0xFF;
 8008650:	4b7a      	ldr	r3, [pc, #488]	; (800883c <Config_Read_Flash+0x514>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	0c1b      	lsrs	r3, r3, #16
 8008656:	b2da      	uxtb	r2, r3
 8008658:	4b79      	ldr	r3, [pc, #484]	; (8008840 <Config_Read_Flash+0x518>)
 800865a:	705a      	strb	r2, [r3, #1]
	Digital_In_Interrupt_PWM_Falling[2]=((*(&DIGITAL_IN_1+6))>>24)&0xFF;
 800865c:	4b77      	ldr	r3, [pc, #476]	; (800883c <Config_Read_Flash+0x514>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	0e1b      	lsrs	r3, r3, #24
 8008662:	b2da      	uxtb	r2, r3
 8008664:	4b76      	ldr	r3, [pc, #472]	; (8008840 <Config_Read_Flash+0x518>)
 8008666:	709a      	strb	r2, [r3, #2]
	Digital_In_Interrupt_PWM_Falling[3]=((*(&DIGITAL_IN_1+7))>>0)&0xFF;
 8008668:	4b76      	ldr	r3, [pc, #472]	; (8008844 <Config_Read_Flash+0x51c>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	b2da      	uxtb	r2, r3
 800866e:	4b74      	ldr	r3, [pc, #464]	; (8008840 <Config_Read_Flash+0x518>)
 8008670:	70da      	strb	r2, [r3, #3]
	Digital_In_Interrupt_PWM_Falling[4]=((*(&DIGITAL_IN_1+7))>>8)&0xFF;
 8008672:	4b74      	ldr	r3, [pc, #464]	; (8008844 <Config_Read_Flash+0x51c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	0a1b      	lsrs	r3, r3, #8
 8008678:	b2da      	uxtb	r2, r3
 800867a:	4b71      	ldr	r3, [pc, #452]	; (8008840 <Config_Read_Flash+0x518>)
 800867c:	711a      	strb	r2, [r3, #4]

	Digital_In_Interrupt_Power_Low_Rising[0]=((*(&DIGITAL_IN_1+7))>>16)&0xFF;
 800867e:	4b71      	ldr	r3, [pc, #452]	; (8008844 <Config_Read_Flash+0x51c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	0c1b      	lsrs	r3, r3, #16
 8008684:	b2da      	uxtb	r2, r3
 8008686:	4b70      	ldr	r3, [pc, #448]	; (8008848 <Config_Read_Flash+0x520>)
 8008688:	701a      	strb	r2, [r3, #0]
	Digital_In_Interrupt_Power_Low_Rising[1]=((*(&DIGITAL_IN_1+7))>>24)&0xFF;
 800868a:	4b6e      	ldr	r3, [pc, #440]	; (8008844 <Config_Read_Flash+0x51c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	0e1b      	lsrs	r3, r3, #24
 8008690:	b2da      	uxtb	r2, r3
 8008692:	4b6d      	ldr	r3, [pc, #436]	; (8008848 <Config_Read_Flash+0x520>)
 8008694:	705a      	strb	r2, [r3, #1]
	Digital_In_Interrupt_Power_Low_Rising[2]=((*(&DIGITAL_IN_1+8))>>0)&0xFF;
 8008696:	4b6d      	ldr	r3, [pc, #436]	; (800884c <Config_Read_Flash+0x524>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	b2da      	uxtb	r2, r3
 800869c:	4b6a      	ldr	r3, [pc, #424]	; (8008848 <Config_Read_Flash+0x520>)
 800869e:	709a      	strb	r2, [r3, #2]
	Digital_In_Interrupt_Power_Low_Rising[3]=((*(&DIGITAL_IN_1+8))>>8)&0xFF;
 80086a0:	4b6a      	ldr	r3, [pc, #424]	; (800884c <Config_Read_Flash+0x524>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	0a1b      	lsrs	r3, r3, #8
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	4b67      	ldr	r3, [pc, #412]	; (8008848 <Config_Read_Flash+0x520>)
 80086aa:	70da      	strb	r2, [r3, #3]
	Digital_In_Interrupt_Power_Low_Rising[4]=((*(&DIGITAL_IN_1+8))>>16)&0xFF;
 80086ac:	4b67      	ldr	r3, [pc, #412]	; (800884c <Config_Read_Flash+0x524>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	0c1b      	lsrs	r3, r3, #16
 80086b2:	b2da      	uxtb	r2, r3
 80086b4:	4b64      	ldr	r3, [pc, #400]	; (8008848 <Config_Read_Flash+0x520>)
 80086b6:	711a      	strb	r2, [r3, #4]
	Digital_In_Interrupt_Power_Low_Falling[0]=((*(&DIGITAL_IN_1+8))>>24)&0xFF;
 80086b8:	4b64      	ldr	r3, [pc, #400]	; (800884c <Config_Read_Flash+0x524>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	0e1b      	lsrs	r3, r3, #24
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	4b63      	ldr	r3, [pc, #396]	; (8008850 <Config_Read_Flash+0x528>)
 80086c2:	701a      	strb	r2, [r3, #0]
	Digital_In_Interrupt_Power_Low_Falling[1]=((*(&DIGITAL_IN_1+9))>>0)&0xFF;
 80086c4:	4b63      	ldr	r3, [pc, #396]	; (8008854 <Config_Read_Flash+0x52c>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	4b61      	ldr	r3, [pc, #388]	; (8008850 <Config_Read_Flash+0x528>)
 80086cc:	705a      	strb	r2, [r3, #1]
	Digital_In_Interrupt_Power_Low_Falling[2]=((*(&DIGITAL_IN_1+9))>>8)&0xFF;
 80086ce:	4b61      	ldr	r3, [pc, #388]	; (8008854 <Config_Read_Flash+0x52c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	0a1b      	lsrs	r3, r3, #8
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	4b5e      	ldr	r3, [pc, #376]	; (8008850 <Config_Read_Flash+0x528>)
 80086d8:	709a      	strb	r2, [r3, #2]
	Digital_In_Interrupt_Power_Low_Falling[3]=((*(&DIGITAL_IN_1+9))>>16)&0xFF;
 80086da:	4b5e      	ldr	r3, [pc, #376]	; (8008854 <Config_Read_Flash+0x52c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	0c1b      	lsrs	r3, r3, #16
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	4b5b      	ldr	r3, [pc, #364]	; (8008850 <Config_Read_Flash+0x528>)
 80086e4:	70da      	strb	r2, [r3, #3]
	Digital_In_Interrupt_Power_Low_Falling[4]=((*(&DIGITAL_IN_1+9))>>24)&0xFF;
 80086e6:	4b5b      	ldr	r3, [pc, #364]	; (8008854 <Config_Read_Flash+0x52c>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	0e1b      	lsrs	r3, r3, #24
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	4b58      	ldr	r3, [pc, #352]	; (8008850 <Config_Read_Flash+0x528>)
 80086f0:	711a      	strb	r2, [r3, #4]

	PWM_Out_EN = ((PWM_EN>>0)&0b00011111);
 80086f2:	4b59      	ldr	r3, [pc, #356]	; (8008858 <Config_Read_Flash+0x530>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	f003 031f 	and.w	r3, r3, #31
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	4b57      	ldr	r3, [pc, #348]	; (800885c <Config_Read_Flash+0x534>)
 8008700:	701a      	strb	r2, [r3, #0]
	PWM_Pulses[0] = ((PWM_0>>0)&0xFFFF);
 8008702:	4b57      	ldr	r3, [pc, #348]	; (8008860 <Config_Read_Flash+0x538>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	b29a      	uxth	r2, r3
 8008708:	4b56      	ldr	r3, [pc, #344]	; (8008864 <Config_Read_Flash+0x53c>)
 800870a:	801a      	strh	r2, [r3, #0]
	PWM_Prescalers[0] = ((PWM_0>>16)&0xFFFF);
 800870c:	4b54      	ldr	r3, [pc, #336]	; (8008860 <Config_Read_Flash+0x538>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	0c1b      	lsrs	r3, r3, #16
 8008712:	b29a      	uxth	r2, r3
 8008714:	4b54      	ldr	r3, [pc, #336]	; (8008868 <Config_Read_Flash+0x540>)
 8008716:	801a      	strh	r2, [r3, #0]
	PWM_Pulses[1] = ((PWM_1>>0)&0xFFFF);
 8008718:	4b54      	ldr	r3, [pc, #336]	; (800886c <Config_Read_Flash+0x544>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	b29a      	uxth	r2, r3
 800871e:	4b51      	ldr	r3, [pc, #324]	; (8008864 <Config_Read_Flash+0x53c>)
 8008720:	805a      	strh	r2, [r3, #2]
	PWM_Prescalers[1] = ((PWM_1>>16)&0xFFFF);
 8008722:	4b52      	ldr	r3, [pc, #328]	; (800886c <Config_Read_Flash+0x544>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	0c1b      	lsrs	r3, r3, #16
 8008728:	b29a      	uxth	r2, r3
 800872a:	4b4f      	ldr	r3, [pc, #316]	; (8008868 <Config_Read_Flash+0x540>)
 800872c:	805a      	strh	r2, [r3, #2]
	PWM_Pulses[2] = ((PWM_2>>0)&0xFFFF);
 800872e:	4b50      	ldr	r3, [pc, #320]	; (8008870 <Config_Read_Flash+0x548>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	b29a      	uxth	r2, r3
 8008734:	4b4b      	ldr	r3, [pc, #300]	; (8008864 <Config_Read_Flash+0x53c>)
 8008736:	809a      	strh	r2, [r3, #4]
	PWM_Prescalers[2] = ((PWM_2>>16)&0xFFFF);
 8008738:	4b4d      	ldr	r3, [pc, #308]	; (8008870 <Config_Read_Flash+0x548>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	0c1b      	lsrs	r3, r3, #16
 800873e:	b29a      	uxth	r2, r3
 8008740:	4b49      	ldr	r3, [pc, #292]	; (8008868 <Config_Read_Flash+0x540>)
 8008742:	809a      	strh	r2, [r3, #4]
	PWM_Pulses[3] = ((PWM_3>>0)&0xFFFF);
 8008744:	4b4b      	ldr	r3, [pc, #300]	; (8008874 <Config_Read_Flash+0x54c>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	b29a      	uxth	r2, r3
 800874a:	4b46      	ldr	r3, [pc, #280]	; (8008864 <Config_Read_Flash+0x53c>)
 800874c:	80da      	strh	r2, [r3, #6]
	PWM_Prescalers[3] = ((PWM_3>>16)&0xFFFF);
 800874e:	4b49      	ldr	r3, [pc, #292]	; (8008874 <Config_Read_Flash+0x54c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	0c1b      	lsrs	r3, r3, #16
 8008754:	b29a      	uxth	r2, r3
 8008756:	4b44      	ldr	r3, [pc, #272]	; (8008868 <Config_Read_Flash+0x540>)
 8008758:	80da      	strh	r2, [r3, #6]
	PWM_Pulses[4] = ((PWM_4>>0)&0xFFFF);
 800875a:	4b47      	ldr	r3, [pc, #284]	; (8008878 <Config_Read_Flash+0x550>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	b29a      	uxth	r2, r3
 8008760:	4b40      	ldr	r3, [pc, #256]	; (8008864 <Config_Read_Flash+0x53c>)
 8008762:	811a      	strh	r2, [r3, #8]
	PWM_Prescalers[4] = ((PWM_4>>16)&0xFFFF);
 8008764:	4b44      	ldr	r3, [pc, #272]	; (8008878 <Config_Read_Flash+0x550>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	0c1b      	lsrs	r3, r3, #16
 800876a:	b29a      	uxth	r2, r3
 800876c:	4b3e      	ldr	r3, [pc, #248]	; (8008868 <Config_Read_Flash+0x540>)
 800876e:	811a      	strh	r2, [r3, #8]

	PWM_In_EN = ((PWM_EN>>8)&0b00011001); //ignore PB4 and PB5
 8008770:	4b39      	ldr	r3, [pc, #228]	; (8008858 <Config_Read_Flash+0x530>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	0a1b      	lsrs	r3, r3, #8
 8008776:	b2db      	uxtb	r3, r3
 8008778:	f003 0319 	and.w	r3, r3, #25
 800877c:	b2da      	uxtb	r2, r3
 800877e:	4b3f      	ldr	r3, [pc, #252]	; (800887c <Config_Read_Flash+0x554>)
 8008780:	701a      	strb	r2, [r3, #0]

	uint32_t CanId[8] = {CAN_ID_0, CAN_ID_1, CAN_ID_2, CAN_ID_3, CAN_ID_4, CAN_ID_5, CAN_ID_6, CAN_ID_7};
 8008782:	4b3f      	ldr	r3, [pc, #252]	; (8008880 <Config_Read_Flash+0x558>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	607b      	str	r3, [r7, #4]
 8008788:	4b3e      	ldr	r3, [pc, #248]	; (8008884 <Config_Read_Flash+0x55c>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	60bb      	str	r3, [r7, #8]
 800878e:	4b3e      	ldr	r3, [pc, #248]	; (8008888 <Config_Read_Flash+0x560>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	4b3d      	ldr	r3, [pc, #244]	; (800888c <Config_Read_Flash+0x564>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	613b      	str	r3, [r7, #16]
 800879a:	4b3d      	ldr	r3, [pc, #244]	; (8008890 <Config_Read_Flash+0x568>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	617b      	str	r3, [r7, #20]
 80087a0:	4b3c      	ldr	r3, [pc, #240]	; (8008894 <Config_Read_Flash+0x56c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	61bb      	str	r3, [r7, #24]
 80087a6:	4b3c      	ldr	r3, [pc, #240]	; (8008898 <Config_Read_Flash+0x570>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	61fb      	str	r3, [r7, #28]
 80087ac:	4b3b      	ldr	r3, [pc, #236]	; (800889c <Config_Read_Flash+0x574>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	623b      	str	r3, [r7, #32]
	for(uint32_t i=0; i<8; i++)
 80087b2:	2300      	movs	r3, #0
 80087b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087b6:	e01c      	b.n	80087f2 <Config_Read_Flash+0x4ca>
	{
		Can_IDs[i]=((CanId[i]>>0)&0xFFFF);
 80087b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80087c0:	4413      	add	r3, r2
 80087c2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80087c6:	b299      	uxth	r1, r3
 80087c8:	4a35      	ldr	r2, [pc, #212]	; (80088a0 <Config_Read_Flash+0x578>)
 80087ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Can_DLCs[i]=((CanId[i]>>16)&0xFF);
 80087d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80087d8:	4413      	add	r3, r2
 80087da:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80087de:	0c1b      	lsrs	r3, r3, #16
 80087e0:	b2d9      	uxtb	r1, r3
 80087e2:	4a30      	ldr	r2, [pc, #192]	; (80088a4 <Config_Read_Flash+0x57c>)
 80087e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e6:	4413      	add	r3, r2
 80087e8:	460a      	mov	r2, r1
 80087ea:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 80087ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ee:	3301      	adds	r3, #1
 80087f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f4:	2b07      	cmp	r3, #7
 80087f6:	d9df      	bls.n	80087b8 <Config_Read_Flash+0x490>
	}

	for(uint32_t i=0; i<8; i++)
 80087f8:	2300      	movs	r3, #0
 80087fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80087fc:	e099      	b.n	8008932 <Config_Read_Flash+0x60a>
	{
		uint32_t temp_can_bytes_0=*(&CAN_BYTES_1ST+i*2);
 80087fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008800:	00da      	lsls	r2, r3, #3
 8008802:	4b29      	ldr	r3, [pc, #164]	; (80088a8 <Config_Read_Flash+0x580>)
 8008804:	4413      	add	r3, r2
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t temp_can_bytes_1=*(&CAN_BYTES_1ST+i*2+1);
 800880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880c:	00db      	lsls	r3, r3, #3
 800880e:	1d1a      	adds	r2, r3, #4
 8008810:	4b25      	ldr	r3, [pc, #148]	; (80088a8 <Config_Read_Flash+0x580>)
 8008812:	4413      	add	r3, r2
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t temp_can_datas_0=*(&CAN_DATAS_1ST+i*2);
 8008818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881a:	00da      	lsls	r2, r3, #3
 800881c:	4b23      	ldr	r3, [pc, #140]	; (80088ac <Config_Read_Flash+0x584>)
 800881e:	4413      	add	r3, r2
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t temp_can_datas_1=*(&CAN_DATAS_1ST+i*2+1);
 8008824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008826:	00db      	lsls	r3, r3, #3
 8008828:	1d1a      	adds	r2, r3, #4
 800882a:	4b20      	ldr	r3, [pc, #128]	; (80088ac <Config_Read_Flash+0x584>)
 800882c:	4413      	add	r3, r2
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	627b      	str	r3, [r7, #36]	; 0x24
		for(uint32_t j=0; j<4; j++)
 8008832:	2300      	movs	r3, #0
 8008834:	637b      	str	r3, [r7, #52]	; 0x34
 8008836:	e076      	b.n	8008926 <Config_Read_Flash+0x5fe>
 8008838:	200004ac 	.word	0x200004ac
 800883c:	0801f81c 	.word	0x0801f81c
 8008840:	2000010c 	.word	0x2000010c
 8008844:	0801f820 	.word	0x0801f820
 8008848:	200004b8 	.word	0x200004b8
 800884c:	0801f824 	.word	0x0801f824
 8008850:	20000918 	.word	0x20000918
 8008854:	0801f828 	.word	0x0801f828
 8008858:	0801f924 	.word	0x0801f924
 800885c:	200009f0 	.word	0x200009f0
 8008860:	0801f910 	.word	0x0801f910
 8008864:	20000828 	.word	0x20000828
 8008868:	2000059c 	.word	0x2000059c
 800886c:	0801f914 	.word	0x0801f914
 8008870:	0801f918 	.word	0x0801f918
 8008874:	0801f91c 	.word	0x0801f91c
 8008878:	0801f920 	.word	0x0801f920
 800887c:	200004aa 	.word	0x200004aa
 8008880:	0801f82c 	.word	0x0801f82c
 8008884:	0801f830 	.word	0x0801f830
 8008888:	0801f834 	.word	0x0801f834
 800888c:	0801f838 	.word	0x0801f838
 8008890:	0801f83c 	.word	0x0801f83c
 8008894:	0801f840 	.word	0x0801f840
 8008898:	0801f844 	.word	0x0801f844
 800889c:	0801f848 	.word	0x0801f848
 80088a0:	2000087c 	.word	0x2000087c
 80088a4:	2000092c 	.word	0x2000092c
 80088a8:	0801f84c 	.word	0x0801f84c
 80088ac:	0801f88c 	.word	0x0801f88c
		{
			Can_Config_Bytes[i][j]=(temp_can_bytes_0>>(8*j)) & 0xFF;
 80088b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b2:	00db      	lsls	r3, r3, #3
 80088b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ba:	b2d9      	uxtb	r1, r3
 80088bc:	4a3c      	ldr	r2, [pc, #240]	; (80089b0 <Config_Read_Flash+0x688>)
 80088be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c0:	00db      	lsls	r3, r3, #3
 80088c2:	441a      	add	r2, r3
 80088c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c6:	4413      	add	r3, r2
 80088c8:	460a      	mov	r2, r1
 80088ca:	701a      	strb	r2, [r3, #0]
			Can_Config_Bytes[i][j+4]=(temp_can_bytes_1>>(8*j)) & 0xFF;
 80088cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088d2:	40da      	lsrs	r2, r3
 80088d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d6:	3304      	adds	r3, #4
 80088d8:	b2d0      	uxtb	r0, r2
 80088da:	4935      	ldr	r1, [pc, #212]	; (80089b0 <Config_Read_Flash+0x688>)
 80088dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088de:	00d2      	lsls	r2, r2, #3
 80088e0:	440a      	add	r2, r1
 80088e2:	4413      	add	r3, r2
 80088e4:	4602      	mov	r2, r0
 80088e6:	701a      	strb	r2, [r3, #0]
			Can_Config_Datas[i][j]=(temp_can_datas_0>>(8*j)) & 0xFF;
 80088e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ee:	fa22 f303 	lsr.w	r3, r2, r3
 80088f2:	b2d9      	uxtb	r1, r3
 80088f4:	4a2f      	ldr	r2, [pc, #188]	; (80089b4 <Config_Read_Flash+0x68c>)
 80088f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f8:	00db      	lsls	r3, r3, #3
 80088fa:	441a      	add	r2, r3
 80088fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fe:	4413      	add	r3, r2
 8008900:	460a      	mov	r2, r1
 8008902:	701a      	strb	r2, [r3, #0]
			Can_Config_Datas[i][j+4]=(temp_can_datas_1>>(8*j)) & 0xFF;
 8008904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800890a:	40da      	lsrs	r2, r3
 800890c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890e:	3304      	adds	r3, #4
 8008910:	b2d0      	uxtb	r0, r2
 8008912:	4928      	ldr	r1, [pc, #160]	; (80089b4 <Config_Read_Flash+0x68c>)
 8008914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008916:	00d2      	lsls	r2, r2, #3
 8008918:	440a      	add	r2, r1
 800891a:	4413      	add	r3, r2
 800891c:	4602      	mov	r2, r0
 800891e:	701a      	strb	r2, [r3, #0]
		for(uint32_t j=0; j<4; j++)
 8008920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008922:	3301      	adds	r3, #1
 8008924:	637b      	str	r3, [r7, #52]	; 0x34
 8008926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008928:	2b03      	cmp	r3, #3
 800892a:	d9c1      	bls.n	80088b0 <Config_Read_Flash+0x588>
	for(uint32_t i=0; i<8; i++)
 800892c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892e:	3301      	adds	r3, #1
 8008930:	63bb      	str	r3, [r7, #56]	; 0x38
 8008932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008934:	2b07      	cmp	r3, #7
 8008936:	f67f af62 	bls.w	80087fe <Config_Read_Flash+0x4d6>
		}
	}
	Can_Sync_Enable=(CAN_SEND_EN>>0)&0b11111111;
 800893a:	4b1f      	ldr	r3, [pc, #124]	; (80089b8 <Config_Read_Flash+0x690>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	b2da      	uxtb	r2, r3
 8008940:	4b1e      	ldr	r3, [pc, #120]	; (80089bc <Config_Read_Flash+0x694>)
 8008942:	701a      	strb	r2, [r3, #0]
	Can_Timed_Enable=(CAN_SEND_EN>>8)&0b11111111;
 8008944:	4b1c      	ldr	r3, [pc, #112]	; (80089b8 <Config_Read_Flash+0x690>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	0a1b      	lsrs	r3, r3, #8
 800894a:	b2da      	uxtb	r2, r3
 800894c:	4b1c      	ldr	r3, [pc, #112]	; (80089c0 <Config_Read_Flash+0x698>)
 800894e:	701a      	strb	r2, [r3, #0]
	Can_Interval=(CAN_SEND_EN>>16)&0xFFFF;
 8008950:	4b19      	ldr	r3, [pc, #100]	; (80089b8 <Config_Read_Flash+0x690>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	0c1b      	lsrs	r3, r3, #16
 8008956:	b29a      	uxth	r2, r3
 8008958:	4b1a      	ldr	r3, [pc, #104]	; (80089c4 <Config_Read_Flash+0x69c>)
 800895a:	801a      	strh	r2, [r3, #0]
	Can_Sync_Delay=(CAN_SYNC_DELAY>>16)*0xFFFF;
 800895c:	4b1a      	ldr	r3, [pc, #104]	; (80089c8 <Config_Read_Flash+0x6a0>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	0c1b      	lsrs	r3, r3, #16
 8008962:	b29b      	uxth	r3, r3
 8008964:	425b      	negs	r3, r3
 8008966:	b29a      	uxth	r2, r3
 8008968:	4b18      	ldr	r3, [pc, #96]	; (80089cc <Config_Read_Flash+0x6a4>)
 800896a:	801a      	strh	r2, [r3, #0]

	sample_temperature = (TV_BURST>>0)&0xFF;
 800896c:	4b18      	ldr	r3, [pc, #96]	; (80089d0 <Config_Read_Flash+0x6a8>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	b2db      	uxtb	r3, r3
 8008972:	4a18      	ldr	r2, [pc, #96]	; (80089d4 <Config_Read_Flash+0x6ac>)
 8008974:	6013      	str	r3, [r2, #0]
	sample_voltage = (TV_BURST>>8)&0xFF;
 8008976:	4b16      	ldr	r3, [pc, #88]	; (80089d0 <Config_Read_Flash+0x6a8>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	0a1b      	lsrs	r3, r3, #8
 800897c:	b2db      	uxtb	r3, r3
 800897e:	4a16      	ldr	r2, [pc, #88]	; (80089d8 <Config_Read_Flash+0x6b0>)
 8008980:	6013      	str	r3, [r2, #0]
	SampleTemperatureBurst = (TV_BURST>>16)&0xFF;
 8008982:	4b13      	ldr	r3, [pc, #76]	; (80089d0 <Config_Read_Flash+0x6a8>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	0c1b      	lsrs	r3, r3, #16
 8008988:	b2da      	uxtb	r2, r3
 800898a:	4b14      	ldr	r3, [pc, #80]	; (80089dc <Config_Read_Flash+0x6b4>)
 800898c:	701a      	strb	r2, [r3, #0]
	SampleVoltageBurst = (TV_BURST>>24)&0xFF;
 800898e:	4b10      	ldr	r3, [pc, #64]	; (80089d0 <Config_Read_Flash+0x6a8>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	0e1b      	lsrs	r3, r3, #24
 8008994:	b2da      	uxtb	r2, r3
 8008996:	4b12      	ldr	r3, [pc, #72]	; (80089e0 <Config_Read_Flash+0x6b8>)
 8008998:	701a      	strb	r2, [r3, #0]
	SampleTemperatureVoltagePeriod= (TV_BURST_TIMING>>0)&0xFFFF;
 800899a:	4b12      	ldr	r3, [pc, #72]	; (80089e4 <Config_Read_Flash+0x6bc>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	b29a      	uxth	r2, r3
 80089a0:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <Config_Read_Flash+0x6c0>)
 80089a2:	801a      	strh	r2, [r3, #0]
}
 80089a4:	bf00      	nop
 80089a6:	3744      	adds	r7, #68	; 0x44
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	200002f4 	.word	0x200002f4
 80089b4:	2000019c 	.word	0x2000019c
 80089b8:	0801f8d0 	.word	0x0801f8d0
 80089bc:	20000500 	.word	0x20000500
 80089c0:	20000115 	.word	0x20000115
 80089c4:	20000118 	.word	0x20000118
 80089c8:	0801f8d4 	.word	0x0801f8d4
 80089cc:	20000440 	.word	0x20000440
 80089d0:	0801f908 	.word	0x0801f908
 80089d4:	200004b4 	.word	0x200004b4
 80089d8:	200000bc 	.word	0x200000bc
 80089dc:	2000091d 	.word	0x2000091d
 80089e0:	200001dd 	.word	0x200001dd
 80089e4:	0801f90c 	.word	0x0801f90c
 80089e8:	20000988 	.word	0x20000988

080089ec <Flash_Write>:


void Flash_Write(uint32_t Flash_Address, uint32_t Page, uint32_t Flash_Data[512], int Data_Words)
{
 80089ec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80089f0:	b08c      	sub	sp, #48	; 0x30
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	607a      	str	r2, [r7, #4]
 80089fa:	603b      	str	r3, [r7, #0]
	FLASH_EraseInitTypeDef pEraseInit;
	uint32_t pError = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	613b      	str	r3, [r7, #16]

	pEraseInit.Page = Page;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	61fb      	str	r3, [r7, #28]
	pEraseInit.NbPages = 1;
 8008a04:	2301      	movs	r3, #1
 8008a06:	623b      	str	r3, [r7, #32]
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a0c:	b672      	cpsid	i

	__disable_irq();
	if(HAL_FLASH_Unlock() != HAL_OK)
 8008a0e:	f7fa fb87 	bl	8003120 <HAL_FLASH_Unlock>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d002      	beq.n	8008a1e <Flash_Write+0x32>
  __ASM volatile ("cpsie i" : : : "memory");
 8008a18:	b662      	cpsie	i
	{
		__enable_irq();
		Error_Handler();
 8008a1a:	f002 fd3d 	bl	800b498 <Error_Handler>
	}

	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0) { }
 8008a1e:	bf00      	nop
 8008a20:	4b3c      	ldr	r3, [pc, #240]	; (8008b14 <Flash_Write+0x128>)
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a2c:	d0f8      	beq.n	8008a20 <Flash_Write+0x34>

	if(HAL_FLASHEx_Erase(&pEraseInit, &pError) != HAL_OK)
 8008a2e:	f107 0210 	add.w	r2, r7, #16
 8008a32:	f107 0314 	add.w	r3, r7, #20
 8008a36:	4611      	mov	r1, r2
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fa fc59 	bl	80032f0 <HAL_FLASHEx_Erase>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d009      	beq.n	8008a58 <Flash_Write+0x6c>
 8008a44:	b662      	cpsie	i
	{
		__enable_irq();
		while(1)
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8008a46:	2108      	movs	r1, #8
 8008a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a4c:	f7fa ff26 	bl	800389c <HAL_GPIO_TogglePin>
			HAL_Delay(33);
 8008a50:	2021      	movs	r0, #33	; 0x21
 8008a52:	f7f7 fc51 	bl	80002f8 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8008a56:	e7f6      	b.n	8008a46 <Flash_Write+0x5a>
		}
	}

	uint64_t data;
	for(int i=0; i<((Data_Words+1)/2); i++) //here we want integer division that rounds up instead of down
 8008a58:	2300      	movs	r3, #0
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a5c:	e042      	b.n	8008ae4 <Flash_Write+0xf8>
	{
		data=(uint64_t)Flash_Data[i*2];
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	461a      	mov	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4413      	add	r3, r2
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f04f 0400 	mov.w	r4, #0
 8008a6e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		if((i*2)+1<Data_Words)
 8008a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	3301      	adds	r3, #1
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	dd17      	ble.n	8008aae <Flash_Write+0xc2>
		{
			data+=((uint64_t)Flash_Data[i*2+1]<<32);
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	00db      	lsls	r3, r3, #3
 8008a82:	3304      	adds	r3, #4
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	4413      	add	r3, r2
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	f04f 0b00 	mov.w	fp, #0
 8008a94:	f04f 0c00 	mov.w	ip, #0
 8008a98:	468c      	mov	ip, r1
 8008a9a:	f04f 0b00 	mov.w	fp, #0
 8008a9e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008aa2:	eb1b 0301 	adds.w	r3, fp, r1
 8008aa6:	eb4c 0402 	adc.w	r4, ip, r2
 8008aaa:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		}

			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Flash_Address+i*0x08, data) != HAL_OK)
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	00db      	lsls	r3, r3, #3
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	18d1      	adds	r1, r2, r3
 8008ab8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008abc:	2000      	movs	r0, #0
 8008abe:	f7fa fad9 	bl	8003074 <HAL_FLASH_Program>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <Flash_Write+0xe2>
 8008ac8:	b662      	cpsie	i
			{
				__enable_irq();
				Error_Handler();
 8008aca:	f002 fce5 	bl	800b498 <Error_Handler>
			}
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0) { }
 8008ace:	bf00      	nop
 8008ad0:	4b10      	ldr	r3, [pc, #64]	; (8008b14 <Flash_Write+0x128>)
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008adc:	d0f8      	beq.n	8008ad0 <Flash_Write+0xe4>
	for(int i=0; i<((Data_Words+1)/2); i++) //here we want integer division that rounds up instead of down
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	0fda      	lsrs	r2, r3, #31
 8008aea:	4413      	add	r3, r2
 8008aec:	105b      	asrs	r3, r3, #1
 8008aee:	461a      	mov	r2, r3
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	4293      	cmp	r3, r2
 8008af4:	dbb3      	blt.n	8008a5e <Flash_Write+0x72>
	}

	if(HAL_FLASH_Lock() != HAL_OK)
 8008af6:	f7fa fb35 	bl	8003164 <HAL_FLASH_Lock>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <Flash_Write+0x11a>
 8008b00:	b662      	cpsie	i
	{
		__enable_irq();
		Error_Handler();
 8008b02:	f002 fcc9 	bl	800b498 <Error_Handler>
 8008b06:	b662      	cpsie	i
	}
	__enable_irq();
}
 8008b08:	bf00      	nop
 8008b0a:	3730      	adds	r7, #48	; 0x30
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008b12:	bf00      	nop
 8008b14:	40022000 	.word	0x40022000

08008b18 <Flash_Read>:

uint32_t Flash_Read(uint32_t Flash_Address)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
	return *(uint32_t*)Flash_Address;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <main>:
uint8_t U7I0_active;
uint8_t U7I1_active;


int main(void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
	HAL_Init();
 8008b36:	f7f7 fb6f 	bl	8000218 <HAL_Init>

	SystemClock_Config();
 8008b3a:	f001 fbe7 	bl	800a30c <SystemClock_Config>

	Config_Setup();
 8008b3e:	f7fe fe4f 	bl	80077e0 <Config_Setup>

	MX_GPIO_Init();
 8008b42:	f001 fe4d 	bl	800a7e0 <MX_GPIO_Init>
	MX_DMA_Init();
 8008b46:	f001 fe19 	bl	800a77c <MX_DMA_Init>
	MX_ADC1_Init();
 8008b4a:	f001 fc45 	bl	800a3d8 <MX_ADC1_Init>
	MX_ADC2_Init();
 8008b4e:	f001 fce9 	bl	800a524 <MX_ADC2_Init>
	MX_FDCAN_Init();
 8008b52:	f001 fd67 	bl	800a624 <MX_FDCAN_Init>

	MX_TIM1_Init(); //""  ""
 8008b56:	f002 f831 	bl	800abbc <MX_TIM1_Init>
	MX_TIM6_Init(); //initialize unnecessary timers to avoid error handler being called when configuration is changed
 8008b5a:	f002 f851 	bl	800ac00 <MX_TIM6_Init>
	MX_TIM7_Init();
 8008b5e:	f002 f873 	bl	800ac48 <MX_TIM7_Init>
	MX_TIM15_Init();
 8008b62:	f002 f893 	bl	800ac8c <MX_TIM15_Init>
	MX_TIM16_Init(); //""  ""
 8008b66:	f002 f8af 	bl	800acc8 <MX_TIM16_Init>

	MX_TIM17_Init();
 8008b6a:	f002 f8d5 	bl	800ad18 <MX_TIM17_Init>
	MX_TIM3_Init();
 8008b6e:	f002 fa21 	bl	800afb4 <MX_TIM3_Init>

	MX_TIM2_Init();
 8008b72:	f002 f93f 	bl	800adf4 <MX_TIM2_Init>
	MX_TIM4_Init();
 8008b76:	f002 fa79 	bl	800b06c <MX_TIM4_Init>
	MX_TIM8_Init();
 8008b7a:	f002 fb57 	bl	800b22c <MX_TIM8_Init>

	MX_LPTIM1_Init();
 8008b7e:	f002 fc5d 	bl	800b43c <MX_LPTIM1_Init>

	//start everything that can generate interrupts after initialization is done
	HAL_TIM_Base_Start_IT(&htim1);
 8008b82:	485f      	ldr	r0, [pc, #380]	; (8008d00 <main+0x1d0>)
 8008b84:	f7fc f928 	bl	8004dd8 <HAL_TIM_Base_Start_IT>
	if (Can_Timed_Enable) { HAL_TIM_Base_Start_IT(&htim6); }
 8008b88:	4b5e      	ldr	r3, [pc, #376]	; (8008d04 <main+0x1d4>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <main+0x66>
 8008b90:	485d      	ldr	r0, [pc, #372]	; (8008d08 <main+0x1d8>)
 8008b92:	f7fc f921 	bl	8004dd8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8008b96:	485d      	ldr	r0, [pc, #372]	; (8008d0c <main+0x1dc>)
 8008b98:	f7fc f91e 	bl	8004dd8 <HAL_TIM_Base_Start_IT>

	//start pwm input channels if they are enabled
	if ((PWM_In_EN>>0)&1) { HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); }
 8008b9c:	4b5c      	ldr	r3, [pc, #368]	; (8008d10 <main+0x1e0>)
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d007      	beq.n	8008bb8 <main+0x88>
 8008ba8:	2100      	movs	r1, #0
 8008baa:	485a      	ldr	r0, [pc, #360]	; (8008d14 <main+0x1e4>)
 8008bac:	f7fc f994 	bl	8004ed8 <HAL_TIM_PWM_Start>
 8008bb0:	2104      	movs	r1, #4
 8008bb2:	4858      	ldr	r0, [pc, #352]	; (8008d14 <main+0x1e4>)
 8008bb4:	f7fc f990 	bl	8004ed8 <HAL_TIM_PWM_Start>
	if ((PWM_In_EN>>3)&1) { HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); }
 8008bb8:	4b55      	ldr	r3, [pc, #340]	; (8008d10 <main+0x1e0>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	08db      	lsrs	r3, r3, #3
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	f003 0301 	and.w	r3, r3, #1
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d007      	beq.n	8008bd8 <main+0xa8>
 8008bc8:	2104      	movs	r1, #4
 8008bca:	4853      	ldr	r0, [pc, #332]	; (8008d18 <main+0x1e8>)
 8008bcc:	f7fc f984 	bl	8004ed8 <HAL_TIM_PWM_Start>
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	4851      	ldr	r0, [pc, #324]	; (8008d18 <main+0x1e8>)
 8008bd4:	f7fc f980 	bl	8004ed8 <HAL_TIM_PWM_Start>
	if ((PWM_In_EN>>4)&1) { HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2); HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); }
 8008bd8:	4b4d      	ldr	r3, [pc, #308]	; (8008d10 <main+0x1e0>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	091b      	lsrs	r3, r3, #4
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d007      	beq.n	8008bf8 <main+0xc8>
 8008be8:	2104      	movs	r1, #4
 8008bea:	484c      	ldr	r0, [pc, #304]	; (8008d1c <main+0x1ec>)
 8008bec:	f7fc f974 	bl	8004ed8 <HAL_TIM_PWM_Start>
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	484a      	ldr	r0, [pc, #296]	; (8008d1c <main+0x1ec>)
 8008bf4:	f7fc f970 	bl	8004ed8 <HAL_TIM_PWM_Start>

	//this timer starts the adc, so start it last
	HAL_TIM_Base_Start_IT(&htim15);
 8008bf8:	4849      	ldr	r0, [pc, #292]	; (8008d20 <main+0x1f0>)
 8008bfa:	f7fc f8ed 	bl	8004dd8 <HAL_TIM_Base_Start_IT>

	while(1)
	{
		if(canErrorToTransmit && canSendErrorFlag)
 8008bfe:	4b49      	ldr	r3, [pc, #292]	; (8008d24 <main+0x1f4>)
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00c      	beq.n	8008c20 <main+0xf0>
 8008c06:	4b48      	ldr	r3, [pc, #288]	; (8008d28 <main+0x1f8>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d008      	beq.n	8008c20 <main+0xf0>
		{
			Send_Error();
 8008c0e:	f001 fa27 	bl	800a060 <Send_Error>
			if(!canErrorToTransmit)
 8008c12:	4b44      	ldr	r3, [pc, #272]	; (8008d24 <main+0x1f4>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d102      	bne.n	8008c20 <main+0xf0>
			{
				canSendErrorFlag=0;
 8008c1a:	4b43      	ldr	r3, [pc, #268]	; (8008d28 <main+0x1f8>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	701a      	strb	r2, [r3, #0]
			}
		}

		if(CanTimerFlag)
 8008c20:	4b42      	ldr	r3, [pc, #264]	; (8008d2c <main+0x1fc>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d01a      	beq.n	8008c5e <main+0x12e>
		{
			for(uint32_t i=0; i<8; i++)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	607b      	str	r3, [r7, #4]
 8008c2c:	e011      	b.n	8008c52 <main+0x122>
			{
				if ((Can_Timed_Enable>>i)&0b1)
 8008c2e:	4b35      	ldr	r3, [pc, #212]	; (8008d04 <main+0x1d4>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	fa42 f303 	asr.w	r3, r2, r3
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d004      	beq.n	8008c4c <main+0x11c>
				{
					Buffer_Can_Message(i);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe faa0 	bl	800718c <Buffer_Can_Message>
			for(uint32_t i=0; i<8; i++)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	607b      	str	r3, [r7, #4]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b07      	cmp	r3, #7
 8008c56:	d9ea      	bls.n	8008c2e <main+0xfe>
				}
			}
			CanTimerFlag=0;
 8008c58:	4b34      	ldr	r3, [pc, #208]	; (8008d2c <main+0x1fc>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	701a      	strb	r2, [r3, #0]
		}

		if (CanMessagesToSend)
 8008c5e:	4b34      	ldr	r3, [pc, #208]	; (8008d30 <main+0x200>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d027      	beq.n	8008cb6 <main+0x186>
		{
			//only put one thing to the fifo at a time so that sync message can be put to the front of the fifo
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) > 2)
 8008c66:	4833      	ldr	r0, [pc, #204]	; (8008d34 <main+0x204>)
 8008c68:	f7f9 fe98 	bl	800299c <HAL_FDCAN_GetTxFifoFreeLevel>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d921      	bls.n	8008cb6 <main+0x186>
			{
				Can_Send(CanBuffer[CanBufferReadPos]);
 8008c72:	4b31      	ldr	r3, [pc, #196]	; (8008d38 <main+0x208>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	4b30      	ldr	r3, [pc, #192]	; (8008d3c <main+0x20c>)
 8008c7a:	5c9b      	ldrb	r3, [r3, r2]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f000 fe0d 	bl	800989c <Can_Send>

				CanBuffer[CanBufferReadPos]=255;
 8008c82:	4b2d      	ldr	r3, [pc, #180]	; (8008d38 <main+0x208>)
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	461a      	mov	r2, r3
 8008c88:	4b2c      	ldr	r3, [pc, #176]	; (8008d3c <main+0x20c>)
 8008c8a:	21ff      	movs	r1, #255	; 0xff
 8008c8c:	5499      	strb	r1, [r3, r2]
				CanMessagesToSend--;
 8008c8e:	4b28      	ldr	r3, [pc, #160]	; (8008d30 <main+0x200>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	4b26      	ldr	r3, [pc, #152]	; (8008d30 <main+0x200>)
 8008c98:	701a      	strb	r2, [r3, #0]
				if(CanBufferReadPos>=30)
 8008c9a:	4b27      	ldr	r3, [pc, #156]	; (8008d38 <main+0x208>)
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	2b1d      	cmp	r3, #29
 8008ca0:	d903      	bls.n	8008caa <main+0x17a>
				{
					CanBufferReadPos=0;
 8008ca2:	4b25      	ldr	r3, [pc, #148]	; (8008d38 <main+0x208>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	701a      	strb	r2, [r3, #0]
 8008ca8:	e005      	b.n	8008cb6 <main+0x186>
				}
				else
				{
					CanBufferReadPos++;
 8008caa:	4b23      	ldr	r3, [pc, #140]	; (8008d38 <main+0x208>)
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	4b21      	ldr	r3, [pc, #132]	; (8008d38 <main+0x208>)
 8008cb4:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if (Check_I0_Flag)
 8008cb6:	4b22      	ldr	r3, [pc, #136]	; (8008d40 <main+0x210>)
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d004      	beq.n	8008cc8 <main+0x198>
		{
			Check_I0_Warn();
 8008cbe:	f7fd fe7b 	bl	80069b8 <Check_I0_Warn>

			Check_I0_Flag=0;
 8008cc2:	4b1f      	ldr	r3, [pc, #124]	; (8008d40 <main+0x210>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	701a      	strb	r2, [r3, #0]
		}
		if (Check_I1_Flag)
 8008cc8:	4b1e      	ldr	r3, [pc, #120]	; (8008d44 <main+0x214>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d004      	beq.n	8008cda <main+0x1aa>
		{
			Check_I1_Warn();
 8008cd0:	f7fd ff3a 	bl	8006b48 <Check_I1_Warn>

			Check_I1_Flag=0;
 8008cd4:	4b1b      	ldr	r3, [pc, #108]	; (8008d44 <main+0x214>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	701a      	strb	r2, [r3, #0]
		}
		if (Check_T_Flag)
 8008cda:	4b1b      	ldr	r3, [pc, #108]	; (8008d48 <main+0x218>)
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d004      	beq.n	8008cec <main+0x1bc>
		{
			Check_T_Warn();
 8008ce2:	f7fd fff9 	bl	8006cd8 <Check_T_Warn>

			Check_T_Flag=0;
 8008ce6:	4b18      	ldr	r3, [pc, #96]	; (8008d48 <main+0x218>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	701a      	strb	r2, [r3, #0]
		}
		if (Check_V_Flag)
 8008cec:	4b17      	ldr	r3, [pc, #92]	; (8008d4c <main+0x21c>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d084      	beq.n	8008bfe <main+0xce>
		{
			Check_V_Warn();
 8008cf4:	f7fe f88a 	bl	8006e0c <Check_V_Warn>

			Check_V_Flag=0;
 8008cf8:	4b14      	ldr	r3, [pc, #80]	; (8008d4c <main+0x21c>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	701a      	strb	r2, [r3, #0]
		if(canErrorToTransmit && canSendErrorFlag)
 8008cfe:	e77e      	b.n	8008bfe <main+0xce>
 8008d00:	20000834 	.word	0x20000834
 8008d04:	20000115 	.word	0x20000115
 8008d08:	200007e8 	.word	0x200007e8
 8008d0c:	20000ac4 	.word	0x20000ac4
 8008d10:	200004aa 	.word	0x200004aa
 8008d14:	20000948 	.word	0x20000948
 8008d18:	200001e0 	.word	0x200001e0
 8008d1c:	2000015c 	.word	0x2000015c
 8008d20:	20000334 	.word	0x20000334
 8008d24:	20000598 	.word	0x20000598
 8008d28:	200009f4 	.word	0x200009f4
 8008d2c:	2000077c 	.word	0x2000077c
 8008d30:	200006b4 	.word	0x200006b4
 8008d34:	20000444 	.word	0x20000444
 8008d38:	20000876 	.word	0x20000876
 8008d3c:	20000058 	.word	0x20000058
 8008d40:	200006bc 	.word	0x200006bc
 8008d44:	2000077e 	.word	0x2000077e
 8008d48:	2000065e 	.word	0x2000065e
 8008d4c:	2000065f 	.word	0x2000065f

08008d50 <HAL_TIM_PeriodElapsedCallback>:
	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM15)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a2b      	ldr	r2, [pc, #172]	; (8008e0c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d10d      	bne.n	8008d7e <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		HAL_TIM_Base_Stop_IT(&htim15);
 8008d62:	482b      	ldr	r0, [pc, #172]	; (8008e10 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8008d64:	f7fc f862 	bl	8004e2c <HAL_TIM_Base_Stop_IT>
	    if (HAL_ADCEx_MultiModeStart_DMA(&hadc1, ADCDualConvertedValues, 3) != HAL_OK)
 8008d68:	2203      	movs	r2, #3
 8008d6a:	492a      	ldr	r1, [pc, #168]	; (8008e14 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8008d6c:	482a      	ldr	r0, [pc, #168]	; (8008e18 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8008d6e:	f7f8 fce1 	bl	8001734 <HAL_ADCEx_MultiModeStart_DMA>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d045      	beq.n	8008e04 <HAL_TIM_PeriodElapsedCallback+0xb4>
	    {
	    	Error_Handler();
 8008d78:	f002 fb8e 	bl	800b498 <Error_Handler>
	}
	else
	{
		Error_Handler();
	}
}
 8008d7c:	e042      	b.n	8008e04 <HAL_TIM_PeriodElapsedCallback+0xb4>
	else if (htim->Instance == TIM16)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a26      	ldr	r2, [pc, #152]	; (8008e1c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d105      	bne.n	8008d94 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_TIM_Base_Stop_IT(&htim16);
 8008d88:	4825      	ldr	r0, [pc, #148]	; (8008e20 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8008d8a:	f7fc f84f 	bl	8004e2c <HAL_TIM_Base_Stop_IT>
		Can_Sync();
 8008d8e:	f000 fe0f 	bl	80099b0 <Can_Sync>
}
 8008d92:	e037      	b.n	8008e04 <HAL_TIM_PeriodElapsedCallback+0xb4>
	else if (htim->Instance == TIM1)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a22      	ldr	r2, [pc, #136]	; (8008e24 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d11e      	bne.n	8008ddc <HAL_TIM_PeriodElapsedCallback+0x8c>
		sample_temperature+=SampleTemperatureBurst;
 8008d9e:	4b22      	ldr	r3, [pc, #136]	; (8008e28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	461a      	mov	r2, r3
 8008da4:	4b21      	ldr	r3, [pc, #132]	; (8008e2c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4413      	add	r3, r2
 8008daa:	4a20      	ldr	r2, [pc, #128]	; (8008e2c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8008dac:	6013      	str	r3, [r2, #0]
		if(sample_temperature>255) //in this case sample_temperature should be continuous or it should be measured slower
 8008dae:	4b1f      	ldr	r3, [pc, #124]	; (8008e2c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2bff      	cmp	r3, #255	; 0xff
 8008db4:	d902      	bls.n	8008dbc <HAL_TIM_PeriodElapsedCallback+0x6c>
			Set_Error(WARN_TEMP_MEASURE_OVERFLOW);
 8008db6:	20e1      	movs	r0, #225	; 0xe1
 8008db8:	f001 f926 	bl	800a008 <Set_Error>
		sample_voltage+=SampleVoltageBurst;
 8008dbc:	4b1c      	ldr	r3, [pc, #112]	; (8008e30 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4b1c      	ldr	r3, [pc, #112]	; (8008e34 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	4a1a      	ldr	r2, [pc, #104]	; (8008e34 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8008dca:	6013      	str	r3, [r2, #0]
		if(sample_voltage>255)
 8008dcc:	4b19      	ldr	r3, [pc, #100]	; (8008e34 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2bff      	cmp	r3, #255	; 0xff
 8008dd2:	d917      	bls.n	8008e04 <HAL_TIM_PeriodElapsedCallback+0xb4>
			Set_Error(WARN_VOLT_MEASURE_OVERFLOW);
 8008dd4:	20e2      	movs	r0, #226	; 0xe2
 8008dd6:	f001 f917 	bl	800a008 <Set_Error>
}
 8008dda:	e013      	b.n	8008e04 <HAL_TIM_PeriodElapsedCallback+0xb4>
	else if (htim->Instance == TIM7)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a15      	ldr	r2, [pc, #84]	; (8008e38 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d103      	bne.n	8008dee <HAL_TIM_PeriodElapsedCallback+0x9e>
		canSendErrorFlag=1;
 8008de6:	4b15      	ldr	r3, [pc, #84]	; (8008e3c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8008de8:	2201      	movs	r2, #1
 8008dea:	701a      	strb	r2, [r3, #0]
}
 8008dec:	e00a      	b.n	8008e04 <HAL_TIM_PeriodElapsedCallback+0xb4>
	else if (htim->Instance == TIM6)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a13      	ldr	r2, [pc, #76]	; (8008e40 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d103      	bne.n	8008e00 <HAL_TIM_PeriodElapsedCallback+0xb0>
		CanTimerFlag=1;
 8008df8:	4b12      	ldr	r3, [pc, #72]	; (8008e44 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	701a      	strb	r2, [r3, #0]
}
 8008dfe:	e001      	b.n	8008e04 <HAL_TIM_PeriodElapsedCallback+0xb4>
		Error_Handler();
 8008e00:	f002 fb4a 	bl	800b498 <Error_Handler>
}
 8008e04:	bf00      	nop
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	40014000 	.word	0x40014000
 8008e10:	20000334 	.word	0x20000334
 8008e14:	20000730 	.word	0x20000730
 8008e18:	200005f0 	.word	0x200005f0
 8008e1c:	40014400 	.word	0x40014400
 8008e20:	20000a84 	.word	0x20000a84
 8008e24:	40012c00 	.word	0x40012c00
 8008e28:	2000091d 	.word	0x2000091d
 8008e2c:	200004b4 	.word	0x200004b4
 8008e30:	200001dd 	.word	0x200001dd
 8008e34:	200000bc 	.word	0x200000bc
 8008e38:	40001400 	.word	0x40001400
 8008e3c:	200009f4 	.word	0x200009f4
 8008e40:	40001000 	.word	0x40001000
 8008e44:	2000077c 	.word	0x2000077c

08008e48 <HAL_LPTIM_CompareMatchCallback>:
extern const pinPort *switches[];
extern uint8_t *actives[];

//TODO: this could be modified to not wait another ms if one input occurs halfway through the timer of another input HAL_LPTIM_ReadCounter(&lptim1)
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b088      	sub	sp, #32
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
	if (hlptim->Instance == LPTIM1)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4aa0      	ldr	r2, [pc, #640]	; (80090d8 <HAL_LPTIM_CompareMatchCallback+0x290>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	f040 8189 	bne.w	800916e <HAL_LPTIM_CompareMatchCallback+0x326>
	{
		if (HAL_LPTIM_TimeOut_Stop_IT(&hlptim1) != HAL_OK)
 8008e5c:	489f      	ldr	r0, [pc, #636]	; (80090dc <HAL_LPTIM_CompareMatchCallback+0x294>)
 8008e5e:	f7fa fe21 	bl	8003aa4 <HAL_LPTIM_TimeOut_Stop_IT>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <HAL_LPTIM_CompareMatchCallback+0x24>
		{
			Error_Handler();
 8008e68:	f002 fb16 	bl	800b498 <Error_Handler>
		}

		uint32_t pinState;

		switch(GPIO_Interrupt[GPIO_Interrupt_Read_Pos])
 8008e6c:	4b9c      	ldr	r3, [pc, #624]	; (80090e0 <HAL_LPTIM_CompareMatchCallback+0x298>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a9c      	ldr	r2, [pc, #624]	; (80090e4 <HAL_LPTIM_CompareMatchCallback+0x29c>)
 8008e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e76:	2b04      	cmp	r3, #4
 8008e78:	d832      	bhi.n	8008ee0 <HAL_LPTIM_CompareMatchCallback+0x98>
 8008e7a:	a201      	add	r2, pc, #4	; (adr r2, 8008e80 <HAL_LPTIM_CompareMatchCallback+0x38>)
 8008e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e80:	08008e95 	.word	0x08008e95
 8008e84:	08008ee1 	.word	0x08008ee1
 8008e88:	08008ea7 	.word	0x08008ea7
 8008e8c:	08008eb9 	.word	0x08008eb9
 8008e90:	08008ecb 	.word	0x08008ecb
		{
		case 0:
			pinState = HAL_GPIO_ReadPin(DIO3.PORT, DIO3.PIN);
 8008e94:	4b94      	ldr	r3, [pc, #592]	; (80090e8 <HAL_LPTIM_CompareMatchCallback+0x2a0>)
 8008e96:	2208      	movs	r2, #8
 8008e98:	4611      	mov	r1, r2
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fa fcce 	bl	800383c <HAL_GPIO_ReadPin>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	61fb      	str	r3, [r7, #28]
			break;
 8008ea4:	e021      	b.n	8008eea <HAL_LPTIM_CompareMatchCallback+0xa2>
		case 2:
			pinState = HAL_GPIO_ReadPin(DIO5.PORT, DIO5.PIN);
 8008ea6:	4b90      	ldr	r3, [pc, #576]	; (80090e8 <HAL_LPTIM_CompareMatchCallback+0x2a0>)
 8008ea8:	2220      	movs	r2, #32
 8008eaa:	4611      	mov	r1, r2
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7fa fcc5 	bl	800383c <HAL_GPIO_ReadPin>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	61fb      	str	r3, [r7, #28]
			break;
 8008eb6:	e018      	b.n	8008eea <HAL_LPTIM_CompareMatchCallback+0xa2>
		case 3:
			pinState = HAL_GPIO_ReadPin(DIO6.PORT, DIO6.PIN);
 8008eb8:	4b8b      	ldr	r3, [pc, #556]	; (80090e8 <HAL_LPTIM_CompareMatchCallback+0x2a0>)
 8008eba:	2240      	movs	r2, #64	; 0x40
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fa fcbc 	bl	800383c <HAL_GPIO_ReadPin>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	61fb      	str	r3, [r7, #28]
			break;
 8008ec8:	e00f      	b.n	8008eea <HAL_LPTIM_CompareMatchCallback+0xa2>
		case 4:
			pinState = HAL_GPIO_ReadPin(DIO15.PORT, DIO15.PIN);
 8008eca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ece:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fa fcb1 	bl	800383c <HAL_GPIO_ReadPin>
 8008eda:	4603      	mov	r3, r0
 8008edc:	61fb      	str	r3, [r7, #28]
			break;
 8008ede:	e004      	b.n	8008eea <HAL_LPTIM_CompareMatchCallback+0xa2>
		default:
			Set_Error(WARN_UNDEFINED_GPIO);
 8008ee0:	f240 1003 	movw	r0, #259	; 0x103
 8008ee4:	f001 f890 	bl	800a008 <Set_Error>
			break;
 8008ee8:	bf00      	nop
		}

		if(pinState != GPIO_States[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]])
 8008eea:	4b7d      	ldr	r3, [pc, #500]	; (80090e0 <HAL_LPTIM_CompareMatchCallback+0x298>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a7d      	ldr	r2, [pc, #500]	; (80090e4 <HAL_LPTIM_CompareMatchCallback+0x29c>)
 8008ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ef4:	4a7d      	ldr	r2, [pc, #500]	; (80090ec <HAL_LPTIM_CompareMatchCallback+0x2a4>)
 8008ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008efa:	69fa      	ldr	r2, [r7, #28]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	f000 8107 	beq.w	8009110 <HAL_LPTIM_CompareMatchCallback+0x2c8>
		{
			GPIO_States[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]]=pinState;
 8008f02:	4b77      	ldr	r3, [pc, #476]	; (80090e0 <HAL_LPTIM_CompareMatchCallback+0x298>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a77      	ldr	r2, [pc, #476]	; (80090e4 <HAL_LPTIM_CompareMatchCallback+0x29c>)
 8008f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f0c:	4977      	ldr	r1, [pc, #476]	; (80090ec <HAL_LPTIM_CompareMatchCallback+0x2a4>)
 8008f0e:	69fa      	ldr	r2, [r7, #28]
 8008f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			switch(pinState)
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d070      	beq.n	8008ffc <HAL_LPTIM_CompareMatchCallback+0x1b4>
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d000      	beq.n	8008f20 <HAL_LPTIM_CompareMatchCallback+0xd8>
//TODO: PWM

				break;
			default:
				//should never reach this point
				break;
 8008f1e:	e0f8      	b.n	8009112 <HAL_LPTIM_CompareMatchCallback+0x2ca>
				for(uint32_t i=0; i<8; i++)
 8008f20:	2300      	movs	r3, #0
 8008f22:	61bb      	str	r3, [r7, #24]
 8008f24:	e016      	b.n	8008f54 <HAL_LPTIM_CompareMatchCallback+0x10c>
					if (Digital_In_Interrupt_Can_Rising[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]]>>i & 1)
 8008f26:	4b6e      	ldr	r3, [pc, #440]	; (80090e0 <HAL_LPTIM_CompareMatchCallback+0x298>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a6e      	ldr	r2, [pc, #440]	; (80090e4 <HAL_LPTIM_CompareMatchCallback+0x29c>)
 8008f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f30:	4a6f      	ldr	r2, [pc, #444]	; (80090f0 <HAL_LPTIM_CompareMatchCallback+0x2a8>)
 8008f32:	5cd3      	ldrb	r3, [r2, r3]
 8008f34:	461a      	mov	r2, r3
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	fa42 f303 	asr.w	r3, r2, r3
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d004      	beq.n	8008f4e <HAL_LPTIM_CompareMatchCallback+0x106>
						Can_Send(i);
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 fca7 	bl	800989c <Can_Send>
				for(uint32_t i=0; i<8; i++)
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	3301      	adds	r3, #1
 8008f52:	61bb      	str	r3, [r7, #24]
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	2b07      	cmp	r3, #7
 8008f58:	d9e5      	bls.n	8008f26 <HAL_LPTIM_CompareMatchCallback+0xde>
				for(uint32_t i=0; i<6; i++)
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	617b      	str	r3, [r7, #20]
 8008f5e:	e049      	b.n	8008ff4 <HAL_LPTIM_CompareMatchCallback+0x1ac>
					if (Digital_In_Interrupt_Power_Low_Rising[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]]>>i & 1)
 8008f60:	4b5f      	ldr	r3, [pc, #380]	; (80090e0 <HAL_LPTIM_CompareMatchCallback+0x298>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a5f      	ldr	r2, [pc, #380]	; (80090e4 <HAL_LPTIM_CompareMatchCallback+0x29c>)
 8008f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f6a:	4a62      	ldr	r2, [pc, #392]	; (80090f4 <HAL_LPTIM_CompareMatchCallback+0x2ac>)
 8008f6c:	5cd3      	ldrb	r3, [r2, r3]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	fa42 f303 	asr.w	r3, r2, r3
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d014      	beq.n	8008fa8 <HAL_LPTIM_CompareMatchCallback+0x160>
						HAL_GPIO_WritePin(switches[i]->PORT, switches[i]->PIN, 0);
 8008f7e:	4a5e      	ldr	r2, [pc, #376]	; (80090f8 <HAL_LPTIM_CompareMatchCallback+0x2b0>)
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f86:	6818      	ldr	r0, [r3, #0]
 8008f88:	4a5b      	ldr	r2, [pc, #364]	; (80090f8 <HAL_LPTIM_CompareMatchCallback+0x2b0>)
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f90:	889b      	ldrh	r3, [r3, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	4619      	mov	r1, r3
 8008f96:	f7fa fc69 	bl	800386c <HAL_GPIO_WritePin>
						*actives[i]=0;
 8008f9a:	4a58      	ldr	r2, [pc, #352]	; (80090fc <HAL_LPTIM_CompareMatchCallback+0x2b4>)
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	701a      	strb	r2, [r3, #0]
 8008fa6:	e022      	b.n	8008fee <HAL_LPTIM_CompareMatchCallback+0x1a6>
					else if (Digital_In_Interrupt_Power_High_Rising[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]]>>i & 1)
 8008fa8:	4b4d      	ldr	r3, [pc, #308]	; (80090e0 <HAL_LPTIM_CompareMatchCallback+0x298>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a4d      	ldr	r2, [pc, #308]	; (80090e4 <HAL_LPTIM_CompareMatchCallback+0x29c>)
 8008fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fb2:	4a53      	ldr	r2, [pc, #332]	; (8009100 <HAL_LPTIM_CompareMatchCallback+0x2b8>)
 8008fb4:	5cd3      	ldrb	r3, [r2, r3]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	fa42 f303 	asr.w	r3, r2, r3
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d013      	beq.n	8008fee <HAL_LPTIM_CompareMatchCallback+0x1a6>
						HAL_GPIO_WritePin(switches[i]->PORT, switches[i]->PIN, 1);
 8008fc6:	4a4c      	ldr	r2, [pc, #304]	; (80090f8 <HAL_LPTIM_CompareMatchCallback+0x2b0>)
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fce:	6818      	ldr	r0, [r3, #0]
 8008fd0:	4a49      	ldr	r2, [pc, #292]	; (80090f8 <HAL_LPTIM_CompareMatchCallback+0x2b0>)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fd8:	889b      	ldrh	r3, [r3, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	4619      	mov	r1, r3
 8008fde:	f7fa fc45 	bl	800386c <HAL_GPIO_WritePin>
						*actives[i]=1;
 8008fe2:	4a46      	ldr	r2, [pc, #280]	; (80090fc <HAL_LPTIM_CompareMatchCallback+0x2b4>)
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fea:	2201      	movs	r2, #1
 8008fec:	701a      	strb	r2, [r3, #0]
				for(uint32_t i=0; i<6; i++)
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	617b      	str	r3, [r7, #20]
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	2b05      	cmp	r3, #5
 8008ff8:	d9b2      	bls.n	8008f60 <HAL_LPTIM_CompareMatchCallback+0x118>
				break;
 8008ffa:	e08a      	b.n	8009112 <HAL_LPTIM_CompareMatchCallback+0x2ca>
				for(uint32_t i=0; i<8; i++)
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	613b      	str	r3, [r7, #16]
 8009000:	e016      	b.n	8009030 <HAL_LPTIM_CompareMatchCallback+0x1e8>
					if (Digital_In_Interrupt_Can_Falling[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]]>>i & 1)
 8009002:	4b37      	ldr	r3, [pc, #220]	; (80090e0 <HAL_LPTIM_CompareMatchCallback+0x298>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a37      	ldr	r2, [pc, #220]	; (80090e4 <HAL_LPTIM_CompareMatchCallback+0x29c>)
 8009008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800900c:	4a3d      	ldr	r2, [pc, #244]	; (8009104 <HAL_LPTIM_CompareMatchCallback+0x2bc>)
 800900e:	5cd3      	ldrb	r3, [r2, r3]
 8009010:	461a      	mov	r2, r3
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	fa42 f303 	asr.w	r3, r2, r3
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	2b00      	cmp	r3, #0
 800901e:	d004      	beq.n	800902a <HAL_LPTIM_CompareMatchCallback+0x1e2>
						Buffer_Can_Message(i);
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	b2db      	uxtb	r3, r3
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe f8b1 	bl	800718c <Buffer_Can_Message>
				for(uint32_t i=0; i<8; i++)
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	3301      	adds	r3, #1
 800902e:	613b      	str	r3, [r7, #16]
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	2b07      	cmp	r3, #7
 8009034:	d9e5      	bls.n	8009002 <HAL_LPTIM_CompareMatchCallback+0x1ba>
				for(uint32_t i=0; i<6; i++)
 8009036:	2300      	movs	r3, #0
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	e049      	b.n	80090d0 <HAL_LPTIM_CompareMatchCallback+0x288>
					if (Digital_In_Interrupt_Power_Low_Falling[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]]>>i & 1)
 800903c:	4b28      	ldr	r3, [pc, #160]	; (80090e0 <HAL_LPTIM_CompareMatchCallback+0x298>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a28      	ldr	r2, [pc, #160]	; (80090e4 <HAL_LPTIM_CompareMatchCallback+0x29c>)
 8009042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009046:	4a30      	ldr	r2, [pc, #192]	; (8009108 <HAL_LPTIM_CompareMatchCallback+0x2c0>)
 8009048:	5cd3      	ldrb	r3, [r2, r3]
 800904a:	461a      	mov	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	fa42 f303 	asr.w	r3, r2, r3
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	2b00      	cmp	r3, #0
 8009058:	d014      	beq.n	8009084 <HAL_LPTIM_CompareMatchCallback+0x23c>
						HAL_GPIO_WritePin(switches[i]->PORT, switches[i]->PIN, 0);
 800905a:	4a27      	ldr	r2, [pc, #156]	; (80090f8 <HAL_LPTIM_CompareMatchCallback+0x2b0>)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009062:	6818      	ldr	r0, [r3, #0]
 8009064:	4a24      	ldr	r2, [pc, #144]	; (80090f8 <HAL_LPTIM_CompareMatchCallback+0x2b0>)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800906c:	889b      	ldrh	r3, [r3, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	4619      	mov	r1, r3
 8009072:	f7fa fbfb 	bl	800386c <HAL_GPIO_WritePin>
						*actives[i]=0;
 8009076:	4a21      	ldr	r2, [pc, #132]	; (80090fc <HAL_LPTIM_CompareMatchCallback+0x2b4>)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800907e:	2200      	movs	r2, #0
 8009080:	701a      	strb	r2, [r3, #0]
 8009082:	e022      	b.n	80090ca <HAL_LPTIM_CompareMatchCallback+0x282>
					else if (Digital_In_Interrupt_Power_High_Falling[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]]>>i & 1)
 8009084:	4b16      	ldr	r3, [pc, #88]	; (80090e0 <HAL_LPTIM_CompareMatchCallback+0x298>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a16      	ldr	r2, [pc, #88]	; (80090e4 <HAL_LPTIM_CompareMatchCallback+0x29c>)
 800908a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800908e:	4a1f      	ldr	r2, [pc, #124]	; (800910c <HAL_LPTIM_CompareMatchCallback+0x2c4>)
 8009090:	5cd3      	ldrb	r3, [r2, r3]
 8009092:	461a      	mov	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	fa42 f303 	asr.w	r3, r2, r3
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d013      	beq.n	80090ca <HAL_LPTIM_CompareMatchCallback+0x282>
						HAL_GPIO_WritePin(switches[i]->PORT, switches[i]->PIN, 1);
 80090a2:	4a15      	ldr	r2, [pc, #84]	; (80090f8 <HAL_LPTIM_CompareMatchCallback+0x2b0>)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090aa:	6818      	ldr	r0, [r3, #0]
 80090ac:	4a12      	ldr	r2, [pc, #72]	; (80090f8 <HAL_LPTIM_CompareMatchCallback+0x2b0>)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090b4:	889b      	ldrh	r3, [r3, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	4619      	mov	r1, r3
 80090ba:	f7fa fbd7 	bl	800386c <HAL_GPIO_WritePin>
						*actives[i]=1;
 80090be:	4a0f      	ldr	r2, [pc, #60]	; (80090fc <HAL_LPTIM_CompareMatchCallback+0x2b4>)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090c6:	2201      	movs	r2, #1
 80090c8:	701a      	strb	r2, [r3, #0]
				for(uint32_t i=0; i<6; i++)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3301      	adds	r3, #1
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b05      	cmp	r3, #5
 80090d4:	d9b2      	bls.n	800903c <HAL_LPTIM_CompareMatchCallback+0x1f4>
				break;
 80090d6:	e01c      	b.n	8009112 <HAL_LPTIM_CompareMatchCallback+0x2ca>
 80090d8:	40007c00 	.word	0x40007c00
 80090dc:	20000678 	.word	0x20000678
 80090e0:	20000a38 	.word	0x20000a38
 80090e4:	20000664 	.word	0x20000664
 80090e8:	48000400 	.word	0x48000400
 80090ec:	20000b04 	.word	0x20000b04
 80090f0:	200000c0 	.word	0x200000c0
 80090f4:	200004b8 	.word	0x200004b8
 80090f8:	20000028 	.word	0x20000028
 80090fc:	20000040 	.word	0x20000040
 8009100:	20000588 	.word	0x20000588
 8009104:	200000b4 	.word	0x200000b4
 8009108:	20000918 	.word	0x20000918
 800910c:	2000078c 	.word	0x2000078c
			}
		}
 8009110:	bf00      	nop

		GPIO_Current_Interrupts--;
 8009112:	4b19      	ldr	r3, [pc, #100]	; (8009178 <HAL_LPTIM_CompareMatchCallback+0x330>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3b01      	subs	r3, #1
 8009118:	4a17      	ldr	r2, [pc, #92]	; (8009178 <HAL_LPTIM_CompareMatchCallback+0x330>)
 800911a:	6013      	str	r3, [r2, #0]
		GPIO_Interrupt_Active[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]]=0;
 800911c:	4b17      	ldr	r3, [pc, #92]	; (800917c <HAL_LPTIM_CompareMatchCallback+0x334>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a17      	ldr	r2, [pc, #92]	; (8009180 <HAL_LPTIM_CompareMatchCallback+0x338>)
 8009122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009126:	4a17      	ldr	r2, [pc, #92]	; (8009184 <HAL_LPTIM_CompareMatchCallback+0x33c>)
 8009128:	2100      	movs	r1, #0
 800912a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		GPIO_Interrupt_Read_Pos++;
 800912e:	4b13      	ldr	r3, [pc, #76]	; (800917c <HAL_LPTIM_CompareMatchCallback+0x334>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3301      	adds	r3, #1
 8009134:	4a11      	ldr	r2, [pc, #68]	; (800917c <HAL_LPTIM_CompareMatchCallback+0x334>)
 8009136:	6013      	str	r3, [r2, #0]
		if (GPIO_Interrupt_Read_Pos>=5) { GPIO_Interrupt_Read_Pos=0; }
 8009138:	4b10      	ldr	r3, [pc, #64]	; (800917c <HAL_LPTIM_CompareMatchCallback+0x334>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b04      	cmp	r3, #4
 800913e:	d902      	bls.n	8009146 <HAL_LPTIM_CompareMatchCallback+0x2fe>
 8009140:	4b0e      	ldr	r3, [pc, #56]	; (800917c <HAL_LPTIM_CompareMatchCallback+0x334>)
 8009142:	2200      	movs	r2, #0
 8009144:	601a      	str	r2, [r3, #0]

		if(GPIO_Current_Interrupts)
 8009146:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <HAL_LPTIM_CompareMatchCallback+0x330>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00c      	beq.n	8009168 <HAL_LPTIM_CompareMatchCallback+0x320>
		{
			//start the timer again for the next channel
			if (HAL_LPTIM_TimeOut_Start_IT(&hlptim1, 13282, 13283) != HAL_OK) //~1ms debounce time
 800914e:	f243 32e3 	movw	r2, #13283	; 0x33e3
 8009152:	f243 31e2 	movw	r1, #13282	; 0x33e2
 8009156:	480c      	ldr	r0, [pc, #48]	; (8009188 <HAL_LPTIM_CompareMatchCallback+0x340>)
 8009158:	f7fa fc5e 	bl	8003a18 <HAL_LPTIM_TimeOut_Start_IT>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d005      	beq.n	800916e <HAL_LPTIM_CompareMatchCallback+0x326>
			{
				Error_Handler();
 8009162:	f002 f999 	bl	800b498 <Error_Handler>
		else
		{
			GPIO_Timer_Ready=1;
		}
	}
}
 8009166:	e002      	b.n	800916e <HAL_LPTIM_CompareMatchCallback+0x326>
			GPIO_Timer_Ready=1;
 8009168:	4b08      	ldr	r3, [pc, #32]	; (800918c <HAL_LPTIM_CompareMatchCallback+0x344>)
 800916a:	2201      	movs	r2, #1
 800916c:	601a      	str	r2, [r3, #0]
}
 800916e:	bf00      	nop
 8009170:	3720      	adds	r7, #32
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20000b18 	.word	0x20000b18
 800917c:	20000a38 	.word	0x20000a38
 8009180:	20000664 	.word	0x20000664
 8009184:	200007d4 	.word	0x200007d4
 8009188:	20000678 	.word	0x20000678
 800918c:	20000078 	.word	0x20000078

08009190 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	4603      	mov	r3, r0
 8009198:	80fb      	strh	r3, [r7, #6]
	uint32_t wrote=0;
 800919a:	2300      	movs	r3, #0
 800919c:	60fb      	str	r3, [r7, #12]

	if(GPIO_Current_Interrupts)
 800919e:	4b65      	ldr	r3, [pc, #404]	; (8009334 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d055      	beq.n	8009252 <HAL_GPIO_EXTI_Callback+0xc2>
	{
		switch (GPIO_Pin)
 80091a6:	88fb      	ldrh	r3, [r7, #6]
 80091a8:	2b20      	cmp	r3, #32
 80091aa:	d01b      	beq.n	80091e4 <HAL_GPIO_EXTI_Callback+0x54>
 80091ac:	2b20      	cmp	r3, #32
 80091ae:	dc02      	bgt.n	80091b6 <HAL_GPIO_EXTI_Callback+0x26>
 80091b0:	2b08      	cmp	r3, #8
 80091b2:	d006      	beq.n	80091c2 <HAL_GPIO_EXTI_Callback+0x32>
 80091b4:	e047      	b.n	8009246 <HAL_GPIO_EXTI_Callback+0xb6>
 80091b6:	2b40      	cmp	r3, #64	; 0x40
 80091b8:	d025      	beq.n	8009206 <HAL_GPIO_EXTI_Callback+0x76>
 80091ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091be:	d032      	beq.n	8009226 <HAL_GPIO_EXTI_Callback+0x96>
 80091c0:	e041      	b.n	8009246 <HAL_GPIO_EXTI_Callback+0xb6>
		{
		case (1<<3):
			if (!GPIO_Interrupt_Active[0])
 80091c2:	4b5d      	ldr	r3, [pc, #372]	; (8009338 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f040 8094 	bne.w	80092f4 <HAL_GPIO_EXTI_Callback+0x164>
			{
				GPIO_Interrupt_Active[0]=1;
 80091cc:	4b5a      	ldr	r3, [pc, #360]	; (8009338 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80091ce:	2201      	movs	r2, #1
 80091d0:	601a      	str	r2, [r3, #0]
				GPIO_Interrupt[GPIO_Interrupt_Write_Pos]=0;
 80091d2:	4b5a      	ldr	r3, [pc, #360]	; (800933c <HAL_GPIO_EXTI_Callback+0x1ac>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a5a      	ldr	r2, [pc, #360]	; (8009340 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80091d8:	2100      	movs	r1, #0
 80091da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				wrote=1;
 80091de:	2301      	movs	r3, #1
 80091e0:	60fb      	str	r3, [r7, #12]
			}
			break;
 80091e2:	e087      	b.n	80092f4 <HAL_GPIO_EXTI_Callback+0x164>
		case (1<<5):
			if (!GPIO_Interrupt_Active[2])
 80091e4:	4b54      	ldr	r3, [pc, #336]	; (8009338 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f040 8085 	bne.w	80092f8 <HAL_GPIO_EXTI_Callback+0x168>
			{
				GPIO_Interrupt_Active[2]=1;
 80091ee:	4b52      	ldr	r3, [pc, #328]	; (8009338 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80091f0:	2201      	movs	r2, #1
 80091f2:	609a      	str	r2, [r3, #8]
				GPIO_Interrupt[GPIO_Interrupt_Write_Pos]=2;
 80091f4:	4b51      	ldr	r3, [pc, #324]	; (800933c <HAL_GPIO_EXTI_Callback+0x1ac>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a51      	ldr	r2, [pc, #324]	; (8009340 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80091fa:	2102      	movs	r1, #2
 80091fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				wrote=1;
 8009200:	2301      	movs	r3, #1
 8009202:	60fb      	str	r3, [r7, #12]
			}
			break;
 8009204:	e078      	b.n	80092f8 <HAL_GPIO_EXTI_Callback+0x168>
		case (1<<6):
			if (!GPIO_Interrupt_Active[3])
 8009206:	4b4c      	ldr	r3, [pc, #304]	; (8009338 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d176      	bne.n	80092fc <HAL_GPIO_EXTI_Callback+0x16c>
			{
				GPIO_Interrupt_Active[3]=1;
 800920e:	4b4a      	ldr	r3, [pc, #296]	; (8009338 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8009210:	2201      	movs	r2, #1
 8009212:	60da      	str	r2, [r3, #12]
				GPIO_Interrupt[GPIO_Interrupt_Write_Pos]=3;
 8009214:	4b49      	ldr	r3, [pc, #292]	; (800933c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a49      	ldr	r2, [pc, #292]	; (8009340 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800921a:	2103      	movs	r1, #3
 800921c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				wrote=1;
 8009220:	2301      	movs	r3, #1
 8009222:	60fb      	str	r3, [r7, #12]
			}
			break;
 8009224:	e06a      	b.n	80092fc <HAL_GPIO_EXTI_Callback+0x16c>
		case (1<<15):
			if (!GPIO_Interrupt_Active[3])
 8009226:	4b44      	ldr	r3, [pc, #272]	; (8009338 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d168      	bne.n	8009300 <HAL_GPIO_EXTI_Callback+0x170>
			{
				GPIO_Interrupt_Active[3]=1;
 800922e:	4b42      	ldr	r3, [pc, #264]	; (8009338 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8009230:	2201      	movs	r2, #1
 8009232:	60da      	str	r2, [r3, #12]
				GPIO_Interrupt[GPIO_Interrupt_Write_Pos]=2;
 8009234:	4b41      	ldr	r3, [pc, #260]	; (800933c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a41      	ldr	r2, [pc, #260]	; (8009340 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800923a:	2102      	movs	r1, #2
 800923c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				wrote=1;
 8009240:	2301      	movs	r3, #1
 8009242:	60fb      	str	r3, [r7, #12]
			}
			break;
 8009244:	e05c      	b.n	8009300 <HAL_GPIO_EXTI_Callback+0x170>
		default:
			Set_Error(WARN_UNDEFINED_GPIO);
 8009246:	f240 1003 	movw	r0, #259	; 0x103
 800924a:	f000 fedd 	bl	800a008 <Set_Error>
		break;
 800924e:	bf00      	nop
 8009250:	e057      	b.n	8009302 <HAL_GPIO_EXTI_Callback+0x172>
		}
	}
	else
	{
		wrote=1;
 8009252:	2301      	movs	r3, #1
 8009254:	60fb      	str	r3, [r7, #12]

		//this case should only execute when there are no pending GPIO interrupts
		switch (GPIO_Pin)
 8009256:	88fb      	ldrh	r3, [r7, #6]
 8009258:	2b20      	cmp	r3, #32
 800925a:	d014      	beq.n	8009286 <HAL_GPIO_EXTI_Callback+0xf6>
 800925c:	2b20      	cmp	r3, #32
 800925e:	dc02      	bgt.n	8009266 <HAL_GPIO_EXTI_Callback+0xd6>
 8009260:	2b08      	cmp	r3, #8
 8009262:	d006      	beq.n	8009272 <HAL_GPIO_EXTI_Callback+0xe2>
 8009264:	e02d      	b.n	80092c2 <HAL_GPIO_EXTI_Callback+0x132>
 8009266:	2b40      	cmp	r3, #64	; 0x40
 8009268:	d017      	beq.n	800929a <HAL_GPIO_EXTI_Callback+0x10a>
 800926a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800926e:	d01e      	beq.n	80092ae <HAL_GPIO_EXTI_Callback+0x11e>
 8009270:	e027      	b.n	80092c2 <HAL_GPIO_EXTI_Callback+0x132>
		{
		case (1<<3):
			GPIO_Interrupt_Active[0]=1;
 8009272:	4b31      	ldr	r3, [pc, #196]	; (8009338 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8009274:	2201      	movs	r2, #1
 8009276:	601a      	str	r2, [r3, #0]
			GPIO_Interrupt[GPIO_Interrupt_Write_Pos]=0;
 8009278:	4b30      	ldr	r3, [pc, #192]	; (800933c <HAL_GPIO_EXTI_Callback+0x1ac>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a30      	ldr	r2, [pc, #192]	; (8009340 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800927e:	2100      	movs	r1, #0
 8009280:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8009284:	e022      	b.n	80092cc <HAL_GPIO_EXTI_Callback+0x13c>
		case (1<<5):
			GPIO_Interrupt_Active[2]=1;
 8009286:	4b2c      	ldr	r3, [pc, #176]	; (8009338 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8009288:	2201      	movs	r2, #1
 800928a:	609a      	str	r2, [r3, #8]
			GPIO_Interrupt[GPIO_Interrupt_Write_Pos]=2;
 800928c:	4b2b      	ldr	r3, [pc, #172]	; (800933c <HAL_GPIO_EXTI_Callback+0x1ac>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a2b      	ldr	r2, [pc, #172]	; (8009340 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8009292:	2102      	movs	r1, #2
 8009294:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8009298:	e018      	b.n	80092cc <HAL_GPIO_EXTI_Callback+0x13c>
		case (1<<6):
			GPIO_Interrupt_Active[3]=1;
 800929a:	4b27      	ldr	r3, [pc, #156]	; (8009338 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800929c:	2201      	movs	r2, #1
 800929e:	60da      	str	r2, [r3, #12]
			GPIO_Interrupt[GPIO_Interrupt_Write_Pos]=3;
 80092a0:	4b26      	ldr	r3, [pc, #152]	; (800933c <HAL_GPIO_EXTI_Callback+0x1ac>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a26      	ldr	r2, [pc, #152]	; (8009340 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80092a6:	2103      	movs	r1, #3
 80092a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80092ac:	e00e      	b.n	80092cc <HAL_GPIO_EXTI_Callback+0x13c>
		case (1<<15):
			GPIO_Interrupt_Active[4]=1;
 80092ae:	4b22      	ldr	r3, [pc, #136]	; (8009338 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80092b0:	2201      	movs	r2, #1
 80092b2:	611a      	str	r2, [r3, #16]
			GPIO_Interrupt[GPIO_Interrupt_Write_Pos]=15;
 80092b4:	4b21      	ldr	r3, [pc, #132]	; (800933c <HAL_GPIO_EXTI_Callback+0x1ac>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a21      	ldr	r2, [pc, #132]	; (8009340 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80092ba:	210f      	movs	r1, #15
 80092bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80092c0:	e004      	b.n	80092cc <HAL_GPIO_EXTI_Callback+0x13c>
		default:
			Set_Error(WARN_UNDEFINED_GPIO);
 80092c2:	f240 1003 	movw	r0, #259	; 0x103
 80092c6:	f000 fe9f 	bl	800a008 <Set_Error>
		break;
 80092ca:	bf00      	nop
		}

		if (GPIO_Timer_Ready)
 80092cc:	4b1d      	ldr	r3, [pc, #116]	; (8009344 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d016      	beq.n	8009302 <HAL_GPIO_EXTI_Callback+0x172>
		{
			GPIO_Timer_Ready=0;
 80092d4:	4b1b      	ldr	r3, [pc, #108]	; (8009344 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80092d6:	2200      	movs	r2, #0
 80092d8:	601a      	str	r2, [r3, #0]
			if (HAL_LPTIM_TimeOut_Start_IT(&hlptim1, 13282, 13283) != HAL_OK) //~1ms debounce time
 80092da:	f243 32e3 	movw	r2, #13283	; 0x33e3
 80092de:	f243 31e2 	movw	r1, #13282	; 0x33e2
 80092e2:	4819      	ldr	r0, [pc, #100]	; (8009348 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80092e4:	f7fa fb98 	bl	8003a18 <HAL_LPTIM_TimeOut_Start_IT>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d009      	beq.n	8009302 <HAL_GPIO_EXTI_Callback+0x172>
			{
				Error_Handler();
 80092ee:	f002 f8d3 	bl	800b498 <Error_Handler>
 80092f2:	e006      	b.n	8009302 <HAL_GPIO_EXTI_Callback+0x172>
			break;
 80092f4:	bf00      	nop
 80092f6:	e004      	b.n	8009302 <HAL_GPIO_EXTI_Callback+0x172>
			break;
 80092f8:	bf00      	nop
 80092fa:	e002      	b.n	8009302 <HAL_GPIO_EXTI_Callback+0x172>
			break;
 80092fc:	bf00      	nop
 80092fe:	e000      	b.n	8009302 <HAL_GPIO_EXTI_Callback+0x172>
			break;
 8009300:	bf00      	nop
			}
		}
	}

	if(wrote)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d010      	beq.n	800932a <HAL_GPIO_EXTI_Callback+0x19a>
	{
		GPIO_Current_Interrupts++;
 8009308:	4b0a      	ldr	r3, [pc, #40]	; (8009334 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3301      	adds	r3, #1
 800930e:	4a09      	ldr	r2, [pc, #36]	; (8009334 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8009310:	6013      	str	r3, [r2, #0]
		GPIO_Interrupt_Write_Pos++;
 8009312:	4b0a      	ldr	r3, [pc, #40]	; (800933c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3301      	adds	r3, #1
 8009318:	4a08      	ldr	r2, [pc, #32]	; (800933c <HAL_GPIO_EXTI_Callback+0x1ac>)
 800931a:	6013      	str	r3, [r2, #0]
		if (GPIO_Interrupt_Write_Pos>=5) { GPIO_Interrupt_Write_Pos=0; }
 800931c:	4b07      	ldr	r3, [pc, #28]	; (800933c <HAL_GPIO_EXTI_Callback+0x1ac>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b04      	cmp	r3, #4
 8009322:	d902      	bls.n	800932a <HAL_GPIO_EXTI_Callback+0x19a>
 8009324:	4b05      	ldr	r3, [pc, #20]	; (800933c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8009326:	2200      	movs	r2, #0
 8009328:	601a      	str	r2, [r3, #0]
	}
}
 800932a:	bf00      	nop
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20000b18 	.word	0x20000b18
 8009338:	200007d4 	.word	0x200007d4
 800933c:	20000910 	.word	0x20000910
 8009340:	20000664 	.word	0x20000664
 8009344:	20000078 	.word	0x20000078
 8009348:	20000678 	.word	0x20000678

0800934c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b096      	sub	sp, #88	; 0x58
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800935c:	f040 8261 	bne.w	8009822 <HAL_ADC_ConvCpltCallback+0x4d6>
	{
		uint32_t sampled = adc_selection;
 8009360:	4ba6      	ldr	r3, [pc, #664]	; (80095fc <HAL_ADC_ConvCpltCallback+0x2b0>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t masterConvertedValue[3];
		uint32_t slaveConvertedValue[3];

		//we want the ability to not sample temperature and voltage as often as current, as sampling those heats up the switch
		//we also want to make sure that both current channels are sampled
		switch(adc_selection)
 8009366:	4ba5      	ldr	r3, [pc, #660]	; (80095fc <HAL_ADC_ConvCpltCallback+0x2b0>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b03      	cmp	r3, #3
 800936c:	f200 80b1 	bhi.w	80094d2 <HAL_ADC_ConvCpltCallback+0x186>
 8009370:	a201      	add	r2, pc, #4	; (adr r2, 8009378 <HAL_ADC_ConvCpltCallback+0x2c>)
 8009372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009376:	bf00      	nop
 8009378:	08009389 	.word	0x08009389
 800937c:	080093ad 	.word	0x080093ad
 8009380:	0800944d 	.word	0x0800944d
 8009384:	080094af 	.word	0x080094af
		{
		case 0: //we have just sampled current for channel 0, so sample current for channel 1
			HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 1);
 8009388:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800938c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009390:	2201      	movs	r2, #1
 8009392:	4618      	mov	r0, r3
 8009394:	f7fa fa6a 	bl	800386c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 8009398:	4b99      	ldr	r3, [pc, #612]	; (8009600 <HAL_ADC_ConvCpltCallback+0x2b4>)
 800939a:	2101      	movs	r1, #1
 800939c:	2200      	movs	r2, #0
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fa fa64 	bl	800386c <HAL_GPIO_WritePin>
			adc_selection=1;
 80093a4:	4b95      	ldr	r3, [pc, #596]	; (80095fc <HAL_ADC_ConvCpltCallback+0x2b0>)
 80093a6:	2201      	movs	r2, #1
 80093a8:	601a      	str	r2, [r3, #0]
			break;
 80093aa:	e095      	b.n	80094d8 <HAL_ADC_ConvCpltCallback+0x18c>
		case 1: //if temperature or voltage has been enabled sample those, otherwise start again with current for channel 0
			if (sample_temperature)
 80093ac:	4b95      	ldr	r3, [pc, #596]	; (8009604 <HAL_ADC_ConvCpltCallback+0x2b8>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d01a      	beq.n	80093ea <HAL_ADC_ConvCpltCallback+0x9e>
			{
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 80093b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80093b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093bc:	2200      	movs	r2, #0
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fa fa54 	bl	800386c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 1);
 80093c4:	4b8e      	ldr	r3, [pc, #568]	; (8009600 <HAL_ADC_ConvCpltCallback+0x2b4>)
 80093c6:	2101      	movs	r1, #1
 80093c8:	2201      	movs	r2, #1
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fa fa4e 	bl	800386c <HAL_GPIO_WritePin>
				if (sample_temperature<255) { sample_temperature--; }
 80093d0:	4b8c      	ldr	r3, [pc, #560]	; (8009604 <HAL_ADC_ConvCpltCallback+0x2b8>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2bfe      	cmp	r3, #254	; 0xfe
 80093d6:	d804      	bhi.n	80093e2 <HAL_ADC_ConvCpltCallback+0x96>
 80093d8:	4b8a      	ldr	r3, [pc, #552]	; (8009604 <HAL_ADC_ConvCpltCallback+0x2b8>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	3b01      	subs	r3, #1
 80093de:	4a89      	ldr	r2, [pc, #548]	; (8009604 <HAL_ADC_ConvCpltCallback+0x2b8>)
 80093e0:	6013      	str	r3, [r2, #0]
				adc_selection=2;
 80093e2:	4b86      	ldr	r3, [pc, #536]	; (80095fc <HAL_ADC_ConvCpltCallback+0x2b0>)
 80093e4:	2202      	movs	r2, #2
 80093e6:	601a      	str	r2, [r3, #0]
			{
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
				adc_selection=0;
			}
			break;
 80093e8:	e076      	b.n	80094d8 <HAL_ADC_ConvCpltCallback+0x18c>
			else if (sample_voltage)
 80093ea:	4b87      	ldr	r3, [pc, #540]	; (8009608 <HAL_ADC_ConvCpltCallback+0x2bc>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d01a      	beq.n	8009428 <HAL_ADC_ConvCpltCallback+0xdc>
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 1);
 80093f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80093f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093fa:	2201      	movs	r2, #1
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fa fa35 	bl	800386c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 1);
 8009402:	4b7f      	ldr	r3, [pc, #508]	; (8009600 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8009404:	2101      	movs	r1, #1
 8009406:	2201      	movs	r2, #1
 8009408:	4618      	mov	r0, r3
 800940a:	f7fa fa2f 	bl	800386c <HAL_GPIO_WritePin>
				if (sample_voltage<255) { sample_voltage--; }
 800940e:	4b7e      	ldr	r3, [pc, #504]	; (8009608 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2bfe      	cmp	r3, #254	; 0xfe
 8009414:	d804      	bhi.n	8009420 <HAL_ADC_ConvCpltCallback+0xd4>
 8009416:	4b7c      	ldr	r3, [pc, #496]	; (8009608 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3b01      	subs	r3, #1
 800941c:	4a7a      	ldr	r2, [pc, #488]	; (8009608 <HAL_ADC_ConvCpltCallback+0x2bc>)
 800941e:	6013      	str	r3, [r2, #0]
				adc_selection=3;
 8009420:	4b76      	ldr	r3, [pc, #472]	; (80095fc <HAL_ADC_ConvCpltCallback+0x2b0>)
 8009422:	2203      	movs	r2, #3
 8009424:	601a      	str	r2, [r3, #0]
			break;
 8009426:	e057      	b.n	80094d8 <HAL_ADC_ConvCpltCallback+0x18c>
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 8009428:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800942c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009430:	2200      	movs	r2, #0
 8009432:	4618      	mov	r0, r3
 8009434:	f7fa fa1a 	bl	800386c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 8009438:	4b71      	ldr	r3, [pc, #452]	; (8009600 <HAL_ADC_ConvCpltCallback+0x2b4>)
 800943a:	2101      	movs	r1, #1
 800943c:	2200      	movs	r2, #0
 800943e:	4618      	mov	r0, r3
 8009440:	f7fa fa14 	bl	800386c <HAL_GPIO_WritePin>
				adc_selection=0;
 8009444:	4b6d      	ldr	r3, [pc, #436]	; (80095fc <HAL_ADC_ConvCpltCallback+0x2b0>)
 8009446:	2200      	movs	r2, #0
 8009448:	601a      	str	r2, [r3, #0]
			break;
 800944a:	e045      	b.n	80094d8 <HAL_ADC_ConvCpltCallback+0x18c>
		case 2: //if voltage has been enabled sample it, otherwise go back to current for channel 0
			if (sample_voltage)
 800944c:	4b6e      	ldr	r3, [pc, #440]	; (8009608 <HAL_ADC_ConvCpltCallback+0x2bc>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d01a      	beq.n	800948a <HAL_ADC_ConvCpltCallback+0x13e>
			{
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 1);
 8009454:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009458:	f44f 7100 	mov.w	r1, #512	; 0x200
 800945c:	2201      	movs	r2, #1
 800945e:	4618      	mov	r0, r3
 8009460:	f7fa fa04 	bl	800386c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 1);
 8009464:	4b66      	ldr	r3, [pc, #408]	; (8009600 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8009466:	2101      	movs	r1, #1
 8009468:	2201      	movs	r2, #1
 800946a:	4618      	mov	r0, r3
 800946c:	f7fa f9fe 	bl	800386c <HAL_GPIO_WritePin>
				if (sample_voltage<255) { sample_voltage--; }
 8009470:	4b65      	ldr	r3, [pc, #404]	; (8009608 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2bfe      	cmp	r3, #254	; 0xfe
 8009476:	d804      	bhi.n	8009482 <HAL_ADC_ConvCpltCallback+0x136>
 8009478:	4b63      	ldr	r3, [pc, #396]	; (8009608 <HAL_ADC_ConvCpltCallback+0x2bc>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3b01      	subs	r3, #1
 800947e:	4a62      	ldr	r2, [pc, #392]	; (8009608 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8009480:	6013      	str	r3, [r2, #0]
				adc_selection=3;
 8009482:	4b5e      	ldr	r3, [pc, #376]	; (80095fc <HAL_ADC_ConvCpltCallback+0x2b0>)
 8009484:	2203      	movs	r2, #3
 8009486:	601a      	str	r2, [r3, #0]
			{
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
				adc_selection=0;
			}
			break;
 8009488:	e026      	b.n	80094d8 <HAL_ADC_ConvCpltCallback+0x18c>
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 800948a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800948e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009492:	2200      	movs	r2, #0
 8009494:	4618      	mov	r0, r3
 8009496:	f7fa f9e9 	bl	800386c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 800949a:	4b59      	ldr	r3, [pc, #356]	; (8009600 <HAL_ADC_ConvCpltCallback+0x2b4>)
 800949c:	2101      	movs	r1, #1
 800949e:	2200      	movs	r2, #0
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fa f9e3 	bl	800386c <HAL_GPIO_WritePin>
				adc_selection=0;
 80094a6:	4b55      	ldr	r3, [pc, #340]	; (80095fc <HAL_ADC_ConvCpltCallback+0x2b0>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]
			break;
 80094ac:	e014      	b.n	80094d8 <HAL_ADC_ConvCpltCallback+0x18c>
		case 3: //as voltage has just been sampled go back to current for channel 0
			HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 80094ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80094b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80094b6:	2200      	movs	r2, #0
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fa f9d7 	bl	800386c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 80094be:	4b50      	ldr	r3, [pc, #320]	; (8009600 <HAL_ADC_ConvCpltCallback+0x2b4>)
 80094c0:	2101      	movs	r1, #1
 80094c2:	2200      	movs	r2, #0
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fa f9d1 	bl	800386c <HAL_GPIO_WritePin>
			adc_selection=0;
 80094ca:	4b4c      	ldr	r3, [pc, #304]	; (80095fc <HAL_ADC_ConvCpltCallback+0x2b0>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	601a      	str	r2, [r3, #0]
			break;
 80094d0:	e002      	b.n	80094d8 <HAL_ADC_ConvCpltCallback+0x18c>
		default:
			Error_Handler();
 80094d2:	f001 ffe1 	bl	800b498 <Error_Handler>
			break;
 80094d6:	bf00      	nop
		}

		HAL_TIM_Base_Start_IT(&htim15);
 80094d8:	484c      	ldr	r0, [pc, #304]	; (800960c <HAL_ADC_ConvCpltCallback+0x2c0>)
 80094da:	f7fb fc7d 	bl	8004dd8 <HAL_TIM_Base_Start_IT>

		for(uint32_t i=0; i<3; i++)
 80094de:	2300      	movs	r3, #0
 80094e0:	657b      	str	r3, [r7, #84]	; 0x54
 80094e2:	e049      	b.n	8009578 <HAL_ADC_ConvCpltCallback+0x22c>
		{
			slaveConvertedValue[i]=(ADCDualConvertedValues[i]>>16)&0xFFFF;
 80094e4:	4a4a      	ldr	r2, [pc, #296]	; (8009610 <HAL_ADC_ConvCpltCallback+0x2c4>)
 80094e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094ec:	0c1a      	lsrs	r2, r3, #16
 80094ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80094f6:	440b      	add	r3, r1
 80094f8:	f843 2c4c 	str.w	r2, [r3, #-76]
			masterConvertedValue[i]=ADCDualConvertedValues[i]&0xFFFF;
 80094fc:	4a44      	ldr	r2, [pc, #272]	; (8009610 <HAL_ADC_ConvCpltCallback+0x2c4>)
 80094fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009504:	b29a      	uxth	r2, r3
 8009506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800950e:	440b      	add	r3, r1
 8009510:	f843 2c40 	str.w	r2, [r3, #-64]
			if(masterConvertedValue[i]>slaveConvertedValue[i])
 8009514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800951c:	4413      	add	r3, r2
 800951e:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8009522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800952a:	440b      	add	r3, r1
 800952c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009530:	429a      	cmp	r2, r3
 8009532:	d916      	bls.n	8009562 <HAL_ADC_ConvCpltCallback+0x216>
			{
				convertedValue[i]=masterConvertedValue[i]-slaveConvertedValue[i];
 8009534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800953c:	4413      	add	r3, r2
 800953e:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8009542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800954a:	440b      	add	r3, r1
 800954c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009550:	1ad2      	subs	r2, r2, r3
 8009552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800955a:	440b      	add	r3, r1
 800955c:	f843 2c34 	str.w	r2, [r3, #-52]
 8009560:	e007      	b.n	8009572 <HAL_ADC_ConvCpltCallback+0x226>
			}
			else //this should only happen due to error in reading at low voltages
			{
				convertedValue[i]=0;
 8009562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800956a:	4413      	add	r3, r2
 800956c:	2200      	movs	r2, #0
 800956e:	f843 2c34 	str.w	r2, [r3, #-52]
		for(uint32_t i=0; i<3; i++)
 8009572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009574:	3301      	adds	r3, #1
 8009576:	657b      	str	r3, [r7, #84]	; 0x54
 8009578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800957a:	2b02      	cmp	r3, #2
 800957c:	d9b2      	bls.n	80094e4 <HAL_ADC_ConvCpltCallback+0x198>
			}
		}

		if (HAL_ADCEx_MultiModeStop_DMA(&hadc1) != HAL_OK)
 800957e:	4825      	ldr	r0, [pc, #148]	; (8009614 <HAL_ADC_ConvCpltCallback+0x2c8>)
 8009580:	f7f8 f976 	bl	8001870 <HAL_ADCEx_MultiModeStop_DMA>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <HAL_ADC_ConvCpltCallback+0x242>
		{
			Error_Handler();
 800958a:	f001 ff85 	bl	800b498 <Error_Handler>
		}

		//if not all switches are used this still does not take too much time and it is fine to write some extra 0s to variables
		switch(sampled)
 800958e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009590:	2b03      	cmp	r3, #3
 8009592:	f200 8143 	bhi.w	800981c <HAL_ADC_ConvCpltCallback+0x4d0>
 8009596:	a201      	add	r2, pc, #4	; (adr r2, 800959c <HAL_ADC_ConvCpltCallback+0x250>)
 8009598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959c:	080095ad 	.word	0x080095ad
 80095a0:	080096a3 	.word	0x080096a3
 80095a4:	0800976d 	.word	0x0800976d
 80095a8:	080097b3 	.word	0x080097b3
		{
		case 0:
			U5I0[I0_rolling_average_position]=convertedValue[0];
 80095ac:	4b1a      	ldr	r3, [pc, #104]	; (8009618 <HAL_ADC_ConvCpltCallback+0x2cc>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095b2:	491a      	ldr	r1, [pc, #104]	; (800961c <HAL_ADC_ConvCpltCallback+0x2d0>)
 80095b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U6I0[I0_rolling_average_position]=convertedValue[1];
 80095b8:	4b17      	ldr	r3, [pc, #92]	; (8009618 <HAL_ADC_ConvCpltCallback+0x2cc>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095be:	4918      	ldr	r1, [pc, #96]	; (8009620 <HAL_ADC_ConvCpltCallback+0x2d4>)
 80095c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U7I0[I0_rolling_average_position]=convertedValue[2];
 80095c4:	4b14      	ldr	r3, [pc, #80]	; (8009618 <HAL_ADC_ConvCpltCallback+0x2cc>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095ca:	4916      	ldr	r1, [pc, #88]	; (8009624 <HAL_ADC_ConvCpltCallback+0x2d8>)
 80095cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (I0_rolling_average_position == I_ROLLING_AVERAGE-1)
 80095d0:	4b11      	ldr	r3, [pc, #68]	; (8009618 <HAL_ADC_ConvCpltCallback+0x2cc>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b0f      	cmp	r3, #15
 80095d6:	d103      	bne.n	80095e0 <HAL_ADC_ConvCpltCallback+0x294>
			{
				I0_rolling_average_position=0;
 80095d8:	4b0f      	ldr	r3, [pc, #60]	; (8009618 <HAL_ADC_ConvCpltCallback+0x2cc>)
 80095da:	2200      	movs	r2, #0
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	e004      	b.n	80095ea <HAL_ADC_ConvCpltCallback+0x29e>
			}
			else
			{
				I0_rolling_average_position++;
 80095e0:	4b0d      	ldr	r3, [pc, #52]	; (8009618 <HAL_ADC_ConvCpltCallback+0x2cc>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3301      	adds	r3, #1
 80095e6:	4a0c      	ldr	r2, [pc, #48]	; (8009618 <HAL_ADC_ConvCpltCallback+0x2cc>)
 80095e8:	6013      	str	r3, [r2, #0]
			}

			uint32_t U5I0_raw=0; uint32_t U6I0_raw=0; uint32_t U7I0_raw=0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	653b      	str	r3, [r7, #80]	; 0x50
 80095ee:	2300      	movs	r3, #0
 80095f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095f2:	2300      	movs	r3, #0
 80095f4:	64bb      	str	r3, [r7, #72]	; 0x48
			for(uint32_t i=0; i<I_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 80095f6:	2300      	movs	r3, #0
 80095f8:	647b      	str	r3, [r7, #68]	; 0x44
 80095fa:	e02d      	b.n	8009658 <HAL_ADC_ConvCpltCallback+0x30c>
 80095fc:	20000878 	.word	0x20000878
 8009600:	48000400 	.word	0x48000400
 8009604:	200004b4 	.word	0x200004b4
 8009608:	200000bc 	.word	0x200000bc
 800960c:	20000334 	.word	0x20000334
 8009610:	20000730 	.word	0x20000730
 8009614:	200005f0 	.word	0x200005f0
 8009618:	20000934 	.word	0x20000934
 800961c:	200009f8 	.word	0x200009f8
 8009620:	20000890 	.word	0x20000890
 8009624:	200005ac 	.word	0x200005ac
			{
				U5I0_raw+=U5I0[i];
 8009628:	4a80      	ldr	r2, [pc, #512]	; (800982c <HAL_ADC_ConvCpltCallback+0x4e0>)
 800962a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800962c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009630:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009632:	4413      	add	r3, r2
 8009634:	653b      	str	r3, [r7, #80]	; 0x50
				U6I0_raw+=U6I0[i];
 8009636:	4a7e      	ldr	r2, [pc, #504]	; (8009830 <HAL_ADC_ConvCpltCallback+0x4e4>)
 8009638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800963a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800963e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009640:	4413      	add	r3, r2
 8009642:	64fb      	str	r3, [r7, #76]	; 0x4c
				U7I0_raw+=U7I0[i];
 8009644:	4a7b      	ldr	r2, [pc, #492]	; (8009834 <HAL_ADC_ConvCpltCallback+0x4e8>)
 8009646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800964c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800964e:	4413      	add	r3, r2
 8009650:	64bb      	str	r3, [r7, #72]	; 0x48
			for(uint32_t i=0; i<I_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 8009652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009654:	3301      	adds	r3, #1
 8009656:	647b      	str	r3, [r7, #68]	; 0x44
 8009658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800965a:	2b0f      	cmp	r3, #15
 800965c:	d9e4      	bls.n	8009628 <HAL_ADC_ConvCpltCallback+0x2dc>
			}
			U5I0_raw/=I_ROLLING_AVERAGE; U6I0_raw/=I_ROLLING_AVERAGE; U7I0_raw/=I_ROLLING_AVERAGE;
 800965e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009660:	091b      	lsrs	r3, r3, #4
 8009662:	653b      	str	r3, [r7, #80]	; 0x50
 8009664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009666:	091b      	lsrs	r3, r3, #4
 8009668:	64fb      	str	r3, [r7, #76]	; 0x4c
 800966a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800966c:	091b      	lsrs	r3, r3, #4
 800966e:	64bb      	str	r3, [r7, #72]	; 0x48
			U5I0_real=Parse_Current(U5I0_raw, 2); U6I0_real=Parse_Current(U6I0_raw, 2); U7I0_real=Parse_Current(U7I0_raw, 2);
 8009670:	2102      	movs	r1, #2
 8009672:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009674:	f001 ff1e 	bl	800b4b4 <Parse_Current>
 8009678:	4602      	mov	r2, r0
 800967a:	4b6f      	ldr	r3, [pc, #444]	; (8009838 <HAL_ADC_ConvCpltCallback+0x4ec>)
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	2102      	movs	r1, #2
 8009680:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009682:	f001 ff17 	bl	800b4b4 <Parse_Current>
 8009686:	4602      	mov	r2, r0
 8009688:	4b6c      	ldr	r3, [pc, #432]	; (800983c <HAL_ADC_ConvCpltCallback+0x4f0>)
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	2102      	movs	r1, #2
 800968e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009690:	f001 ff10 	bl	800b4b4 <Parse_Current>
 8009694:	4602      	mov	r2, r0
 8009696:	4b6a      	ldr	r3, [pc, #424]	; (8009840 <HAL_ADC_ConvCpltCallback+0x4f4>)
 8009698:	601a      	str	r2, [r3, #0]

			//TODO: check overcurrent and switch off immediately if too high
			Check_I0_Flag=1;
 800969a:	4b6a      	ldr	r3, [pc, #424]	; (8009844 <HAL_ADC_ConvCpltCallback+0x4f8>)
 800969c:	2201      	movs	r2, #1
 800969e:	701a      	strb	r2, [r3, #0]

			break;
 80096a0:	e0bf      	b.n	8009822 <HAL_ADC_ConvCpltCallback+0x4d6>
		case 1:
			U5I1[I1_rolling_average_position]=convertedValue[0];
 80096a2:	4b69      	ldr	r3, [pc, #420]	; (8009848 <HAL_ADC_ConvCpltCallback+0x4fc>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096a8:	4968      	ldr	r1, [pc, #416]	; (800984c <HAL_ADC_ConvCpltCallback+0x500>)
 80096aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U6I1[I1_rolling_average_position]=convertedValue[1];
 80096ae:	4b66      	ldr	r3, [pc, #408]	; (8009848 <HAL_ADC_ConvCpltCallback+0x4fc>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096b4:	4966      	ldr	r1, [pc, #408]	; (8009850 <HAL_ADC_ConvCpltCallback+0x504>)
 80096b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U7I1[I1_rolling_average_position]=convertedValue[2];
 80096ba:	4b63      	ldr	r3, [pc, #396]	; (8009848 <HAL_ADC_ConvCpltCallback+0x4fc>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096c0:	4964      	ldr	r1, [pc, #400]	; (8009854 <HAL_ADC_ConvCpltCallback+0x508>)
 80096c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (I1_rolling_average_position == I_ROLLING_AVERAGE-1)
 80096c6:	4b60      	ldr	r3, [pc, #384]	; (8009848 <HAL_ADC_ConvCpltCallback+0x4fc>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b0f      	cmp	r3, #15
 80096cc:	d103      	bne.n	80096d6 <HAL_ADC_ConvCpltCallback+0x38a>
			{
				I1_rolling_average_position=0;
 80096ce:	4b5e      	ldr	r3, [pc, #376]	; (8009848 <HAL_ADC_ConvCpltCallback+0x4fc>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	e004      	b.n	80096e0 <HAL_ADC_ConvCpltCallback+0x394>
			}
			else
			{
				I1_rolling_average_position++;
 80096d6:	4b5c      	ldr	r3, [pc, #368]	; (8009848 <HAL_ADC_ConvCpltCallback+0x4fc>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3301      	adds	r3, #1
 80096dc:	4a5a      	ldr	r2, [pc, #360]	; (8009848 <HAL_ADC_ConvCpltCallback+0x4fc>)
 80096de:	6013      	str	r3, [r2, #0]
			}

			uint32_t U5I1_raw=0; uint32_t U6I1_raw=1; uint32_t U7I1_raw=0;
 80096e0:	2300      	movs	r3, #0
 80096e2:	643b      	str	r3, [r7, #64]	; 0x40
 80096e4:	2301      	movs	r3, #1
 80096e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096e8:	2300      	movs	r3, #0
 80096ea:	63bb      	str	r3, [r7, #56]	; 0x38
			for(uint32_t i=0; i<I_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 80096ec:	2300      	movs	r3, #0
 80096ee:	637b      	str	r3, [r7, #52]	; 0x34
 80096f0:	e017      	b.n	8009722 <HAL_ADC_ConvCpltCallback+0x3d6>
			{
				U5I1_raw+=U5I1[i];
 80096f2:	4a56      	ldr	r2, [pc, #344]	; (800984c <HAL_ADC_ConvCpltCallback+0x500>)
 80096f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096fc:	4413      	add	r3, r2
 80096fe:	643b      	str	r3, [r7, #64]	; 0x40
				U6I1_raw+=U6I1[i];
 8009700:	4a53      	ldr	r2, [pc, #332]	; (8009850 <HAL_ADC_ConvCpltCallback+0x504>)
 8009702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009708:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800970a:	4413      	add	r3, r2
 800970c:	63fb      	str	r3, [r7, #60]	; 0x3c
				U7I1_raw+=U7I1[i];
 800970e:	4a51      	ldr	r2, [pc, #324]	; (8009854 <HAL_ADC_ConvCpltCallback+0x508>)
 8009710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009718:	4413      	add	r3, r2
 800971a:	63bb      	str	r3, [r7, #56]	; 0x38
			for(uint32_t i=0; i<I_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 800971c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800971e:	3301      	adds	r3, #1
 8009720:	637b      	str	r3, [r7, #52]	; 0x34
 8009722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009724:	2b0f      	cmp	r3, #15
 8009726:	d9e4      	bls.n	80096f2 <HAL_ADC_ConvCpltCallback+0x3a6>
			}
			U5I1_raw/=I_ROLLING_AVERAGE; U6I1_raw/=I_ROLLING_AVERAGE; U7I1_raw/=I_ROLLING_AVERAGE;
 8009728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800972a:	091b      	lsrs	r3, r3, #4
 800972c:	643b      	str	r3, [r7, #64]	; 0x40
 800972e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009730:	091b      	lsrs	r3, r3, #4
 8009732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	091b      	lsrs	r3, r3, #4
 8009738:	63bb      	str	r3, [r7, #56]	; 0x38
			U5I1_real=Parse_Current(U5I1_raw, 2); U6I1_real=Parse_Current(U6I1_raw, 2); U7I1_real=Parse_Current(U7I1_raw, 2);
 800973a:	2102      	movs	r1, #2
 800973c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800973e:	f001 feb9 	bl	800b4b4 <Parse_Current>
 8009742:	4602      	mov	r2, r0
 8009744:	4b44      	ldr	r3, [pc, #272]	; (8009858 <HAL_ADC_ConvCpltCallback+0x50c>)
 8009746:	601a      	str	r2, [r3, #0]
 8009748:	2102      	movs	r1, #2
 800974a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800974c:	f001 feb2 	bl	800b4b4 <Parse_Current>
 8009750:	4602      	mov	r2, r0
 8009752:	4b42      	ldr	r3, [pc, #264]	; (800985c <HAL_ADC_ConvCpltCallback+0x510>)
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	2102      	movs	r1, #2
 8009758:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800975a:	f001 feab 	bl	800b4b4 <Parse_Current>
 800975e:	4602      	mov	r2, r0
 8009760:	4b3f      	ldr	r3, [pc, #252]	; (8009860 <HAL_ADC_ConvCpltCallback+0x514>)
 8009762:	601a      	str	r2, [r3, #0]

			//TODO: check overcurrent and switch off immediately if too high
			Check_I1_Flag=1;
 8009764:	4b3f      	ldr	r3, [pc, #252]	; (8009864 <HAL_ADC_ConvCpltCallback+0x518>)
 8009766:	2201      	movs	r2, #1
 8009768:	701a      	strb	r2, [r3, #0]

			break;
 800976a:	e05a      	b.n	8009822 <HAL_ADC_ConvCpltCallback+0x4d6>
		case 2:
			U5T[T_rolling_average_position]=convertedValue[0];
 800976c:	4b3e      	ldr	r3, [pc, #248]	; (8009868 <HAL_ADC_ConvCpltCallback+0x51c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009772:	493e      	ldr	r1, [pc, #248]	; (800986c <HAL_ADC_ConvCpltCallback+0x520>)
 8009774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U6T[T_rolling_average_position]=convertedValue[1];
 8009778:	4b3b      	ldr	r3, [pc, #236]	; (8009868 <HAL_ADC_ConvCpltCallback+0x51c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800977e:	493c      	ldr	r1, [pc, #240]	; (8009870 <HAL_ADC_ConvCpltCallback+0x524>)
 8009780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U7T[T_rolling_average_position]=convertedValue[2];
 8009784:	4b38      	ldr	r3, [pc, #224]	; (8009868 <HAL_ADC_ConvCpltCallback+0x51c>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800978a:	493a      	ldr	r1, [pc, #232]	; (8009874 <HAL_ADC_ConvCpltCallback+0x528>)
 800978c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (T_rolling_average_position == T_ROLLING_AVERAGE-1)
 8009790:	4b35      	ldr	r3, [pc, #212]	; (8009868 <HAL_ADC_ConvCpltCallback+0x51c>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b0f      	cmp	r3, #15
 8009796:	d103      	bne.n	80097a0 <HAL_ADC_ConvCpltCallback+0x454>
			{
				T_rolling_average_position=0;
 8009798:	4b33      	ldr	r3, [pc, #204]	; (8009868 <HAL_ADC_ConvCpltCallback+0x51c>)
 800979a:	2200      	movs	r2, #0
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	e004      	b.n	80097aa <HAL_ADC_ConvCpltCallback+0x45e>
			}
			else
			{
				T_rolling_average_position++;
 80097a0:	4b31      	ldr	r3, [pc, #196]	; (8009868 <HAL_ADC_ConvCpltCallback+0x51c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3301      	adds	r3, #1
 80097a6:	4a30      	ldr	r2, [pc, #192]	; (8009868 <HAL_ADC_ConvCpltCallback+0x51c>)
 80097a8:	6013      	str	r3, [r2, #0]
			}

			Check_T_Flag=1;
 80097aa:	4b33      	ldr	r3, [pc, #204]	; (8009878 <HAL_ADC_ConvCpltCallback+0x52c>)
 80097ac:	2201      	movs	r2, #1
 80097ae:	701a      	strb	r2, [r3, #0]

			break;
 80097b0:	e037      	b.n	8009822 <HAL_ADC_ConvCpltCallback+0x4d6>
		case 3:
			U5V[V_rolling_average_position]=convertedValue[0]; U5GNDV[V_rolling_average_position]=slaveConvertedValue[0];
 80097b2:	4b32      	ldr	r3, [pc, #200]	; (800987c <HAL_ADC_ConvCpltCallback+0x530>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b8:	4931      	ldr	r1, [pc, #196]	; (8009880 <HAL_ADC_ConvCpltCallback+0x534>)
 80097ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80097be:	4b2f      	ldr	r3, [pc, #188]	; (800987c <HAL_ADC_ConvCpltCallback+0x530>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	492f      	ldr	r1, [pc, #188]	; (8009884 <HAL_ADC_ConvCpltCallback+0x538>)
 80097c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U6V[V_rolling_average_position]=convertedValue[1]; U6GNDV[V_rolling_average_position]=slaveConvertedValue[1];
 80097ca:	4b2c      	ldr	r3, [pc, #176]	; (800987c <HAL_ADC_ConvCpltCallback+0x530>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097d0:	492d      	ldr	r1, [pc, #180]	; (8009888 <HAL_ADC_ConvCpltCallback+0x53c>)
 80097d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80097d6:	4b29      	ldr	r3, [pc, #164]	; (800987c <HAL_ADC_ConvCpltCallback+0x530>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	492b      	ldr	r1, [pc, #172]	; (800988c <HAL_ADC_ConvCpltCallback+0x540>)
 80097de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U7V[V_rolling_average_position]=convertedValue[2]; U7GNDV[V_rolling_average_position]=slaveConvertedValue[2];
 80097e2:	4b26      	ldr	r3, [pc, #152]	; (800987c <HAL_ADC_ConvCpltCallback+0x530>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097e8:	4929      	ldr	r1, [pc, #164]	; (8009890 <HAL_ADC_ConvCpltCallback+0x544>)
 80097ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80097ee:	4b23      	ldr	r3, [pc, #140]	; (800987c <HAL_ADC_ConvCpltCallback+0x530>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	4927      	ldr	r1, [pc, #156]	; (8009894 <HAL_ADC_ConvCpltCallback+0x548>)
 80097f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (V_rolling_average_position == V_ROLLING_AVERAGE-1)
 80097fa:	4b20      	ldr	r3, [pc, #128]	; (800987c <HAL_ADC_ConvCpltCallback+0x530>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b0f      	cmp	r3, #15
 8009800:	d103      	bne.n	800980a <HAL_ADC_ConvCpltCallback+0x4be>
			{
				V_rolling_average_position=0;
 8009802:	4b1e      	ldr	r3, [pc, #120]	; (800987c <HAL_ADC_ConvCpltCallback+0x530>)
 8009804:	2200      	movs	r2, #0
 8009806:	601a      	str	r2, [r3, #0]
 8009808:	e004      	b.n	8009814 <HAL_ADC_ConvCpltCallback+0x4c8>
			}
			else
			{
				V_rolling_average_position++;
 800980a:	4b1c      	ldr	r3, [pc, #112]	; (800987c <HAL_ADC_ConvCpltCallback+0x530>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	3301      	adds	r3, #1
 8009810:	4a1a      	ldr	r2, [pc, #104]	; (800987c <HAL_ADC_ConvCpltCallback+0x530>)
 8009812:	6013      	str	r3, [r2, #0]
			}

			Check_V_Flag=1;
 8009814:	4b20      	ldr	r3, [pc, #128]	; (8009898 <HAL_ADC_ConvCpltCallback+0x54c>)
 8009816:	2201      	movs	r2, #1
 8009818:	701a      	strb	r2, [r3, #0]

			break;
 800981a:	e002      	b.n	8009822 <HAL_ADC_ConvCpltCallback+0x4d6>
		default:
			Error_Handler();
 800981c:	f001 fe3c 	bl	800b498 <Error_Handler>
			break;
 8009820:	bf00      	nop
		}
	}
}
 8009822:	bf00      	nop
 8009824:	3758      	adds	r7, #88	; 0x58
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	200009f8 	.word	0x200009f8
 8009830:	20000890 	.word	0x20000890
 8009834:	200005ac 	.word	0x200005ac
 8009838:	200005a8 	.word	0x200005a8
 800983c:	20000788 	.word	0x20000788
 8009840:	20000378 	.word	0x20000378
 8009844:	200006bc 	.word	0x200006bc
 8009848:	20000720 	.word	0x20000720
 800984c:	2000073c 	.word	0x2000073c
 8009850:	200008d0 	.word	0x200008d0
 8009854:	2000037c 	.word	0x2000037c
 8009858:	200006b0 	.word	0x200006b0
 800985c:	20000b20 	.word	0x20000b20
 8009860:	20000590 	.word	0x20000590
 8009864:	2000077e 	.word	0x2000077e
 8009868:	200000c8 	.word	0x200000c8
 800986c:	20000b28 	.word	0x20000b28
 8009870:	200000cc 	.word	0x200000cc
 8009874:	200002b4 	.word	0x200002b4
 8009878:	2000065e 	.word	0x2000065e
 800987c:	20000a3c 	.word	0x20000a3c
 8009880:	20000504 	.word	0x20000504
 8009884:	2000011c 	.word	0x2000011c
 8009888:	200004c0 	.word	0x200004c0
 800988c:	20000794 	.word	0x20000794
 8009890:	20000a40 	.word	0x20000a40
 8009894:	200003c0 	.word	0x200003c0
 8009898:	2000065f 	.word	0x2000065f

0800989c <Can_Send>:


void Can_Send(uint8_t message)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b08e      	sub	sp, #56	; 0x38
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	4603      	mov	r3, r0
 80098a4:	71fb      	strb	r3, [r7, #7]
	if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) < 1)
 80098a6:	483e      	ldr	r0, [pc, #248]	; (80099a0 <Can_Send+0x104>)
 80098a8:	f7f9 f878 	bl	800299c <HAL_FDCAN_GetTxFifoFreeLevel>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d103      	bne.n	80098ba <Can_Send+0x1e>
	{
		Set_Error(ERR_CAN_FIFO_FULL);
 80098b2:	2002      	movs	r0, #2
 80098b4:	f000 fba8 	bl	800a008 <Set_Error>
		return;
 80098b8:	e06f      	b.n	800999a <Can_Send+0xfe>
	}

	if(Can_IDs[message]>2047)
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	4a39      	ldr	r2, [pc, #228]	; (80099a4 <Can_Send+0x108>)
 80098be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098c6:	d303      	bcc.n	80098d0 <Can_Send+0x34>
	{
		Set_Error(ERR_MESSAGE_DISABLED);
 80098c8:	2003      	movs	r0, #3
 80098ca:	f000 fb9d 	bl	800a008 <Set_Error>
		return;
 80098ce:	e064      	b.n	800999a <Can_Send+0xfe>
	}
	else if(Can_DLCs[message]==0)
 80098d0:	79fb      	ldrb	r3, [r7, #7]
 80098d2:	4a35      	ldr	r2, [pc, #212]	; (80099a8 <Can_Send+0x10c>)
 80098d4:	5cd3      	ldrb	r3, [r2, r3]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d103      	bne.n	80098e2 <Can_Send+0x46>
	{
		Set_Error(ERR_DLC_0);
 80098da:	2004      	movs	r0, #4
 80098dc:	f000 fb94 	bl	800a008 <Set_Error>
		return;
 80098e0:	e05b      	b.n	800999a <Can_Send+0xfe>
	}
	else if(Can_DLCs[message]>8)
 80098e2:	79fb      	ldrb	r3, [r7, #7]
 80098e4:	4a30      	ldr	r2, [pc, #192]	; (80099a8 <Can_Send+0x10c>)
 80098e6:	5cd3      	ldrb	r3, [r2, r3]
 80098e8:	2b08      	cmp	r3, #8
 80098ea:	d903      	bls.n	80098f4 <Can_Send+0x58>
	{
		Set_Error(ERR_DLC_LONG);
 80098ec:	2005      	movs	r0, #5
 80098ee:	f000 fb8b 	bl	800a008 <Set_Error>
		return;
 80098f2:	e052      	b.n	800999a <Can_Send+0xfe>
	}

	FDCAN_TxHeaderTypeDef TxHeader;

	TxHeader.Identifier = Can_IDs[message];
 80098f4:	79fb      	ldrb	r3, [r7, #7]
 80098f6:	4a2b      	ldr	r2, [pc, #172]	; (80099a4 <Can_Send+0x108>)
 80098f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098fc:	60fb      	str	r3, [r7, #12]
	TxHeader.DataLength = (Can_DLCs[message]<<16); //<<16 makes storing the number of bytes not require a switch statement for classic can
 80098fe:	79fb      	ldrb	r3, [r7, #7]
 8009900:	4a29      	ldr	r2, [pc, #164]	; (80099a8 <Can_Send+0x10c>)
 8009902:	5cd3      	ldrb	r3, [r2, r3]
 8009904:	041b      	lsls	r3, r3, #16
 8009906:	61bb      	str	r3, [r7, #24]

	//clear can tx data so that data from incorrectly configured message is 0
	for(uint32_t i=0; i<8; i++)
 8009908:	2300      	movs	r3, #0
 800990a:	637b      	str	r3, [r7, #52]	; 0x34
 800990c:	e007      	b.n	800991e <Can_Send+0x82>
	{
		CANTxData[i]=0;
 800990e:	4a27      	ldr	r2, [pc, #156]	; (80099ac <Can_Send+0x110>)
 8009910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009912:	4413      	add	r3, r2
 8009914:	2200      	movs	r2, #0
 8009916:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 8009918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800991a:	3301      	adds	r3, #1
 800991c:	637b      	str	r3, [r7, #52]	; 0x34
 800991e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009920:	2b07      	cmp	r3, #7
 8009922:	d9f4      	bls.n	800990e <Can_Send+0x72>
	}

	uint32_t pos=0;
 8009924:	2300      	movs	r3, #0
 8009926:	60bb      	str	r3, [r7, #8]
	for(uint32_t i=0; i<Can_DLCs[message]; i++) //max number of function calls is same as number of bytes
 8009928:	2300      	movs	r3, #0
 800992a:	633b      	str	r3, [r7, #48]	; 0x30
 800992c:	e010      	b.n	8009950 <Can_Send+0xb4>
	{
		Set_Can_Bytes(&pos, message);
 800992e:	79fa      	ldrb	r2, [r7, #7]
 8009930:	f107 0308 	add.w	r3, r7, #8
 8009934:	4611      	mov	r1, r2
 8009936:	4618      	mov	r0, r3
 8009938:	f7fc fedc 	bl	80066f4 <Set_Can_Bytes>
		if(pos>=Can_DLCs[message])
 800993c:	79fb      	ldrb	r3, [r7, #7]
 800993e:	4a1a      	ldr	r2, [pc, #104]	; (80099a8 <Can_Send+0x10c>)
 8009940:	5cd3      	ldrb	r3, [r2, r3]
 8009942:	461a      	mov	r2, r3
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	429a      	cmp	r2, r3
 8009948:	d90a      	bls.n	8009960 <Can_Send+0xc4>
	for(uint32_t i=0; i<Can_DLCs[message]; i++) //max number of function calls is same as number of bytes
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	3301      	adds	r3, #1
 800994e:	633b      	str	r3, [r7, #48]	; 0x30
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	4a15      	ldr	r2, [pc, #84]	; (80099a8 <Can_Send+0x10c>)
 8009954:	5cd3      	ldrb	r3, [r2, r3]
 8009956:	461a      	mov	r2, r3
 8009958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995a:	4293      	cmp	r3, r2
 800995c:	d3e7      	bcc.n	800992e <Can_Send+0x92>
 800995e:	e000      	b.n	8009962 <Can_Send+0xc6>
		{
			break;
 8009960:	bf00      	nop
		}
	}

	TxHeader.IdType = FDCAN_STANDARD_ID;
 8009962:	2300      	movs	r3, #0
 8009964:	613b      	str	r3, [r7, #16]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8009966:	2300      	movs	r3, #0
 8009968:	617b      	str	r3, [r7, #20]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800996a:	2300      	movs	r3, #0
 800996c:	61fb      	str	r3, [r7, #28]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800996e:	2300      	movs	r3, #0
 8009970:	623b      	str	r3, [r7, #32]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8009972:	2300      	movs	r3, #0
 8009974:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8009976:	2300      	movs	r3, #0
 8009978:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.MessageMarker = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 800997e:	f107 030c 	add.w	r3, r7, #12
 8009982:	4a0a      	ldr	r2, [pc, #40]	; (80099ac <Can_Send+0x110>)
 8009984:	4619      	mov	r1, r3
 8009986:	4806      	ldr	r0, [pc, #24]	; (80099a0 <Can_Send+0x104>)
 8009988:	f7f8 feea 	bl	8002760 <HAL_FDCAN_AddMessageToTxFifoQ>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <Can_Send+0xfe>
	{
		Set_Error(ERR_SEND_FAILED);
 8009992:	2006      	movs	r0, #6
 8009994:	f000 fb38 	bl	800a008 <Set_Error>
		return;
 8009998:	bf00      	nop
	}
}
 800999a:	3738      	adds	r7, #56	; 0x38
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	20000444 	.word	0x20000444
 80099a4:	2000087c 	.word	0x2000087c
 80099a8:	2000092c 	.word	0x2000092c
 80099ac:	20000920 	.word	0x20000920

080099b0 <Can_Sync>:

//for can sync we must send from the interrupt to ensure that we send the message quickly, but this means only 2 (or sometimes 3) messages may be sent without discarding messages
void Can_Sync(void)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<8; i++)
 80099b6:	2300      	movs	r3, #0
 80099b8:	607b      	str	r3, [r7, #4]
 80099ba:	e017      	b.n	80099ec <Can_Sync+0x3c>
	{
		if ((Can_Sync_Enable>>i)&0b1)
 80099bc:	4b0f      	ldr	r3, [pc, #60]	; (80099fc <Can_Sync+0x4c>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	461a      	mov	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	fa42 f303 	asr.w	r3, r2, r3
 80099c8:	f003 0301 	and.w	r3, r3, #1
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00a      	beq.n	80099e6 <Can_Sync+0x36>
		{
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) > 0)
 80099d0:	480b      	ldr	r0, [pc, #44]	; (8009a00 <Can_Sync+0x50>)
 80099d2:	f7f8 ffe3 	bl	800299c <HAL_FDCAN_GetTxFifoFreeLevel>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d004      	beq.n	80099e6 <Can_Sync+0x36>
			{
				Can_Send(i);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7ff ff5b 	bl	800989c <Can_Send>
	for(uint32_t i=0; i<8; i++)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	3301      	adds	r3, #1
 80099ea:	607b      	str	r3, [r7, #4]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b07      	cmp	r3, #7
 80099f0:	d9e4      	bls.n	80099bc <Can_Sync+0xc>
			}
		}
	}
}
 80099f2:	bf00      	nop
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	20000500 	.word	0x20000500
 8009a00:	20000444 	.word	0x20000444

08009a04 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8009a04:	b590      	push	{r4, r7, lr}
 8009a06:	b093      	sub	sp, #76	; 0x4c
 8009a08:	af02      	add	r7, sp, #8
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t CANRxData[8];

	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	f003 0301 	and.w	r3, r3, #1
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f000 82f3 	beq.w	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
	{
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, CANRxData) != HAL_OK)
 8009a1a:	f107 030c 	add.w	r3, r7, #12
 8009a1e:	f107 0214 	add.w	r2, r7, #20
 8009a22:	2140      	movs	r1, #64	; 0x40
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f7f8 fedf 	bl	80027e8 <HAL_FDCAN_GetRxMessage>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d002      	beq.n	8009a36 <HAL_FDCAN_RxFifo0Callback+0x32>
		{
			Set_Error(ERR_RECIEVE_FAILED);
 8009a30:	2007      	movs	r0, #7
 8009a32:	f000 fae9 	bl	800a008 <Set_Error>
		}

		//set any bytes not actaully read to 0 to prevent unknown values being in them
		for(uint32_t i=(RxHeader.DataLength>>16); i<8; i++)
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	0c1b      	lsrs	r3, r3, #16
 8009a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a3c:	e008      	b.n	8009a50 <HAL_FDCAN_RxFifo0Callback+0x4c>
		{
			CANRxData[i]=0;
 8009a3e:	f107 020c 	add.w	r2, r7, #12
 8009a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a44:	4413      	add	r3, r2
 8009a46:	2200      	movs	r2, #0
 8009a48:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=(RxHeader.DataLength>>16); i<8; i++)
 8009a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a52:	2b07      	cmp	r3, #7
 8009a54:	d9f3      	bls.n	8009a3e <HAL_FDCAN_RxFifo0Callback+0x3a>
		}

		if (RxHeader.Identifier == CANID_SYNC)
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2b80      	cmp	r3, #128	; 0x80
 8009a5a:	d10a      	bne.n	8009a72 <HAL_FDCAN_RxFifo0Callback+0x6e>
		{
			if(Can_Sync_Delay)
 8009a5c:	4bdb      	ldr	r3, [pc, #876]	; (8009dcc <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d003      	beq.n	8009a6c <HAL_FDCAN_RxFifo0Callback+0x68>
			{
				HAL_TIM_Base_Start_IT(&htim16);
 8009a64:	48da      	ldr	r0, [pc, #872]	; (8009dd0 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8009a66:	f7fb f9b7 	bl	8004dd8 <HAL_TIM_Base_Start_IT>
		else
		{
			Set_Error(ERR_RECIEVED_INVALID_ID);
		}
	}
}
 8009a6a:	e2c9      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
				Can_Sync();
 8009a6c:	f7ff ffa0 	bl	80099b0 <Can_Sync>
}
 8009a70:	e2c6      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
		else if (RxHeader.Identifier == CANID_CONFIG)
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a78:	f040 829f 	bne.w	8009fba <HAL_FDCAN_RxFifo0Callback+0x5b6>
			if(CANRxData[0] == ID)
 8009a7c:	7b3b      	ldrb	r3, [r7, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f040 829f 	bne.w	8009fc2 <HAL_FDCAN_RxFifo0Callback+0x5be>
				switch(CANRxData[1])
 8009a84:	7b7b      	ldrb	r3, [r7, #13]
 8009a86:	3b01      	subs	r3, #1
 8009a88:	2b8b      	cmp	r3, #139	; 0x8b
 8009a8a:	f200 8291 	bhi.w	8009fb0 <HAL_FDCAN_RxFifo0Callback+0x5ac>
 8009a8e:	a201      	add	r2, pc, #4	; (adr r2, 8009a94 <HAL_FDCAN_RxFifo0Callback+0x90>)
 8009a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a94:	08009cc5 	.word	0x08009cc5
 8009a98:	08009ce3 	.word	0x08009ce3
 8009a9c:	08009d3b 	.word	0x08009d3b
 8009aa0:	08009d43 	.word	0x08009d43
 8009aa4:	08009d4b 	.word	0x08009d4b
 8009aa8:	08009d53 	.word	0x08009d53
 8009aac:	08009d5b 	.word	0x08009d5b
 8009ab0:	08009d63 	.word	0x08009d63
 8009ab4:	08009d6b 	.word	0x08009d6b
 8009ab8:	08009d73 	.word	0x08009d73
 8009abc:	08009d7b 	.word	0x08009d7b
 8009ac0:	08009fb1 	.word	0x08009fb1
 8009ac4:	08009fb1 	.word	0x08009fb1
 8009ac8:	08009fb1 	.word	0x08009fb1
 8009acc:	08009fb1 	.word	0x08009fb1
 8009ad0:	08009fb1 	.word	0x08009fb1
 8009ad4:	08009fb1 	.word	0x08009fb1
 8009ad8:	08009fb1 	.word	0x08009fb1
 8009adc:	08009fb1 	.word	0x08009fb1
 8009ae0:	08009fb1 	.word	0x08009fb1
 8009ae4:	08009fb1 	.word	0x08009fb1
 8009ae8:	08009fb1 	.word	0x08009fb1
 8009aec:	08009fb1 	.word	0x08009fb1
 8009af0:	08009fb1 	.word	0x08009fb1
 8009af4:	08009fb1 	.word	0x08009fb1
 8009af8:	08009fb1 	.word	0x08009fb1
 8009afc:	08009fb1 	.word	0x08009fb1
 8009b00:	08009fb1 	.word	0x08009fb1
 8009b04:	08009fb1 	.word	0x08009fb1
 8009b08:	08009fb1 	.word	0x08009fb1
 8009b0c:	08009fb1 	.word	0x08009fb1
 8009b10:	08009fb1 	.word	0x08009fb1
 8009b14:	08009fb1 	.word	0x08009fb1
 8009b18:	08009fb1 	.word	0x08009fb1
 8009b1c:	08009fb1 	.word	0x08009fb1
 8009b20:	08009fb1 	.word	0x08009fb1
 8009b24:	08009fb1 	.word	0x08009fb1
 8009b28:	08009fb1 	.word	0x08009fb1
 8009b2c:	08009fb1 	.word	0x08009fb1
 8009b30:	08009fb1 	.word	0x08009fb1
 8009b34:	08009fb1 	.word	0x08009fb1
 8009b38:	08009fb1 	.word	0x08009fb1
 8009b3c:	08009fb1 	.word	0x08009fb1
 8009b40:	08009fb1 	.word	0x08009fb1
 8009b44:	08009fb1 	.word	0x08009fb1
 8009b48:	08009fb1 	.word	0x08009fb1
 8009b4c:	08009fb1 	.word	0x08009fb1
 8009b50:	08009fb1 	.word	0x08009fb1
 8009b54:	08009fb1 	.word	0x08009fb1
 8009b58:	08009fb1 	.word	0x08009fb1
 8009b5c:	08009fb1 	.word	0x08009fb1
 8009b60:	08009fb1 	.word	0x08009fb1
 8009b64:	08009fb1 	.word	0x08009fb1
 8009b68:	08009fb1 	.word	0x08009fb1
 8009b6c:	08009fb1 	.word	0x08009fb1
 8009b70:	08009fb1 	.word	0x08009fb1
 8009b74:	08009fb1 	.word	0x08009fb1
 8009b78:	08009fb1 	.word	0x08009fb1
 8009b7c:	08009fb1 	.word	0x08009fb1
 8009b80:	08009fb1 	.word	0x08009fb1
 8009b84:	08009fb1 	.word	0x08009fb1
 8009b88:	08009fb1 	.word	0x08009fb1
 8009b8c:	08009fb1 	.word	0x08009fb1
 8009b90:	08009fb1 	.word	0x08009fb1
 8009b94:	08009fb1 	.word	0x08009fb1
 8009b98:	08009fb1 	.word	0x08009fb1
 8009b9c:	08009fb1 	.word	0x08009fb1
 8009ba0:	08009fb1 	.word	0x08009fb1
 8009ba4:	08009fb1 	.word	0x08009fb1
 8009ba8:	08009fb1 	.word	0x08009fb1
 8009bac:	08009fb1 	.word	0x08009fb1
 8009bb0:	08009fb1 	.word	0x08009fb1
 8009bb4:	08009fb1 	.word	0x08009fb1
 8009bb8:	08009fb1 	.word	0x08009fb1
 8009bbc:	08009fb1 	.word	0x08009fb1
 8009bc0:	08009fb1 	.word	0x08009fb1
 8009bc4:	08009fb1 	.word	0x08009fb1
 8009bc8:	08009fb1 	.word	0x08009fb1
 8009bcc:	08009fb1 	.word	0x08009fb1
 8009bd0:	08009fb1 	.word	0x08009fb1
 8009bd4:	08009fb1 	.word	0x08009fb1
 8009bd8:	08009fb1 	.word	0x08009fb1
 8009bdc:	08009fb1 	.word	0x08009fb1
 8009be0:	08009fb1 	.word	0x08009fb1
 8009be4:	08009fb1 	.word	0x08009fb1
 8009be8:	08009fb1 	.word	0x08009fb1
 8009bec:	08009fb1 	.word	0x08009fb1
 8009bf0:	08009fb1 	.word	0x08009fb1
 8009bf4:	08009fb1 	.word	0x08009fb1
 8009bf8:	08009fb1 	.word	0x08009fb1
 8009bfc:	08009fb1 	.word	0x08009fb1
 8009c00:	08009fb1 	.word	0x08009fb1
 8009c04:	08009fb1 	.word	0x08009fb1
 8009c08:	08009fb1 	.word	0x08009fb1
 8009c0c:	08009fb1 	.word	0x08009fb1
 8009c10:	08009fb1 	.word	0x08009fb1
 8009c14:	08009fb1 	.word	0x08009fb1
 8009c18:	08009fb1 	.word	0x08009fb1
 8009c1c:	08009fb1 	.word	0x08009fb1
 8009c20:	08009fb1 	.word	0x08009fb1
 8009c24:	08009fb1 	.word	0x08009fb1
 8009c28:	08009fb1 	.word	0x08009fb1
 8009c2c:	08009fb1 	.word	0x08009fb1
 8009c30:	08009fb1 	.word	0x08009fb1
 8009c34:	08009fb1 	.word	0x08009fb1
 8009c38:	08009fb1 	.word	0x08009fb1
 8009c3c:	08009fb1 	.word	0x08009fb1
 8009c40:	08009fb1 	.word	0x08009fb1
 8009c44:	08009fb1 	.word	0x08009fb1
 8009c48:	08009fb1 	.word	0x08009fb1
 8009c4c:	08009fb1 	.word	0x08009fb1
 8009c50:	08009fb1 	.word	0x08009fb1
 8009c54:	08009fb1 	.word	0x08009fb1
 8009c58:	08009fb1 	.word	0x08009fb1
 8009c5c:	08009fb1 	.word	0x08009fb1
 8009c60:	08009fb1 	.word	0x08009fb1
 8009c64:	08009fb1 	.word	0x08009fb1
 8009c68:	08009fb1 	.word	0x08009fb1
 8009c6c:	08009fb1 	.word	0x08009fb1
 8009c70:	08009fb1 	.word	0x08009fb1
 8009c74:	08009fb1 	.word	0x08009fb1
 8009c78:	08009fb1 	.word	0x08009fb1
 8009c7c:	08009fb1 	.word	0x08009fb1
 8009c80:	08009fb1 	.word	0x08009fb1
 8009c84:	08009fb1 	.word	0x08009fb1
 8009c88:	08009fb1 	.word	0x08009fb1
 8009c8c:	08009fb1 	.word	0x08009fb1
 8009c90:	08009d99 	.word	0x08009d99
 8009c94:	08009d9f 	.word	0x08009d9f
 8009c98:	08009dd5 	.word	0x08009dd5
 8009c9c:	08009df3 	.word	0x08009df3
 8009ca0:	08009e11 	.word	0x08009e11
 8009ca4:	08009e2f 	.word	0x08009e2f
 8009ca8:	08009e57 	.word	0x08009e57
 8009cac:	08009e7f 	.word	0x08009e7f
 8009cb0:	08009eab 	.word	0x08009eab
 8009cb4:	08009f01 	.word	0x08009f01
 8009cb8:	08009f57 	.word	0x08009f57
 8009cbc:	08009f73 	.word	0x08009f73
 8009cc0:	08009f95 	.word	0x08009f95
					Switch_Power(CANRxData[2], CANRxData[3]);
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
 8009cc6:	7bfa      	ldrb	r2, [r7, #15]
 8009cc8:	4611      	mov	r1, r2
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fd f9f2 	bl	80070b4 <Switch_Power>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 8009cd0:	6a3b      	ldr	r3, [r7, #32]
 8009cd2:	0c1b      	lsrs	r3, r3, #16
 8009cd4:	2b03      	cmp	r3, #3
 8009cd6:	f200 8176 	bhi.w	8009fc6 <HAL_FDCAN_RxFifo0Callback+0x5c2>
 8009cda:	2009      	movs	r0, #9
 8009cdc:	f000 f994 	bl	800a008 <Set_Error>
					break;
 8009ce0:	e171      	b.n	8009fc6 <HAL_FDCAN_RxFifo0Callback+0x5c2>
					Switch_DC(CANRxData[2], CANRxData);
 8009ce2:	7bbb      	ldrb	r3, [r7, #14]
 8009ce4:	f107 020c 	add.w	r2, r7, #12
 8009ce8:	4611      	mov	r1, r2
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fd fa22 	bl	8007134 <Switch_DC>
					if ((RxHeader.DataLength>>16) < (3+((CANRxData[2]>>4)&1))+((CANRxData[2]>>3)&1)+((CANRxData[2]>>2)&1)+((CANRxData[2]>>1)&1)+((CANRxData[2]>>0)&1)) { Set_Error(ERR_COMMAND_SHORT); }
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	0c1b      	lsrs	r3, r3, #16
 8009cf4:	7bba      	ldrb	r2, [r7, #14]
 8009cf6:	0912      	lsrs	r2, r2, #4
 8009cf8:	b2d2      	uxtb	r2, r2
 8009cfa:	f002 0201 	and.w	r2, r2, #1
 8009cfe:	1cd1      	adds	r1, r2, #3
 8009d00:	7bba      	ldrb	r2, [r7, #14]
 8009d02:	08d2      	lsrs	r2, r2, #3
 8009d04:	b2d2      	uxtb	r2, r2
 8009d06:	f002 0201 	and.w	r2, r2, #1
 8009d0a:	4411      	add	r1, r2
 8009d0c:	7bba      	ldrb	r2, [r7, #14]
 8009d0e:	0892      	lsrs	r2, r2, #2
 8009d10:	b2d2      	uxtb	r2, r2
 8009d12:	f002 0201 	and.w	r2, r2, #1
 8009d16:	4411      	add	r1, r2
 8009d18:	7bba      	ldrb	r2, [r7, #14]
 8009d1a:	0852      	lsrs	r2, r2, #1
 8009d1c:	b2d2      	uxtb	r2, r2
 8009d1e:	f002 0201 	and.w	r2, r2, #1
 8009d22:	4411      	add	r1, r2
 8009d24:	7bba      	ldrb	r2, [r7, #14]
 8009d26:	f002 0201 	and.w	r2, r2, #1
 8009d2a:	440a      	add	r2, r1
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	f080 814c 	bcs.w	8009fca <HAL_FDCAN_RxFifo0Callback+0x5c6>
 8009d32:	2009      	movs	r0, #9
 8009d34:	f000 f968 	bl	800a008 <Set_Error>
					break;
 8009d38:	e147      	b.n	8009fca <HAL_FDCAN_RxFifo0Callback+0x5c6>
					Buffer_Can_Message(0);
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	f7fd fa26 	bl	800718c <Buffer_Can_Message>
					break;
 8009d40:	e15e      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Buffer_Can_Message(1);
 8009d42:	2001      	movs	r0, #1
 8009d44:	f7fd fa22 	bl	800718c <Buffer_Can_Message>
					break;
 8009d48:	e15a      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Buffer_Can_Message(2);
 8009d4a:	2002      	movs	r0, #2
 8009d4c:	f7fd fa1e 	bl	800718c <Buffer_Can_Message>
					break;
 8009d50:	e156      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Buffer_Can_Message(3);
 8009d52:	2003      	movs	r0, #3
 8009d54:	f7fd fa1a 	bl	800718c <Buffer_Can_Message>
					break;
 8009d58:	e152      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Buffer_Can_Message(4);
 8009d5a:	2004      	movs	r0, #4
 8009d5c:	f7fd fa16 	bl	800718c <Buffer_Can_Message>
					break;
 8009d60:	e14e      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Buffer_Can_Message(5);
 8009d62:	2005      	movs	r0, #5
 8009d64:	f7fd fa12 	bl	800718c <Buffer_Can_Message>
					break;
 8009d68:	e14a      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Buffer_Can_Message(6);
 8009d6a:	2006      	movs	r0, #6
 8009d6c:	f7fd fa0e 	bl	800718c <Buffer_Can_Message>
					break;
 8009d70:	e146      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Buffer_Can_Message(7);
 8009d72:	2007      	movs	r0, #7
 8009d74:	f7fd fa0a 	bl	800718c <Buffer_Can_Message>
					break;
 8009d78:	e142      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Sample_Temperature_Voltage(CANRxData[2], CANRxData[3]);
 8009d7a:	7bbb      	ldrb	r3, [r7, #14]
 8009d7c:	7bfa      	ldrb	r2, [r7, #15]
 8009d7e:	4611      	mov	r1, r2
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7fd fa37 	bl	80071f4 <Sample_Temperature_Voltage>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	0c1b      	lsrs	r3, r3, #16
 8009d8a:	2b03      	cmp	r3, #3
 8009d8c:	f200 811f 	bhi.w	8009fce <HAL_FDCAN_RxFifo0Callback+0x5ca>
 8009d90:	2009      	movs	r0, #9
 8009d92:	f000 f939 	bl	800a008 <Set_Error>
					break;
 8009d96:	e11a      	b.n	8009fce <HAL_FDCAN_RxFifo0Callback+0x5ca>
					Save_Config();
 8009d98:	f7fd f980 	bl	800709c <Save_Config>
					break;
 8009d9c:	e130      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Config_Message(CANRxData[2], CANRxData[3], (((uint16_t)CANRxData[4])<<8)+(((uint16_t)CANRxData[5])<<0));
 8009d9e:	7bb8      	ldrb	r0, [r7, #14]
 8009da0:	7bf9      	ldrb	r1, [r7, #15]
 8009da2:	7c3b      	ldrb	r3, [r7, #16]
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	021b      	lsls	r3, r3, #8
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	7c7b      	ldrb	r3, [r7, #17]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	4413      	add	r3, r2
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	461a      	mov	r2, r3
 8009db4:	f7fd fa3c 	bl	8007230 <Config_Message>
					if ((RxHeader.DataLength>>16) < 6) { Set_Error(ERR_COMMAND_SHORT); }
 8009db8:	6a3b      	ldr	r3, [r7, #32]
 8009dba:	0c1b      	lsrs	r3, r3, #16
 8009dbc:	2b05      	cmp	r3, #5
 8009dbe:	f200 8108 	bhi.w	8009fd2 <HAL_FDCAN_RxFifo0Callback+0x5ce>
 8009dc2:	2009      	movs	r0, #9
 8009dc4:	f000 f920 	bl	800a008 <Set_Error>
					break;
 8009dc8:	e103      	b.n	8009fd2 <HAL_FDCAN_RxFifo0Callback+0x5ce>
 8009dca:	bf00      	nop
 8009dcc:	20000440 	.word	0x20000440
 8009dd0:	20000a84 	.word	0x20000a84
					Config_Switch_Defaults(CANRxData[2], CANRxData[3]);
 8009dd4:	7bbb      	ldrb	r3, [r7, #14]
 8009dd6:	7bfa      	ldrb	r2, [r7, #15]
 8009dd8:	4611      	mov	r1, r2
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fd fa7a 	bl	80072d4 <Config_Switch_Defaults>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	0c1b      	lsrs	r3, r3, #16
 8009de4:	2b03      	cmp	r3, #3
 8009de6:	f200 80f6 	bhi.w	8009fd6 <HAL_FDCAN_RxFifo0Callback+0x5d2>
 8009dea:	2009      	movs	r0, #9
 8009dec:	f000 f90c 	bl	800a008 <Set_Error>
					break;
 8009df0:	e0f1      	b.n	8009fd6 <HAL_FDCAN_RxFifo0Callback+0x5d2>
					Config_Can_Sync(CANRxData[2], CANRxData[3]);
 8009df2:	7bbb      	ldrb	r3, [r7, #14]
 8009df4:	7bfa      	ldrb	r2, [r7, #15]
 8009df6:	4611      	mov	r1, r2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fd fab3 	bl	8007364 <Config_Can_Sync>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	0c1b      	lsrs	r3, r3, #16
 8009e02:	2b03      	cmp	r3, #3
 8009e04:	f200 80e9 	bhi.w	8009fda <HAL_FDCAN_RxFifo0Callback+0x5d6>
 8009e08:	2009      	movs	r0, #9
 8009e0a:	f000 f8fd 	bl	800a008 <Set_Error>
					break;
 8009e0e:	e0e4      	b.n	8009fda <HAL_FDCAN_RxFifo0Callback+0x5d6>
					Config_Can_Timed(CANRxData[2], CANRxData[3]);
 8009e10:	7bbb      	ldrb	r3, [r7, #14]
 8009e12:	7bfa      	ldrb	r2, [r7, #15]
 8009e14:	4611      	mov	r1, r2
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fd faec 	bl	80073f4 <Config_Can_Timed>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	0c1b      	lsrs	r3, r3, #16
 8009e20:	2b03      	cmp	r3, #3
 8009e22:	f200 80dc 	bhi.w	8009fde <HAL_FDCAN_RxFifo0Callback+0x5da>
 8009e26:	2009      	movs	r0, #9
 8009e28:	f000 f8ee 	bl	800a008 <Set_Error>
					break;
 8009e2c:	e0d7      	b.n	8009fde <HAL_FDCAN_RxFifo0Callback+0x5da>
					Config_Can_Interval((((uint16_t)CANRxData[2])<<8)+(((uint16_t)CANRxData[3])<<0));
 8009e2e:	7bbb      	ldrb	r3, [r7, #14]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	021b      	lsls	r3, r3, #8
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	4413      	add	r3, r2
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fd fb20 	bl	8007484 <Config_Can_Interval>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	0c1b      	lsrs	r3, r3, #16
 8009e48:	2b03      	cmp	r3, #3
 8009e4a:	f200 80ca 	bhi.w	8009fe2 <HAL_FDCAN_RxFifo0Callback+0x5de>
 8009e4e:	2009      	movs	r0, #9
 8009e50:	f000 f8da 	bl	800a008 <Set_Error>
					break;
 8009e54:	e0c5      	b.n	8009fe2 <HAL_FDCAN_RxFifo0Callback+0x5de>
					Config_Can_Sync_Delay((((uint16_t)CANRxData[2])<<8)+(((uint16_t)CANRxData[3])<<0));
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	021b      	lsls	r3, r3, #8
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	4413      	add	r3, r2
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fd fb1e 	bl	80074a8 <Config_Can_Sync_Delay>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 8009e6c:	6a3b      	ldr	r3, [r7, #32]
 8009e6e:	0c1b      	lsrs	r3, r3, #16
 8009e70:	2b03      	cmp	r3, #3
 8009e72:	f200 80b8 	bhi.w	8009fe6 <HAL_FDCAN_RxFifo0Callback+0x5e2>
 8009e76:	2009      	movs	r0, #9
 8009e78:	f000 f8c6 	bl	800a008 <Set_Error>
					break;
 8009e7c:	e0b3      	b.n	8009fe6 <HAL_FDCAN_RxFifo0Callback+0x5e2>
					Config_Temperature_Voltage_Reading((((uint16_t)CANRxData[2])<<8)+(((uint16_t)CANRxData[3])<<0), CANRxData[4], CANRxData[5]);
 8009e7e:	7bbb      	ldrb	r3, [r7, #14]
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	021b      	lsls	r3, r3, #8
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	4413      	add	r3, r2
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	7c39      	ldrb	r1, [r7, #16]
 8009e90:	7c7a      	ldrb	r2, [r7, #17]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fd fb1a 	bl	80074cc <Config_Temperature_Voltage_Reading>
					if ((RxHeader.DataLength>>16) < 6) { Set_Error(ERR_COMMAND_SHORT); }
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	0c1b      	lsrs	r3, r3, #16
 8009e9c:	2b05      	cmp	r3, #5
 8009e9e:	f200 80a4 	bhi.w	8009fea <HAL_FDCAN_RxFifo0Callback+0x5e6>
 8009ea2:	2009      	movs	r0, #9
 8009ea4:	f000 f8b0 	bl	800a008 <Set_Error>
					break;
 8009ea8:	e09f      	b.n	8009fea <HAL_FDCAN_RxFifo0Callback+0x5e6>
					Config_Default_DC(CANRxData[2], CANRxData);
 8009eaa:	7bbb      	ldrb	r3, [r7, #14]
 8009eac:	f107 020c 	add.w	r2, r7, #12
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fd fb48 	bl	8007548 <Config_Default_DC>
					if ((RxHeader.DataLength>>16) < (3+((CANRxData[2]>>4)&1))+((CANRxData[2]>>3)&1)+((CANRxData[2]>>2)&1)+((CANRxData[2]>>1)&1)+((CANRxData[2]>>0)&1)) { Set_Error(ERR_COMMAND_SHORT); }
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	0c1b      	lsrs	r3, r3, #16
 8009ebc:	7bba      	ldrb	r2, [r7, #14]
 8009ebe:	0912      	lsrs	r2, r2, #4
 8009ec0:	b2d2      	uxtb	r2, r2
 8009ec2:	f002 0201 	and.w	r2, r2, #1
 8009ec6:	1cd1      	adds	r1, r2, #3
 8009ec8:	7bba      	ldrb	r2, [r7, #14]
 8009eca:	08d2      	lsrs	r2, r2, #3
 8009ecc:	b2d2      	uxtb	r2, r2
 8009ece:	f002 0201 	and.w	r2, r2, #1
 8009ed2:	4411      	add	r1, r2
 8009ed4:	7bba      	ldrb	r2, [r7, #14]
 8009ed6:	0892      	lsrs	r2, r2, #2
 8009ed8:	b2d2      	uxtb	r2, r2
 8009eda:	f002 0201 	and.w	r2, r2, #1
 8009ede:	4411      	add	r1, r2
 8009ee0:	7bba      	ldrb	r2, [r7, #14]
 8009ee2:	0852      	lsrs	r2, r2, #1
 8009ee4:	b2d2      	uxtb	r2, r2
 8009ee6:	f002 0201 	and.w	r2, r2, #1
 8009eea:	4411      	add	r1, r2
 8009eec:	7bba      	ldrb	r2, [r7, #14]
 8009eee:	f002 0201 	and.w	r2, r2, #1
 8009ef2:	440a      	add	r2, r1
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d27a      	bcs.n	8009fee <HAL_FDCAN_RxFifo0Callback+0x5ea>
 8009ef8:	2009      	movs	r0, #9
 8009efa:	f000 f885 	bl	800a008 <Set_Error>
					break;
 8009efe:	e076      	b.n	8009fee <HAL_FDCAN_RxFifo0Callback+0x5ea>
					Config_PWM_Prescalers(CANRxData[2], CANRxData);
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	f107 020c 	add.w	r2, r7, #12
 8009f06:	4611      	mov	r1, r2
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fd fb4b 	bl	80075a4 <Config_PWM_Prescalers>
					if ((RxHeader.DataLength>>16) < (3+((CANRxData[2]>>4)&1))+((CANRxData[2]>>3)&1)+((CANRxData[2]>>2)&1)+((CANRxData[2]>>1)&1)+((CANRxData[2]>>0)&1)) { Set_Error(ERR_COMMAND_SHORT); }
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	0c1b      	lsrs	r3, r3, #16
 8009f12:	7bba      	ldrb	r2, [r7, #14]
 8009f14:	0912      	lsrs	r2, r2, #4
 8009f16:	b2d2      	uxtb	r2, r2
 8009f18:	f002 0201 	and.w	r2, r2, #1
 8009f1c:	1cd1      	adds	r1, r2, #3
 8009f1e:	7bba      	ldrb	r2, [r7, #14]
 8009f20:	08d2      	lsrs	r2, r2, #3
 8009f22:	b2d2      	uxtb	r2, r2
 8009f24:	f002 0201 	and.w	r2, r2, #1
 8009f28:	4411      	add	r1, r2
 8009f2a:	7bba      	ldrb	r2, [r7, #14]
 8009f2c:	0892      	lsrs	r2, r2, #2
 8009f2e:	b2d2      	uxtb	r2, r2
 8009f30:	f002 0201 	and.w	r2, r2, #1
 8009f34:	4411      	add	r1, r2
 8009f36:	7bba      	ldrb	r2, [r7, #14]
 8009f38:	0852      	lsrs	r2, r2, #1
 8009f3a:	b2d2      	uxtb	r2, r2
 8009f3c:	f002 0201 	and.w	r2, r2, #1
 8009f40:	4411      	add	r1, r2
 8009f42:	7bba      	ldrb	r2, [r7, #14]
 8009f44:	f002 0201 	and.w	r2, r2, #1
 8009f48:	440a      	add	r2, r1
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d251      	bcs.n	8009ff2 <HAL_FDCAN_RxFifo0Callback+0x5ee>
 8009f4e:	2009      	movs	r0, #9
 8009f50:	f000 f85a 	bl	800a008 <Set_Error>
					break;
 8009f54:	e04d      	b.n	8009ff2 <HAL_FDCAN_RxFifo0Callback+0x5ee>
					Config_DIO_Pins(CANRxData[2], CANRxData[3], CANRxData[4], CANRxData[5]);
 8009f56:	7bb8      	ldrb	r0, [r7, #14]
 8009f58:	7bf9      	ldrb	r1, [r7, #15]
 8009f5a:	7c3a      	ldrb	r2, [r7, #16]
 8009f5c:	7c7b      	ldrb	r3, [r7, #17]
 8009f5e:	f7fd fb4f 	bl	8007600 <Config_DIO_Pins>
					if ((RxHeader.DataLength>>16) < 6) { Set_Error(ERR_COMMAND_SHORT); }
 8009f62:	6a3b      	ldr	r3, [r7, #32]
 8009f64:	0c1b      	lsrs	r3, r3, #16
 8009f66:	2b05      	cmp	r3, #5
 8009f68:	d845      	bhi.n	8009ff6 <HAL_FDCAN_RxFifo0Callback+0x5f2>
 8009f6a:	2009      	movs	r0, #9
 8009f6c:	f000 f84c 	bl	800a008 <Set_Error>
					break;
 8009f70:	e041      	b.n	8009ff6 <HAL_FDCAN_RxFifo0Callback+0x5f2>
					Config_Interrupt_Power(CANRxData[2], CANRxData[3], CANRxData[4], CANRxData[5], CANRxData[6]);
 8009f72:	7bb8      	ldrb	r0, [r7, #14]
 8009f74:	7bf9      	ldrb	r1, [r7, #15]
 8009f76:	7c3a      	ldrb	r2, [r7, #16]
 8009f78:	7c7c      	ldrb	r4, [r7, #17]
 8009f7a:	7cbb      	ldrb	r3, [r7, #18]
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	4623      	mov	r3, r4
 8009f80:	f7fd fbe4 	bl	800774c <Config_Interrupt_Power>
					if ((RxHeader.DataLength>>16) < 7) { Set_Error(ERR_COMMAND_SHORT); }
 8009f84:	6a3b      	ldr	r3, [r7, #32]
 8009f86:	0c1b      	lsrs	r3, r3, #16
 8009f88:	2b06      	cmp	r3, #6
 8009f8a:	d836      	bhi.n	8009ffa <HAL_FDCAN_RxFifo0Callback+0x5f6>
 8009f8c:	2009      	movs	r0, #9
 8009f8e:	f000 f83b 	bl	800a008 <Set_Error>
					break;
 8009f92:	e032      	b.n	8009ffa <HAL_FDCAN_RxFifo0Callback+0x5f6>
					Config_Interrupt_Can(CANRxData[2], CANRxData[3], CANRxData[4]);
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	7bf9      	ldrb	r1, [r7, #15]
 8009f98:	7c3a      	ldrb	r2, [r7, #16]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fd fc04 	bl	80077a8 <Config_Interrupt_Can>
					if ((RxHeader.DataLength>>16) < 5) { Set_Error(ERR_COMMAND_SHORT); }
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	0c1b      	lsrs	r3, r3, #16
 8009fa4:	2b04      	cmp	r3, #4
 8009fa6:	d82a      	bhi.n	8009ffe <HAL_FDCAN_RxFifo0Callback+0x5fa>
 8009fa8:	2009      	movs	r0, #9
 8009faa:	f000 f82d 	bl	800a008 <Set_Error>
					break;
 8009fae:	e026      	b.n	8009ffe <HAL_FDCAN_RxFifo0Callback+0x5fa>
					Set_Error(ERR_INVALID_COMMAND);
 8009fb0:	2008      	movs	r0, #8
 8009fb2:	f000 f829 	bl	800a008 <Set_Error>
					break;
 8009fb6:	bf00      	nop
 8009fb8:	e022      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
			Set_Error(ERR_RECIEVED_INVALID_ID);
 8009fba:	200a      	movs	r0, #10
 8009fbc:	f000 f824 	bl	800a008 <Set_Error>
}
 8009fc0:	e01e      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
			}
 8009fc2:	bf00      	nop
 8009fc4:	e01c      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009fc6:	bf00      	nop
 8009fc8:	e01a      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009fca:	bf00      	nop
 8009fcc:	e018      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009fce:	bf00      	nop
 8009fd0:	e016      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009fd2:	bf00      	nop
 8009fd4:	e014      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009fd6:	bf00      	nop
 8009fd8:	e012      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009fda:	bf00      	nop
 8009fdc:	e010      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009fde:	bf00      	nop
 8009fe0:	e00e      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009fe2:	bf00      	nop
 8009fe4:	e00c      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009fe6:	bf00      	nop
 8009fe8:	e00a      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009fea:	bf00      	nop
 8009fec:	e008      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009fee:	bf00      	nop
 8009ff0:	e006      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009ff2:	bf00      	nop
 8009ff4:	e004      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009ff6:	bf00      	nop
 8009ff8:	e002      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009ffa:	bf00      	nop
 8009ffc:	e000      	b.n	800a000 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009ffe:	bf00      	nop
}
 800a000:	bf00      	nop
 800a002:	3744      	adds	r7, #68	; 0x44
 800a004:	46bd      	mov	sp, r7
 800a006:	bd90      	pop	{r4, r7, pc}

0800a008 <Set_Error>:


void Set_Error(uint32_t error)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
	canErrors[(error/32)]  |= (1<<(error%32));
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	095b      	lsrs	r3, r3, #5
 800a014:	4a10      	ldr	r2, [pc, #64]	; (800a058 <Set_Error+0x50>)
 800a016:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a01a:	6879      	ldr	r1, [r7, #4]
 800a01c:	f001 011f 	and.w	r1, r1, #31
 800a020:	2001      	movs	r0, #1
 800a022:	fa00 f101 	lsl.w	r1, r0, r1
 800a026:	430a      	orrs	r2, r1
 800a028:	490b      	ldr	r1, [pc, #44]	; (800a058 <Set_Error+0x50>)
 800a02a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	canErrorToTransmit |= (1<<(error/32));
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	095b      	lsrs	r3, r3, #5
 800a032:	2201      	movs	r2, #1
 800a034:	fa02 f303 	lsl.w	r3, r2, r3
 800a038:	b25a      	sxtb	r2, r3
 800a03a:	4b08      	ldr	r3, [pc, #32]	; (800a05c <Set_Error+0x54>)
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	b25b      	sxtb	r3, r3
 800a040:	4313      	orrs	r3, r2
 800a042:	b25b      	sxtb	r3, r3
 800a044:	b2da      	uxtb	r2, r3
 800a046:	4b05      	ldr	r3, [pc, #20]	; (800a05c <Set_Error+0x54>)
 800a048:	701a      	strb	r2, [r3, #0]
}
 800a04a:	bf00      	nop
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	20000224 	.word	0x20000224
 800a05c:	20000598 	.word	0x20000598

0800a060 <Send_Error>:

void Send_Error(void)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b08a      	sub	sp, #40	; 0x28
 800a064:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<8; i++)
 800a066:	2300      	movs	r3, #0
 800a068:	627b      	str	r3, [r7, #36]	; 0x24
 800a06a:	e06d      	b.n	800a148 <Send_Error+0xe8>
	{
		if (canErrorToTransmit&(1<<i))
 800a06c:	4b39      	ldr	r3, [pc, #228]	; (800a154 <Send_Error+0xf4>)
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	461a      	mov	r2, r3
 800a072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a074:	fa42 f303 	asr.w	r3, r2, r3
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d060      	beq.n	800a142 <Send_Error+0xe2>
		{
			if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) > 0)
 800a080:	4835      	ldr	r0, [pc, #212]	; (800a158 <Send_Error+0xf8>)
 800a082:	f7f8 fc8b 	bl	800299c <HAL_FDCAN_GetTxFifoFreeLevel>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d05a      	beq.n	800a142 <Send_Error+0xe2>
			{
				FDCAN_TxHeaderTypeDef TxHeader;

				TxHeader.Identifier = CANID_ERROR;
 800a08c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a090:	603b      	str	r3, [r7, #0]
				TxHeader.DataLength = FDCAN_DLC_BYTES_6;
 800a092:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 800a096:	60fb      	str	r3, [r7, #12]

				CANTxData[0]=ID;
 800a098:	4b30      	ldr	r3, [pc, #192]	; (800a15c <Send_Error+0xfc>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	701a      	strb	r2, [r3, #0]
				CANTxData[1]=i;
 800a09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a0:	b2da      	uxtb	r2, r3
 800a0a2:	4b2e      	ldr	r3, [pc, #184]	; (800a15c <Send_Error+0xfc>)
 800a0a4:	705a      	strb	r2, [r3, #1]
				CANTxData[2]=(canErrors[i]>>24)&0xFF;
 800a0a6:	4a2e      	ldr	r2, [pc, #184]	; (800a160 <Send_Error+0x100>)
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0ae:	0e1b      	lsrs	r3, r3, #24
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	4b2a      	ldr	r3, [pc, #168]	; (800a15c <Send_Error+0xfc>)
 800a0b4:	709a      	strb	r2, [r3, #2]
				CANTxData[3]=(canErrors[i]>>16)&0xFF;
 800a0b6:	4a2a      	ldr	r2, [pc, #168]	; (800a160 <Send_Error+0x100>)
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0be:	0c1b      	lsrs	r3, r3, #16
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	4b26      	ldr	r3, [pc, #152]	; (800a15c <Send_Error+0xfc>)
 800a0c4:	70da      	strb	r2, [r3, #3]
				CANTxData[4]=(canErrors[i]>>8)&0xFF;
 800a0c6:	4a26      	ldr	r2, [pc, #152]	; (800a160 <Send_Error+0x100>)
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0ce:	0a1b      	lsrs	r3, r3, #8
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	4b22      	ldr	r3, [pc, #136]	; (800a15c <Send_Error+0xfc>)
 800a0d4:	711a      	strb	r2, [r3, #4]
				CANTxData[5]=(canErrors[i]>>0)&0xFF;
 800a0d6:	4a22      	ldr	r2, [pc, #136]	; (800a160 <Send_Error+0x100>)
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	4b1e      	ldr	r3, [pc, #120]	; (800a15c <Send_Error+0xfc>)
 800a0e2:	715a      	strb	r2, [r3, #5]

				TxHeader.IdType = FDCAN_STANDARD_ID;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	607b      	str	r3, [r7, #4]
				TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	60bb      	str	r3, [r7, #8]
				TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	613b      	str	r3, [r7, #16]
				TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	617b      	str	r3, [r7, #20]
				TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	61bb      	str	r3, [r7, #24]
				TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	61fb      	str	r3, [r7, #28]
				TxHeader.MessageMarker = 0;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	623b      	str	r3, [r7, #32]

				if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 800a100:	463b      	mov	r3, r7
 800a102:	4a16      	ldr	r2, [pc, #88]	; (800a15c <Send_Error+0xfc>)
 800a104:	4619      	mov	r1, r3
 800a106:	4814      	ldr	r0, [pc, #80]	; (800a158 <Send_Error+0xf8>)
 800a108:	f7f8 fb2a 	bl	8002760 <HAL_FDCAN_AddMessageToTxFifoQ>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <Send_Error+0xba>
				{
					Set_Error(ERR_SEND_FAILED);
 800a112:	2006      	movs	r0, #6
 800a114:	f7ff ff78 	bl	800a008 <Set_Error>
 800a118:	e019      	b.n	800a14e <Send_Error+0xee>
					return;
				}
				else
				{
					//if we sent the error message clear the error so that if it only occurs once the error is not sent continuously
					canErrors[i]=0;
 800a11a:	4a11      	ldr	r2, [pc, #68]	; (800a160 <Send_Error+0x100>)
 800a11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11e:	2100      	movs	r1, #0
 800a120:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					canErrorToTransmit &= ~(1<<i);
 800a124:	2201      	movs	r2, #1
 800a126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a128:	fa02 f303 	lsl.w	r3, r2, r3
 800a12c:	b25b      	sxtb	r3, r3
 800a12e:	43db      	mvns	r3, r3
 800a130:	b25a      	sxtb	r2, r3
 800a132:	4b08      	ldr	r3, [pc, #32]	; (800a154 <Send_Error+0xf4>)
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	b25b      	sxtb	r3, r3
 800a138:	4013      	ands	r3, r2
 800a13a:	b25b      	sxtb	r3, r3
 800a13c:	b2da      	uxtb	r2, r3
 800a13e:	4b05      	ldr	r3, [pc, #20]	; (800a154 <Send_Error+0xf4>)
 800a140:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	3301      	adds	r3, #1
 800a146:	627b      	str	r3, [r7, #36]	; 0x24
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	2b07      	cmp	r3, #7
 800a14c:	d98e      	bls.n	800a06c <Send_Error+0xc>
				}
			}
		}
	}
}
 800a14e:	3728      	adds	r7, #40	; 0x28
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	20000598 	.word	0x20000598
 800a158:	20000444 	.word	0x20000444
 800a15c:	20000920 	.word	0x20000920
 800a160:	20000224 	.word	0x20000224

0800a164 <Write_PWM>:

void Write_PWM(uint32_t DIO_channel, uint16_t pulse) //TODO: make sure the pwm signal works nicely in real life
{
 800a164:	b5b0      	push	{r4, r5, r7, lr}
 800a166:	b09a      	sub	sp, #104	; 0x68
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	460b      	mov	r3, r1
 800a16e:	807b      	strh	r3, [r7, #2]
	if(PWM_Out_EN&(1<<DIO_channel))
 800a170:	4b60      	ldr	r3, [pc, #384]	; (800a2f4 <Write_PWM+0x190>)
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	461a      	mov	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	fa42 f303 	asr.w	r3, r2, r3
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 80af 	beq.w	800a2e4 <Write_PWM+0x180>
	{
		TIM_HandleTypeDef htim = {0};
 800a186:	f107 0308 	add.w	r3, r7, #8
 800a18a:	2240      	movs	r2, #64	; 0x40
 800a18c:	2100      	movs	r1, #0
 800a18e:	4618      	mov	r0, r3
 800a190:	f002 f808 	bl	800c1a4 <memset>
		uint32_t channel = 0;
 800a194:	2300      	movs	r3, #0
 800a196:	667b      	str	r3, [r7, #100]	; 0x64
		TIM_OC_InitTypeDef sConfigOC = {0};
 800a198:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a19c:	2200      	movs	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]
 800a1a0:	605a      	str	r2, [r3, #4]
 800a1a2:	609a      	str	r2, [r3, #8]
 800a1a4:	60da      	str	r2, [r3, #12]
 800a1a6:	611a      	str	r2, [r3, #16]
 800a1a8:	615a      	str	r2, [r3, #20]
 800a1aa:	619a      	str	r2, [r3, #24]

		if(pulse>255) { pulse=255; }
 800a1ac:	887b      	ldrh	r3, [r7, #2]
 800a1ae:	2bff      	cmp	r3, #255	; 0xff
 800a1b0:	d901      	bls.n	800a1b6 <Write_PWM+0x52>
 800a1b2:	23ff      	movs	r3, #255	; 0xff
 800a1b4:	807b      	strh	r3, [r7, #2]

		switch(DIO_channel)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b04      	cmp	r3, #4
 800a1ba:	d862      	bhi.n	800a282 <Write_PWM+0x11e>
 800a1bc:	a201      	add	r2, pc, #4	; (adr r2, 800a1c4 <Write_PWM+0x60>)
 800a1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c2:	bf00      	nop
 800a1c4:	0800a1d9 	.word	0x0800a1d9
 800a1c8:	0800a1fb 	.word	0x0800a1fb
 800a1cc:	0800a21d 	.word	0x0800a21d
 800a1d0:	0800a23f 	.word	0x0800a23f
 800a1d4:	0800a261 	.word	0x0800a261
		{
			case 0: //PB3
				htim = htim2;
 800a1d8:	4b47      	ldr	r3, [pc, #284]	; (800a2f8 <Write_PWM+0x194>)
 800a1da:	f107 0408 	add.w	r4, r7, #8
 800a1de:	461d      	mov	r5, r3
 800a1e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a1f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				channel = TIM_CHANNEL_2;
 800a1f4:	2304      	movs	r3, #4
 800a1f6:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 800a1f8:	e048      	b.n	800a28c <Write_PWM+0x128>
			case 1: //PB4
				htim = htim3;
 800a1fa:	4b40      	ldr	r3, [pc, #256]	; (800a2fc <Write_PWM+0x198>)
 800a1fc:	f107 0408 	add.w	r4, r7, #8
 800a200:	461d      	mov	r5, r3
 800a202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a20a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a20c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a20e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				channel = TIM_CHANNEL_1;
 800a216:	2300      	movs	r3, #0
 800a218:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 800a21a:	e037      	b.n	800a28c <Write_PWM+0x128>
			case 2: //PB5
				htim = htim17;
 800a21c:	4b38      	ldr	r3, [pc, #224]	; (800a300 <Write_PWM+0x19c>)
 800a21e:	f107 0408 	add.w	r4, r7, #8
 800a222:	461d      	mov	r5, r3
 800a224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a22a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a22c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a22e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a230:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				channel = TIM_CHANNEL_1;
 800a238:	2300      	movs	r3, #0
 800a23a:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 800a23c:	e026      	b.n	800a28c <Write_PWM+0x128>
			case 3: //PB6
				htim = htim4;
 800a23e:	4b31      	ldr	r3, [pc, #196]	; (800a304 <Write_PWM+0x1a0>)
 800a240:	f107 0408 	add.w	r4, r7, #8
 800a244:	461d      	mov	r5, r3
 800a246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a24a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a24c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a24e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a252:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a256:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				channel = TIM_CHANNEL_1;
 800a25a:	2300      	movs	r3, #0
 800a25c:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 800a25e:	e015      	b.n	800a28c <Write_PWM+0x128>
			case 4: //PA15
				htim = htim8;
 800a260:	4b29      	ldr	r3, [pc, #164]	; (800a308 <Write_PWM+0x1a4>)
 800a262:	f107 0408 	add.w	r4, r7, #8
 800a266:	461d      	mov	r5, r3
 800a268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a26a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a26c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a26e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a274:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				channel = TIM_CHANNEL_1;
 800a27c:	2300      	movs	r3, #0
 800a27e:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 800a280:	e004      	b.n	800a28c <Write_PWM+0x128>
			default:
				Set_Error(WARN_PWM_INVALID_CHANNEL);
 800a282:	f240 1001 	movw	r0, #257	; 0x101
 800a286:	f7ff febf 	bl	800a008 <Set_Error>
 800a28a:	e02f      	b.n	800a2ec <Write_PWM+0x188>
				return;
		}

		if (HAL_TIM_PWM_Stop(&htim, channel) != HAL_OK)
 800a28c:	f107 0308 	add.w	r3, r7, #8
 800a290:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a292:	4618      	mov	r0, r3
 800a294:	f7fa fe78 	bl	8004f88 <HAL_TIM_PWM_Stop>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <Write_PWM+0x13e>
		{
			Error_Handler();
 800a29e:	f001 f8fb 	bl	800b498 <Error_Handler>
		}
		/*htim.Init.Period = 255;
		HAL_TIM_PWM_Init(&htim);*/
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a2a2:	2360      	movs	r3, #96	; 0x60
 800a2a4:	64bb      	str	r3, [r7, #72]	; 0x48
		sConfigOC.Pulse = pulse;
 800a2a6:	887b      	ldrh	r3, [r7, #2]
 800a2a8:	64fb      	str	r3, [r7, #76]	; 0x4c
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	653b      	str	r3, [r7, #80]	; 0x50
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	65bb      	str	r3, [r7, #88]	; 0x58
		if (HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, channel) != HAL_OK)
 800a2b2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a2b6:	f107 0308 	add.w	r3, r7, #8
 800a2ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7fb f917 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <Write_PWM+0x168>
		{
			Error_Handler();
 800a2c8:	f001 f8e6 	bl	800b498 <Error_Handler>
		}
		if (HAL_TIM_PWM_Start(&htim, channel) != HAL_OK)
 800a2cc:	f107 0308 	add.w	r3, r7, #8
 800a2d0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7fa fe00 	bl	8004ed8 <HAL_TIM_PWM_Start>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d006      	beq.n	800a2ec <Write_PWM+0x188>
		{
			Error_Handler();
 800a2de:	f001 f8db 	bl	800b498 <Error_Handler>
 800a2e2:	e003      	b.n	800a2ec <Write_PWM+0x188>
		}
	}
	else
	{
		Set_Error(WARN_PWM_NOT_ENABLED);
 800a2e4:	f44f 7082 	mov.w	r0, #260	; 0x104
 800a2e8:	f7ff fe8e 	bl	800a008 <Set_Error>
	}
}
 800a2ec:	3768      	adds	r7, #104	; 0x68
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bdb0      	pop	{r4, r5, r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	200009f0 	.word	0x200009f0
 800a2f8:	20000948 	.word	0x20000948
 800a2fc:	20000544 	.word	0x20000544
 800a300:	20000400 	.word	0x20000400
 800a304:	200001e0 	.word	0x200001e0
 800a308:	2000015c 	.word	0x2000015c

0800a30c <SystemClock_Config>:


void SystemClock_Config(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b0a4      	sub	sp, #144	; 0x90
 800a310:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a312:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a316:	2238      	movs	r2, #56	; 0x38
 800a318:	2100      	movs	r1, #0
 800a31a:	4618      	mov	r0, r3
 800a31c:	f001 ff42 	bl	800c1a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a320:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a324:	2200      	movs	r2, #0
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	605a      	str	r2, [r3, #4]
 800a32a:	609a      	str	r2, [r3, #8]
 800a32c:	60da      	str	r2, [r3, #12]
 800a32e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a330:	463b      	mov	r3, r7
 800a332:	2244      	movs	r2, #68	; 0x44
 800a334:	2100      	movs	r1, #0
 800a336:	4618      	mov	r0, r3
 800a338:	f001 ff34 	bl	800c1a4 <memset>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800a33c:	2000      	movs	r0, #0
 800a33e:	f7f9 fd87 	bl	8003e50 <HAL_PWREx_ControlVoltageScaling>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a342:	2301      	movs	r3, #1
 800a344:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800a346:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800a34a:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a34c:	2302      	movs	r3, #2
 800a34e:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a350:	2303      	movs	r3, #3
 800a352:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800a354:	2304      	movs	r3, #4
 800a356:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800a358:	2355      	movs	r3, #85	; 0x55
 800a35a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a35e:	2302      	movs	r3, #2
 800a360:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a364:	2302      	movs	r3, #2
 800a366:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a36a:	2302      	movs	r3, #2
 800a36c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a370:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a374:	4618      	mov	r0, r3
 800a376:	f7f9 fe0f 	bl	8003f98 <HAL_RCC_OscConfig>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <SystemClock_Config+0x78>
	{
		Error_Handler();
 800a380:	f001 f88a 	bl	800b498 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800a384:	230f      	movs	r3, #15
 800a386:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a388:	2303      	movs	r3, #3
 800a38a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a38c:	2300      	movs	r3, #0
 800a38e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a390:	2300      	movs	r3, #0
 800a392:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a394:	2300      	movs	r3, #0
 800a396:	657b      	str	r3, [r7, #84]	; 0x54
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 800a398:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a39c:	2108      	movs	r1, #8
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fa f912 	bl	80045c8 <HAL_RCC_ClockConfig>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <SystemClock_Config+0xa2>
	{
		Error_Handler();
 800a3aa:	f001 f875 	bl	800b498 <Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
 800a3ae:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800a3b2:	603b      	str	r3, [r7, #0]
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800a3b8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a3be:	463b      	mov	r3, r7
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fa faed 	bl	80049a0 <HAL_RCCEx_PeriphCLKConfig>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 800a3cc:	f001 f864 	bl	800b498 <Error_Handler>
	}
}
 800a3d0:	bf00      	nop
 800a3d2:	3790      	adds	r7, #144	; 0x90
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b08c      	sub	sp, #48	; 0x30
 800a3dc:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode = {0};
 800a3de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	601a      	str	r2, [r3, #0]
 800a3e6:	605a      	str	r2, [r3, #4]
 800a3e8:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 800a3ea:	1d3b      	adds	r3, r7, #4
 800a3ec:	2220      	movs	r2, #32
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f001 fed7 	bl	800c1a4 <memset>

	hadc1.Instance = ADC1;
 800a3f6:	4b47      	ldr	r3, [pc, #284]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a3f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a3fc:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a3fe:	4b45      	ldr	r3, [pc, #276]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a400:	2200      	movs	r2, #0
 800a402:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800a404:	4b43      	ldr	r3, [pc, #268]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a406:	2208      	movs	r2, #8
 800a408:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a40a:	4b42      	ldr	r3, [pc, #264]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 800a410:	4b40      	ldr	r3, [pc, #256]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a412:	2200      	movs	r2, #0
 800a414:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800a416:	4b3f      	ldr	r3, [pc, #252]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a418:	2201      	movs	r2, #1
 800a41a:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a41c:	4b3d      	ldr	r3, [pc, #244]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a41e:	2204      	movs	r2, #4
 800a420:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800a422:	4b3c      	ldr	r3, [pc, #240]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a424:	2200      	movs	r2, #0
 800a426:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800a428:	4b3a      	ldr	r3, [pc, #232]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a42a:	2200      	movs	r2, #0
 800a42c:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 3;
 800a42e:	4b39      	ldr	r3, [pc, #228]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a430:	2203      	movs	r2, #3
 800a432:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = ENABLE;
 800a434:	4b37      	ldr	r3, [pc, #220]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a436:	2201      	movs	r2, #1
 800a438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a43c:	4b35      	ldr	r3, [pc, #212]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a43e:	2200      	movs	r2, #0
 800a440:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a442:	4b34      	ldr	r3, [pc, #208]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a444:	2200      	movs	r2, #0
 800a446:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800a448:	4b32      	ldr	r3, [pc, #200]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800a450:	4b30      	ldr	r3, [pc, #192]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a452:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a456:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 800a458:	4b2e      	ldr	r3, [pc, #184]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a460:	482c      	ldr	r0, [pc, #176]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a462:	f7f6 f9a3 	bl	80007ac <HAL_ADC_Init>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d001      	beq.n	800a470 <MX_ADC1_Init+0x98>
	{
		Error_Handler();
 800a46c:	f001 f814 	bl	800b498 <Error_Handler>
	}

	multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800a470:	2306      	movs	r3, #6
 800a472:	627b      	str	r3, [r7, #36]	; 0x24
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 800a474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a478:	62bb      	str	r3, [r7, #40]	; 0x28
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_12CYCLES;
 800a47a:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 800a47e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800a480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a484:	4619      	mov	r1, r3
 800a486:	4823      	ldr	r0, [pc, #140]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a488:	f7f7 faa8 	bl	80019dc <HAL_ADCEx_MultiModeConfigChannel>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d001      	beq.n	800a496 <MX_ADC1_Init+0xbe>
	{
		Error_Handler();
 800a492:	f001 f801 	bl	800b498 <Error_Handler>
	}


	sConfig.Channel = ADC_CHANNEL_1;
 800a496:	4b20      	ldr	r3, [pc, #128]	; (800a518 <MX_ADC1_Init+0x140>)
 800a498:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800a49a:	2312      	movs	r3, #18
 800a49c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800a49e:	2307      	movs	r3, #7
 800a4a0:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a4a2:	237f      	movs	r3, #127	; 0x7f
 800a4a4:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a4a6:	2304      	movs	r3, #4
 800a4a8:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a4ae:	1d3b      	adds	r3, r7, #4
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	4818      	ldr	r0, [pc, #96]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a4b4:	f7f6 fb16 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <MX_ADC1_Init+0xea>
	{
		Error_Handler();
 800a4be:	f000 ffeb 	bl	800b498 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_2;
 800a4c2:	4b16      	ldr	r3, [pc, #88]	; (800a51c <MX_ADC1_Init+0x144>)
 800a4c4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800a4c6:	230c      	movs	r3, #12
 800a4c8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a4ca:	1d3b      	adds	r3, r7, #4
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	4811      	ldr	r0, [pc, #68]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a4d0:	f7f6 fb08 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d001      	beq.n	800a4de <MX_ADC1_Init+0x106>
	{
		Error_Handler();
 800a4da:	f000 ffdd 	bl	800b498 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_3;
 800a4de:	4b10      	ldr	r3, [pc, #64]	; (800a520 <MX_ADC1_Init+0x148>)
 800a4e0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800a4e2:	2306      	movs	r3, #6
 800a4e4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a4e6:	1d3b      	adds	r3, r7, #4
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	480a      	ldr	r0, [pc, #40]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a4ec:	f7f6 fafa 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <MX_ADC1_Init+0x122>
	{
		Error_Handler();
 800a4f6:	f000 ffcf 	bl	800b498 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800a4fa:	217f      	movs	r1, #127	; 0x7f
 800a4fc:	4805      	ldr	r0, [pc, #20]	; (800a514 <MX_ADC1_Init+0x13c>)
 800a4fe:	f7f7 f8b7 	bl	8001670 <HAL_ADCEx_Calibration_Start>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d001      	beq.n	800a50c <MX_ADC1_Init+0x134>
	{
		Error_Handler();
 800a508:	f000 ffc6 	bl	800b498 <Error_Handler>
	}
}
 800a50c:	bf00      	nop
 800a50e:	3730      	adds	r7, #48	; 0x30
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	200005f0 	.word	0x200005f0
 800a518:	04300002 	.word	0x04300002
 800a51c:	08600004 	.word	0x08600004
 800a520:	0c900008 	.word	0x0c900008

0800a524 <MX_ADC2_Init>:

static void MX_ADC2_Init(void)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b088      	sub	sp, #32
 800a528:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800a52a:	463b      	mov	r3, r7
 800a52c:	2220      	movs	r2, #32
 800a52e:	2100      	movs	r1, #0
 800a530:	4618      	mov	r0, r3
 800a532:	f001 fe37 	bl	800c1a4 <memset>

	hadc2.Instance = ADC2;
 800a536:	4b38      	ldr	r3, [pc, #224]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a538:	4a38      	ldr	r2, [pc, #224]	; (800a61c <MX_ADC2_Init+0xf8>)
 800a53a:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a53c:	4b36      	ldr	r3, [pc, #216]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a53e:	2200      	movs	r2, #0
 800a540:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 800a542:	4b35      	ldr	r3, [pc, #212]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a544:	2208      	movs	r2, #8
 800a546:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a548:	4b33      	ldr	r3, [pc, #204]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 800a54e:	4b32      	ldr	r3, [pc, #200]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a550:	2200      	movs	r2, #0
 800a552:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800a554:	4b30      	ldr	r3, [pc, #192]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a556:	2201      	movs	r2, #1
 800a558:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a55a:	4b2f      	ldr	r3, [pc, #188]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a55c:	2204      	movs	r2, #4
 800a55e:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800a560:	4b2d      	ldr	r3, [pc, #180]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a562:	2200      	movs	r2, #0
 800a564:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 800a566:	4b2c      	ldr	r3, [pc, #176]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a568:	2200      	movs	r2, #0
 800a56a:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 3;
 800a56c:	4b2a      	ldr	r3, [pc, #168]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a56e:	2203      	movs	r2, #3
 800a570:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = ENABLE;
 800a572:	4b29      	ldr	r3, [pc, #164]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a574:	2201      	movs	r2, #1
 800a576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.DMAContinuousRequests = ENABLE;
 800a57a:	4b27      	ldr	r3, [pc, #156]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800a582:	4b25      	ldr	r3, [pc, #148]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a588:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 800a58a:	4b23      	ldr	r3, [pc, #140]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800a592:	4821      	ldr	r0, [pc, #132]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a594:	f7f6 f90a 	bl	80007ac <HAL_ADC_Init>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <MX_ADC2_Init+0x7e>
	{
		Error_Handler();
 800a59e:	f000 ff7b 	bl	800b498 <Error_Handler>
	}


	sConfig.Channel = ADC_CHANNEL_10;
 800a5a2:	4b1f      	ldr	r3, [pc, #124]	; (800a620 <MX_ADC2_Init+0xfc>)
 800a5a4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800a5a6:	2306      	movs	r3, #6
 800a5a8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800a5aa:	2307      	movs	r3, #7
 800a5ac:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a5ae:	237f      	movs	r3, #127	; 0x7f
 800a5b0:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a5b2:	2304      	movs	r3, #4
 800a5b4:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a5ba:	463b      	mov	r3, r7
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4816      	ldr	r0, [pc, #88]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a5c0:	f7f6 fa90 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d001      	beq.n	800a5ce <MX_ADC2_Init+0xaa>
	{
		Error_Handler();
 800a5ca:	f000 ff65 	bl	800b498 <Error_Handler>
	}

	sConfig.Rank = ADC_REGULAR_RANK_2;
 800a5ce:	230c      	movs	r3, #12
 800a5d0:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a5d2:	463b      	mov	r3, r7
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	4810      	ldr	r0, [pc, #64]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a5d8:	f7f6 fa84 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <MX_ADC2_Init+0xc2>
	{
		Error_Handler();
 800a5e2:	f000 ff59 	bl	800b498 <Error_Handler>
	}

	sConfig.Rank = ADC_REGULAR_RANK_3;
 800a5e6:	2312      	movs	r3, #18
 800a5e8:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a5ea:	463b      	mov	r3, r7
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	480a      	ldr	r0, [pc, #40]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a5f0:	f7f6 fa78 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d001      	beq.n	800a5fe <MX_ADC2_Init+0xda>
	{
		Error_Handler();
 800a5fa:	f000 ff4d 	bl	800b498 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 800a5fe:	217f      	movs	r1, #127	; 0x7f
 800a600:	4805      	ldr	r0, [pc, #20]	; (800a618 <MX_ADC2_Init+0xf4>)
 800a602:	f7f7 f835 	bl	8001670 <HAL_ADCEx_Calibration_Start>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d001      	beq.n	800a610 <MX_ADC2_Init+0xec>
	{
		Error_Handler();
 800a60c:	f000 ff44 	bl	800b498 <Error_Handler>
	}
}
 800a610:	bf00      	nop
 800a612:	3720      	adds	r7, #32
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	20000248 	.word	0x20000248
 800a61c:	50000100 	.word	0x50000100
 800a620:	2a000400 	.word	0x2a000400

0800a624 <MX_FDCAN_Init>:

static void MX_FDCAN_Init(void)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b088      	sub	sp, #32
 800a628:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef	sFilterConfig;

	hfdcan.Instance = FDCAN1;
 800a62a:	4b52      	ldr	r3, [pc, #328]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a62c:	4a52      	ldr	r2, [pc, #328]	; (800a778 <MX_FDCAN_Init+0x154>)
 800a62e:	601a      	str	r2, [r3, #0]
	hfdcan.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800a630:	4b50      	ldr	r3, [pc, #320]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a632:	2200      	movs	r2, #0
 800a634:	605a      	str	r2, [r3, #4]
	hfdcan.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800a636:	4b4f      	ldr	r3, [pc, #316]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a638:	2200      	movs	r2, #0
 800a63a:	609a      	str	r2, [r3, #8]
	hfdcan.Init.Mode = FDCAN_MODE_NORMAL;
 800a63c:	4b4d      	ldr	r3, [pc, #308]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a63e:	2200      	movs	r2, #0
 800a640:	60da      	str	r2, [r3, #12]
	hfdcan.Init.AutoRetransmission = DISABLE;
 800a642:	4b4c      	ldr	r3, [pc, #304]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a644:	2200      	movs	r2, #0
 800a646:	741a      	strb	r2, [r3, #16]
	hfdcan.Init.TransmitPause = DISABLE;
 800a648:	4b4a      	ldr	r3, [pc, #296]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	745a      	strb	r2, [r3, #17]
	hfdcan.Init.ProtocolException = DISABLE;
 800a64e:	4b49      	ldr	r3, [pc, #292]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a650:	2200      	movs	r2, #0
 800a652:	749a      	strb	r2, [r3, #18]
	hfdcan.Init.NominalPrescaler = 1;
 800a654:	4b47      	ldr	r3, [pc, #284]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a656:	2201      	movs	r2, #1
 800a658:	615a      	str	r2, [r3, #20]
	hfdcan.Init.NominalSyncJumpWidth = 1;
 800a65a:	4b46      	ldr	r3, [pc, #280]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a65c:	2201      	movs	r2, #1
 800a65e:	619a      	str	r2, [r3, #24]
	hfdcan.Init.NominalTimeSeg1 = 13;
 800a660:	4b44      	ldr	r3, [pc, #272]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a662:	220d      	movs	r2, #13
 800a664:	61da      	str	r2, [r3, #28]
	hfdcan.Init.NominalTimeSeg2 = 2;
 800a666:	4b43      	ldr	r3, [pc, #268]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a668:	2202      	movs	r2, #2
 800a66a:	621a      	str	r2, [r3, #32]
	hfdcan.Init.DataPrescaler = 1;
 800a66c:	4b41      	ldr	r3, [pc, #260]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a66e:	2201      	movs	r2, #1
 800a670:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan.Init.DataSyncJumpWidth = 1;
 800a672:	4b40      	ldr	r3, [pc, #256]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a674:	2201      	movs	r2, #1
 800a676:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan.Init.DataTimeSeg1 = 1;
 800a678:	4b3e      	ldr	r3, [pc, #248]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a67a:	2201      	movs	r2, #1
 800a67c:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan.Init.DataTimeSeg2 = 1;
 800a67e:	4b3d      	ldr	r3, [pc, #244]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a680:	2201      	movs	r2, #1
 800a682:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan.Init.StdFiltersNbr = 2;
 800a684:	4b3b      	ldr	r3, [pc, #236]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a686:	2202      	movs	r2, #2
 800a688:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan.Init.ExtFiltersNbr = 0;
 800a68a:	4b3a      	ldr	r3, [pc, #232]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800a690:	4b38      	ldr	r3, [pc, #224]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a692:	2200      	movs	r2, #0
 800a694:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_FDCAN_Init(&hfdcan) != HAL_OK)
 800a696:	4837      	ldr	r0, [pc, #220]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a698:	f7f7 fe1c 	bl	80022d4 <HAL_FDCAN_Init>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d001      	beq.n	800a6a6 <MX_FDCAN_Init+0x82>
	{
		Error_Handler();
 800a6a2:	f000 fef9 	bl	800b498 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	2140      	movs	r1, #64	; 0x40
 800a6aa:	4832      	ldr	r0, [pc, #200]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a6ac:	f7f7 fff7 	bl	800269e <HAL_FDCAN_ConfigRxFifoOverwrite>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <MX_FDCAN_Init+0x96>
	{
		Error_Handler();
 800a6b6:	f000 feef 	bl	800b498 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	2141      	movs	r1, #65	; 0x41
 800a6be:	482d      	ldr	r0, [pc, #180]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a6c0:	f7f7 ffed 	bl	800269e <HAL_FDCAN_ConfigRxFifoOverwrite>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <MX_FDCAN_Init+0xaa>
	{
		Error_Handler();
 800a6ca:	f000 fee5 	bl	800b498 <Error_Handler>
	}

	//only accept config/request can messages and sync can messages
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800a6d6:	2302      	movs	r3, #2
 800a6d8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_CONFIG;
 800a6de:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800a6e2:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 800a6e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a6e8:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 800a6ea:	463b      	mov	r3, r7
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	4821      	ldr	r0, [pc, #132]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a6f0:	f7f7 ff4a 	bl	8002588 <HAL_FDCAN_ConfigFilter>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <MX_FDCAN_Init+0xda>
	{
		Error_Handler();
 800a6fa:	f000 fecd 	bl	800b498 <Error_Handler>
	}

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800a6fe:	2300      	movs	r3, #0
 800a700:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 1;
 800a702:	2301      	movs	r3, #1
 800a704:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800a706:	2302      	movs	r3, #2
 800a708:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800a70a:	2301      	movs	r3, #1
 800a70c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_SYNC;
 800a70e:	2380      	movs	r3, #128	; 0x80
 800a710:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 800a712:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a716:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 800a718:	463b      	mov	r3, r7
 800a71a:	4619      	mov	r1, r3
 800a71c:	4815      	ldr	r0, [pc, #84]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a71e:	f7f7 ff33 	bl	8002588 <HAL_FDCAN_ConfigFilter>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d001      	beq.n	800a72c <MX_FDCAN_Init+0x108>
	{
		Error_Handler();
 800a728:	f000 feb6 	bl	800b498 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 800a72c:	2301      	movs	r3, #1
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	2301      	movs	r3, #1
 800a732:	2202      	movs	r2, #2
 800a734:	2102      	movs	r1, #2
 800a736:	480f      	ldr	r0, [pc, #60]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a738:	f7f7 ff80 	bl	800263c <HAL_FDCAN_ConfigGlobalFilter>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <MX_FDCAN_Init+0x122>
	{
		Error_Handler();
 800a742:	f000 fea9 	bl	800b498 <Error_Handler>
	}

	if(HAL_FDCAN_Start(&hfdcan) != HAL_OK)
 800a746:	480b      	ldr	r0, [pc, #44]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a748:	f7f7 ffe2 	bl	8002710 <HAL_FDCAN_Start>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <MX_FDCAN_Init+0x132>
	{
		Error_Handler();
 800a752:	f000 fea1 	bl	800b498 <Error_Handler>
	}
	if(HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800a756:	2200      	movs	r2, #0
 800a758:	2101      	movs	r1, #1
 800a75a:	4806      	ldr	r0, [pc, #24]	; (800a774 <MX_FDCAN_Init+0x150>)
 800a75c:	f7f8 f930 	bl	80029c0 <HAL_FDCAN_ActivateNotification>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d001      	beq.n	800a76a <MX_FDCAN_Init+0x146>
	{
		Error_Handler();
 800a766:	f000 fe97 	bl	800b498 <Error_Handler>
	}
}
 800a76a:	bf00      	nop
 800a76c:	3718      	adds	r7, #24
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20000444 	.word	0x20000444
 800a778:	40006400 	.word	0x40006400

0800a77c <MX_DMA_Init>:

static void MX_DMA_Init(void) 
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800a782:	4b16      	ldr	r3, [pc, #88]	; (800a7dc <MX_DMA_Init+0x60>)
 800a784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a786:	4a15      	ldr	r2, [pc, #84]	; (800a7dc <MX_DMA_Init+0x60>)
 800a788:	f043 0304 	orr.w	r3, r3, #4
 800a78c:	6493      	str	r3, [r2, #72]	; 0x48
 800a78e:	4b13      	ldr	r3, [pc, #76]	; (800a7dc <MX_DMA_Init+0x60>)
 800a790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a792:	f003 0304 	and.w	r3, r3, #4
 800a796:	607b      	str	r3, [r7, #4]
 800a798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a79a:	4b10      	ldr	r3, [pc, #64]	; (800a7dc <MX_DMA_Init+0x60>)
 800a79c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a79e:	4a0f      	ldr	r2, [pc, #60]	; (800a7dc <MX_DMA_Init+0x60>)
 800a7a0:	f043 0301 	orr.w	r3, r3, #1
 800a7a4:	6493      	str	r3, [r2, #72]	; 0x48
 800a7a6:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <MX_DMA_Init+0x60>)
 800a7a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	603b      	str	r3, [r7, #0]
 800a7b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	200b      	movs	r0, #11
 800a7b8:	f7f7 fa8b 	bl	8001cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a7bc:	200b      	movs	r0, #11
 800a7be:	f7f7 faa2 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	200c      	movs	r0, #12
 800a7c8:	f7f7 fa83 	bl	8001cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a7cc:	200c      	movs	r0, #12
 800a7ce:	f7f7 fa9a 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800a7d2:	bf00      	nop
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	40021000 	.word	0x40021000

0800a7e0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b088      	sub	sp, #32
 800a7e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7e6:	f107 030c 	add.w	r3, r7, #12
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	601a      	str	r2, [r3, #0]
 800a7ee:	605a      	str	r2, [r3, #4]
 800a7f0:	609a      	str	r2, [r3, #8]
 800a7f2:	60da      	str	r2, [r3, #12]
 800a7f4:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800a7f6:	4bb8      	ldr	r3, [pc, #736]	; (800aad8 <MX_GPIO_Init+0x2f8>)
 800a7f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7fa:	4ab7      	ldr	r2, [pc, #732]	; (800aad8 <MX_GPIO_Init+0x2f8>)
 800a7fc:	f043 0301 	orr.w	r3, r3, #1
 800a800:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a802:	4bb5      	ldr	r3, [pc, #724]	; (800aad8 <MX_GPIO_Init+0x2f8>)
 800a804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	60bb      	str	r3, [r7, #8]
 800a80c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800a80e:	4bb2      	ldr	r3, [pc, #712]	; (800aad8 <MX_GPIO_Init+0x2f8>)
 800a810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a812:	4ab1      	ldr	r2, [pc, #708]	; (800aad8 <MX_GPIO_Init+0x2f8>)
 800a814:	f043 0302 	orr.w	r3, r3, #2
 800a818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a81a:	4baf      	ldr	r3, [pc, #700]	; (800aad8 <MX_GPIO_Init+0x2f8>)
 800a81c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a81e:	f003 0302 	and.w	r3, r3, #2
 800a822:	607b      	str	r3, [r7, #4]
 800a824:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800a826:	4bac      	ldr	r3, [pc, #688]	; (800aad8 <MX_GPIO_Init+0x2f8>)
 800a828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a82a:	4aab      	ldr	r2, [pc, #684]	; (800aad8 <MX_GPIO_Init+0x2f8>)
 800a82c:	f043 0320 	orr.w	r3, r3, #32
 800a830:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a832:	4ba9      	ldr	r3, [pc, #676]	; (800aad8 <MX_GPIO_Init+0x2f8>)
 800a834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a836:	f003 0320 	and.w	r3, r3, #32
 800a83a:	603b      	str	r3, [r7, #0]
 800a83c:	683b      	ldr	r3, [r7, #0]

	//led pin, sel pins, and in pins should always be outputs
	//led pin and sel pins should always start low, in pins should start based on configuration
	HAL_GPIO_WritePin(LED.PORT, LED.PIN, 0);
 800a83e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a842:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a846:	2200      	movs	r2, #0
 800a848:	4618      	mov	r0, r3
 800a84a:	f7f9 f80f 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 800a84e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a852:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a856:	2200      	movs	r2, #0
 800a858:	4618      	mov	r0, r3
 800a85a:	f7f9 f807 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 800a85e:	4b9f      	ldr	r3, [pc, #636]	; (800aadc <MX_GPIO_Init+0x2fc>)
 800a860:	2101      	movs	r1, #1
 800a862:	2200      	movs	r2, #0
 800a864:	4618      	mov	r0, r3
 800a866:	f7f9 f801 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U5IN0.PORT, U5IN0.PIN, (Default_Switch_State>>0)&0b1); U5I0_active = (Default_Switch_State>>0)&0b1;
 800a86a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a86e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a872:	4b9b      	ldr	r3, [pc, #620]	; (800aae0 <MX_GPIO_Init+0x300>)
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	461a      	mov	r2, r3
 800a87e:	f7f8 fff5 	bl	800386c <HAL_GPIO_WritePin>
 800a882:	4b97      	ldr	r3, [pc, #604]	; (800aae0 <MX_GPIO_Init+0x300>)
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	4b95      	ldr	r3, [pc, #596]	; (800aae4 <MX_GPIO_Init+0x304>)
 800a88e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(U5IN1.PORT, U5IN1.PIN, (Default_Switch_State>>1)&0b1); U5I1_active = (Default_Switch_State>>0)&0b1;
 800a890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a894:	2180      	movs	r1, #128	; 0x80
 800a896:	4b92      	ldr	r3, [pc, #584]	; (800aae0 <MX_GPIO_Init+0x300>)
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	085b      	lsrs	r3, r3, #1
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	f003 0301 	and.w	r3, r3, #1
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	f7f8 ffe1 	bl	800386c <HAL_GPIO_WritePin>
 800a8aa:	4b8d      	ldr	r3, [pc, #564]	; (800aae0 <MX_GPIO_Init+0x300>)
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	b2da      	uxtb	r2, r3
 800a8b4:	4b8c      	ldr	r3, [pc, #560]	; (800aae8 <MX_GPIO_Init+0x308>)
 800a8b6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(U6IN0.PORT, U6IN0.PIN, (Default_Switch_State>>2)&0b1); U6I0_active = (Default_Switch_State>>0)&0b1;
 800a8b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a8bc:	2140      	movs	r1, #64	; 0x40
 800a8be:	4b88      	ldr	r3, [pc, #544]	; (800aae0 <MX_GPIO_Init+0x300>)
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	089b      	lsrs	r3, r3, #2
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	f7f8 ffcd 	bl	800386c <HAL_GPIO_WritePin>
 800a8d2:	4b83      	ldr	r3, [pc, #524]	; (800aae0 <MX_GPIO_Init+0x300>)
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	b2da      	uxtb	r2, r3
 800a8dc:	4b83      	ldr	r3, [pc, #524]	; (800aaec <MX_GPIO_Init+0x30c>)
 800a8de:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(U6IN1.PORT, U6IN1.PIN, (Default_Switch_State>>3)&0b1); U6I1_active = (Default_Switch_State>>0)&0b1;
 800a8e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a8e4:	2120      	movs	r1, #32
 800a8e6:	4b7e      	ldr	r3, [pc, #504]	; (800aae0 <MX_GPIO_Init+0x300>)
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	08db      	lsrs	r3, r3, #3
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	f003 0301 	and.w	r3, r3, #1
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	f7f8 ffb9 	bl	800386c <HAL_GPIO_WritePin>
 800a8fa:	4b79      	ldr	r3, [pc, #484]	; (800aae0 <MX_GPIO_Init+0x300>)
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	b2da      	uxtb	r2, r3
 800a904:	4b7a      	ldr	r3, [pc, #488]	; (800aaf0 <MX_GPIO_Init+0x310>)
 800a906:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(U7IN0.PORT, U7IN0.PIN, (Default_Switch_State>>4)&0b1); U7I0_active = (Default_Switch_State>>0)&0b1;
 800a908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a90c:	2110      	movs	r1, #16
 800a90e:	4b74      	ldr	r3, [pc, #464]	; (800aae0 <MX_GPIO_Init+0x300>)
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	091b      	lsrs	r3, r3, #4
 800a914:	b2db      	uxtb	r3, r3
 800a916:	f003 0301 	and.w	r3, r3, #1
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	461a      	mov	r2, r3
 800a91e:	f7f8 ffa5 	bl	800386c <HAL_GPIO_WritePin>
 800a922:	4b6f      	ldr	r3, [pc, #444]	; (800aae0 <MX_GPIO_Init+0x300>)
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	f003 0301 	and.w	r3, r3, #1
 800a92a:	b2da      	uxtb	r2, r3
 800a92c:	4b71      	ldr	r3, [pc, #452]	; (800aaf4 <MX_GPIO_Init+0x314>)
 800a92e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(U7IN1.PORT, U7IN1.PIN, (Default_Switch_State>>5)&0b1); U7I1_active = (Default_Switch_State>>0)&0b1;
 800a930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a934:	2108      	movs	r1, #8
 800a936:	4b6a      	ldr	r3, [pc, #424]	; (800aae0 <MX_GPIO_Init+0x300>)
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	095b      	lsrs	r3, r3, #5
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	f003 0301 	and.w	r3, r3, #1
 800a942:	b2db      	uxtb	r3, r3
 800a944:	461a      	mov	r2, r3
 800a946:	f7f8 ff91 	bl	800386c <HAL_GPIO_WritePin>
 800a94a:	4b65      	ldr	r3, [pc, #404]	; (800aae0 <MX_GPIO_Init+0x300>)
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	f003 0301 	and.w	r3, r3, #1
 800a952:	b2da      	uxtb	r2, r3
 800a954:	4b68      	ldr	r3, [pc, #416]	; (800aaf8 <MX_GPIO_Init+0x318>)
 800a956:	701a      	strb	r2, [r3, #0]

	//all outputs on portA assigned here
	GPIO_InitStruct.Pin = LED.PIN|SEL0.PIN|U5IN0.PIN|U5IN1.PIN|U6IN0.PIN|U6IN1.PIN|U7IN0.PIN|U7IN1.PIN;
 800a958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a95c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a960:	4313      	orrs	r3, r2
 800a962:	b29b      	uxth	r3, r3
 800a964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a968:	4313      	orrs	r3, r2
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	2280      	movs	r2, #128	; 0x80
 800a96e:	4313      	orrs	r3, r2
 800a970:	b29b      	uxth	r3, r3
 800a972:	2240      	movs	r2, #64	; 0x40
 800a974:	4313      	orrs	r3, r2
 800a976:	b29b      	uxth	r3, r3
 800a978:	2220      	movs	r2, #32
 800a97a:	4313      	orrs	r3, r2
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	2210      	movs	r2, #16
 800a980:	4313      	orrs	r3, r2
 800a982:	b29b      	uxth	r3, r3
 800a984:	2208      	movs	r2, #8
 800a986:	4313      	orrs	r3, r2
 800a988:	b29b      	uxth	r3, r3
 800a98a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a98c:	2301      	movs	r3, #1
 800a98e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a990:	2300      	movs	r3, #0
 800a992:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a994:	2300      	movs	r3, #0
 800a996:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a998:	f107 030c 	add.w	r3, r7, #12
 800a99c:	4619      	mov	r1, r3
 800a99e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a9a2:	f7f8 fdc9 	bl	8003538 <HAL_GPIO_Init>

	//all outputs on portB assigned here
	GPIO_InitStruct.Pin = SEL1.PIN;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a9b6:	f107 030c 	add.w	r3, r7, #12
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	4847      	ldr	r0, [pc, #284]	; (800aadc <MX_GPIO_Init+0x2fc>)
 800a9be:	f7f8 fdbb 	bl	8003538 <HAL_GPIO_Init>


	if(Digital_In_EN && (1<<0))
 800a9c2:	4b4e      	ldr	r3, [pc, #312]	; (800aafc <MX_GPIO_Init+0x31c>)
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d012      	beq.n	800a9f0 <MX_GPIO_Init+0x210>
	{
		HAL_GPIO_WritePin(DIO3.PORT, DIO3.PIN, GPIO_PIN_RESET);
 800a9ca:	4b44      	ldr	r3, [pc, #272]	; (800aadc <MX_GPIO_Init+0x2fc>)
 800a9cc:	2108      	movs	r1, #8
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7f8 ff4b 	bl	800386c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO3.PIN;
 800a9d6:	2308      	movs	r3, #8
 800a9d8:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800a9da:	4b49      	ldr	r3, [pc, #292]	; (800ab00 <MX_GPIO_Init+0x320>)
 800a9dc:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO3.PORT, &GPIO_InitStruct);
 800a9e2:	4a3e      	ldr	r2, [pc, #248]	; (800aadc <MX_GPIO_Init+0x2fc>)
 800a9e4:	f107 030c 	add.w	r3, r7, #12
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	f7f8 fda4 	bl	8003538 <HAL_GPIO_Init>
	}

	if(Digital_In_EN && (1<<1))
 800a9f0:	4b42      	ldr	r3, [pc, #264]	; (800aafc <MX_GPIO_Init+0x31c>)
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d012      	beq.n	800aa1e <MX_GPIO_Init+0x23e>
	{
		HAL_GPIO_WritePin(DIO4.PORT, DIO4.PIN, GPIO_PIN_RESET);
 800a9f8:	4b38      	ldr	r3, [pc, #224]	; (800aadc <MX_GPIO_Init+0x2fc>)
 800a9fa:	2110      	movs	r1, #16
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7f8 ff34 	bl	800386c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO4.PIN;
 800aa04:	2310      	movs	r3, #16
 800aa06:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800aa08:	4b3d      	ldr	r3, [pc, #244]	; (800ab00 <MX_GPIO_Init+0x320>)
 800aa0a:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO4.PORT, &GPIO_InitStruct);
 800aa10:	4a32      	ldr	r2, [pc, #200]	; (800aadc <MX_GPIO_Init+0x2fc>)
 800aa12:	f107 030c 	add.w	r3, r7, #12
 800aa16:	4619      	mov	r1, r3
 800aa18:	4610      	mov	r0, r2
 800aa1a:	f7f8 fd8d 	bl	8003538 <HAL_GPIO_Init>
	}

	if(Digital_In_EN && (1<<2))
 800aa1e:	4b37      	ldr	r3, [pc, #220]	; (800aafc <MX_GPIO_Init+0x31c>)
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d012      	beq.n	800aa4c <MX_GPIO_Init+0x26c>
	{
		HAL_GPIO_WritePin(DIO5.PORT, DIO5.PIN, GPIO_PIN_RESET);
 800aa26:	4b2d      	ldr	r3, [pc, #180]	; (800aadc <MX_GPIO_Init+0x2fc>)
 800aa28:	2120      	movs	r1, #32
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7f8 ff1d 	bl	800386c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO5.PIN;
 800aa32:	2320      	movs	r3, #32
 800aa34:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800aa36:	4b32      	ldr	r3, [pc, #200]	; (800ab00 <MX_GPIO_Init+0x320>)
 800aa38:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO5.PORT, &GPIO_InitStruct);
 800aa3e:	4a27      	ldr	r2, [pc, #156]	; (800aadc <MX_GPIO_Init+0x2fc>)
 800aa40:	f107 030c 	add.w	r3, r7, #12
 800aa44:	4619      	mov	r1, r3
 800aa46:	4610      	mov	r0, r2
 800aa48:	f7f8 fd76 	bl	8003538 <HAL_GPIO_Init>
	}

	if(Digital_In_EN && (1<<3))
 800aa4c:	4b2b      	ldr	r3, [pc, #172]	; (800aafc <MX_GPIO_Init+0x31c>)
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d012      	beq.n	800aa7a <MX_GPIO_Init+0x29a>
	{
		HAL_GPIO_WritePin(DIO6.PORT, DIO6.PIN, GPIO_PIN_RESET);
 800aa54:	4b21      	ldr	r3, [pc, #132]	; (800aadc <MX_GPIO_Init+0x2fc>)
 800aa56:	2140      	movs	r1, #64	; 0x40
 800aa58:	2200      	movs	r2, #0
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7f8 ff06 	bl	800386c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO6.PIN;
 800aa60:	2340      	movs	r3, #64	; 0x40
 800aa62:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800aa64:	4b26      	ldr	r3, [pc, #152]	; (800ab00 <MX_GPIO_Init+0x320>)
 800aa66:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO6.PORT, &GPIO_InitStruct);
 800aa6c:	4a1b      	ldr	r2, [pc, #108]	; (800aadc <MX_GPIO_Init+0x2fc>)
 800aa6e:	f107 030c 	add.w	r3, r7, #12
 800aa72:	4619      	mov	r1, r3
 800aa74:	4610      	mov	r0, r2
 800aa76:	f7f8 fd5f 	bl	8003538 <HAL_GPIO_Init>
	}

	if(Digital_In_EN && (1<<4))
 800aa7a:	4b20      	ldr	r3, [pc, #128]	; (800aafc <MX_GPIO_Init+0x31c>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d016      	beq.n	800aab0 <MX_GPIO_Init+0x2d0>
	{
		HAL_GPIO_WritePin(DIO15.PORT, DIO15.PIN, GPIO_PIN_RESET);
 800aa82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7f8 feed 	bl	800386c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO15.PIN;
 800aa92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa96:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800aa98:	4b19      	ldr	r3, [pc, #100]	; (800ab00 <MX_GPIO_Init+0x320>)
 800aa9a:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO15.PORT, &GPIO_InitStruct);
 800aaa0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800aaa4:	f107 030c 	add.w	r3, r7, #12
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	4610      	mov	r0, r2
 800aaac:	f7f8 fd44 	bl	8003538 <HAL_GPIO_Init>
	}

	if(Digital_In_EN && (1<<0)) { GPIO_States[0] = HAL_GPIO_ReadPin(DIO3.PORT, DIO3.PIN); }
 800aab0:	4b12      	ldr	r3, [pc, #72]	; (800aafc <MX_GPIO_Init+0x31c>)
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d009      	beq.n	800aacc <MX_GPIO_Init+0x2ec>
 800aab8:	4b08      	ldr	r3, [pc, #32]	; (800aadc <MX_GPIO_Init+0x2fc>)
 800aaba:	2208      	movs	r2, #8
 800aabc:	4611      	mov	r1, r2
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7f8 febc 	bl	800383c <HAL_GPIO_ReadPin>
 800aac4:	4603      	mov	r3, r0
 800aac6:	461a      	mov	r2, r3
 800aac8:	4b0e      	ldr	r3, [pc, #56]	; (800ab04 <MX_GPIO_Init+0x324>)
 800aaca:	601a      	str	r2, [r3, #0]
	if(Digital_In_EN && (1<<2)) { GPIO_States[0] = HAL_GPIO_ReadPin(DIO5.PORT, DIO5.PIN); }
 800aacc:	4b0b      	ldr	r3, [pc, #44]	; (800aafc <MX_GPIO_Init+0x31c>)
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d023      	beq.n	800ab1c <MX_GPIO_Init+0x33c>
 800aad4:	e018      	b.n	800ab08 <MX_GPIO_Init+0x328>
 800aad6:	bf00      	nop
 800aad8:	40021000 	.word	0x40021000
 800aadc:	48000400 	.word	0x48000400
 800aae0:	200004ab 	.word	0x200004ab
 800aae4:	20000784 	.word	0x20000784
 800aae8:	2000088c 	.word	0x2000088c
 800aaec:	2000077d 	.word	0x2000077d
 800aaf0:	200006b5 	.word	0x200006b5
 800aaf4:	200003be 	.word	0x200003be
 800aaf8:	20000442 	.word	0x20000442
 800aafc:	20000114 	.word	0x20000114
 800ab00:	10310000 	.word	0x10310000
 800ab04:	20000b04 	.word	0x20000b04
 800ab08:	4b29      	ldr	r3, [pc, #164]	; (800abb0 <MX_GPIO_Init+0x3d0>)
 800ab0a:	2220      	movs	r2, #32
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7f8 fe94 	bl	800383c <HAL_GPIO_ReadPin>
 800ab14:	4603      	mov	r3, r0
 800ab16:	461a      	mov	r2, r3
 800ab18:	4b26      	ldr	r3, [pc, #152]	; (800abb4 <MX_GPIO_Init+0x3d4>)
 800ab1a:	601a      	str	r2, [r3, #0]
	if(Digital_In_EN && (1<<3)) { GPIO_States[0] = HAL_GPIO_ReadPin(DIO6.PORT, DIO6.PIN); }
 800ab1c:	4b26      	ldr	r3, [pc, #152]	; (800abb8 <MX_GPIO_Init+0x3d8>)
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d009      	beq.n	800ab38 <MX_GPIO_Init+0x358>
 800ab24:	4b22      	ldr	r3, [pc, #136]	; (800abb0 <MX_GPIO_Init+0x3d0>)
 800ab26:	2240      	movs	r2, #64	; 0x40
 800ab28:	4611      	mov	r1, r2
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7f8 fe86 	bl	800383c <HAL_GPIO_ReadPin>
 800ab30:	4603      	mov	r3, r0
 800ab32:	461a      	mov	r2, r3
 800ab34:	4b1f      	ldr	r3, [pc, #124]	; (800abb4 <MX_GPIO_Init+0x3d4>)
 800ab36:	601a      	str	r2, [r3, #0]
	if(Digital_In_EN && (1<<4)) { GPIO_States[0] = HAL_GPIO_ReadPin(DIO15.PORT, DIO15.PIN); }
 800ab38:	4b1f      	ldr	r3, [pc, #124]	; (800abb8 <MX_GPIO_Init+0x3d8>)
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00b      	beq.n	800ab58 <MX_GPIO_Init+0x378>
 800ab40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ab48:	4611      	mov	r1, r2
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7f8 fe76 	bl	800383c <HAL_GPIO_ReadPin>
 800ab50:	4603      	mov	r3, r0
 800ab52:	461a      	mov	r2, r3
 800ab54:	4b17      	ldr	r3, [pc, #92]	; (800abb4 <MX_GPIO_Init+0x3d4>)
 800ab56:	601a      	str	r2, [r3, #0]

	//interrupts for PB3, PB5, PB6, PA15; PB4 will maybe have a different interrupt enable
	if (Digital_In_EN && (1<<0))
 800ab58:	4b17      	ldr	r3, [pc, #92]	; (800abb8 <MX_GPIO_Init+0x3d8>)
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d007      	beq.n	800ab70 <MX_GPIO_Init+0x390>
	{
		HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800ab60:	2200      	movs	r2, #0
 800ab62:	2100      	movs	r1, #0
 800ab64:	2009      	movs	r0, #9
 800ab66:	f7f7 f8b4 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800ab6a:	2009      	movs	r0, #9
 800ab6c:	f7f7 f8cb 	bl	8001d06 <HAL_NVIC_EnableIRQ>
	}

	if ((Digital_In_EN && (1<<2)) || (Digital_In_EN && (1<<3)))
 800ab70:	4b11      	ldr	r3, [pc, #68]	; (800abb8 <MX_GPIO_Init+0x3d8>)
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d103      	bne.n	800ab80 <MX_GPIO_Init+0x3a0>
 800ab78:	4b0f      	ldr	r3, [pc, #60]	; (800abb8 <MX_GPIO_Init+0x3d8>)
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d007      	beq.n	800ab90 <MX_GPIO_Init+0x3b0>
	{
		HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800ab80:	2200      	movs	r2, #0
 800ab82:	2100      	movs	r1, #0
 800ab84:	2017      	movs	r0, #23
 800ab86:	f7f7 f8a4 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800ab8a:	2017      	movs	r0, #23
 800ab8c:	f7f7 f8bb 	bl	8001d06 <HAL_NVIC_EnableIRQ>
	}

	if (Digital_In_EN && (1<<4))
 800ab90:	4b09      	ldr	r3, [pc, #36]	; (800abb8 <MX_GPIO_Init+0x3d8>)
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d007      	beq.n	800aba8 <MX_GPIO_Init+0x3c8>
	{
		HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800ab98:	2200      	movs	r2, #0
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	2028      	movs	r0, #40	; 0x28
 800ab9e:	f7f7 f898 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800aba2:	2028      	movs	r0, #40	; 0x28
 800aba4:	f7f7 f8af 	bl	8001d06 <HAL_NVIC_EnableIRQ>
	}
}
 800aba8:	bf00      	nop
 800abaa:	3720      	adds	r7, #32
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	48000400 	.word	0x48000400
 800abb4:	20000b04 	.word	0x20000b04
 800abb8:	20000114 	.word	0x20000114

0800abbc <MX_TIM1_Init>:


static void MX_TIM1_Init(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0
	htim1.Instance = TIM1;
 800abc0:	4b0c      	ldr	r3, [pc, #48]	; (800abf4 <MX_TIM1_Init+0x38>)
 800abc2:	4a0d      	ldr	r2, [pc, #52]	; (800abf8 <MX_TIM1_Init+0x3c>)
 800abc4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 16999; //resolution in 100's of us
 800abc6:	4b0b      	ldr	r3, [pc, #44]	; (800abf4 <MX_TIM1_Init+0x38>)
 800abc8:	f244 2267 	movw	r2, #16999	; 0x4267
 800abcc:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800abce:	4b09      	ldr	r3, [pc, #36]	; (800abf4 <MX_TIM1_Init+0x38>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = SampleTemperatureVoltagePeriod;
 800abd4:	4b09      	ldr	r3, [pc, #36]	; (800abfc <MX_TIM1_Init+0x40>)
 800abd6:	881b      	ldrh	r3, [r3, #0]
 800abd8:	461a      	mov	r2, r3
 800abda:	4b06      	ldr	r3, [pc, #24]	; (800abf4 <MX_TIM1_Init+0x38>)
 800abdc:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim1) !=HAL_OK)
 800abde:	4805      	ldr	r0, [pc, #20]	; (800abf4 <MX_TIM1_Init+0x38>)
 800abe0:	f7fa f8ce 	bl	8004d80 <HAL_TIM_Base_Init>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <MX_TIM1_Init+0x32>
	{
		Error_Handler();
 800abea:	f000 fc55 	bl	800b498 <Error_Handler>
	}
}
 800abee:	bf00      	nop
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	20000834 	.word	0x20000834
 800abf8:	40012c00 	.word	0x40012c00
 800abfc:	20000988 	.word	0x20000988

0800ac00 <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	af00      	add	r7, sp, #0
	htim6.Instance = TIM6;
 800ac04:	4b0d      	ldr	r3, [pc, #52]	; (800ac3c <MX_TIM6_Init+0x3c>)
 800ac06:	4a0e      	ldr	r2, [pc, #56]	; (800ac40 <MX_TIM6_Init+0x40>)
 800ac08:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 16999;
 800ac0a:	4b0c      	ldr	r3, [pc, #48]	; (800ac3c <MX_TIM6_Init+0x3c>)
 800ac0c:	f244 2267 	movw	r2, #16999	; 0x4267
 800ac10:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac12:	4b0a      	ldr	r3, [pc, #40]	; (800ac3c <MX_TIM6_Init+0x3c>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = Can_Interval;
 800ac18:	4b0a      	ldr	r3, [pc, #40]	; (800ac44 <MX_TIM6_Init+0x44>)
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	4b07      	ldr	r3, [pc, #28]	; (800ac3c <MX_TIM6_Init+0x3c>)
 800ac20:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac22:	4b06      	ldr	r3, [pc, #24]	; (800ac3c <MX_TIM6_Init+0x3c>)
 800ac24:	2200      	movs	r2, #0
 800ac26:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800ac28:	4804      	ldr	r0, [pc, #16]	; (800ac3c <MX_TIM6_Init+0x3c>)
 800ac2a:	f7fa f8a9 	bl	8004d80 <HAL_TIM_Base_Init>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <MX_TIM6_Init+0x38>
	{
		Error_Handler();
 800ac34:	f000 fc30 	bl	800b498 <Error_Handler>
	}
}
 800ac38:	bf00      	nop
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	200007e8 	.word	0x200007e8
 800ac40:	40001000 	.word	0x40001000
 800ac44:	20000118 	.word	0x20000118

0800ac48 <MX_TIM7_Init>:

static void MX_TIM7_Init(void)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	af00      	add	r7, sp, #0
	htim7.Instance = TIM7;
 800ac4c:	4b0d      	ldr	r3, [pc, #52]	; (800ac84 <MX_TIM7_Init+0x3c>)
 800ac4e:	4a0e      	ldr	r2, [pc, #56]	; (800ac88 <MX_TIM7_Init+0x40>)
 800ac50:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 16999;
 800ac52:	4b0c      	ldr	r3, [pc, #48]	; (800ac84 <MX_TIM7_Init+0x3c>)
 800ac54:	f244 2267 	movw	r2, #16999	; 0x4267
 800ac58:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac5a:	4b0a      	ldr	r3, [pc, #40]	; (800ac84 <MX_TIM7_Init+0x3c>)
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = ERROR_PERIOD_100US;
 800ac60:	4b08      	ldr	r3, [pc, #32]	; (800ac84 <MX_TIM7_Init+0x3c>)
 800ac62:	f242 7210 	movw	r2, #10000	; 0x2710
 800ac66:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac68:	4b06      	ldr	r3, [pc, #24]	; (800ac84 <MX_TIM7_Init+0x3c>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800ac6e:	4805      	ldr	r0, [pc, #20]	; (800ac84 <MX_TIM7_Init+0x3c>)
 800ac70:	f7fa f886 	bl	8004d80 <HAL_TIM_Base_Init>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d001      	beq.n	800ac7e <MX_TIM7_Init+0x36>
	{
		Error_Handler();
 800ac7a:	f000 fc0d 	bl	800b498 <Error_Handler>
	}
}
 800ac7e:	bf00      	nop
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	20000ac4 	.word	0x20000ac4
 800ac88:	40001400 	.word	0x40001400

0800ac8c <MX_TIM15_Init>:

static void MX_TIM15_Init(void)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	af00      	add	r7, sp, #0
	htim15.Instance = TIM15;
 800ac90:	4b0b      	ldr	r3, [pc, #44]	; (800acc0 <MX_TIM15_Init+0x34>)
 800ac92:	4a0c      	ldr	r2, [pc, #48]	; (800acc4 <MX_TIM15_Init+0x38>)
 800ac94:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 16;
 800ac96:	4b0a      	ldr	r3, [pc, #40]	; (800acc0 <MX_TIM15_Init+0x34>)
 800ac98:	2210      	movs	r2, #16
 800ac9a:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac9c:	4b08      	ldr	r3, [pc, #32]	; (800acc0 <MX_TIM15_Init+0x34>)
 800ac9e:	2200      	movs	r2, #0
 800aca0:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 1000; //this corresponds to 100us, as going at max speed (20us) seems to be too fast
 800aca2:	4b07      	ldr	r3, [pc, #28]	; (800acc0 <MX_TIM15_Init+0x34>)
 800aca4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aca8:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800acaa:	4805      	ldr	r0, [pc, #20]	; (800acc0 <MX_TIM15_Init+0x34>)
 800acac:	f7fa f868 	bl	8004d80 <HAL_TIM_Base_Init>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d001      	beq.n	800acba <MX_TIM15_Init+0x2e>
	{
		Error_Handler();
 800acb6:	f000 fbef 	bl	800b498 <Error_Handler>
	}
}
 800acba:	bf00      	nop
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	20000334 	.word	0x20000334
 800acc4:	40014000 	.word	0x40014000

0800acc8 <MX_TIM16_Init>:

static void MX_TIM16_Init(void)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	af00      	add	r7, sp, #0
	htim16.Instance = TIM16;
 800accc:	4b0f      	ldr	r3, [pc, #60]	; (800ad0c <MX_TIM16_Init+0x44>)
 800acce:	4a10      	ldr	r2, [pc, #64]	; (800ad10 <MX_TIM16_Init+0x48>)
 800acd0:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 1699; //10us resolution
 800acd2:	4b0e      	ldr	r3, [pc, #56]	; (800ad0c <MX_TIM16_Init+0x44>)
 800acd4:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800acd8:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800acda:	4b0c      	ldr	r3, [pc, #48]	; (800ad0c <MX_TIM16_Init+0x44>)
 800acdc:	2200      	movs	r2, #0
 800acde:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = Can_Sync_Delay;
 800ace0:	4b0c      	ldr	r3, [pc, #48]	; (800ad14 <MX_TIM16_Init+0x4c>)
 800ace2:	881b      	ldrh	r3, [r3, #0]
 800ace4:	461a      	mov	r2, r3
 800ace6:	4b09      	ldr	r3, [pc, #36]	; (800ad0c <MX_TIM16_Init+0x44>)
 800ace8:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800acea:	4b08      	ldr	r3, [pc, #32]	; (800ad0c <MX_TIM16_Init+0x44>)
 800acec:	2200      	movs	r2, #0
 800acee:	611a      	str	r2, [r3, #16]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800acf0:	4b06      	ldr	r3, [pc, #24]	; (800ad0c <MX_TIM16_Init+0x44>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800acf6:	4805      	ldr	r0, [pc, #20]	; (800ad0c <MX_TIM16_Init+0x44>)
 800acf8:	f7fa f842 	bl	8004d80 <HAL_TIM_Base_Init>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d001      	beq.n	800ad06 <MX_TIM16_Init+0x3e>
	{
		Error_Handler();
 800ad02:	f000 fbc9 	bl	800b498 <Error_Handler>
	}
}
 800ad06:	bf00      	nop
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20000a84 	.word	0x20000a84
 800ad10:	40014400 	.word	0x40014400
 800ad14:	20000440 	.word	0x20000440

0800ad18 <MX_TIM17_Init>:

static void MX_TIM17_Init(void)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b088      	sub	sp, #32
 800ad1c:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef sConfigOC = {0};
 800ad1e:	1d3b      	adds	r3, r7, #4
 800ad20:	2200      	movs	r2, #0
 800ad22:	601a      	str	r2, [r3, #0]
 800ad24:	605a      	str	r2, [r3, #4]
 800ad26:	609a      	str	r2, [r3, #8]
 800ad28:	60da      	str	r2, [r3, #12]
 800ad2a:	611a      	str	r2, [r3, #16]
 800ad2c:	615a      	str	r2, [r3, #20]
 800ad2e:	619a      	str	r2, [r3, #24]

	htim17.Instance = TIM17;
 800ad30:	4b2b      	ldr	r3, [pc, #172]	; (800ade0 <MX_TIM17_Init+0xc8>)
 800ad32:	4a2c      	ldr	r2, [pc, #176]	; (800ade4 <MX_TIM17_Init+0xcc>)
 800ad34:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = PWM_Prescalers[2];
 800ad36:	4b2c      	ldr	r3, [pc, #176]	; (800ade8 <MX_TIM17_Init+0xd0>)
 800ad38:	889b      	ldrh	r3, [r3, #4]
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	4b28      	ldr	r3, [pc, #160]	; (800ade0 <MX_TIM17_Init+0xc8>)
 800ad3e:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad40:	4b27      	ldr	r3, [pc, #156]	; (800ade0 <MX_TIM17_Init+0xc8>)
 800ad42:	2200      	movs	r2, #0
 800ad44:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 255; //pulse will be from 0 to 255
 800ad46:	4b26      	ldr	r3, [pc, #152]	; (800ade0 <MX_TIM17_Init+0xc8>)
 800ad48:	22ff      	movs	r2, #255	; 0xff
 800ad4a:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ad4c:	4b24      	ldr	r3, [pc, #144]	; (800ade0 <MX_TIM17_Init+0xc8>)
 800ad4e:	2200      	movs	r2, #0
 800ad50:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 800ad52:	4b23      	ldr	r3, [pc, #140]	; (800ade0 <MX_TIM17_Init+0xc8>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ad58:	4b21      	ldr	r3, [pc, #132]	; (800ade0 <MX_TIM17_Init+0xc8>)
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800ad5e:	4820      	ldr	r0, [pc, #128]	; (800ade0 <MX_TIM17_Init+0xc8>)
 800ad60:	f7fa f80e 	bl	8004d80 <HAL_TIM_Base_Init>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d001      	beq.n	800ad6e <MX_TIM17_Init+0x56>
	{
		Error_Handler();
 800ad6a:	f000 fb95 	bl	800b498 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800ad6e:	481c      	ldr	r0, [pc, #112]	; (800ade0 <MX_TIM17_Init+0xc8>)
 800ad70:	f7fa f887 	bl	8004e82 <HAL_TIM_PWM_Init>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <MX_TIM17_Init+0x66>
	{
		Error_Handler();
 800ad7a:	f000 fb8d 	bl	800b498 <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ad7e:	2360      	movs	r3, #96	; 0x60
 800ad80:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = PWM_Pulses[2];
 800ad82:	4b1a      	ldr	r3, [pc, #104]	; (800adec <MX_TIM17_Init+0xd4>)
 800ad84:	889b      	ldrh	r3, [r3, #4]
 800ad86:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	613b      	str	r3, [r7, #16]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ad90:	2300      	movs	r3, #0
 800ad92:	617b      	str	r3, [r7, #20]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ad94:	2300      	movs	r3, #0
 800ad96:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ad9c:	1d3b      	adds	r3, r7, #4
 800ad9e:	2200      	movs	r2, #0
 800ada0:	4619      	mov	r1, r3
 800ada2:	480f      	ldr	r0, [pc, #60]	; (800ade0 <MX_TIM17_Init+0xc8>)
 800ada4:	f7fa fba4 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d001      	beq.n	800adb2 <MX_TIM17_Init+0x9a>
	{
		Error_Handler();
 800adae:	f000 fb73 	bl	800b498 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim17);
 800adb2:	480b      	ldr	r0, [pc, #44]	; (800ade0 <MX_TIM17_Init+0xc8>)
 800adb4:	f000 feb2 	bl	800bb1c <HAL_TIM_MspPostInit>

	if(PWM_Out_EN&(1<<2))
 800adb8:	4b0d      	ldr	r3, [pc, #52]	; (800adf0 <MX_TIM17_Init+0xd8>)
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	f003 0304 	and.w	r3, r3, #4
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d008      	beq.n	800add6 <MX_TIM17_Init+0xbe>
	{
		if (HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1) != HAL_OK)
 800adc4:	2100      	movs	r1, #0
 800adc6:	4806      	ldr	r0, [pc, #24]	; (800ade0 <MX_TIM17_Init+0xc8>)
 800adc8:	f7fa f886 	bl	8004ed8 <HAL_TIM_PWM_Start>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d001      	beq.n	800add6 <MX_TIM17_Init+0xbe>
		{
			Error_Handler();
 800add2:	f000 fb61 	bl	800b498 <Error_Handler>
		}
	}
}
 800add6:	bf00      	nop
 800add8:	3720      	adds	r7, #32
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	20000400 	.word	0x20000400
 800ade4:	40014800 	.word	0x40014800
 800ade8:	2000059c 	.word	0x2000059c
 800adec:	20000828 	.word	0x20000828
 800adf0:	200009f0 	.word	0x200009f0

0800adf4 <MX_TIM2_Init>:

static void MX_TIM2_Init()
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b094      	sub	sp, #80	; 0x50
 800adf8:	af00      	add	r7, sp, #0
	if (!((PWM_In_EN>>0)&1)) //default if pin is not used as pwm input
 800adfa:	4b69      	ldr	r3, [pc, #420]	; (800afa0 <MX_TIM2_Init+0x1ac>)
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	f003 0301 	and.w	r3, r3, #1
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d14f      	bne.n	800aea6 <MX_TIM2_Init+0xb2>
	{
		TIM_OC_InitTypeDef sConfigOC = {0};
 800ae06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	601a      	str	r2, [r3, #0]
 800ae0e:	605a      	str	r2, [r3, #4]
 800ae10:	609a      	str	r2, [r3, #8]
 800ae12:	60da      	str	r2, [r3, #12]
 800ae14:	611a      	str	r2, [r3, #16]
 800ae16:	615a      	str	r2, [r3, #20]
 800ae18:	619a      	str	r2, [r3, #24]

		htim2.Instance = TIM2;
 800ae1a:	4b62      	ldr	r3, [pc, #392]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800ae1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ae20:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = PWM_Prescalers[0];
 800ae22:	4b61      	ldr	r3, [pc, #388]	; (800afa8 <MX_TIM2_Init+0x1b4>)
 800ae24:	881b      	ldrh	r3, [r3, #0]
 800ae26:	461a      	mov	r2, r3
 800ae28:	4b5e      	ldr	r3, [pc, #376]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800ae2a:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ae2c:	4b5d      	ldr	r3, [pc, #372]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 255;
 800ae32:	4b5c      	ldr	r3, [pc, #368]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800ae34:	22ff      	movs	r2, #255	; 0xff
 800ae36:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ae38:	4b5a      	ldr	r3, [pc, #360]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ae3e:	4b59      	ldr	r3, [pc, #356]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800ae40:	2200      	movs	r2, #0
 800ae42:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800ae44:	4857      	ldr	r0, [pc, #348]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800ae46:	f7fa f81c 	bl	8004e82 <HAL_TIM_PWM_Init>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <MX_TIM2_Init+0x60>
		{
			Error_Handler();
 800ae50:	f000 fb22 	bl	800b498 <Error_Handler>
		}

		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ae54:	2360      	movs	r3, #96	; 0x60
 800ae56:	637b      	str	r3, [r7, #52]	; 0x34
		sConfigOC.Pulse = PWM_Pulses[0];
 800ae58:	4b54      	ldr	r3, [pc, #336]	; (800afac <MX_TIM2_Init+0x1b8>)
 800ae5a:	881b      	ldrh	r3, [r3, #0]
 800ae5c:	63bb      	str	r3, [r7, #56]	; 0x38
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	63fb      	str	r3, [r7, #60]	; 0x3c
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ae62:	2300      	movs	r3, #0
 800ae64:	647b      	str	r3, [r7, #68]	; 0x44
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ae66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ae6a:	2204      	movs	r2, #4
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	484d      	ldr	r0, [pc, #308]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800ae70:	f7fa fb3e 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <MX_TIM2_Init+0x8a>
		{
			Error_Handler();
 800ae7a:	f000 fb0d 	bl	800b498 <Error_Handler>
		}

		HAL_TIM_MspPostInit(&htim2);
 800ae7e:	4849      	ldr	r0, [pc, #292]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800ae80:	f000 fe4c 	bl	800bb1c <HAL_TIM_MspPostInit>

		if(PWM_Out_EN&(1<<0))
 800ae84:	4b4a      	ldr	r3, [pc, #296]	; (800afb0 <MX_TIM2_Init+0x1bc>)
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	f003 0301 	and.w	r3, r3, #1
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f000 8083 	beq.w	800af98 <MX_TIM2_Init+0x1a4>
		{
			if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 800ae92:	2104      	movs	r1, #4
 800ae94:	4843      	ldr	r0, [pc, #268]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800ae96:	f7fa f81f 	bl	8004ed8 <HAL_TIM_PWM_Start>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d07b      	beq.n	800af98 <MX_TIM2_Init+0x1a4>
			{
				Error_Handler();
 800aea0:	f000 fafa 	bl	800b498 <Error_Handler>
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
		{
			Error_Handler();
		}
	}
}
 800aea4:	e078      	b.n	800af98 <MX_TIM2_Init+0x1a4>
		TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800aea6:	f107 0320 	add.w	r3, r7, #32
 800aeaa:	2200      	movs	r2, #0
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	605a      	str	r2, [r3, #4]
 800aeb0:	609a      	str	r2, [r3, #8]
 800aeb2:	60da      	str	r2, [r3, #12]
 800aeb4:	611a      	str	r2, [r3, #16]
		TIM_IC_InitTypeDef sConfigIC = {0};
 800aeb6:	f107 0310 	add.w	r3, r7, #16
 800aeba:	2200      	movs	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]
 800aebe:	605a      	str	r2, [r3, #4]
 800aec0:	609a      	str	r2, [r3, #8]
 800aec2:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aec4:	1d3b      	adds	r3, r7, #4
 800aec6:	2200      	movs	r2, #0
 800aec8:	601a      	str	r2, [r3, #0]
 800aeca:	605a      	str	r2, [r3, #4]
 800aecc:	609a      	str	r2, [r3, #8]
		htim2.Instance = TIM2;
 800aece:	4b35      	ldr	r3, [pc, #212]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800aed0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aed4:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = PWM_Prescalers[0];
 800aed6:	4b34      	ldr	r3, [pc, #208]	; (800afa8 <MX_TIM2_Init+0x1b4>)
 800aed8:	881b      	ldrh	r3, [r3, #0]
 800aeda:	461a      	mov	r2, r3
 800aedc:	4b31      	ldr	r3, [pc, #196]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800aede:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aee0:	4b30      	ldr	r3, [pc, #192]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 65535;
 800aee6:	4b2f      	ldr	r3, [pc, #188]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800aee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aeec:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aeee:	4b2d      	ldr	r3, [pc, #180]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aef4:	4b2b      	ldr	r3, [pc, #172]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800aef6:	2200      	movs	r2, #0
 800aef8:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800aefa:	482a      	ldr	r0, [pc, #168]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800aefc:	f7fa f8b2 	bl	8005064 <HAL_TIM_IC_Init>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <MX_TIM2_Init+0x116>
			Error_Handler();
 800af06:	f000 fac7 	bl	800b498 <Error_Handler>
		sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800af0a:	2304      	movs	r3, #4
 800af0c:	623b      	str	r3, [r7, #32]
		sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800af0e:	2360      	movs	r3, #96	; 0x60
 800af10:	627b      	str	r3, [r7, #36]	; 0x24
		sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800af12:	2302      	movs	r3, #2
 800af14:	62bb      	str	r3, [r7, #40]	; 0x28
		sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800af16:	2300      	movs	r3, #0
 800af18:	62fb      	str	r3, [r7, #44]	; 0x2c
		sSlaveConfig.TriggerFilter = 0;
 800af1a:	2300      	movs	r3, #0
 800af1c:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800af1e:	f107 0320 	add.w	r3, r7, #32
 800af22:	4619      	mov	r1, r3
 800af24:	481f      	ldr	r0, [pc, #124]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800af26:	f7fa fbfb 	bl	8005720 <HAL_TIM_SlaveConfigSynchro>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <MX_TIM2_Init+0x140>
			Error_Handler();
 800af30:	f000 fab2 	bl	800b498 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800af34:	2300      	movs	r3, #0
 800af36:	613b      	str	r3, [r7, #16]
		sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800af38:	2302      	movs	r3, #2
 800af3a:	617b      	str	r3, [r7, #20]
		sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800af3c:	2300      	movs	r3, #0
 800af3e:	61bb      	str	r3, [r7, #24]
		sConfigIC.ICFilter = 0;
 800af40:	2300      	movs	r3, #0
 800af42:	61fb      	str	r3, [r7, #28]
		if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800af44:	f107 0310 	add.w	r3, r7, #16
 800af48:	2200      	movs	r2, #0
 800af4a:	4619      	mov	r1, r3
 800af4c:	4815      	ldr	r0, [pc, #84]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800af4e:	f7fa fa33 	bl	80053b8 <HAL_TIM_IC_ConfigChannel>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d001      	beq.n	800af5c <MX_TIM2_Init+0x168>
			Error_Handler();
 800af58:	f000 fa9e 	bl	800b498 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800af5c:	2302      	movs	r3, #2
 800af5e:	613b      	str	r3, [r7, #16]
		sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800af60:	2301      	movs	r3, #1
 800af62:	617b      	str	r3, [r7, #20]
		if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800af64:	f107 0310 	add.w	r3, r7, #16
 800af68:	2204      	movs	r2, #4
 800af6a:	4619      	mov	r1, r3
 800af6c:	480d      	ldr	r0, [pc, #52]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800af6e:	f7fa fa23 	bl	80053b8 <HAL_TIM_IC_ConfigChannel>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d001      	beq.n	800af7c <MX_TIM2_Init+0x188>
			Error_Handler();
 800af78:	f000 fa8e 	bl	800b498 <Error_Handler>
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800af7c:	2300      	movs	r3, #0
 800af7e:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800af80:	2300      	movs	r3, #0
 800af82:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800af84:	1d3b      	adds	r3, r7, #4
 800af86:	4619      	mov	r1, r3
 800af88:	4806      	ldr	r0, [pc, #24]	; (800afa4 <MX_TIM2_Init+0x1b0>)
 800af8a:	f7fb fa6f 	bl	800646c <HAL_TIMEx_MasterConfigSynchronization>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d001      	beq.n	800af98 <MX_TIM2_Init+0x1a4>
			Error_Handler();
 800af94:	f000 fa80 	bl	800b498 <Error_Handler>
}
 800af98:	bf00      	nop
 800af9a:	3750      	adds	r7, #80	; 0x50
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	200004aa 	.word	0x200004aa
 800afa4:	20000948 	.word	0x20000948
 800afa8:	2000059c 	.word	0x2000059c
 800afac:	20000828 	.word	0x20000828
 800afb0:	200009f0 	.word	0x200009f0

0800afb4 <MX_TIM3_Init>:

static void MX_TIM3_Init()
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b088      	sub	sp, #32
 800afb8:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef sConfigOC = {0};
 800afba:	1d3b      	adds	r3, r7, #4
 800afbc:	2200      	movs	r2, #0
 800afbe:	601a      	str	r2, [r3, #0]
 800afc0:	605a      	str	r2, [r3, #4]
 800afc2:	609a      	str	r2, [r3, #8]
 800afc4:	60da      	str	r2, [r3, #12]
 800afc6:	611a      	str	r2, [r3, #16]
 800afc8:	615a      	str	r2, [r3, #20]
 800afca:	619a      	str	r2, [r3, #24]

	htim3.Instance = TIM3;
 800afcc:	4b22      	ldr	r3, [pc, #136]	; (800b058 <MX_TIM3_Init+0xa4>)
 800afce:	4a23      	ldr	r2, [pc, #140]	; (800b05c <MX_TIM3_Init+0xa8>)
 800afd0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = PWM_Prescalers[1];
 800afd2:	4b23      	ldr	r3, [pc, #140]	; (800b060 <MX_TIM3_Init+0xac>)
 800afd4:	885b      	ldrh	r3, [r3, #2]
 800afd6:	461a      	mov	r2, r3
 800afd8:	4b1f      	ldr	r3, [pc, #124]	; (800b058 <MX_TIM3_Init+0xa4>)
 800afda:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800afdc:	4b1e      	ldr	r3, [pc, #120]	; (800b058 <MX_TIM3_Init+0xa4>)
 800afde:	2200      	movs	r2, #0
 800afe0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 255;
 800afe2:	4b1d      	ldr	r3, [pc, #116]	; (800b058 <MX_TIM3_Init+0xa4>)
 800afe4:	22ff      	movs	r2, #255	; 0xff
 800afe6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800afe8:	4b1b      	ldr	r3, [pc, #108]	; (800b058 <MX_TIM3_Init+0xa4>)
 800afea:	2200      	movs	r2, #0
 800afec:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800afee:	4b1a      	ldr	r3, [pc, #104]	; (800b058 <MX_TIM3_Init+0xa4>)
 800aff0:	2200      	movs	r2, #0
 800aff2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800aff4:	4818      	ldr	r0, [pc, #96]	; (800b058 <MX_TIM3_Init+0xa4>)
 800aff6:	f7f9 ff44 	bl	8004e82 <HAL_TIM_PWM_Init>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <MX_TIM3_Init+0x50>
	{
		Error_Handler();
 800b000:	f000 fa4a 	bl	800b498 <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b004:	2360      	movs	r3, #96	; 0x60
 800b006:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = PWM_Pulses[1];
 800b008:	4b16      	ldr	r3, [pc, #88]	; (800b064 <MX_TIM3_Init+0xb0>)
 800b00a:	885b      	ldrh	r3, [r3, #2]
 800b00c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b00e:	2300      	movs	r3, #0
 800b010:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b012:	2300      	movs	r3, #0
 800b014:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b016:	1d3b      	adds	r3, r7, #4
 800b018:	2200      	movs	r2, #0
 800b01a:	4619      	mov	r1, r3
 800b01c:	480e      	ldr	r0, [pc, #56]	; (800b058 <MX_TIM3_Init+0xa4>)
 800b01e:	f7fa fa67 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <MX_TIM3_Init+0x78>
	{
		Error_Handler();
 800b028:	f000 fa36 	bl	800b498 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim3);
 800b02c:	480a      	ldr	r0, [pc, #40]	; (800b058 <MX_TIM3_Init+0xa4>)
 800b02e:	f000 fd75 	bl	800bb1c <HAL_TIM_MspPostInit>

	if(PWM_Out_EN&(1<<1))
 800b032:	4b0d      	ldr	r3, [pc, #52]	; (800b068 <MX_TIM3_Init+0xb4>)
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	f003 0302 	and.w	r3, r3, #2
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d008      	beq.n	800b050 <MX_TIM3_Init+0x9c>
	{
		if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 800b03e:	2100      	movs	r1, #0
 800b040:	4805      	ldr	r0, [pc, #20]	; (800b058 <MX_TIM3_Init+0xa4>)
 800b042:	f7f9 ff49 	bl	8004ed8 <HAL_TIM_PWM_Start>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <MX_TIM3_Init+0x9c>
		{
			Error_Handler();
 800b04c:	f000 fa24 	bl	800b498 <Error_Handler>
		}
	}
}
 800b050:	bf00      	nop
 800b052:	3720      	adds	r7, #32
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	20000544 	.word	0x20000544
 800b05c:	40000400 	.word	0x40000400
 800b060:	2000059c 	.word	0x2000059c
 800b064:	20000828 	.word	0x20000828
 800b068:	200009f0 	.word	0x200009f0

0800b06c <MX_TIM4_Init>:

static void MX_TIM4_Init()
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b094      	sub	sp, #80	; 0x50
 800b070:	af00      	add	r7, sp, #0
	if (!((PWM_In_EN>>0)&1)) //default if pin is not used as pwm input
 800b072:	4b68      	ldr	r3, [pc, #416]	; (800b214 <MX_TIM4_Init+0x1a8>)
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	f003 0301 	and.w	r3, r3, #1
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d14e      	bne.n	800b11c <MX_TIM4_Init+0xb0>
	{
		TIM_OC_InitTypeDef sConfigOC = {0};
 800b07e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b082:	2200      	movs	r2, #0
 800b084:	601a      	str	r2, [r3, #0]
 800b086:	605a      	str	r2, [r3, #4]
 800b088:	609a      	str	r2, [r3, #8]
 800b08a:	60da      	str	r2, [r3, #12]
 800b08c:	611a      	str	r2, [r3, #16]
 800b08e:	615a      	str	r2, [r3, #20]
 800b090:	619a      	str	r2, [r3, #24]

		htim4.Instance = TIM4;
 800b092:	4b61      	ldr	r3, [pc, #388]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b094:	4a61      	ldr	r2, [pc, #388]	; (800b21c <MX_TIM4_Init+0x1b0>)
 800b096:	601a      	str	r2, [r3, #0]
		htim4.Init.Prescaler = PWM_Prescalers[3];
 800b098:	4b61      	ldr	r3, [pc, #388]	; (800b220 <MX_TIM4_Init+0x1b4>)
 800b09a:	88db      	ldrh	r3, [r3, #6]
 800b09c:	461a      	mov	r2, r3
 800b09e:	4b5e      	ldr	r3, [pc, #376]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b0a0:	605a      	str	r2, [r3, #4]
		htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b0a2:	4b5d      	ldr	r3, [pc, #372]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	609a      	str	r2, [r3, #8]
		htim4.Init.Period = 255;
 800b0a8:	4b5b      	ldr	r3, [pc, #364]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b0aa:	22ff      	movs	r2, #255	; 0xff
 800b0ac:	60da      	str	r2, [r3, #12]
		htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b0ae:	4b5a      	ldr	r3, [pc, #360]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	611a      	str	r2, [r3, #16]
		htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b0b4:	4b58      	ldr	r3, [pc, #352]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800b0ba:	4857      	ldr	r0, [pc, #348]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b0bc:	f7f9 fee1 	bl	8004e82 <HAL_TIM_PWM_Init>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d001      	beq.n	800b0ca <MX_TIM4_Init+0x5e>
		{
			Error_Handler();
 800b0c6:	f000 f9e7 	bl	800b498 <Error_Handler>
		}

		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b0ca:	2360      	movs	r3, #96	; 0x60
 800b0cc:	637b      	str	r3, [r7, #52]	; 0x34
		sConfigOC.Pulse = PWM_Pulses[3];
 800b0ce:	4b55      	ldr	r3, [pc, #340]	; (800b224 <MX_TIM4_Init+0x1b8>)
 800b0d0:	88db      	ldrh	r3, [r3, #6]
 800b0d2:	63bb      	str	r3, [r7, #56]	; 0x38
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	647b      	str	r3, [r7, #68]	; 0x44
		if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b0dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	484c      	ldr	r0, [pc, #304]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b0e6:	f7fa fa03 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d001      	beq.n	800b0f4 <MX_TIM4_Init+0x88>
		{
			Error_Handler();
 800b0f0:	f000 f9d2 	bl	800b498 <Error_Handler>
		}

		HAL_TIM_MspPostInit(&htim4);
 800b0f4:	4848      	ldr	r0, [pc, #288]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b0f6:	f000 fd11 	bl	800bb1c <HAL_TIM_MspPostInit>

		if(PWM_Out_EN&(1<<3))
 800b0fa:	4b4b      	ldr	r3, [pc, #300]	; (800b228 <MX_TIM4_Init+0x1bc>)
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	f003 0308 	and.w	r3, r3, #8
 800b102:	2b00      	cmp	r3, #0
 800b104:	f000 8081 	beq.w	800b20a <MX_TIM4_Init+0x19e>
		{
			if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 800b108:	2100      	movs	r1, #0
 800b10a:	4843      	ldr	r0, [pc, #268]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b10c:	f7f9 fee4 	bl	8004ed8 <HAL_TIM_PWM_Start>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d079      	beq.n	800b20a <MX_TIM4_Init+0x19e>
			{
				Error_Handler();
 800b116:	f000 f9bf 	bl	800b498 <Error_Handler>
		if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
		{
			Error_Handler();
		}
	}
}
 800b11a:	e076      	b.n	800b20a <MX_TIM4_Init+0x19e>
		TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800b11c:	f107 0320 	add.w	r3, r7, #32
 800b120:	2200      	movs	r2, #0
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	605a      	str	r2, [r3, #4]
 800b126:	609a      	str	r2, [r3, #8]
 800b128:	60da      	str	r2, [r3, #12]
 800b12a:	611a      	str	r2, [r3, #16]
		TIM_IC_InitTypeDef sConfigIC = {0};
 800b12c:	f107 0310 	add.w	r3, r7, #16
 800b130:	2200      	movs	r2, #0
 800b132:	601a      	str	r2, [r3, #0]
 800b134:	605a      	str	r2, [r3, #4]
 800b136:	609a      	str	r2, [r3, #8]
 800b138:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b13a:	1d3b      	adds	r3, r7, #4
 800b13c:	2200      	movs	r2, #0
 800b13e:	601a      	str	r2, [r3, #0]
 800b140:	605a      	str	r2, [r3, #4]
 800b142:	609a      	str	r2, [r3, #8]
		htim4.Instance = TIM4;
 800b144:	4b34      	ldr	r3, [pc, #208]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b146:	4a35      	ldr	r2, [pc, #212]	; (800b21c <MX_TIM4_Init+0x1b0>)
 800b148:	601a      	str	r2, [r3, #0]
		htim4.Init.Prescaler = 999;
 800b14a:	4b33      	ldr	r3, [pc, #204]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b14c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b150:	605a      	str	r2, [r3, #4]
		htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b152:	4b31      	ldr	r3, [pc, #196]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b154:	2200      	movs	r2, #0
 800b156:	609a      	str	r2, [r3, #8]
		htim4.Init.Period = 65535;
 800b158:	4b2f      	ldr	r3, [pc, #188]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b15a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b15e:	60da      	str	r2, [r3, #12]
		htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b160:	4b2d      	ldr	r3, [pc, #180]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b162:	2200      	movs	r2, #0
 800b164:	611a      	str	r2, [r3, #16]
		htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b166:	4b2c      	ldr	r3, [pc, #176]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b168:	2200      	movs	r2, #0
 800b16a:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800b16c:	482a      	ldr	r0, [pc, #168]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b16e:	f7f9 ff79 	bl	8005064 <HAL_TIM_IC_Init>
 800b172:	4603      	mov	r3, r0
 800b174:	2b00      	cmp	r3, #0
 800b176:	d001      	beq.n	800b17c <MX_TIM4_Init+0x110>
			Error_Handler();
 800b178:	f000 f98e 	bl	800b498 <Error_Handler>
		sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800b17c:	2304      	movs	r3, #4
 800b17e:	623b      	str	r3, [r7, #32]
		sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800b180:	2350      	movs	r3, #80	; 0x50
 800b182:	627b      	str	r3, [r7, #36]	; 0x24
		sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800b184:	2300      	movs	r3, #0
 800b186:	62bb      	str	r3, [r7, #40]	; 0x28
		sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800b188:	2300      	movs	r3, #0
 800b18a:	62fb      	str	r3, [r7, #44]	; 0x2c
		sSlaveConfig.TriggerFilter = 0;
 800b18c:	2300      	movs	r3, #0
 800b18e:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800b190:	f107 0320 	add.w	r3, r7, #32
 800b194:	4619      	mov	r1, r3
 800b196:	4820      	ldr	r0, [pc, #128]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b198:	f7fa fac2 	bl	8005720 <HAL_TIM_SlaveConfigSynchro>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d001      	beq.n	800b1a6 <MX_TIM4_Init+0x13a>
			Error_Handler();
 800b1a2:	f000 f979 	bl	800b498 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	613b      	str	r3, [r7, #16]
		sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	617b      	str	r3, [r7, #20]
		sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	61bb      	str	r3, [r7, #24]
		sConfigIC.ICFilter = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	61fb      	str	r3, [r7, #28]
		if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800b1b6:	f107 0310 	add.w	r3, r7, #16
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	4619      	mov	r1, r3
 800b1be:	4816      	ldr	r0, [pc, #88]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b1c0:	f7fa f8fa 	bl	80053b8 <HAL_TIM_IC_ConfigChannel>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d001      	beq.n	800b1ce <MX_TIM4_Init+0x162>
			Error_Handler();
 800b1ca:	f000 f965 	bl	800b498 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800b1ce:	2302      	movs	r3, #2
 800b1d0:	613b      	str	r3, [r7, #16]
		sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800b1d2:	2302      	movs	r3, #2
 800b1d4:	617b      	str	r3, [r7, #20]
		if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800b1d6:	f107 0310 	add.w	r3, r7, #16
 800b1da:	2204      	movs	r2, #4
 800b1dc:	4619      	mov	r1, r3
 800b1de:	480e      	ldr	r0, [pc, #56]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b1e0:	f7fa f8ea 	bl	80053b8 <HAL_TIM_IC_ConfigChannel>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d001      	beq.n	800b1ee <MX_TIM4_Init+0x182>
			Error_Handler();
 800b1ea:	f000 f955 	bl	800b498 <Error_Handler>
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b1f6:	1d3b      	adds	r3, r7, #4
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	4807      	ldr	r0, [pc, #28]	; (800b218 <MX_TIM4_Init+0x1ac>)
 800b1fc:	f7fb f936 	bl	800646c <HAL_TIMEx_MasterConfigSynchronization>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <MX_TIM4_Init+0x19e>
			Error_Handler();
 800b206:	f000 f947 	bl	800b498 <Error_Handler>
}
 800b20a:	bf00      	nop
 800b20c:	3750      	adds	r7, #80	; 0x50
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	200004aa 	.word	0x200004aa
 800b218:	200001e0 	.word	0x200001e0
 800b21c:	40000800 	.word	0x40000800
 800b220:	2000059c 	.word	0x2000059c
 800b224:	20000828 	.word	0x20000828
 800b228:	200009f0 	.word	0x200009f0

0800b22c <MX_TIM8_Init>:

static void MX_TIM8_Init()
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b0a0      	sub	sp, #128	; 0x80
 800b230:	af00      	add	r7, sp, #0
	if (!((PWM_In_EN>>4)&1)) //default if pin is not used as a pwm input
 800b232:	4b7c      	ldr	r3, [pc, #496]	; (800b424 <MX_TIM8_Init+0x1f8>)
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	091b      	lsrs	r3, r3, #4
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	f003 0301 	and.w	r3, r3, #1
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d158      	bne.n	800b2f4 <MX_TIM8_Init+0xc8>
	{
		TIM_OC_InitTypeDef sConfigOC = {0};
 800b242:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b246:	2200      	movs	r2, #0
 800b248:	601a      	str	r2, [r3, #0]
 800b24a:	605a      	str	r2, [r3, #4]
 800b24c:	609a      	str	r2, [r3, #8]
 800b24e:	60da      	str	r2, [r3, #12]
 800b250:	611a      	str	r2, [r3, #16]
 800b252:	615a      	str	r2, [r3, #20]
 800b254:	619a      	str	r2, [r3, #24]

		htim8.Instance = TIM8;
 800b256:	4b74      	ldr	r3, [pc, #464]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b258:	4a74      	ldr	r2, [pc, #464]	; (800b42c <MX_TIM8_Init+0x200>)
 800b25a:	601a      	str	r2, [r3, #0]
		htim8.Init.Prescaler = PWM_Prescalers[4];
 800b25c:	4b74      	ldr	r3, [pc, #464]	; (800b430 <MX_TIM8_Init+0x204>)
 800b25e:	891b      	ldrh	r3, [r3, #8]
 800b260:	461a      	mov	r2, r3
 800b262:	4b71      	ldr	r3, [pc, #452]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b264:	605a      	str	r2, [r3, #4]
		htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b266:	4b70      	ldr	r3, [pc, #448]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b268:	2200      	movs	r2, #0
 800b26a:	609a      	str	r2, [r3, #8]
		htim8.Init.Period = 255;
 800b26c:	4b6e      	ldr	r3, [pc, #440]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b26e:	22ff      	movs	r2, #255	; 0xff
 800b270:	60da      	str	r2, [r3, #12]
		htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b272:	4b6d      	ldr	r3, [pc, #436]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b274:	2200      	movs	r2, #0
 800b276:	611a      	str	r2, [r3, #16]
		htim8.Init.RepetitionCounter = 0;
 800b278:	4b6b      	ldr	r3, [pc, #428]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	615a      	str	r2, [r3, #20]
		htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b27e:	4b6a      	ldr	r3, [pc, #424]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b280:	2200      	movs	r2, #0
 800b282:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800b284:	4868      	ldr	r0, [pc, #416]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b286:	f7f9 fdfc 	bl	8004e82 <HAL_TIM_PWM_Init>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d001      	beq.n	800b294 <MX_TIM8_Init+0x68>
		{
			Error_Handler();
 800b290:	f000 f902 	bl	800b498 <Error_Handler>
		}

		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b294:	2360      	movs	r3, #96	; 0x60
 800b296:	667b      	str	r3, [r7, #100]	; 0x64
		sConfigOC.Pulse = PWM_Pulses[4];
 800b298:	4b66      	ldr	r3, [pc, #408]	; (800b434 <MX_TIM8_Init+0x208>)
 800b29a:	891b      	ldrh	r3, [r3, #8]
 800b29c:	66bb      	str	r3, [r7, #104]	; 0x68
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	66fb      	str	r3, [r7, #108]	; 0x6c
		sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	673b      	str	r3, [r7, #112]	; 0x70
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	677b      	str	r3, [r7, #116]	; 0x74
		sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	67bb      	str	r3, [r7, #120]	; 0x78
		sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	67fb      	str	r3, [r7, #124]	; 0x7c
		if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b2b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	485b      	ldr	r0, [pc, #364]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b2bc:	f7fa f918 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <MX_TIM8_Init+0x9e>
		{
			Error_Handler();
 800b2c6:	f000 f8e7 	bl	800b498 <Error_Handler>
		}

		HAL_TIM_MspPostInit(&htim8);
 800b2ca:	4857      	ldr	r0, [pc, #348]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b2cc:	f000 fc26 	bl	800bb1c <HAL_TIM_MspPostInit>

		if(PWM_Out_EN&(1<<4))
 800b2d0:	4b59      	ldr	r3, [pc, #356]	; (800b438 <MX_TIM8_Init+0x20c>)
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	f003 0310 	and.w	r3, r3, #16
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f000 809e 	beq.w	800b41a <MX_TIM8_Init+0x1ee>
		{
			if (HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1) != HAL_OK)
 800b2de:	2100      	movs	r1, #0
 800b2e0:	4851      	ldr	r0, [pc, #324]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b2e2:	f7f9 fdf9 	bl	8004ed8 <HAL_TIM_PWM_Start>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f000 8096 	beq.w	800b41a <MX_TIM8_Init+0x1ee>
			{
				Error_Handler();
 800b2ee:	f000 f8d3 	bl	800b498 <Error_Handler>
		if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
		{
			Error_Handler();
		}
	}
}
 800b2f2:	e092      	b.n	800b41a <MX_TIM8_Init+0x1ee>
		TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800b2f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	601a      	str	r2, [r3, #0]
 800b2fc:	605a      	str	r2, [r3, #4]
 800b2fe:	609a      	str	r2, [r3, #8]
 800b300:	60da      	str	r2, [r3, #12]
 800b302:	611a      	str	r2, [r3, #16]
		TIM_IC_InitTypeDef sConfigIC = {0};
 800b304:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b308:	2200      	movs	r2, #0
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	605a      	str	r2, [r3, #4]
 800b30e:	609a      	str	r2, [r3, #8]
 800b310:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b312:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b316:	2200      	movs	r2, #0
 800b318:	601a      	str	r2, [r3, #0]
 800b31a:	605a      	str	r2, [r3, #4]
 800b31c:	609a      	str	r2, [r3, #8]
		TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800b31e:	463b      	mov	r3, r7
 800b320:	2234      	movs	r2, #52	; 0x34
 800b322:	2100      	movs	r1, #0
 800b324:	4618      	mov	r0, r3
 800b326:	f000 ff3d 	bl	800c1a4 <memset>
		htim8.Instance = TIM8;
 800b32a:	4b3f      	ldr	r3, [pc, #252]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b32c:	4a3f      	ldr	r2, [pc, #252]	; (800b42c <MX_TIM8_Init+0x200>)
 800b32e:	601a      	str	r2, [r3, #0]
		htim8.Init.Prescaler = PWM_Prescalers[4];
 800b330:	4b3f      	ldr	r3, [pc, #252]	; (800b430 <MX_TIM8_Init+0x204>)
 800b332:	891b      	ldrh	r3, [r3, #8]
 800b334:	461a      	mov	r2, r3
 800b336:	4b3c      	ldr	r3, [pc, #240]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b338:	605a      	str	r2, [r3, #4]
		htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b33a:	4b3b      	ldr	r3, [pc, #236]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	609a      	str	r2, [r3, #8]
		htim8.Init.Period = 65535;
 800b340:	4b39      	ldr	r3, [pc, #228]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b346:	60da      	str	r2, [r3, #12]
		htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b348:	4b37      	ldr	r3, [pc, #220]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	611a      	str	r2, [r3, #16]
		htim8.Init.RepetitionCounter = 0;
 800b34e:	4b36      	ldr	r3, [pc, #216]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b350:	2200      	movs	r2, #0
 800b352:	615a      	str	r2, [r3, #20]
		htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b354:	4b34      	ldr	r3, [pc, #208]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b356:	2200      	movs	r2, #0
 800b358:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800b35a:	4833      	ldr	r0, [pc, #204]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b35c:	f7f9 fe82 	bl	8005064 <HAL_TIM_IC_Init>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d001      	beq.n	800b36a <MX_TIM8_Init+0x13e>
			Error_Handler();
 800b366:	f000 f897 	bl	800b498 <Error_Handler>
		sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800b36a:	2304      	movs	r3, #4
 800b36c:	653b      	str	r3, [r7, #80]	; 0x50
		sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800b36e:	2350      	movs	r3, #80	; 0x50
 800b370:	657b      	str	r3, [r7, #84]	; 0x54
		sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800b372:	2300      	movs	r3, #0
 800b374:	65bb      	str	r3, [r7, #88]	; 0x58
		sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800b376:	2300      	movs	r3, #0
 800b378:	65fb      	str	r3, [r7, #92]	; 0x5c
		sSlaveConfig.TriggerFilter = 0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	663b      	str	r3, [r7, #96]	; 0x60
		if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800b37e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b382:	4619      	mov	r1, r3
 800b384:	4828      	ldr	r0, [pc, #160]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b386:	f7fa f9cb 	bl	8005720 <HAL_TIM_SlaveConfigSynchro>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d001      	beq.n	800b394 <MX_TIM8_Init+0x168>
			Error_Handler();
 800b390:	f000 f882 	bl	800b498 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800b394:	2300      	movs	r3, #0
 800b396:	643b      	str	r3, [r7, #64]	; 0x40
		sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800b398:	2301      	movs	r3, #1
 800b39a:	647b      	str	r3, [r7, #68]	; 0x44
		sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800b39c:	2300      	movs	r3, #0
 800b39e:	64bb      	str	r3, [r7, #72]	; 0x48
		sConfigIC.ICFilter = 0;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800b3a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	481e      	ldr	r0, [pc, #120]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b3ae:	f7fa f803 	bl	80053b8 <HAL_TIM_IC_ConfigChannel>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d001      	beq.n	800b3bc <MX_TIM8_Init+0x190>
			Error_Handler();
 800b3b8:	f000 f86e 	bl	800b498 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800b3bc:	2302      	movs	r3, #2
 800b3be:	643b      	str	r3, [r7, #64]	; 0x40
		sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	647b      	str	r3, [r7, #68]	; 0x44
		if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800b3c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b3c8:	2204      	movs	r2, #4
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	4816      	ldr	r0, [pc, #88]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b3ce:	f7f9 fff3 	bl	80053b8 <HAL_TIM_IC_ConfigChannel>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d001      	beq.n	800b3dc <MX_TIM8_Init+0x1b0>
			Error_Handler();
 800b3d8:	f000 f85e 	bl	800b498 <Error_Handler>
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	637b      	str	r3, [r7, #52]	; 0x34
		sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	63bb      	str	r3, [r7, #56]	; 0x38
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800b3e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	480e      	ldr	r0, [pc, #56]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b3f0:	f7fb f83c 	bl	800646c <HAL_TIMEx_MasterConfigSynchronization>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d001      	beq.n	800b3fe <MX_TIM8_Init+0x1d2>
			Error_Handler();
 800b3fa:	f000 f84d 	bl	800b498 <Error_Handler>
		sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800b3fe:	2300      	movs	r3, #0
 800b400:	61fb      	str	r3, [r7, #28]
		sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800b402:	2300      	movs	r3, #0
 800b404:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800b406:	463b      	mov	r3, r7
 800b408:	4619      	mov	r1, r3
 800b40a:	4807      	ldr	r0, [pc, #28]	; (800b428 <MX_TIM8_Init+0x1fc>)
 800b40c:	f7fb f88c 	bl	8006528 <HAL_TIMEx_ConfigBreakDeadTime>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d001      	beq.n	800b41a <MX_TIM8_Init+0x1ee>
			Error_Handler();
 800b416:	f000 f83f 	bl	800b498 <Error_Handler>
}
 800b41a:	bf00      	nop
 800b41c:	3780      	adds	r7, #128	; 0x80
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	200004aa 	.word	0x200004aa
 800b428:	2000015c 	.word	0x2000015c
 800b42c:	40013400 	.word	0x40013400
 800b430:	2000059c 	.word	0x2000059c
 800b434:	20000828 	.word	0x20000828
 800b438:	200009f0 	.word	0x200009f0

0800b43c <MX_LPTIM1_Init>:

static void MX_LPTIM1_Init(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	af00      	add	r7, sp, #0
	hlptim1.Instance = LPTIM1;
 800b440:	4b13      	ldr	r3, [pc, #76]	; (800b490 <MX_LPTIM1_Init+0x54>)
 800b442:	4a14      	ldr	r2, [pc, #80]	; (800b494 <MX_LPTIM1_Init+0x58>)
 800b444:	601a      	str	r2, [r3, #0]
	hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800b446:	4b12      	ldr	r3, [pc, #72]	; (800b490 <MX_LPTIM1_Init+0x54>)
 800b448:	2200      	movs	r2, #0
 800b44a:	605a      	str	r2, [r3, #4]
	hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 800b44c:	4b10      	ldr	r3, [pc, #64]	; (800b490 <MX_LPTIM1_Init+0x54>)
 800b44e:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 800b452:	609a      	str	r2, [r3, #8]
	hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800b454:	4b0e      	ldr	r3, [pc, #56]	; (800b490 <MX_LPTIM1_Init+0x54>)
 800b456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b45a:	615a      	str	r2, [r3, #20]
	hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800b45c:	4b0c      	ldr	r3, [pc, #48]	; (800b490 <MX_LPTIM1_Init+0x54>)
 800b45e:	2200      	movs	r2, #0
 800b460:	621a      	str	r2, [r3, #32]
	hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800b462:	4b0b      	ldr	r3, [pc, #44]	; (800b490 <MX_LPTIM1_Init+0x54>)
 800b464:	2200      	movs	r2, #0
 800b466:	625a      	str	r2, [r3, #36]	; 0x24
	hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800b468:	4b09      	ldr	r3, [pc, #36]	; (800b490 <MX_LPTIM1_Init+0x54>)
 800b46a:	2200      	movs	r2, #0
 800b46c:	629a      	str	r2, [r3, #40]	; 0x28
	hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800b46e:	4b08      	ldr	r3, [pc, #32]	; (800b490 <MX_LPTIM1_Init+0x54>)
 800b470:	2200      	movs	r2, #0
 800b472:	62da      	str	r2, [r3, #44]	; 0x2c
	hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800b474:	4b06      	ldr	r3, [pc, #24]	; (800b490 <MX_LPTIM1_Init+0x54>)
 800b476:	2200      	movs	r2, #0
 800b478:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800b47a:	4805      	ldr	r0, [pc, #20]	; (800b490 <MX_LPTIM1_Init+0x54>)
 800b47c:	f7f8 fa40 	bl	8003900 <HAL_LPTIM_Init>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d001      	beq.n	800b48a <MX_LPTIM1_Init+0x4e>
	{
		Error_Handler();
 800b486:	f000 f807 	bl	800b498 <Error_Handler>
	}
}
 800b48a:	bf00      	nop
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	20000678 	.word	0x20000678
 800b494:	40007c00 	.word	0x40007c00

0800b498 <Error_Handler>:


void Error_Handler(void)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(LED.PORT, LED.PIN);
 800b49c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b4a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7f8 f9f8 	bl	800389c <HAL_GPIO_TogglePin>
		HAL_Delay(33);
 800b4ac:	2021      	movs	r0, #33	; 0x21
 800b4ae:	f7f4 ff23 	bl	80002f8 <HAL_Delay>
		HAL_GPIO_TogglePin(LED.PORT, LED.PIN);
 800b4b2:	e7f3      	b.n	800b49c <Error_Handler+0x4>

0800b4b4 <Parse_Current>:
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim8;


uint32_t Parse_Current(uint32_t raw, uint32_t bytes)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
	uint32_t calculated=raw/10; //calculate current in 100's of uAs
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a0c      	ldr	r2, [pc, #48]	; (800b4f4 <Parse_Current+0x40>)
 800b4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c6:	08db      	lsrs	r3, r3, #3
 800b4c8:	60fb      	str	r3, [r7, #12]
	//TODO: put actual calculation here instead of made up numbers


	switch(bytes)
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d002      	beq.n	800b4d6 <Parse_Current+0x22>
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	d006      	beq.n	800b4e2 <Parse_Current+0x2e>
 800b4d4:	e007      	b.n	800b4e6 <Parse_Current+0x32>
	{
	case 1:
		return (calculated/1000); //return value in 100's of mAs
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	4a07      	ldr	r2, [pc, #28]	; (800b4f8 <Parse_Current+0x44>)
 800b4da:	fba2 2303 	umull	r2, r3, r2, r3
 800b4de:	099b      	lsrs	r3, r3, #6
 800b4e0:	e002      	b.n	800b4e8 <Parse_Current+0x34>
	case 2:
		return (calculated); //return value in 100's of uAs
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	e000      	b.n	800b4e8 <Parse_Current+0x34>
	default:
		//TODO: don't define number of bytes here
		return 0;
 800b4e6:	2300      	movs	r3, #0
	}
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3714      	adds	r7, #20
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	cccccccd 	.word	0xcccccccd
 800b4f8:	10624dd3 	.word	0x10624dd3

0800b4fc <Parse_Voltage>:

uint32_t Parse_Voltage(uint32_t raw, uint32_t raw_ground)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
	//voltage should be raw*4 after voltage divider, but component is not working with tolerances, voltage divider is 130 and 82 which is 106/41, voltage is raw*3.3/(2^10), V to mV is *1000;
	//approximate value from raw->Vcc based on measured values is (95*raw/2)-1645; note that this formula is not taken from reality, it is probably approximating a logarithimic formula but datasheet doesn't give enough details; is low enough precision that overflow is not a problem to consider at all
	uint32_t calculated=(((95*raw)/2)-1645)+((raw_ground*825)/256); //calculate current in mV
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	4613      	mov	r3, r2
 800b50a:	005b      	lsls	r3, r3, #1
 800b50c:	4413      	add	r3, r2
 800b50e:	015b      	lsls	r3, r3, #5
 800b510:	1a9b      	subs	r3, r3, r2
 800b512:	085a      	lsrs	r2, r3, #1
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	f240 3139 	movw	r1, #825	; 0x339
 800b51a:	fb01 f303 	mul.w	r3, r1, r3
 800b51e:	0a1b      	lsrs	r3, r3, #8
 800b520:	4413      	add	r3, r2
 800b522:	f2a3 636d 	subw	r3, r3, #1645	; 0x66d
 800b526:	60fb      	str	r3, [r7, #12]
	//TODO: check that this function works properly for the second board assembled as well sometime

	return calculated;
 800b528:	68fb      	ldr	r3, [r7, #12]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3714      	adds	r7, #20
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
	...

0800b538 <Parse_Temperature>:

uint32_t Parse_Temperature(uint32_t raw)
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
	uint32_t calculated=401-(raw*3791/5000); //calculate temperature in °C
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f640 62cf 	movw	r2, #3791	; 0xecf
 800b546:	fb02 f303 	mul.w	r3, r2, r3
 800b54a:	4a07      	ldr	r2, [pc, #28]	; (800b568 <Parse_Temperature+0x30>)
 800b54c:	fba2 2303 	umull	r2, r3, r2, r3
 800b550:	0b1b      	lsrs	r3, r3, #12
 800b552:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 800b556:	3301      	adds	r3, #1
 800b558:	60fb      	str	r3, [r7, #12]
	//TODO: get some sort of line for this and check what it looks like in reality, datasheet only gives value for 1k ohm resistor

	return calculated;
 800b55a:	68fb      	ldr	r3, [r7, #12]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3714      	adds	r7, #20
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr
 800b568:	d1b71759 	.word	0xd1b71759

0800b56c <Calculate_PWM_DC>:
/*
		volatile uint32_t a = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
		volatile uint32_t b = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);*/

uint32_t Calculate_PWM_DC(uint32_t channel)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
	uint32_t DC=0;
 800b574:	2300      	movs	r3, #0
 800b576:	617b      	str	r3, [r7, #20]
	uint32_t T=0, off=0, on=0;
 800b578:	2300      	movs	r3, #0
 800b57a:	613b      	str	r3, [r7, #16]
 800b57c:	2300      	movs	r3, #0
 800b57e:	60fb      	str	r3, [r7, #12]
 800b580:	2300      	movs	r3, #0
 800b582:	60bb      	str	r3, [r7, #8]

	if (!(PWM_In_EN>>channel)&1)
 800b584:	4b2d      	ldr	r3, [pc, #180]	; (800b63c <Calculate_PWM_DC+0xd0>)
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	461a      	mov	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	fa42 f303 	asr.w	r3, r2, r3
 800b590:	2b00      	cmp	r3, #0
 800b592:	d105      	bne.n	800b5a0 <Calculate_PWM_DC+0x34>
	{
		Set_Error(WARN_PWM_CHANNEL_UNINITIALIZED);
 800b594:	f44f 7081 	mov.w	r0, #258	; 0x102
 800b598:	f7fe fd36 	bl	800a008 <Set_Error>
		return 0;
 800b59c:	2300      	movs	r3, #0
 800b59e:	e048      	b.n	800b632 <Calculate_PWM_DC+0xc6>
	}

	switch(channel)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b03      	cmp	r3, #3
 800b5a4:	d018      	beq.n	800b5d8 <Calculate_PWM_DC+0x6c>
 800b5a6:	2b04      	cmp	r3, #4
 800b5a8:	d029      	beq.n	800b5fe <Calculate_PWM_DC+0x92>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d13a      	bne.n	800b624 <Calculate_PWM_DC+0xb8>
	{
	case 0:
		T=HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 800b5ae:	2104      	movs	r1, #4
 800b5b0:	4823      	ldr	r0, [pc, #140]	; (800b640 <Calculate_PWM_DC+0xd4>)
 800b5b2:	f7fa f8f7 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b5b6:	6138      	str	r0, [r7, #16]
		off=HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	4821      	ldr	r0, [pc, #132]	; (800b640 <Calculate_PWM_DC+0xd4>)
 800b5bc:	f7fa f8f2 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b5c0:	60f8      	str	r0, [r7, #12]
		DC=(((T-off)*100)/T); //note integer division always rounds down
 800b5c2:	693a      	ldr	r2, [r7, #16]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	1ad3      	subs	r3, r2, r3
 800b5c8:	2264      	movs	r2, #100	; 0x64
 800b5ca:	fb02 f203 	mul.w	r2, r2, r3
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d4:	617b      	str	r3, [r7, #20]
		break;
 800b5d6:	e02b      	b.n	800b630 <Calculate_PWM_DC+0xc4>
	case 3:
		T=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 800b5d8:	2100      	movs	r1, #0
 800b5da:	481a      	ldr	r0, [pc, #104]	; (800b644 <Calculate_PWM_DC+0xd8>)
 800b5dc:	f7fa f8e2 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b5e0:	6138      	str	r0, [r7, #16]
		on=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 800b5e2:	2104      	movs	r1, #4
 800b5e4:	4817      	ldr	r0, [pc, #92]	; (800b644 <Calculate_PWM_DC+0xd8>)
 800b5e6:	f7fa f8dd 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b5ea:	60b8      	str	r0, [r7, #8]
		DC=((on*100)/T);
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	2264      	movs	r2, #100	; 0x64
 800b5f0:	fb02 f203 	mul.w	r2, r2, r3
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5fa:	617b      	str	r3, [r7, #20]
		break;
 800b5fc:	e018      	b.n	800b630 <Calculate_PWM_DC+0xc4>
	case 4:
		T=HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_1);
 800b5fe:	2100      	movs	r1, #0
 800b600:	4811      	ldr	r0, [pc, #68]	; (800b648 <Calculate_PWM_DC+0xdc>)
 800b602:	f7fa f8cf 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b606:	6138      	str	r0, [r7, #16]
		on=HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_2);
 800b608:	2104      	movs	r1, #4
 800b60a:	480f      	ldr	r0, [pc, #60]	; (800b648 <Calculate_PWM_DC+0xdc>)
 800b60c:	f7fa f8ca 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b610:	60b8      	str	r0, [r7, #8]
		DC=((on*100)/T);
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	2264      	movs	r2, #100	; 0x64
 800b616:	fb02 f203 	mul.w	r2, r2, r3
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b620:	617b      	str	r3, [r7, #20]
		break;
 800b622:	e005      	b.n	800b630 <Calculate_PWM_DC+0xc4>
	default:
		Set_Error(WARN_PWM_INVALID_CHANNEL);
 800b624:	f240 1001 	movw	r0, #257	; 0x101
 800b628:	f7fe fcee 	bl	800a008 <Set_Error>
		return 0;
 800b62c:	2300      	movs	r3, #0
 800b62e:	e000      	b.n	800b632 <Calculate_PWM_DC+0xc6>
	}


	return DC; //DC ranges from 0-100
 800b630:	697b      	ldr	r3, [r7, #20]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3718      	adds	r7, #24
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	200004aa 	.word	0x200004aa
 800b640:	20000948 	.word	0x20000948
 800b644:	200001e0 	.word	0x200001e0
 800b648:	2000015c 	.word	0x2000015c

0800b64c <Calculate_PWM_Freq>:

uint32_t Calculate_PWM_Freq(uint32_t channel)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
	uint32_t frequency=0;
 800b654:	2300      	movs	r3, #0
 800b656:	60bb      	str	r3, [r7, #8]
	uint32_t T=0;
 800b658:	2300      	movs	r3, #0
 800b65a:	60fb      	str	r3, [r7, #12]

	if (!(PWM_In_EN>>channel)&1)
 800b65c:	4b25      	ldr	r3, [pc, #148]	; (800b6f4 <Calculate_PWM_Freq+0xa8>)
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	461a      	mov	r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	fa42 f303 	asr.w	r3, r2, r3
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d105      	bne.n	800b678 <Calculate_PWM_Freq+0x2c>
	{
		Set_Error(WARN_PWM_CHANNEL_UNINITIALIZED);
 800b66c:	f44f 7081 	mov.w	r0, #258	; 0x102
 800b670:	f7fe fcca 	bl	800a008 <Set_Error>
		return 0;
 800b674:	2300      	movs	r3, #0
 800b676:	e038      	b.n	800b6ea <Calculate_PWM_Freq+0x9e>
	}

	switch(channel)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b03      	cmp	r3, #3
 800b67c:	d009      	beq.n	800b692 <Calculate_PWM_Freq+0x46>
 800b67e:	2b04      	cmp	r3, #4
 800b680:	d00d      	beq.n	800b69e <Calculate_PWM_Freq+0x52>
 800b682:	2b00      	cmp	r3, #0
 800b684:	d111      	bne.n	800b6aa <Calculate_PWM_Freq+0x5e>
	{
	case 0:
		T=HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 800b686:	2104      	movs	r1, #4
 800b688:	481b      	ldr	r0, [pc, #108]	; (800b6f8 <Calculate_PWM_Freq+0xac>)
 800b68a:	f7fa f88b 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b68e:	60f8      	str	r0, [r7, #12]
		break;
 800b690:	e011      	b.n	800b6b6 <Calculate_PWM_Freq+0x6a>
	case 3:
		T=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 800b692:	2100      	movs	r1, #0
 800b694:	4819      	ldr	r0, [pc, #100]	; (800b6fc <Calculate_PWM_Freq+0xb0>)
 800b696:	f7fa f885 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b69a:	60f8      	str	r0, [r7, #12]
		break;
 800b69c:	e00b      	b.n	800b6b6 <Calculate_PWM_Freq+0x6a>
	case 4:
		T=HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_1);
 800b69e:	2100      	movs	r1, #0
 800b6a0:	4817      	ldr	r0, [pc, #92]	; (800b700 <Calculate_PWM_Freq+0xb4>)
 800b6a2:	f7fa f87f 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b6a6:	60f8      	str	r0, [r7, #12]
		break;
 800b6a8:	e005      	b.n	800b6b6 <Calculate_PWM_Freq+0x6a>
	default:
		Set_Error(WARN_PWM_INVALID_CHANNEL);
 800b6aa:	f240 1001 	movw	r0, #257	; 0x101
 800b6ae:	f7fe fcab 	bl	800a008 <Set_Error>
		return 0;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	e019      	b.n	800b6ea <Calculate_PWM_Freq+0x9e>
	}
	frequency = (((HAL_RCC_GetHCLKFreq()*10)/(T*(PWM_Prescalers[channel]+1)))+5)/10; //calculate frequency in .1 Hz, add .5 Hz, divide by 10 to get rounded value in Hz
 800b6b6:	f7f9 f923 	bl	8004900 <HAL_RCC_GetHCLKFreq>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	4613      	mov	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	4413      	add	r3, r2
 800b6c2:	005b      	lsls	r3, r3, #1
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	4a0f      	ldr	r2, [pc, #60]	; (800b704 <Calculate_PWM_Freq+0xb8>)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	fb03 f302 	mul.w	r3, r3, r2
 800b6d8:	fbb1 f3f3 	udiv	r3, r1, r3
 800b6dc:	3305      	adds	r3, #5
 800b6de:	4a0a      	ldr	r2, [pc, #40]	; (800b708 <Calculate_PWM_Freq+0xbc>)
 800b6e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b6e4:	08db      	lsrs	r3, r3, #3
 800b6e6:	60bb      	str	r3, [r7, #8]

	//if frequency is higher than 255 Hz, two bytes must be used to send the frequency, frequency will almost surely not be over 65kHz
	return frequency;
 800b6e8:	68bb      	ldr	r3, [r7, #8]
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	200004aa 	.word	0x200004aa
 800b6f8:	20000948 	.word	0x20000948
 800b6fc:	200001e0 	.word	0x200001e0
 800b700:	2000015c 	.word	0x2000015c
 800b704:	2000059c 	.word	0x2000059c
 800b708:	cccccccd 	.word	0xcccccccd

0800b70c <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 800b70c:	b480      	push	{r7}
 800b70e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b710:	4b05      	ldr	r3, [pc, #20]	; (800b728 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	4a04      	ldr	r2, [pc, #16]	; (800b728 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800b716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b71a:	6093      	str	r3, [r2, #8]
}
 800b71c:	bf00      	nop
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	40007000 	.word	0x40007000

0800b72c <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_adc1;
extern DMA_HandleTypeDef hdma_adc2;


void HAL_MspInit(void)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b732:	4b0f      	ldr	r3, [pc, #60]	; (800b770 <HAL_MspInit+0x44>)
 800b734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b736:	4a0e      	ldr	r2, [pc, #56]	; (800b770 <HAL_MspInit+0x44>)
 800b738:	f043 0301 	orr.w	r3, r3, #1
 800b73c:	6613      	str	r3, [r2, #96]	; 0x60
 800b73e:	4b0c      	ldr	r3, [pc, #48]	; (800b770 <HAL_MspInit+0x44>)
 800b740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b742:	f003 0301 	and.w	r3, r3, #1
 800b746:	607b      	str	r3, [r7, #4]
 800b748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b74a:	4b09      	ldr	r3, [pc, #36]	; (800b770 <HAL_MspInit+0x44>)
 800b74c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b74e:	4a08      	ldr	r2, [pc, #32]	; (800b770 <HAL_MspInit+0x44>)
 800b750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b754:	6593      	str	r3, [r2, #88]	; 0x58
 800b756:	4b06      	ldr	r3, [pc, #24]	; (800b770 <HAL_MspInit+0x44>)
 800b758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b75a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b75e:	603b      	str	r3, [r7, #0]
 800b760:	683b      	ldr	r3, [r7, #0]

  LL_PWR_DisableDeadBatteryPD();
 800b762:	f7ff ffd3 	bl	800b70c <LL_PWR_DisableDeadBatteryPD>
}
 800b766:	bf00      	nop
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	40021000 	.word	0x40021000

0800b774 <HAL_ADC_MspInit>:

//counter to keep track of how many peripherals require ADC12 clock, so that deinitializing ADC1 allows ADC2 to run
static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b08c      	sub	sp, #48	; 0x30
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b77c:	f107 031c 	add.w	r3, r7, #28
 800b780:	2200      	movs	r2, #0
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	605a      	str	r2, [r3, #4]
 800b786:	609a      	str	r2, [r3, #8]
 800b788:	60da      	str	r2, [r3, #12]
 800b78a:	611a      	str	r2, [r3, #16]
	if(hadc->Instance==ADC1)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b794:	d15a      	bne.n	800b84c <HAL_ADC_MspInit+0xd8>
	{
		HAL_RCC_ADC12_CLK_ENABLED++;
 800b796:	4b5e      	ldr	r3, [pc, #376]	; (800b910 <HAL_ADC_MspInit+0x19c>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	3301      	adds	r3, #1
 800b79c:	4a5c      	ldr	r2, [pc, #368]	; (800b910 <HAL_ADC_MspInit+0x19c>)
 800b79e:	6013      	str	r3, [r2, #0]
		if(HAL_RCC_ADC12_CLK_ENABLED==1)
 800b7a0:	4b5b      	ldr	r3, [pc, #364]	; (800b910 <HAL_ADC_MspInit+0x19c>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d10b      	bne.n	800b7c0 <HAL_ADC_MspInit+0x4c>
		{
			__HAL_RCC_ADC12_CLK_ENABLE();
 800b7a8:	4b5a      	ldr	r3, [pc, #360]	; (800b914 <HAL_ADC_MspInit+0x1a0>)
 800b7aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7ac:	4a59      	ldr	r2, [pc, #356]	; (800b914 <HAL_ADC_MspInit+0x1a0>)
 800b7ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b7b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b7b4:	4b57      	ldr	r3, [pc, #348]	; (800b914 <HAL_ADC_MspInit+0x1a0>)
 800b7b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7bc:	61bb      	str	r3, [r7, #24]
 800b7be:	69bb      	ldr	r3, [r7, #24]
		}
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b7c0:	4b54      	ldr	r3, [pc, #336]	; (800b914 <HAL_ADC_MspInit+0x1a0>)
 800b7c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7c4:	4a53      	ldr	r2, [pc, #332]	; (800b914 <HAL_ADC_MspInit+0x1a0>)
 800b7c6:	f043 0301 	orr.w	r3, r3, #1
 800b7ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b7cc:	4b51      	ldr	r3, [pc, #324]	; (800b914 <HAL_ADC_MspInit+0x1a0>)
 800b7ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7d0:	f003 0301 	and.w	r3, r3, #1
 800b7d4:	617b      	str	r3, [r7, #20]
 800b7d6:	697b      	ldr	r3, [r7, #20]

		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800b7d8:	2307      	movs	r3, #7
 800b7da:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7e4:	f107 031c 	add.w	r3, r7, #28
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b7ee:	f7f7 fea3 	bl	8003538 <HAL_GPIO_Init>

		hdma_adc1.Instance = DMA1_Channel1;
 800b7f2:	4b49      	ldr	r3, [pc, #292]	; (800b918 <HAL_ADC_MspInit+0x1a4>)
 800b7f4:	4a49      	ldr	r2, [pc, #292]	; (800b91c <HAL_ADC_MspInit+0x1a8>)
 800b7f6:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800b7f8:	4b47      	ldr	r3, [pc, #284]	; (800b918 <HAL_ADC_MspInit+0x1a4>)
 800b7fa:	2205      	movs	r2, #5
 800b7fc:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b7fe:	4b46      	ldr	r3, [pc, #280]	; (800b918 <HAL_ADC_MspInit+0x1a4>)
 800b800:	2200      	movs	r2, #0
 800b802:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800b804:	4b44      	ldr	r3, [pc, #272]	; (800b918 <HAL_ADC_MspInit+0x1a4>)
 800b806:	2200      	movs	r2, #0
 800b808:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800b80a:	4b43      	ldr	r3, [pc, #268]	; (800b918 <HAL_ADC_MspInit+0x1a4>)
 800b80c:	2280      	movs	r2, #128	; 0x80
 800b80e:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b810:	4b41      	ldr	r3, [pc, #260]	; (800b918 <HAL_ADC_MspInit+0x1a4>)
 800b812:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b816:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b818:	4b3f      	ldr	r3, [pc, #252]	; (800b918 <HAL_ADC_MspInit+0x1a4>)
 800b81a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b81e:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800b820:	4b3d      	ldr	r3, [pc, #244]	; (800b918 <HAL_ADC_MspInit+0x1a4>)
 800b822:	2220      	movs	r2, #32
 800b824:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800b826:	4b3c      	ldr	r3, [pc, #240]	; (800b918 <HAL_ADC_MspInit+0x1a4>)
 800b828:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b82c:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800b82e:	483a      	ldr	r0, [pc, #232]	; (800b918 <HAL_ADC_MspInit+0x1a4>)
 800b830:	f7f6 fa84 	bl	8001d3c <HAL_DMA_Init>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d001      	beq.n	800b83e <HAL_ADC_MspInit+0xca>
		{
			Error_Handler();
 800b83a:	f7ff fe2d 	bl	800b498 <Error_Handler>
		}

		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a35      	ldr	r2, [pc, #212]	; (800b918 <HAL_ADC_MspInit+0x1a4>)
 800b842:	655a      	str	r2, [r3, #84]	; 0x54
 800b844:	4a34      	ldr	r2, [pc, #208]	; (800b918 <HAL_ADC_MspInit+0x1a4>)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6293      	str	r3, [r2, #40]	; 0x28
		  Error_Handler();
		}

		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
	}
}
 800b84a:	e05d      	b.n	800b908 <HAL_ADC_MspInit+0x194>
	else if(hadc->Instance==ADC2)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a33      	ldr	r2, [pc, #204]	; (800b920 <HAL_ADC_MspInit+0x1ac>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d158      	bne.n	800b908 <HAL_ADC_MspInit+0x194>
		HAL_RCC_ADC12_CLK_ENABLED++;
 800b856:	4b2e      	ldr	r3, [pc, #184]	; (800b910 <HAL_ADC_MspInit+0x19c>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	3301      	adds	r3, #1
 800b85c:	4a2c      	ldr	r2, [pc, #176]	; (800b910 <HAL_ADC_MspInit+0x19c>)
 800b85e:	6013      	str	r3, [r2, #0]
		if(HAL_RCC_ADC12_CLK_ENABLED==1)
 800b860:	4b2b      	ldr	r3, [pc, #172]	; (800b910 <HAL_ADC_MspInit+0x19c>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b01      	cmp	r3, #1
 800b866:	d10b      	bne.n	800b880 <HAL_ADC_MspInit+0x10c>
		  __HAL_RCC_ADC12_CLK_ENABLE();
 800b868:	4b2a      	ldr	r3, [pc, #168]	; (800b914 <HAL_ADC_MspInit+0x1a0>)
 800b86a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b86c:	4a29      	ldr	r2, [pc, #164]	; (800b914 <HAL_ADC_MspInit+0x1a0>)
 800b86e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b872:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b874:	4b27      	ldr	r3, [pc, #156]	; (800b914 <HAL_ADC_MspInit+0x1a0>)
 800b876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b87c:	613b      	str	r3, [r7, #16]
 800b87e:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 800b880:	4b24      	ldr	r3, [pc, #144]	; (800b914 <HAL_ADC_MspInit+0x1a0>)
 800b882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b884:	4a23      	ldr	r2, [pc, #140]	; (800b914 <HAL_ADC_MspInit+0x1a0>)
 800b886:	f043 0320 	orr.w	r3, r3, #32
 800b88a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b88c:	4b21      	ldr	r3, [pc, #132]	; (800b914 <HAL_ADC_MspInit+0x1a0>)
 800b88e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b890:	f003 0320 	and.w	r3, r3, #32
 800b894:	60fb      	str	r3, [r7, #12]
 800b896:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b898:	2302      	movs	r3, #2
 800b89a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b89c:	2303      	movs	r3, #3
 800b89e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b8a4:	f107 031c 	add.w	r3, r7, #28
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	481e      	ldr	r0, [pc, #120]	; (800b924 <HAL_ADC_MspInit+0x1b0>)
 800b8ac:	f7f7 fe44 	bl	8003538 <HAL_GPIO_Init>
		hdma_adc2.Instance = DMA1_Channel2;
 800b8b0:	4b1d      	ldr	r3, [pc, #116]	; (800b928 <HAL_ADC_MspInit+0x1b4>)
 800b8b2:	4a1e      	ldr	r2, [pc, #120]	; (800b92c <HAL_ADC_MspInit+0x1b8>)
 800b8b4:	601a      	str	r2, [r3, #0]
		hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800b8b6:	4b1c      	ldr	r3, [pc, #112]	; (800b928 <HAL_ADC_MspInit+0x1b4>)
 800b8b8:	2224      	movs	r2, #36	; 0x24
 800b8ba:	605a      	str	r2, [r3, #4]
		hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b8bc:	4b1a      	ldr	r3, [pc, #104]	; (800b928 <HAL_ADC_MspInit+0x1b4>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	609a      	str	r2, [r3, #8]
		hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800b8c2:	4b19      	ldr	r3, [pc, #100]	; (800b928 <HAL_ADC_MspInit+0x1b4>)
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	60da      	str	r2, [r3, #12]
		hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800b8c8:	4b17      	ldr	r3, [pc, #92]	; (800b928 <HAL_ADC_MspInit+0x1b4>)
 800b8ca:	2280      	movs	r2, #128	; 0x80
 800b8cc:	611a      	str	r2, [r3, #16]
		hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b8ce:	4b16      	ldr	r3, [pc, #88]	; (800b928 <HAL_ADC_MspInit+0x1b4>)
 800b8d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8d4:	615a      	str	r2, [r3, #20]
		hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b8d6:	4b14      	ldr	r3, [pc, #80]	; (800b928 <HAL_ADC_MspInit+0x1b4>)
 800b8d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b8dc:	619a      	str	r2, [r3, #24]
		hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800b8de:	4b12      	ldr	r3, [pc, #72]	; (800b928 <HAL_ADC_MspInit+0x1b4>)
 800b8e0:	2220      	movs	r2, #32
 800b8e2:	61da      	str	r2, [r3, #28]
		hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800b8e4:	4b10      	ldr	r3, [pc, #64]	; (800b928 <HAL_ADC_MspInit+0x1b4>)
 800b8e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b8ea:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800b8ec:	480e      	ldr	r0, [pc, #56]	; (800b928 <HAL_ADC_MspInit+0x1b4>)
 800b8ee:	f7f6 fa25 	bl	8001d3c <HAL_DMA_Init>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d001      	beq.n	800b8fc <HAL_ADC_MspInit+0x188>
		  Error_Handler();
 800b8f8:	f7ff fdce 	bl	800b498 <Error_Handler>
		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	4a0a      	ldr	r2, [pc, #40]	; (800b928 <HAL_ADC_MspInit+0x1b4>)
 800b900:	655a      	str	r2, [r3, #84]	; 0x54
 800b902:	4a09      	ldr	r2, [pc, #36]	; (800b928 <HAL_ADC_MspInit+0x1b4>)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6293      	str	r3, [r2, #40]	; 0x28
}
 800b908:	bf00      	nop
 800b90a:	3730      	adds	r7, #48	; 0x30
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	200000a4 	.word	0x200000a4
 800b914:	40021000 	.word	0x40021000
 800b918:	200006c0 	.word	0x200006c0
 800b91c:	40020008 	.word	0x40020008
 800b920:	50000100 	.word	0x50000100
 800b924:	48001400 	.word	0x48001400
 800b928:	20000990 	.word	0x20000990
 800b92c:	4002001c 	.word	0x4002001c

0800b930 <HAL_FDCAN_MspInit>:

}


void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b08a      	sub	sp, #40	; 0x28
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b938:	f107 0314 	add.w	r3, r7, #20
 800b93c:	2200      	movs	r2, #0
 800b93e:	601a      	str	r2, [r3, #0]
 800b940:	605a      	str	r2, [r3, #4]
 800b942:	609a      	str	r2, [r3, #8]
 800b944:	60da      	str	r2, [r3, #12]
 800b946:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a1c      	ldr	r2, [pc, #112]	; (800b9c0 <HAL_FDCAN_MspInit+0x90>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d131      	bne.n	800b9b6 <HAL_FDCAN_MspInit+0x86>
  {
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800b952:	4b1c      	ldr	r3, [pc, #112]	; (800b9c4 <HAL_FDCAN_MspInit+0x94>)
 800b954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b956:	4a1b      	ldr	r2, [pc, #108]	; (800b9c4 <HAL_FDCAN_MspInit+0x94>)
 800b958:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b95c:	6593      	str	r3, [r2, #88]	; 0x58
 800b95e:	4b19      	ldr	r3, [pc, #100]	; (800b9c4 <HAL_FDCAN_MspInit+0x94>)
 800b960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b966:	613b      	str	r3, [r7, #16]
 800b968:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b96a:	4b16      	ldr	r3, [pc, #88]	; (800b9c4 <HAL_FDCAN_MspInit+0x94>)
 800b96c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b96e:	4a15      	ldr	r2, [pc, #84]	; (800b9c4 <HAL_FDCAN_MspInit+0x94>)
 800b970:	f043 0301 	orr.w	r3, r3, #1
 800b974:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b976:	4b13      	ldr	r3, [pc, #76]	; (800b9c4 <HAL_FDCAN_MspInit+0x94>)
 800b978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b97a:	f003 0301 	and.w	r3, r3, #1
 800b97e:	60fb      	str	r3, [r7, #12]
 800b980:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b982:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b988:	2302      	movs	r3, #2
 800b98a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b98c:	2300      	movs	r3, #0
 800b98e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b990:	2300      	movs	r3, #0
 800b992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800b994:	2309      	movs	r3, #9
 800b996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b998:	f107 0314 	add.w	r3, r7, #20
 800b99c:	4619      	mov	r1, r3
 800b99e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b9a2:	f7f7 fdc9 	bl	8003538 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	2015      	movs	r0, #21
 800b9ac:	f7f6 f991 	bl	8001cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800b9b0:	2015      	movs	r0, #21
 800b9b2:	f7f6 f9a8 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  }
}
 800b9b6:	bf00      	nop
 800b9b8:	3728      	adds	r7, #40	; 0x28
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	40006400 	.word	0x40006400
 800b9c4:	40021000 	.word	0x40021000

0800b9c8 <HAL_TIM_Base_MspInit>:

}


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b088      	sub	sp, #32
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
	if(htim_base->Instance==TIM1)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a4a      	ldr	r2, [pc, #296]	; (800bb00 <HAL_TIM_Base_MspInit+0x138>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d114      	bne.n	800ba04 <HAL_TIM_Base_MspInit+0x3c>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 800b9da:	4b4a      	ldr	r3, [pc, #296]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800b9dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9de:	4a49      	ldr	r2, [pc, #292]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800b9e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b9e4:	6613      	str	r3, [r2, #96]	; 0x60
 800b9e6:	4b47      	ldr	r3, [pc, #284]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800b9e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9ee:	61fb      	str	r3, [r7, #28]
 800b9f0:	69fb      	ldr	r3, [r7, #28]
		HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	2019      	movs	r0, #25
 800b9f8:	f7f6 f96b 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800b9fc:	2019      	movs	r0, #25
 800b9fe:	f7f6 f982 	bl	8001d06 <HAL_NVIC_EnableIRQ>
	}
	else if(htim_base->Instance==TIM17)
	{
		__HAL_RCC_TIM17_CLK_ENABLE();
	}
}
 800ba02:	e078      	b.n	800baf6 <HAL_TIM_Base_MspInit+0x12e>
	else if(htim_base->Instance==TIM6)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a3f      	ldr	r2, [pc, #252]	; (800bb08 <HAL_TIM_Base_MspInit+0x140>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d114      	bne.n	800ba38 <HAL_TIM_Base_MspInit+0x70>
		__HAL_RCC_TIM6_CLK_ENABLE();
 800ba0e:	4b3d      	ldr	r3, [pc, #244]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800ba10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba12:	4a3c      	ldr	r2, [pc, #240]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800ba14:	f043 0310 	orr.w	r3, r3, #16
 800ba18:	6593      	str	r3, [r2, #88]	; 0x58
 800ba1a:	4b3a      	ldr	r3, [pc, #232]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800ba1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba1e:	f003 0310 	and.w	r3, r3, #16
 800ba22:	61bb      	str	r3, [r7, #24]
 800ba24:	69bb      	ldr	r3, [r7, #24]
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800ba26:	2200      	movs	r2, #0
 800ba28:	2100      	movs	r1, #0
 800ba2a:	2036      	movs	r0, #54	; 0x36
 800ba2c:	f7f6 f951 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ba30:	2036      	movs	r0, #54	; 0x36
 800ba32:	f7f6 f968 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800ba36:	e05e      	b.n	800baf6 <HAL_TIM_Base_MspInit+0x12e>
	else if(htim_base->Instance==TIM7)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a33      	ldr	r2, [pc, #204]	; (800bb0c <HAL_TIM_Base_MspInit+0x144>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d114      	bne.n	800ba6c <HAL_TIM_Base_MspInit+0xa4>
		__HAL_RCC_TIM7_CLK_ENABLE();
 800ba42:	4b30      	ldr	r3, [pc, #192]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800ba44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba46:	4a2f      	ldr	r2, [pc, #188]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800ba48:	f043 0320 	orr.w	r3, r3, #32
 800ba4c:	6593      	str	r3, [r2, #88]	; 0x58
 800ba4e:	4b2d      	ldr	r3, [pc, #180]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800ba50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba52:	f003 0320 	and.w	r3, r3, #32
 800ba56:	617b      	str	r3, [r7, #20]
 800ba58:	697b      	ldr	r3, [r7, #20]
		HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	2037      	movs	r0, #55	; 0x37
 800ba60:	f7f6 f937 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800ba64:	2037      	movs	r0, #55	; 0x37
 800ba66:	f7f6 f94e 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800ba6a:	e044      	b.n	800baf6 <HAL_TIM_Base_MspInit+0x12e>
	else if(htim_base->Instance==TIM15)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a27      	ldr	r2, [pc, #156]	; (800bb10 <HAL_TIM_Base_MspInit+0x148>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d114      	bne.n	800baa0 <HAL_TIM_Base_MspInit+0xd8>
		__HAL_RCC_TIM15_CLK_ENABLE();
 800ba76:	4b23      	ldr	r3, [pc, #140]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800ba78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba7a:	4a22      	ldr	r2, [pc, #136]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800ba7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba80:	6613      	str	r3, [r2, #96]	; 0x60
 800ba82:	4b20      	ldr	r3, [pc, #128]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800ba84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba8a:	613b      	str	r3, [r7, #16]
 800ba8c:	693b      	ldr	r3, [r7, #16]
		HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800ba8e:	2200      	movs	r2, #0
 800ba90:	2100      	movs	r1, #0
 800ba92:	2018      	movs	r0, #24
 800ba94:	f7f6 f91d 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800ba98:	2018      	movs	r0, #24
 800ba9a:	f7f6 f934 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800ba9e:	e02a      	b.n	800baf6 <HAL_TIM_Base_MspInit+0x12e>
	else if(htim_base->Instance==TIM16)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a1b      	ldr	r2, [pc, #108]	; (800bb14 <HAL_TIM_Base_MspInit+0x14c>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d114      	bne.n	800bad4 <HAL_TIM_Base_MspInit+0x10c>
		__HAL_RCC_TIM16_CLK_ENABLE();
 800baaa:	4b16      	ldr	r3, [pc, #88]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800baac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800baae:	4a15      	ldr	r2, [pc, #84]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800bab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bab4:	6613      	str	r3, [r2, #96]	; 0x60
 800bab6:	4b13      	ldr	r3, [pc, #76]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800bab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800baba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800babe:	60fb      	str	r3, [r7, #12]
 800bac0:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800bac2:	2200      	movs	r2, #0
 800bac4:	2100      	movs	r1, #0
 800bac6:	2019      	movs	r0, #25
 800bac8:	f7f6 f903 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800bacc:	2019      	movs	r0, #25
 800bace:	f7f6 f91a 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800bad2:	e010      	b.n	800baf6 <HAL_TIM_Base_MspInit+0x12e>
	else if(htim_base->Instance==TIM17)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a0f      	ldr	r2, [pc, #60]	; (800bb18 <HAL_TIM_Base_MspInit+0x150>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d10b      	bne.n	800baf6 <HAL_TIM_Base_MspInit+0x12e>
		__HAL_RCC_TIM17_CLK_ENABLE();
 800bade:	4b09      	ldr	r3, [pc, #36]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800bae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bae2:	4a08      	ldr	r2, [pc, #32]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800bae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bae8:	6613      	str	r3, [r2, #96]	; 0x60
 800baea:	4b06      	ldr	r3, [pc, #24]	; (800bb04 <HAL_TIM_Base_MspInit+0x13c>)
 800baec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800baee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800baf2:	60bb      	str	r3, [r7, #8]
 800baf4:	68bb      	ldr	r3, [r7, #8]
}
 800baf6:	bf00      	nop
 800baf8:	3720      	adds	r7, #32
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	40012c00 	.word	0x40012c00
 800bb04:	40021000 	.word	0x40021000
 800bb08:	40001000 	.word	0x40001000
 800bb0c:	40001400 	.word	0x40001400
 800bb10:	40014000 	.word	0x40014000
 800bb14:	40014400 	.word	0x40014400
 800bb18:	40014800 	.word	0x40014800

0800bb1c <HAL_TIM_MspPostInit>:
		__HAL_RCC_TIM17_CLK_DISABLE();
	}
}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08c      	sub	sp, #48	; 0x30
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb24:	f107 031c 	add.w	r3, r7, #28
 800bb28:	2200      	movs	r2, #0
 800bb2a:	601a      	str	r2, [r3, #0]
 800bb2c:	605a      	str	r2, [r3, #4]
 800bb2e:	609a      	str	r2, [r3, #8]
 800bb30:	60da      	str	r2, [r3, #12]
 800bb32:	611a      	str	r2, [r3, #16]
	if(htim->Instance==TIM2)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb3c:	d123      	bne.n	800bb86 <HAL_TIM_MspPostInit+0x6a>
	{
		if(PWM_Out_EN&(1<<0)) //TIM2 is for PB3, which is first output pin
 800bb3e:	4b65      	ldr	r3, [pc, #404]	; (800bcd4 <HAL_TIM_MspPostInit+0x1b8>)
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f000 80bf 	beq.w	800bcca <HAL_TIM_MspPostInit+0x1ae>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 800bb4c:	4b62      	ldr	r3, [pc, #392]	; (800bcd8 <HAL_TIM_MspPostInit+0x1bc>)
 800bb4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb50:	4a61      	ldr	r2, [pc, #388]	; (800bcd8 <HAL_TIM_MspPostInit+0x1bc>)
 800bb52:	f043 0302 	orr.w	r3, r3, #2
 800bb56:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bb58:	4b5f      	ldr	r3, [pc, #380]	; (800bcd8 <HAL_TIM_MspPostInit+0x1bc>)
 800bb5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb5c:	f003 0302 	and.w	r3, r3, #2
 800bb60:	61bb      	str	r3, [r7, #24]
 800bb62:	69bb      	ldr	r3, [r7, #24]
			GPIO_InitStruct.Pin = GPIO_PIN_3;
 800bb64:	2308      	movs	r3, #8
 800bb66:	61fb      	str	r3, [r7, #28]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb68:	2302      	movs	r3, #2
 800bb6a:	623b      	str	r3, [r7, #32]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb70:	2300      	movs	r3, #0
 800bb72:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800bb74:	2301      	movs	r3, #1
 800bb76:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bb78:	f107 031c 	add.w	r3, r7, #28
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	4857      	ldr	r0, [pc, #348]	; (800bcdc <HAL_TIM_MspPostInit+0x1c0>)
 800bb80:	f7f7 fcda 	bl	8003538 <HAL_GPIO_Init>
			GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
		}
	}

}
 800bb84:	e0a1      	b.n	800bcca <HAL_TIM_MspPostInit+0x1ae>
	else if(htim->Instance==TIM3)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a55      	ldr	r2, [pc, #340]	; (800bce0 <HAL_TIM_MspPostInit+0x1c4>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d123      	bne.n	800bbd8 <HAL_TIM_MspPostInit+0xbc>
		if(PWM_Out_EN&(1<<1)) //TIM3 is for PB4, which is second output pin
 800bb90:	4b50      	ldr	r3, [pc, #320]	; (800bcd4 <HAL_TIM_MspPostInit+0x1b8>)
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	f003 0302 	and.w	r3, r3, #2
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f000 8096 	beq.w	800bcca <HAL_TIM_MspPostInit+0x1ae>
			__HAL_RCC_GPIOB_CLK_ENABLE();
 800bb9e:	4b4e      	ldr	r3, [pc, #312]	; (800bcd8 <HAL_TIM_MspPostInit+0x1bc>)
 800bba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bba2:	4a4d      	ldr	r2, [pc, #308]	; (800bcd8 <HAL_TIM_MspPostInit+0x1bc>)
 800bba4:	f043 0302 	orr.w	r3, r3, #2
 800bba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bbaa:	4b4b      	ldr	r3, [pc, #300]	; (800bcd8 <HAL_TIM_MspPostInit+0x1bc>)
 800bbac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbae:	f003 0302 	and.w	r3, r3, #2
 800bbb2:	617b      	str	r3, [r7, #20]
 800bbb4:	697b      	ldr	r3, [r7, #20]
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 800bbb6:	2310      	movs	r3, #16
 800bbb8:	61fb      	str	r3, [r7, #28]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbba:	2302      	movs	r3, #2
 800bbbc:	623b      	str	r3, [r7, #32]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800bbc6:	2302      	movs	r3, #2
 800bbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bbca:	f107 031c 	add.w	r3, r7, #28
 800bbce:	4619      	mov	r1, r3
 800bbd0:	4842      	ldr	r0, [pc, #264]	; (800bcdc <HAL_TIM_MspPostInit+0x1c0>)
 800bbd2:	f7f7 fcb1 	bl	8003538 <HAL_GPIO_Init>
}
 800bbd6:	e078      	b.n	800bcca <HAL_TIM_MspPostInit+0x1ae>
	else if(htim->Instance==TIM4)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a41      	ldr	r2, [pc, #260]	; (800bce4 <HAL_TIM_MspPostInit+0x1c8>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d122      	bne.n	800bc28 <HAL_TIM_MspPostInit+0x10c>
		if(PWM_Out_EN&(1<<3)) //TIM4 is for PB6, which is fourth output pin
 800bbe2:	4b3c      	ldr	r3, [pc, #240]	; (800bcd4 <HAL_TIM_MspPostInit+0x1b8>)
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	f003 0308 	and.w	r3, r3, #8
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d06d      	beq.n	800bcca <HAL_TIM_MspPostInit+0x1ae>
			__HAL_RCC_GPIOB_CLK_ENABLE();
 800bbee:	4b3a      	ldr	r3, [pc, #232]	; (800bcd8 <HAL_TIM_MspPostInit+0x1bc>)
 800bbf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbf2:	4a39      	ldr	r2, [pc, #228]	; (800bcd8 <HAL_TIM_MspPostInit+0x1bc>)
 800bbf4:	f043 0302 	orr.w	r3, r3, #2
 800bbf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bbfa:	4b37      	ldr	r3, [pc, #220]	; (800bcd8 <HAL_TIM_MspPostInit+0x1bc>)
 800bbfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbfe:	f003 0302 	and.w	r3, r3, #2
 800bc02:	613b      	str	r3, [r7, #16]
 800bc04:	693b      	ldr	r3, [r7, #16]
			GPIO_InitStruct.Pin = GPIO_PIN_6;
 800bc06:	2340      	movs	r3, #64	; 0x40
 800bc08:	61fb      	str	r3, [r7, #28]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc0a:	2302      	movs	r3, #2
 800bc0c:	623b      	str	r3, [r7, #32]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc12:	2300      	movs	r3, #0
 800bc14:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800bc16:	2302      	movs	r3, #2
 800bc18:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bc1a:	f107 031c 	add.w	r3, r7, #28
 800bc1e:	4619      	mov	r1, r3
 800bc20:	482e      	ldr	r0, [pc, #184]	; (800bcdc <HAL_TIM_MspPostInit+0x1c0>)
 800bc22:	f7f7 fc89 	bl	8003538 <HAL_GPIO_Init>
}
 800bc26:	e050      	b.n	800bcca <HAL_TIM_MspPostInit+0x1ae>
	else if(htim->Instance==TIM8)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4a2e      	ldr	r2, [pc, #184]	; (800bce8 <HAL_TIM_MspPostInit+0x1cc>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d124      	bne.n	800bc7c <HAL_TIM_MspPostInit+0x160>
		if(PWM_Out_EN&(1<<4)) //TIM8 is for PA15, which if fourth output pin
 800bc32:	4b28      	ldr	r3, [pc, #160]	; (800bcd4 <HAL_TIM_MspPostInit+0x1b8>)
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	f003 0310 	and.w	r3, r3, #16
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d045      	beq.n	800bcca <HAL_TIM_MspPostInit+0x1ae>
			__HAL_RCC_GPIOA_CLK_ENABLE();
 800bc3e:	4b26      	ldr	r3, [pc, #152]	; (800bcd8 <HAL_TIM_MspPostInit+0x1bc>)
 800bc40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc42:	4a25      	ldr	r2, [pc, #148]	; (800bcd8 <HAL_TIM_MspPostInit+0x1bc>)
 800bc44:	f043 0301 	orr.w	r3, r3, #1
 800bc48:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc4a:	4b23      	ldr	r3, [pc, #140]	; (800bcd8 <HAL_TIM_MspPostInit+0x1bc>)
 800bc4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc4e:	f003 0301 	and.w	r3, r3, #1
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	68fb      	ldr	r3, [r7, #12]
			GPIO_InitStruct.Pin = GPIO_PIN_15;
 800bc56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc5a:	61fb      	str	r3, [r7, #28]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc5c:	2302      	movs	r3, #2
 800bc5e:	623b      	str	r3, [r7, #32]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc60:	2300      	movs	r3, #0
 800bc62:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc64:	2300      	movs	r3, #0
 800bc66:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800bc68:	2302      	movs	r3, #2
 800bc6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc6c:	f107 031c 	add.w	r3, r7, #28
 800bc70:	4619      	mov	r1, r3
 800bc72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bc76:	f7f7 fc5f 	bl	8003538 <HAL_GPIO_Init>
}
 800bc7a:	e026      	b.n	800bcca <HAL_TIM_MspPostInit+0x1ae>
	else if(htim->Instance==TIM17)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a1a      	ldr	r2, [pc, #104]	; (800bcec <HAL_TIM_MspPostInit+0x1d0>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d121      	bne.n	800bcca <HAL_TIM_MspPostInit+0x1ae>
		if(PWM_Out_EN&(1<<2)) //TIM17 is for PB5, which is third output pin
 800bc86:	4b13      	ldr	r3, [pc, #76]	; (800bcd4 <HAL_TIM_MspPostInit+0x1b8>)
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	f003 0304 	and.w	r3, r3, #4
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d01b      	beq.n	800bcca <HAL_TIM_MspPostInit+0x1ae>
			__HAL_RCC_GPIOB_CLK_ENABLE();
 800bc92:	4b11      	ldr	r3, [pc, #68]	; (800bcd8 <HAL_TIM_MspPostInit+0x1bc>)
 800bc94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc96:	4a10      	ldr	r2, [pc, #64]	; (800bcd8 <HAL_TIM_MspPostInit+0x1bc>)
 800bc98:	f043 0302 	orr.w	r3, r3, #2
 800bc9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc9e:	4b0e      	ldr	r3, [pc, #56]	; (800bcd8 <HAL_TIM_MspPostInit+0x1bc>)
 800bca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bca2:	f003 0302 	and.w	r3, r3, #2
 800bca6:	60bb      	str	r3, [r7, #8]
 800bca8:	68bb      	ldr	r3, [r7, #8]
			GPIO_InitStruct.Pin = GPIO_PIN_5;
 800bcaa:	2320      	movs	r3, #32
 800bcac:	61fb      	str	r3, [r7, #28]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcae:	2302      	movs	r3, #2
 800bcb0:	623b      	str	r3, [r7, #32]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800bcba:	230a      	movs	r3, #10
 800bcbc:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bcbe:	f107 031c 	add.w	r3, r7, #28
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	4805      	ldr	r0, [pc, #20]	; (800bcdc <HAL_TIM_MspPostInit+0x1c0>)
 800bcc6:	f7f7 fc37 	bl	8003538 <HAL_GPIO_Init>
}
 800bcca:	bf00      	nop
 800bccc:	3730      	adds	r7, #48	; 0x30
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	200009f0 	.word	0x200009f0
 800bcd8:	40021000 	.word	0x40021000
 800bcdc:	48000400 	.word	0x48000400
 800bce0:	40000400 	.word	0x40000400
 800bce4:	40000800 	.word	0x40000800
 800bce8:	40013400 	.word	0x40013400
 800bcec:	40014800 	.word	0x40014800

0800bcf0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b087      	sub	sp, #28
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM2)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd00:	d10c      	bne.n	800bd1c <HAL_TIM_PWM_MspInit+0x2c>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 800bd02:	4b24      	ldr	r3, [pc, #144]	; (800bd94 <HAL_TIM_PWM_MspInit+0xa4>)
 800bd04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd06:	4a23      	ldr	r2, [pc, #140]	; (800bd94 <HAL_TIM_PWM_MspInit+0xa4>)
 800bd08:	f043 0301 	orr.w	r3, r3, #1
 800bd0c:	6593      	str	r3, [r2, #88]	; 0x58
 800bd0e:	4b21      	ldr	r3, [pc, #132]	; (800bd94 <HAL_TIM_PWM_MspInit+0xa4>)
 800bd10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd12:	f003 0301 	and.w	r3, r3, #1
 800bd16:	617b      	str	r3, [r7, #20]
 800bd18:	697b      	ldr	r3, [r7, #20]
	}
	else if(htim_pwm->Instance==TIM8)
	{
		__HAL_RCC_TIM8_CLK_ENABLE();
	}
}
 800bd1a:	e034      	b.n	800bd86 <HAL_TIM_PWM_MspInit+0x96>
	else if(htim_pwm->Instance==TIM3)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a1d      	ldr	r2, [pc, #116]	; (800bd98 <HAL_TIM_PWM_MspInit+0xa8>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d10c      	bne.n	800bd40 <HAL_TIM_PWM_MspInit+0x50>
		__HAL_RCC_TIM3_CLK_ENABLE();
 800bd26:	4b1b      	ldr	r3, [pc, #108]	; (800bd94 <HAL_TIM_PWM_MspInit+0xa4>)
 800bd28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd2a:	4a1a      	ldr	r2, [pc, #104]	; (800bd94 <HAL_TIM_PWM_MspInit+0xa4>)
 800bd2c:	f043 0302 	orr.w	r3, r3, #2
 800bd30:	6593      	str	r3, [r2, #88]	; 0x58
 800bd32:	4b18      	ldr	r3, [pc, #96]	; (800bd94 <HAL_TIM_PWM_MspInit+0xa4>)
 800bd34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd36:	f003 0302 	and.w	r3, r3, #2
 800bd3a:	613b      	str	r3, [r7, #16]
 800bd3c:	693b      	ldr	r3, [r7, #16]
}
 800bd3e:	e022      	b.n	800bd86 <HAL_TIM_PWM_MspInit+0x96>
	else if(htim_pwm->Instance==TIM4)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a15      	ldr	r2, [pc, #84]	; (800bd9c <HAL_TIM_PWM_MspInit+0xac>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d10c      	bne.n	800bd64 <HAL_TIM_PWM_MspInit+0x74>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800bd4a:	4b12      	ldr	r3, [pc, #72]	; (800bd94 <HAL_TIM_PWM_MspInit+0xa4>)
 800bd4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd4e:	4a11      	ldr	r2, [pc, #68]	; (800bd94 <HAL_TIM_PWM_MspInit+0xa4>)
 800bd50:	f043 0304 	orr.w	r3, r3, #4
 800bd54:	6593      	str	r3, [r2, #88]	; 0x58
 800bd56:	4b0f      	ldr	r3, [pc, #60]	; (800bd94 <HAL_TIM_PWM_MspInit+0xa4>)
 800bd58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd5a:	f003 0304 	and.w	r3, r3, #4
 800bd5e:	60fb      	str	r3, [r7, #12]
 800bd60:	68fb      	ldr	r3, [r7, #12]
}
 800bd62:	e010      	b.n	800bd86 <HAL_TIM_PWM_MspInit+0x96>
	else if(htim_pwm->Instance==TIM8)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a0d      	ldr	r2, [pc, #52]	; (800bda0 <HAL_TIM_PWM_MspInit+0xb0>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d10b      	bne.n	800bd86 <HAL_TIM_PWM_MspInit+0x96>
		__HAL_RCC_TIM8_CLK_ENABLE();
 800bd6e:	4b09      	ldr	r3, [pc, #36]	; (800bd94 <HAL_TIM_PWM_MspInit+0xa4>)
 800bd70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd72:	4a08      	ldr	r2, [pc, #32]	; (800bd94 <HAL_TIM_PWM_MspInit+0xa4>)
 800bd74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bd78:	6613      	str	r3, [r2, #96]	; 0x60
 800bd7a:	4b06      	ldr	r3, [pc, #24]	; (800bd94 <HAL_TIM_PWM_MspInit+0xa4>)
 800bd7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd82:	60bb      	str	r3, [r7, #8]
 800bd84:	68bb      	ldr	r3, [r7, #8]
}
 800bd86:	bf00      	nop
 800bd88:	371c      	adds	r7, #28
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	40021000 	.word	0x40021000
 800bd98:	40000400 	.word	0x40000400
 800bd9c:	40000800 	.word	0x40000800
 800bda0:	40013400 	.word	0x40013400

0800bda4 <HAL_TIM_IC_MspInit>:
	}

}

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b08e      	sub	sp, #56	; 0x38
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bdac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	601a      	str	r2, [r3, #0]
 800bdb4:	605a      	str	r2, [r3, #4]
 800bdb6:	609a      	str	r2, [r3, #8]
 800bdb8:	60da      	str	r2, [r3, #12]
 800bdba:	611a      	str	r2, [r3, #16]

	if(htim_ic->Instance==TIM2)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdc4:	d130      	bne.n	800be28 <HAL_TIM_IC_MspInit+0x84>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 800bdc6:	4b51      	ldr	r3, [pc, #324]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800bdc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdca:	4a50      	ldr	r2, [pc, #320]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800bdcc:	f043 0301 	orr.w	r3, r3, #1
 800bdd0:	6593      	str	r3, [r2, #88]	; 0x58
 800bdd2:	4b4e      	ldr	r3, [pc, #312]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800bdd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdd6:	f003 0301 	and.w	r3, r3, #1
 800bdda:	623b      	str	r3, [r7, #32]
 800bddc:	6a3b      	ldr	r3, [r7, #32]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800bdde:	4b4b      	ldr	r3, [pc, #300]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800bde0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bde2:	4a4a      	ldr	r2, [pc, #296]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800bde4:	f043 0302 	orr.w	r3, r3, #2
 800bde8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bdea:	4b48      	ldr	r3, [pc, #288]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800bdec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdee:	f003 0302 	and.w	r3, r3, #2
 800bdf2:	61fb      	str	r3, [r7, #28]
 800bdf4:	69fb      	ldr	r3, [r7, #28]

		GPIO_InitStruct.Pin = GPIO_PIN_3;
 800bdf6:	2308      	movs	r3, #8
 800bdf8:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdfa:	2302      	movs	r3, #2
 800bdfc:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdfe:	2300      	movs	r3, #0
 800be00:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800be02:	2300      	movs	r3, #0
 800be04:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800be06:	2301      	movs	r3, #1
 800be08:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800be0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be0e:	4619      	mov	r1, r3
 800be10:	483f      	ldr	r0, [pc, #252]	; (800bf10 <HAL_TIM_IC_MspInit+0x16c>)
 800be12:	f7f7 fb91 	bl	8003538 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800be16:	2200      	movs	r2, #0
 800be18:	2100      	movs	r1, #0
 800be1a:	201c      	movs	r0, #28
 800be1c:	f7f5 ff59 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800be20:	201c      	movs	r0, #28
 800be22:	f7f5 ff70 	bl	8001d06 <HAL_NVIC_EnableIRQ>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

		HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
	}
}
 800be26:	e06c      	b.n	800bf02 <HAL_TIM_IC_MspInit+0x15e>
	else if(htim_ic->Instance==TIM4)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a39      	ldr	r2, [pc, #228]	; (800bf14 <HAL_TIM_IC_MspInit+0x170>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d130      	bne.n	800be94 <HAL_TIM_IC_MspInit+0xf0>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800be32:	4b36      	ldr	r3, [pc, #216]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800be34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be36:	4a35      	ldr	r2, [pc, #212]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800be38:	f043 0304 	orr.w	r3, r3, #4
 800be3c:	6593      	str	r3, [r2, #88]	; 0x58
 800be3e:	4b33      	ldr	r3, [pc, #204]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800be40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be42:	f003 0304 	and.w	r3, r3, #4
 800be46:	61bb      	str	r3, [r7, #24]
 800be48:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800be4a:	4b30      	ldr	r3, [pc, #192]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800be4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be4e:	4a2f      	ldr	r2, [pc, #188]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800be50:	f043 0302 	orr.w	r3, r3, #2
 800be54:	64d3      	str	r3, [r2, #76]	; 0x4c
 800be56:	4b2d      	ldr	r3, [pc, #180]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800be58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be5a:	f003 0302 	and.w	r3, r3, #2
 800be5e:	617b      	str	r3, [r7, #20]
 800be60:	697b      	ldr	r3, [r7, #20]
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 800be62:	2340      	movs	r3, #64	; 0x40
 800be64:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be66:	2302      	movs	r3, #2
 800be68:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be6a:	2300      	movs	r3, #0
 800be6c:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800be6e:	2300      	movs	r3, #0
 800be70:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800be72:	2302      	movs	r3, #2
 800be74:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800be76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be7a:	4619      	mov	r1, r3
 800be7c:	4824      	ldr	r0, [pc, #144]	; (800bf10 <HAL_TIM_IC_MspInit+0x16c>)
 800be7e:	f7f7 fb5b 	bl	8003538 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800be82:	2200      	movs	r2, #0
 800be84:	2100      	movs	r1, #0
 800be86:	201e      	movs	r0, #30
 800be88:	f7f5 ff23 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800be8c:	201e      	movs	r0, #30
 800be8e:	f7f5 ff3a 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800be92:	e036      	b.n	800bf02 <HAL_TIM_IC_MspInit+0x15e>
	else if(htim_ic->Instance==TIM8)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a1f      	ldr	r2, [pc, #124]	; (800bf18 <HAL_TIM_IC_MspInit+0x174>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d131      	bne.n	800bf02 <HAL_TIM_IC_MspInit+0x15e>
		__HAL_RCC_TIM8_CLK_ENABLE();
 800be9e:	4b1b      	ldr	r3, [pc, #108]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800bea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bea2:	4a1a      	ldr	r2, [pc, #104]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800bea4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bea8:	6613      	str	r3, [r2, #96]	; 0x60
 800beaa:	4b18      	ldr	r3, [pc, #96]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800beac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800beae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800beb2:	613b      	str	r3, [r7, #16]
 800beb4:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800beb6:	4b15      	ldr	r3, [pc, #84]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800beb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beba:	4a14      	ldr	r2, [pc, #80]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800bebc:	f043 0301 	orr.w	r3, r3, #1
 800bec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bec2:	4b12      	ldr	r3, [pc, #72]	; (800bf0c <HAL_TIM_IC_MspInit+0x168>)
 800bec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bec6:	f003 0301 	and.w	r3, r3, #1
 800beca:	60fb      	str	r3, [r7, #12]
 800becc:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_15;
 800bece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bed2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bed4:	2302      	movs	r3, #2
 800bed6:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bed8:	2300      	movs	r3, #0
 800beda:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bedc:	2300      	movs	r3, #0
 800bede:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800bee0:	2302      	movs	r3, #2
 800bee2:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bee8:	4619      	mov	r1, r3
 800beea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800beee:	f7f7 fb23 	bl	8003538 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800bef2:	2200      	movs	r2, #0
 800bef4:	2100      	movs	r1, #0
 800bef6:	202e      	movs	r0, #46	; 0x2e
 800bef8:	f7f5 feeb 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800befc:	202e      	movs	r0, #46	; 0x2e
 800befe:	f7f5 ff02 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800bf02:	bf00      	nop
 800bf04:	3738      	adds	r7, #56	; 0x38
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	40021000 	.word	0x40021000
 800bf10:	48000400 	.word	0x48000400
 800bf14:	40000800 	.word	0x40000800
 800bf18:	40013400 	.word	0x40013400

0800bf1c <HAL_LPTIM_MspInit>:
		HAL_NVIC_DisableIRQ(TIM8_CC_IRQn);
	}
}

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
	if(hlptim->Instance==LPTIM1)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a0d      	ldr	r2, [pc, #52]	; (800bf60 <HAL_LPTIM_MspInit+0x44>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d113      	bne.n	800bf56 <HAL_LPTIM_MspInit+0x3a>
	{
		__HAL_RCC_LPTIM1_CLK_ENABLE();
 800bf2e:	4b0d      	ldr	r3, [pc, #52]	; (800bf64 <HAL_LPTIM_MspInit+0x48>)
 800bf30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf32:	4a0c      	ldr	r2, [pc, #48]	; (800bf64 <HAL_LPTIM_MspInit+0x48>)
 800bf34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf38:	6593      	str	r3, [r2, #88]	; 0x58
 800bf3a:	4b0a      	ldr	r3, [pc, #40]	; (800bf64 <HAL_LPTIM_MspInit+0x48>)
 800bf3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf42:	60fb      	str	r3, [r7, #12]
 800bf44:	68fb      	ldr	r3, [r7, #12]

		HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800bf46:	2200      	movs	r2, #0
 800bf48:	2100      	movs	r1, #0
 800bf4a:	2031      	movs	r0, #49	; 0x31
 800bf4c:	f7f5 fec1 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800bf50:	2031      	movs	r0, #49	; 0x31
 800bf52:	f7f5 fed8 	bl	8001d06 <HAL_NVIC_EnableIRQ>
	}
}
 800bf56:	bf00      	nop
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	40007c00 	.word	0x40007c00
 800bf64:	40021000 	.word	0x40021000

0800bf68 <NMI_Handler>:

//external variables
extern uint8_t CanTimerFlag;

void NMI_Handler(void)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	af00      	add	r7, sp, #0

}
 800bf6c:	bf00      	nop
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr

0800bf76 <HardFault_Handler>:

void HardFault_Handler(void)
{
 800bf76:	b480      	push	{r7}
 800bf78:	af00      	add	r7, sp, #0
  while (1)
 800bf7a:	e7fe      	b.n	800bf7a <HardFault_Handler+0x4>

0800bf7c <MemManage_Handler>:

  }
}

void MemManage_Handler(void)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	af00      	add	r7, sp, #0
  while (1)
 800bf80:	e7fe      	b.n	800bf80 <MemManage_Handler+0x4>

0800bf82 <BusFault_Handler>:

  }
}

void BusFault_Handler(void)
{
 800bf82:	b480      	push	{r7}
 800bf84:	af00      	add	r7, sp, #0
  while (1)
 800bf86:	e7fe      	b.n	800bf86 <BusFault_Handler+0x4>

0800bf88 <UsageFault_Handler>:

  }
}

void UsageFault_Handler(void)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	af00      	add	r7, sp, #0
  while (1)
 800bf8c:	e7fe      	b.n	800bf8c <UsageFault_Handler+0x4>

0800bf8e <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 800bf8e:	b480      	push	{r7}
 800bf90:	af00      	add	r7, sp, #0

}
 800bf92:	bf00      	nop
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	af00      	add	r7, sp, #0

}
 800bfa0:	bf00      	nop
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr

0800bfaa <PendSV_Handler>:

void PendSV_Handler(void)
{
 800bfaa:	b480      	push	{r7}
 800bfac:	af00      	add	r7, sp, #0

}
 800bfae:	bf00      	nop
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <SysTick_Handler>:

void SysTick_Handler(void)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800bfbc:	f7f4 f97e 	bl	80002bc <HAL_IncTick>
}
 800bfc0:	bf00      	nop
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <DMA1_Channel1_IRQHandler>:


void DMA1_Channel1_IRQHandler(void)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 800bfc8:	4802      	ldr	r0, [pc, #8]	; (800bfd4 <DMA1_Channel1_IRQHandler+0x10>)
 800bfca:	f7f6 f833 	bl	8002034 <HAL_DMA_IRQHandler>
}
 800bfce:	bf00      	nop
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	200006c0 	.word	0x200006c0

0800bfd8 <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800bfdc:	4802      	ldr	r0, [pc, #8]	; (800bfe8 <DMA1_Channel2_IRQHandler+0x10>)
 800bfde:	f7f6 f829 	bl	8002034 <HAL_DMA_IRQHandler>
}
 800bfe2:	bf00      	nop
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	20000990 	.word	0x20000990

0800bfec <FDCAN1_IT0_IRQHandler>:


void FDCAN1_IT0_IRQHandler(void)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(&hfdcan);
 800bff0:	4802      	ldr	r0, [pc, #8]	; (800bffc <FDCAN1_IT0_IRQHandler+0x10>)
 800bff2:	f7f6 fdcb 	bl	8002b8c <HAL_FDCAN_IRQHandler>
}
 800bff6:	bf00      	nop
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	20000444 	.word	0x20000444

0800c000 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 800c004:	4802      	ldr	r0, [pc, #8]	; (800c010 <TIM6_DAC_IRQHandler+0x10>)
 800c006:	f7f9 f858 	bl	80050ba <HAL_TIM_IRQHandler>
}
 800c00a:	bf00      	nop
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	200007e8 	.word	0x200007e8

0800c014 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim7);
 800c018:	4802      	ldr	r0, [pc, #8]	; (800c024 <TIM7_IRQHandler+0x10>)
 800c01a:	f7f9 f84e 	bl	80050ba <HAL_TIM_IRQHandler>
}
 800c01e:	bf00      	nop
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	20000ac4 	.word	0x20000ac4

0800c028 <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	af00      	add	r7, sp, #0
	//we don't care or want to do anything with TIM1 BRK
	HAL_TIM_IRQHandler(&htim15);
 800c02c:	4802      	ldr	r0, [pc, #8]	; (800c038 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800c02e:	f7f9 f844 	bl	80050ba <HAL_TIM_IRQHandler>
}
 800c032:	bf00      	nop
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	20000334 	.word	0x20000334

0800c03c <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	af00      	add	r7, sp, #0
	//this will work because IRQHandler checks to see what event happened
	//however, IRQHandler is not very efficient function for the things we are using here, code could be faster checking registers and calling callback function directly
	//but no time for writing that now
	HAL_TIM_IRQHandler(&htim1);
 800c040:	4803      	ldr	r0, [pc, #12]	; (800c050 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800c042:	f7f9 f83a 	bl	80050ba <HAL_TIM_IRQHandler>
	HAL_TIM_IRQHandler(&htim16);
 800c046:	4803      	ldr	r0, [pc, #12]	; (800c054 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800c048:	f7f9 f837 	bl	80050ba <HAL_TIM_IRQHandler>
}
 800c04c:	bf00      	nop
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	20000834 	.word	0x20000834
 800c054:	20000a84 	.word	0x20000a84

0800c058 <TIM2_IRQHandler>:

//it seems like the interrupts for PWM inputs aren't a thing
void TIM2_IRQHandler(void)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800c05c:	4802      	ldr	r0, [pc, #8]	; (800c068 <TIM2_IRQHandler+0x10>)
 800c05e:	f7f9 f82c 	bl	80050ba <HAL_TIM_IRQHandler>
}
 800c062:	bf00      	nop
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	20000948 	.word	0x20000948

0800c06c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim4);
 800c070:	4802      	ldr	r0, [pc, #8]	; (800c07c <TIM4_IRQHandler+0x10>)
 800c072:	f7f9 f822 	bl	80050ba <HAL_TIM_IRQHandler>
}
 800c076:	bf00      	nop
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	200001e0 	.word	0x200001e0

0800c080 <TIM8_CC_IRQHandler>:

void TIM8_CC_IRQHandler(void)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim8);
 800c084:	4802      	ldr	r0, [pc, #8]	; (800c090 <TIM8_CC_IRQHandler+0x10>)
 800c086:	f7f9 f818 	bl	80050ba <HAL_TIM_IRQHandler>
}
 800c08a:	bf00      	nop
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	2000015c 	.word	0x2000015c

0800c094 <LPTIM1_IRQHandler>:

void LPTIM1_IRQHandler(void)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	af00      	add	r7, sp, #0
	HAL_LPTIM_IRQHandler(&hlptim1);
 800c098:	4802      	ldr	r0, [pc, #8]	; (800c0a4 <LPTIM1_IRQHandler+0x10>)
 800c09a:	f7f7 fd2f 	bl	8003afc <HAL_LPTIM_IRQHandler>
}
 800c09e:	bf00      	nop
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	20000678 	.word	0x20000678

0800c0a8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800c0ac:	2008      	movs	r0, #8
 800c0ae:	f7f7 fc0f 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
}
 800c0b2:	bf00      	nop
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800c0ba:	2020      	movs	r0, #32
 800c0bc:	f7f7 fc08 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800c0c0:	2040      	movs	r0, #64	; 0x40
 800c0c2:	f7f7 fc05 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
}
 800c0c6:	bf00      	nop
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800c0ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c0d2:	f7f7 fbfd 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
}
 800c0d6:	bf00      	nop
 800c0d8:	bd80      	pop	{r7, pc}
	...

0800c0dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800c0e0:	4b08      	ldr	r3, [pc, #32]	; (800c104 <SystemInit+0x28>)
 800c0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0e6:	4a07      	ldr	r2, [pc, #28]	; (800c104 <SystemInit+0x28>)
 800c0e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c0ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c0f0:	4b04      	ldr	r3, [pc, #16]	; (800c104 <SystemInit+0x28>)
 800c0f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c0f6:	609a      	str	r2, [r3, #8]
#endif
}
 800c0f8:	bf00      	nop
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	e000ed00 	.word	0xe000ed00

0800c108 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800c108:	480d      	ldr	r0, [pc, #52]	; (800c140 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800c10a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c10c:	480d      	ldr	r0, [pc, #52]	; (800c144 <LoopForever+0x6>)
  ldr r1, =_edata
 800c10e:	490e      	ldr	r1, [pc, #56]	; (800c148 <LoopForever+0xa>)
  ldr r2, =_sidata
 800c110:	4a0e      	ldr	r2, [pc, #56]	; (800c14c <LoopForever+0xe>)
  movs r3, #0
 800c112:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800c114:	e002      	b.n	800c11c <LoopCopyDataInit>

0800c116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c11a:	3304      	adds	r3, #4

0800c11c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c11c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c11e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c120:	d3f9      	bcc.n	800c116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c122:	4a0b      	ldr	r2, [pc, #44]	; (800c150 <LoopForever+0x12>)
  ldr r4, =_ebss
 800c124:	4c0b      	ldr	r4, [pc, #44]	; (800c154 <LoopForever+0x16>)
  movs r3, #0
 800c126:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c128:	e001      	b.n	800c12e <LoopFillZerobss>

0800c12a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c12a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c12c:	3204      	adds	r2, #4

0800c12e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c12e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c130:	d3fb      	bcc.n	800c12a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c132:	f7ff ffd3 	bl	800c0dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c136:	f000 f811 	bl	800c15c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c13a:	f7fc fcf9 	bl	8008b30 <main>

0800c13e <LoopForever>:

LoopForever:
    b LoopForever
 800c13e:	e7fe      	b.n	800c13e <LoopForever>
  ldr   r0, =_estack
 800c140:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800c144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c148:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800c14c:	0800c2f4 	.word	0x0800c2f4
  ldr r2, =_sbss
 800c150:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800c154:	20000b68 	.word	0x20000b68

0800c158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c158:	e7fe      	b.n	800c158 <ADC1_2_IRQHandler>
	...

0800c15c <__libc_init_array>:
 800c15c:	b570      	push	{r4, r5, r6, lr}
 800c15e:	4e0d      	ldr	r6, [pc, #52]	; (800c194 <__libc_init_array+0x38>)
 800c160:	4c0d      	ldr	r4, [pc, #52]	; (800c198 <__libc_init_array+0x3c>)
 800c162:	1ba4      	subs	r4, r4, r6
 800c164:	10a4      	asrs	r4, r4, #2
 800c166:	2500      	movs	r5, #0
 800c168:	42a5      	cmp	r5, r4
 800c16a:	d109      	bne.n	800c180 <__libc_init_array+0x24>
 800c16c:	4e0b      	ldr	r6, [pc, #44]	; (800c19c <__libc_init_array+0x40>)
 800c16e:	4c0c      	ldr	r4, [pc, #48]	; (800c1a0 <__libc_init_array+0x44>)
 800c170:	f000 f820 	bl	800c1b4 <_init>
 800c174:	1ba4      	subs	r4, r4, r6
 800c176:	10a4      	asrs	r4, r4, #2
 800c178:	2500      	movs	r5, #0
 800c17a:	42a5      	cmp	r5, r4
 800c17c:	d105      	bne.n	800c18a <__libc_init_array+0x2e>
 800c17e:	bd70      	pop	{r4, r5, r6, pc}
 800c180:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c184:	4798      	blx	r3
 800c186:	3501      	adds	r5, #1
 800c188:	e7ee      	b.n	800c168 <__libc_init_array+0xc>
 800c18a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c18e:	4798      	blx	r3
 800c190:	3501      	adds	r5, #1
 800c192:	e7f2      	b.n	800c17a <__libc_init_array+0x1e>
 800c194:	0800c2ec 	.word	0x0800c2ec
 800c198:	0800c2ec 	.word	0x0800c2ec
 800c19c:	0800c2ec 	.word	0x0800c2ec
 800c1a0:	0800c2f0 	.word	0x0800c2f0

0800c1a4 <memset>:
 800c1a4:	4402      	add	r2, r0
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d100      	bne.n	800c1ae <memset+0xa>
 800c1ac:	4770      	bx	lr
 800c1ae:	f803 1b01 	strb.w	r1, [r3], #1
 800c1b2:	e7f9      	b.n	800c1a8 <memset+0x4>

0800c1b4 <_init>:
 800c1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b6:	bf00      	nop
 800c1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ba:	bc08      	pop	{r3}
 800c1bc:	469e      	mov	lr, r3
 800c1be:	4770      	bx	lr

0800c1c0 <_fini>:
 800c1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c2:	bf00      	nop
 800c1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1c6:	bc08      	pop	{r3}
 800c1c8:	469e      	mov	lr, r3
 800c1ca:	4770      	bx	lr
