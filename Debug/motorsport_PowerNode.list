
motorsport_PowerNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e50  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005080  08005080  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08005080  08005080  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005080  08005080  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005080  08005080  00015080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005084  08005084  00015084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08005088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000044  080050cc  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  080050cc  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c48  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002419  00000000  00000000  00030cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f00  00000000  00000000  000330d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  00033fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001efa0  00000000  00000000  00034db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bae3  00000000  00000000  00053d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c996a  00000000  00000000  0005f833  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012919d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e44  00000000  00000000  00129218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000044 	.word	0x20000044
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005010 	.word	0x08005010

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000048 	.word	0x20000048
 8000214:	08005010 	.word	0x08005010

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f001 f9dc 	bl	80015e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f004 fce3 	bl	8004c04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f001 f9e8 	bl	8001646 <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f001 f9b4 	bl	80015f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	20000040 	.word	0x20000040
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	20000064 	.word	0x20000064
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000064 	.word	0x20000064

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	431a      	orrs	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	609a      	str	r2, [r3, #8]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	431a      	orrs	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	609a      	str	r2, [r3, #8]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000398:	4618      	mov	r0, r3
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80003a4:	b490      	push	{r4, r7}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	3360      	adds	r3, #96	; 0x60
 80003b6:	461a      	mov	r2, r3
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	4413      	add	r3, r2
 80003be:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80003c0:	6822      	ldr	r2, [r4, #0]
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <LL_ADC_SetOffset+0x40>)
 80003c4:	4013      	ands	r3, r2
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	430a      	orrs	r2, r1
 80003d0:	4313      	orrs	r3, r2
 80003d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003d6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc90      	pop	{r4, r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	03fff000 	.word	0x03fff000

080003e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80003e8:	b490      	push	{r4, r7}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3360      	adds	r3, #96	; 0x60
 80003f6:	461a      	mov	r2, r3
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000400:	6823      	ldr	r3, [r4, #0]
 8000402:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bc90      	pop	{r4, r7}
 800040e:	4770      	bx	lr

08000410 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000410:	b490      	push	{r4, r7}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	3360      	adds	r3, #96	; 0x60
 8000420:	461a      	mov	r2, r3
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800042a:	6823      	ldr	r3, [r4, #0]
 800042c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4313      	orrs	r3, r2
 8000434:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bc90      	pop	{r4, r7}
 800043e:	4770      	bx	lr

08000440 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000440:	b490      	push	{r4, r7}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3360      	adds	r3, #96	; 0x60
 8000450:	461a      	mov	r2, r3
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800045a:	6823      	ldr	r3, [r4, #0]
 800045c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4313      	orrs	r3, r2
 8000464:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bc90      	pop	{r4, r7}
 800046e:	4770      	bx	lr

08000470 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000470:	b490      	push	{r4, r7}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3360      	adds	r3, #96	; 0x60
 8000480:	461a      	mov	r2, r3
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4413      	add	r3, r2
 8000488:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800048a:	6823      	ldr	r3, [r4, #0]
 800048c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bc90      	pop	{r4, r7}
 800049e:	4770      	bx	lr

080004a0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	615a      	str	r2, [r3, #20]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004c6:	b490      	push	{r4, r7}
 80004c8:	b084      	sub	sp, #16
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	60f8      	str	r0, [r7, #12]
 80004ce:	60b9      	str	r1, [r7, #8]
 80004d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3330      	adds	r3, #48	; 0x30
 80004d6:	461a      	mov	r2, r3
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	0a1b      	lsrs	r3, r3, #8
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	f003 030c 	and.w	r3, r3, #12
 80004e2:	4413      	add	r3, r2
 80004e4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80004e6:	6822      	ldr	r2, [r4, #0]
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	f003 031f 	and.w	r3, r3, #31
 80004ee:	211f      	movs	r1, #31
 80004f0:	fa01 f303 	lsl.w	r3, r1, r3
 80004f4:	43db      	mvns	r3, r3
 80004f6:	401a      	ands	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	0e9b      	lsrs	r3, r3, #26
 80004fc:	f003 011f 	and.w	r1, r3, #31
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	f003 031f 	and.w	r3, r3, #31
 8000506:	fa01 f303 	lsl.w	r3, r1, r3
 800050a:	4313      	orrs	r3, r2
 800050c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bc90      	pop	{r4, r7}
 8000516:	4770      	bx	lr

08000518 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000518:	b490      	push	{r4, r7}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	3314      	adds	r3, #20
 8000528:	461a      	mov	r2, r3
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	0e5b      	lsrs	r3, r3, #25
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	4413      	add	r3, r2
 8000536:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000538:	6822      	ldr	r2, [r4, #0]
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	0d1b      	lsrs	r3, r3, #20
 800053e:	f003 031f 	and.w	r3, r3, #31
 8000542:	2107      	movs	r1, #7
 8000544:	fa01 f303 	lsl.w	r3, r1, r3
 8000548:	43db      	mvns	r3, r3
 800054a:	401a      	ands	r2, r3
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	0d1b      	lsrs	r3, r3, #20
 8000550:	f003 031f 	and.w	r3, r3, #31
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	fa01 f303 	lsl.w	r3, r1, r3
 800055a:	4313      	orrs	r3, r2
 800055c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bc90      	pop	{r4, r7}
 8000566:	4770      	bx	lr

08000568 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000580:	43db      	mvns	r3, r3
 8000582:	401a      	ands	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f003 0318 	and.w	r3, r3, #24
 800058a:	4908      	ldr	r1, [pc, #32]	; (80005ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800058c:	40d9      	lsrs	r1, r3
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	400b      	ands	r3, r1
 8000592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000596:	431a      	orrs	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	0007ffff 	.word	0x0007ffff

080005b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80005c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	6093      	str	r3, [r2, #8]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005e8:	d101      	bne.n	80005ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80005ea:	2301      	movs	r3, #1
 80005ec:	e000      	b.n	80005f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800060c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000610:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000638:	d101      	bne.n	800063e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800063a:	2301      	movs	r3, #1
 800063c:	e000      	b.n	8000640 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800065c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000660:	f043 0202 	orr.w	r2, r3, #2
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	2b01      	cmp	r3, #1
 8000686:	d101      	bne.n	800068c <LL_ADC_IsEnabled+0x18>
 8000688:	2301      	movs	r3, #1
 800068a:	e000      	b.n	800068e <LL_ADC_IsEnabled+0x1a>
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d101      	bne.n	80006b2 <LL_ADC_IsDisableOngoing+0x18>
 80006ae:	2301      	movs	r3, #1
 80006b0:	e000      	b.n	80006b4 <LL_ADC_IsDisableOngoing+0x1a>
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d101      	bne.n	80006d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80006d4:	2301      	movs	r3, #1
 80006d6:	e000      	b.n	80006da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b08      	cmp	r3, #8
 80006f8:	d101      	bne.n	80006fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80006fa:	2301      	movs	r3, #1
 80006fc:	e000      	b.n	8000700 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000714:	2300      	movs	r3, #0
 8000716:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d101      	bne.n	8000726 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	e16b      	b.n	80009fe <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000730:	2b00      	cmp	r3, #0
 8000732:	d109      	bne.n	8000748 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f004 fa89 	bl	8004c4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2200      	movs	r2, #0
 800073e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff41 	bl	80005d4 <LL_ADC_IsDeepPowerDownEnabled>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d004      	beq.n	8000762 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff27 	bl	80005b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff5c 	bl	8000624 <LL_ADC_IsInternalRegulatorEnabled>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d113      	bne.n	800079a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff40 	bl	80005fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800077c:	4ba2      	ldr	r3, [pc, #648]	; (8000a08 <HAL_ADC_Init+0x2fc>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	099b      	lsrs	r3, r3, #6
 8000782:	4aa2      	ldr	r2, [pc, #648]	; (8000a0c <HAL_ADC_Init+0x300>)
 8000784:	fba2 2303 	umull	r2, r3, r2, r3
 8000788:	099b      	lsrs	r3, r3, #6
 800078a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800078c:	e002      	b.n	8000794 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	3b01      	subs	r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f9      	bne.n	800078e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff40 	bl	8000624 <LL_ADC_IsInternalRegulatorEnabled>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d10d      	bne.n	80007c6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007ae:	f043 0210 	orr.w	r2, r3, #16
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ba:	f043 0201 	orr.w	r2, r3, #1
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff78 	bl	80006c0 <LL_ADC_REG_IsConversionOngoing>
 80007d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	2b00      	cmp	r3, #0
 80007dc:	f040 8106 	bne.w	80009ec <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f040 8102 	bne.w	80009ec <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80007f0:	f043 0202 	orr.w	r2, r3, #2
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff39 	bl	8000674 <LL_ADC_IsEnabled>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d111      	bne.n	800082c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000808:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800080c:	f7ff ff32 	bl	8000674 <LL_ADC_IsEnabled>
 8000810:	4604      	mov	r4, r0
 8000812:	487f      	ldr	r0, [pc, #508]	; (8000a10 <HAL_ADC_Init+0x304>)
 8000814:	f7ff ff2e 	bl	8000674 <LL_ADC_IsEnabled>
 8000818:	4603      	mov	r3, r0
 800081a:	4323      	orrs	r3, r4
 800081c:	2b00      	cmp	r3, #0
 800081e:	d105      	bne.n	800082c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	4619      	mov	r1, r3
 8000826:	487b      	ldr	r0, [pc, #492]	; (8000a14 <HAL_ADC_Init+0x308>)
 8000828:	f7ff fd88 	bl	800033c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7f5b      	ldrb	r3, [r3, #29]
 8000830:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000836:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800083c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000842:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800084a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800084c:	4313      	orrs	r3, r2
 800084e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000856:	2b01      	cmp	r3, #1
 8000858:	d106      	bne.n	8000868 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085e:	3b01      	subs	r3, #1
 8000860:	045b      	lsls	r3, r3, #17
 8000862:	69ba      	ldr	r2, [r7, #24]
 8000864:	4313      	orrs	r3, r2
 8000866:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086c:	2b00      	cmp	r3, #0
 800086e:	d009      	beq.n	8000884 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000874:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	4313      	orrs	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	68da      	ldr	r2, [r3, #12]
 800088a:	4b63      	ldr	r3, [pc, #396]	; (8000a18 <HAL_ADC_Init+0x30c>)
 800088c:	4013      	ands	r3, r2
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	6812      	ldr	r2, [r2, #0]
 8000892:	69b9      	ldr	r1, [r7, #24]
 8000894:	430b      	orrs	r3, r1
 8000896:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	691b      	ldr	r3, [r3, #16]
 800089e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	430a      	orrs	r2, r1
 80008ac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff04 	bl	80006c0 <LL_ADC_REG_IsConversionOngoing>
 80008b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff11 	bl	80006e6 <LL_ADC_INJ_IsConversionOngoing>
 80008c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d16d      	bne.n	80009a8 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d16a      	bne.n	80009a8 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80008d6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008de:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80008e0:	4313      	orrs	r3, r2
 80008e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008ee:	f023 0302 	bic.w	r3, r3, #2
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	6812      	ldr	r2, [r2, #0]
 80008f6:	69b9      	ldr	r1, [r7, #24]
 80008f8:	430b      	orrs	r3, r1
 80008fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	691b      	ldr	r3, [r3, #16]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d017      	beq.n	8000934 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	691a      	ldr	r2, [r3, #16]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000912:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800091c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000920:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	6911      	ldr	r1, [r2, #16]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	6812      	ldr	r2, [r2, #0]
 800092c:	430b      	orrs	r3, r1
 800092e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8000932:	e013      	b.n	800095c <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	691a      	ldr	r2, [r3, #16]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000942:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000954:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000958:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000962:	2b01      	cmp	r3, #1
 8000964:	d118      	bne.n	8000998 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	691b      	ldr	r3, [r3, #16]
 800096c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000970:	f023 0304 	bic.w	r3, r3, #4
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800097c:	4311      	orrs	r1, r2
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000982:	4311      	orrs	r1, r2
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000988:	430a      	orrs	r2, r1
 800098a:	431a      	orrs	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f042 0201 	orr.w	r2, r2, #1
 8000994:	611a      	str	r2, [r3, #16]
 8000996:	e007      	b.n	80009a8 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	691a      	ldr	r2, [r3, #16]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f022 0201 	bic.w	r2, r2, #1
 80009a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d10c      	bne.n	80009ca <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f023 010f 	bic.w	r1, r3, #15
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6a1b      	ldr	r3, [r3, #32]
 80009be:	1e5a      	subs	r2, r3, #1
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	430a      	orrs	r2, r1
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
 80009c8:	e007      	b.n	80009da <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f022 020f 	bic.w	r2, r2, #15
 80009d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009de:	f023 0303 	bic.w	r3, r3, #3
 80009e2:	f043 0201 	orr.w	r2, r3, #1
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80009ea:	e007      	b.n	80009fc <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009f0:	f043 0210 	orr.w	r2, r3, #16
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80009fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd90      	pop	{r4, r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000040 	.word	0x20000040
 8000a0c:	053e2d63 	.word	0x053e2d63
 8000a10:	50000100 	.word	0x50000100
 8000a14:	50000300 	.word	0x50000300
 8000a18:	fff04007 	.word	0xfff04007

08000a1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b0a6      	sub	sp, #152	; 0x98
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d101      	bne.n	8000a3e <HAL_ADC_ConfigChannel+0x22>
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	e348      	b.n	80010d0 <HAL_ADC_ConfigChannel+0x6b4>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2201      	movs	r2, #1
 8000a42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fe38 	bl	80006c0 <LL_ADC_REG_IsConversionOngoing>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f040 832d 	bne.w	80010b2 <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	6859      	ldr	r1, [r3, #4]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	f7ff fd2e 	bl	80004c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fe26 	bl	80006c0 <LL_ADC_REG_IsConversionOngoing>
 8000a74:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fe32 	bl	80006e6 <LL_ADC_INJ_IsConversionOngoing>
 8000a82:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000a86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f040 817b 	bne.w	8000d86 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	f040 8176 	bne.w	8000d86 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000aa2:	d10f      	bne.n	8000ac4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2200      	movs	r2, #0
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f7ff fd32 	bl	8000518 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fcef 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>
 8000ac2:	e00e      	b.n	8000ae2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6818      	ldr	r0, [r3, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	6819      	ldr	r1, [r3, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	f7ff fd21 	bl	8000518 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fcdf 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	695a      	ldr	r2, [r3, #20]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	08db      	lsrs	r3, r3, #3
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	2b04      	cmp	r3, #4
 8000b02:	d022      	beq.n	8000b4a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6818      	ldr	r0, [r3, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	6919      	ldr	r1, [r3, #16]
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b14:	f7ff fc46 	bl	80003a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	6919      	ldr	r1, [r3, #16]
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	461a      	mov	r2, r3
 8000b26:	f7ff fc8b 	bl	8000440 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	6919      	ldr	r1, [r3, #16]
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	7f1b      	ldrb	r3, [r3, #28]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d102      	bne.n	8000b40 <HAL_ADC_ConfigChannel+0x124>
 8000b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b3e:	e000      	b.n	8000b42 <HAL_ADC_ConfigChannel+0x126>
 8000b40:	2300      	movs	r3, #0
 8000b42:	461a      	mov	r2, r3
 8000b44:	f7ff fc94 	bl	8000470 <LL_ADC_SetOffsetSaturation>
 8000b48:	e11d      	b.n	8000d86 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fc49 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d10a      	bne.n	8000b76 <HAL_ADC_ConfigChannel+0x15a>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fc3e 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	0e9b      	lsrs	r3, r3, #26
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	e012      	b.n	8000b9c <HAL_ADC_ConfigChannel+0x180>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fc33 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b8c:	fa93 f3a3 	rbit	r3, r3
 8000b90:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b94:	fab3 f383 	clz	r3, r3
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d105      	bne.n	8000bb4 <HAL_ADC_ConfigChannel+0x198>
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	0e9b      	lsrs	r3, r3, #26
 8000bae:	f003 031f 	and.w	r3, r3, #31
 8000bb2:	e00a      	b.n	8000bca <HAL_ADC_ConfigChannel+0x1ae>
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bbc:	fa93 f3a3 	rbit	r3, r3
 8000bc0:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bc4:	fab3 f383 	clz	r3, r3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d106      	bne.n	8000bdc <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fc1a 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2101      	movs	r1, #1
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fc00 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10a      	bne.n	8000c08 <HAL_ADC_ConfigChannel+0x1ec>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fbf5 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	0e9b      	lsrs	r3, r3, #26
 8000c02:	f003 021f 	and.w	r2, r3, #31
 8000c06:	e010      	b.n	8000c2a <HAL_ADC_ConfigChannel+0x20e>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fbea 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c1a:	fa93 f3a3 	rbit	r3, r3
 8000c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c22:	fab3 f383 	clz	r3, r3
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	461a      	mov	r2, r3
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d105      	bne.n	8000c42 <HAL_ADC_ConfigChannel+0x226>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	0e9b      	lsrs	r3, r3, #26
 8000c3c:	f003 031f 	and.w	r3, r3, #31
 8000c40:	e00a      	b.n	8000c58 <HAL_ADC_ConfigChannel+0x23c>
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c4a:	fa93 f3a3 	rbit	r3, r3
 8000c4e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c52:	fab3 f383 	clz	r3, r3
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d106      	bne.n	8000c6a <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2200      	movs	r2, #0
 8000c62:	2101      	movs	r1, #1
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fbd3 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2102      	movs	r1, #2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fbb9 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d10a      	bne.n	8000c96 <HAL_ADC_ConfigChannel+0x27a>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2102      	movs	r1, #2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fbae 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	0e9b      	lsrs	r3, r3, #26
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	e010      	b.n	8000cb8 <HAL_ADC_ConfigChannel+0x29c>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fba3 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ca8:	fa93 f3a3 	rbit	r3, r3
 8000cac:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cb0:	fab3 f383 	clz	r3, r3
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d105      	bne.n	8000cd0 <HAL_ADC_ConfigChannel+0x2b4>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	0e9b      	lsrs	r3, r3, #26
 8000cca:	f003 031f 	and.w	r3, r3, #31
 8000cce:	e00a      	b.n	8000ce6 <HAL_ADC_ConfigChannel+0x2ca>
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cd8:	fa93 f3a3 	rbit	r3, r3
 8000cdc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ce0:	fab3 f383 	clz	r3, r3
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d106      	bne.n	8000cf8 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fb8c 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2103      	movs	r1, #3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fb72 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d10a      	bne.n	8000d24 <HAL_ADC_ConfigChannel+0x308>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2103      	movs	r1, #3
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fb67 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	0e9b      	lsrs	r3, r3, #26
 8000d1e:	f003 021f 	and.w	r2, r3, #31
 8000d22:	e010      	b.n	8000d46 <HAL_ADC_ConfigChannel+0x32a>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2103      	movs	r1, #3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fb5c 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d36:	fa93 f3a3 	rbit	r3, r3
 8000d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d3e:	fab3 f383 	clz	r3, r3
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d105      	bne.n	8000d5e <HAL_ADC_ConfigChannel+0x342>
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	0e9b      	lsrs	r3, r3, #26
 8000d58:	f003 031f 	and.w	r3, r3, #31
 8000d5c:	e00a      	b.n	8000d74 <HAL_ADC_ConfigChannel+0x358>
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d66:	fa93 f3a3 	rbit	r3, r3
 8000d6a:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d6e:	fab3 f383 	clz	r3, r3
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d106      	bne.n	8000d86 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2103      	movs	r1, #3
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fb45 	bl	8000410 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fc72 	bl	8000674 <LL_ADC_IsEnabled>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 810c 	bne.w	8000fb0 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	6819      	ldr	r1, [r3, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	461a      	mov	r2, r3
 8000da6:	f7ff fbdf 	bl	8000568 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	4aab      	ldr	r2, [pc, #684]	; (800105c <HAL_ADC_ConfigChannel+0x640>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	f040 80fd 	bne.w	8000fb0 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d10b      	bne.n	8000dde <HAL_ADC_ConfigChannel+0x3c2>
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	0e9b      	lsrs	r3, r3, #26
 8000dcc:	3301      	adds	r3, #1
 8000dce:	f003 031f 	and.w	r3, r3, #31
 8000dd2:	2b09      	cmp	r3, #9
 8000dd4:	bf94      	ite	ls
 8000dd6:	2301      	movls	r3, #1
 8000dd8:	2300      	movhi	r3, #0
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	e012      	b.n	8000e04 <HAL_ADC_ConfigChannel+0x3e8>
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000de6:	fa93 f3a3 	rbit	r3, r3
 8000dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dee:	fab3 f383 	clz	r3, r3
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	3301      	adds	r3, #1
 8000df6:	f003 031f 	and.w	r3, r3, #31
 8000dfa:	2b09      	cmp	r3, #9
 8000dfc:	bf94      	ite	ls
 8000dfe:	2301      	movls	r3, #1
 8000e00:	2300      	movhi	r3, #0
 8000e02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d064      	beq.n	8000ed2 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d107      	bne.n	8000e24 <HAL_ADC_ConfigChannel+0x408>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	0e9b      	lsrs	r3, r3, #26
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	069b      	lsls	r3, r3, #26
 8000e1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e22:	e00e      	b.n	8000e42 <HAL_ADC_ConfigChannel+0x426>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e2c:	fa93 f3a3 	rbit	r3, r3
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e34:	fab3 f383 	clz	r3, r3
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	069b      	lsls	r3, r3, #26
 8000e3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d109      	bne.n	8000e62 <HAL_ADC_ConfigChannel+0x446>
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	0e9b      	lsrs	r3, r3, #26
 8000e54:	3301      	adds	r3, #1
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	e010      	b.n	8000e84 <HAL_ADC_ConfigChannel+0x468>
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6a:	fa93 f3a3 	rbit	r3, r3
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8000e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e72:	fab3 f383 	clz	r3, r3
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	3301      	adds	r3, #1
 8000e7a:	f003 031f 	and.w	r3, r3, #31
 8000e7e:	2101      	movs	r1, #1
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	ea42 0103 	orr.w	r1, r2, r3
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10a      	bne.n	8000eaa <HAL_ADC_ConfigChannel+0x48e>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	0e9b      	lsrs	r3, r3, #26
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	051b      	lsls	r3, r3, #20
 8000ea8:	e011      	b.n	8000ece <HAL_ADC_ConfigChannel+0x4b2>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb2:	fa93 f3a3 	rbit	r3, r3
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	fab3 f383 	clz	r3, r3
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	f003 021f 	and.w	r2, r3, #31
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000ece:	430b      	orrs	r3, r1
 8000ed0:	e069      	b.n	8000fa6 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d107      	bne.n	8000eee <HAL_ADC_ConfigChannel+0x4d2>
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	0e9b      	lsrs	r3, r3, #26
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	069b      	lsls	r3, r3, #26
 8000ee8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000eec:	e00e      	b.n	8000f0c <HAL_ADC_ConfigChannel+0x4f0>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	fa93 f3a3 	rbit	r3, r3
 8000efa:	61fb      	str	r3, [r7, #28]
  return result;
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	fab3 f383 	clz	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	3301      	adds	r3, #1
 8000f06:	069b      	lsls	r3, r3, #26
 8000f08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d109      	bne.n	8000f2c <HAL_ADC_ConfigChannel+0x510>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	0e9b      	lsrs	r3, r3, #26
 8000f1e:	3301      	adds	r3, #1
 8000f20:	f003 031f 	and.w	r3, r3, #31
 8000f24:	2101      	movs	r1, #1
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	e010      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x532>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	fa93 f3a3 	rbit	r3, r3
 8000f38:	617b      	str	r3, [r7, #20]
  return result;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	fab3 f383 	clz	r3, r3
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	f003 031f 	and.w	r3, r3, #31
 8000f48:	2101      	movs	r1, #1
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	ea42 0103 	orr.w	r1, r2, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10d      	bne.n	8000f7a <HAL_ADC_ConfigChannel+0x55e>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	0e9b      	lsrs	r3, r3, #26
 8000f64:	3301      	adds	r3, #1
 8000f66:	f003 021f 	and.w	r2, r3, #31
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	3b1e      	subs	r3, #30
 8000f72:	051b      	lsls	r3, r3, #20
 8000f74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f78:	e014      	b.n	8000fa4 <HAL_ADC_ConfigChannel+0x588>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	fa93 f3a3 	rbit	r3, r3
 8000f86:	60fb      	str	r3, [r7, #12]
  return result;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	fab3 f383 	clz	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	3301      	adds	r3, #1
 8000f92:	f003 021f 	and.w	r2, r3, #31
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	3b1e      	subs	r3, #30
 8000f9e:	051b      	lsls	r3, r3, #20
 8000fa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	6892      	ldr	r2, [r2, #8]
 8000faa:	4619      	mov	r1, r3
 8000fac:	f7ff fab4 	bl	8000518 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <HAL_ADC_ConfigChannel+0x644>)
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 8083 	beq.w	80010c4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000fbe:	4829      	ldr	r0, [pc, #164]	; (8001064 <HAL_ADC_ConfigChannel+0x648>)
 8000fc0:	f7ff f9e2 	bl	8000388 <LL_ADC_GetCommonPathInternalCh>
 8000fc4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a26      	ldr	r2, [pc, #152]	; (8001068 <HAL_ADC_ConfigChannel+0x64c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d004      	beq.n	8000fdc <HAL_ADC_ConfigChannel+0x5c0>
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a25      	ldr	r2, [pc, #148]	; (800106c <HAL_ADC_ConfigChannel+0x650>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d126      	bne.n	800102a <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d120      	bne.n	800102a <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ff0:	d168      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ff6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4819      	ldr	r0, [pc, #100]	; (8001064 <HAL_ADC_ConfigChannel+0x648>)
 8000ffe:	f7ff f9b0 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001002:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <HAL_ADC_ConfigChannel+0x654>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	099b      	lsrs	r3, r3, #6
 8001008:	4a1a      	ldr	r2, [pc, #104]	; (8001074 <HAL_ADC_ConfigChannel+0x658>)
 800100a:	fba2 2303 	umull	r2, r3, r2, r3
 800100e:	099a      	lsrs	r2, r3, #6
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800101a:	e002      	b.n	8001022 <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	3b01      	subs	r3, #1
 8001020:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f9      	bne.n	800101c <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001028:	e04c      	b.n	80010c4 <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a12      	ldr	r2, [pc, #72]	; (8001078 <HAL_ADC_ConfigChannel+0x65c>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d125      	bne.n	8001080 <HAL_ADC_ConfigChannel+0x664>
 8001034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d11f      	bne.n	8001080 <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <HAL_ADC_ConfigChannel+0x660>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d03c      	beq.n	80010c4 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800104a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800104e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001052:	4619      	mov	r1, r3
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <HAL_ADC_ConfigChannel+0x648>)
 8001056:	f7ff f984 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800105a:	e033      	b.n	80010c4 <HAL_ADC_ConfigChannel+0x6a8>
 800105c:	407f0000 	.word	0x407f0000
 8001060:	80080000 	.word	0x80080000
 8001064:	50000300 	.word	0x50000300
 8001068:	c3210000 	.word	0xc3210000
 800106c:	90c00010 	.word	0x90c00010
 8001070:	20000040 	.word	0x20000040
 8001074:	053e2d63 	.word	0x053e2d63
 8001078:	c7520000 	.word	0xc7520000
 800107c:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <HAL_ADC_ConfigChannel+0x6bc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d11c      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800108a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800108e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d116      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_ADC_ConfigChannel+0x6c0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d011      	beq.n	80010c4 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010a8:	4619      	mov	r1, r3
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <HAL_ADC_ConfigChannel+0x6c4>)
 80010ac:	f7ff f959 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
 80010b0:	e008      	b.n	80010c4 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b6:	f043 0220 	orr.w	r2, r3, #32
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80010cc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3798      	adds	r7, #152	; 0x98
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	cb840000 	.word	0xcb840000
 80010dc:	50000100 	.word	0x50000100
 80010e0:	50000300 	.word	0x50000300

080010e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fad2 	bl	800069a <LL_ADC_IsDisableOngoing>
 80010f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fab9 	bl	8000674 <LL_ADC_IsEnabled>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d040      	beq.n	800118a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d13d      	bne.n	800118a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 030d 	and.w	r3, r3, #13
 8001118:	2b01      	cmp	r3, #1
 800111a:	d10c      	bne.n	8001136 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fa93 	bl	800064c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2203      	movs	r2, #3
 800112c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800112e:	f7ff f8d7 	bl	80002e0 <HAL_GetTick>
 8001132:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001134:	e022      	b.n	800117c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800113a:	f043 0210 	orr.w	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001146:	f043 0201 	orr.w	r2, r3, #1
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e01c      	b.n	800118c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001152:	f7ff f8c5 	bl	80002e0 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d90d      	bls.n	800117c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001164:	f043 0210 	orr.w	r2, r3, #16
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001170:	f043 0201 	orr.w	r2, r3, #1
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e007      	b.n	800118c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1e3      	bne.n	8001152 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <LL_ADC_IsEnabled>:
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <LL_ADC_IsEnabled+0x18>
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <LL_ADC_IsEnabled+0x1a>
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_ADC_StartCalibration>:
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80011cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80011d6:	4313      	orrs	r3, r2
 80011d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	609a      	str	r2, [r3, #8]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_IsCalibrationOnGoing>:
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001200:	d101      	bne.n	8001206 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_REG_IsConversionOngoing>:
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b04      	cmp	r3, #4
 8001226:	d101      	bne.n	800122c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <HAL_ADCEx_Calibration_Start+0x1c>
 8001254:	2302      	movs	r3, #2
 8001256:	e04d      	b.n	80012f4 <HAL_ADCEx_Calibration_Start+0xb8>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff3f 	bl	80010e4 <ADC_Disable>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d136      	bne.n	80012de <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001274:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001278:	f023 0302 	bic.w	r3, r3, #2
 800127c:	f043 0202 	orr.w	r2, r3, #2
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6839      	ldr	r1, [r7, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff95 	bl	80011ba <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001290:	e014      	b.n	80012bc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	3301      	adds	r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4a18      	ldr	r2, [pc, #96]	; (80012fc <HAL_ADCEx_Calibration_Start+0xc0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d90d      	bls.n	80012bc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a4:	f023 0312 	bic.w	r3, r3, #18
 80012a8:	f043 0210 	orr.w	r2, r3, #16
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e01b      	b.n	80012f4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff93 	bl	80011ec <LL_ADC_IsCalibrationOnGoing>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1e2      	bne.n	8001292 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d0:	f023 0303 	bic.w	r3, r3, #3
 80012d4:	f043 0201 	orr.w	r2, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	65da      	str	r2, [r3, #92]	; 0x5c
 80012dc:	e005      	b.n	80012ea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e2:	f043 0210 	orr.w	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	0004de01 	.word	0x0004de01

08001300 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b0a1      	sub	sp, #132	; 0x84
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800131a:	2302      	movs	r3, #2
 800131c:	e087      	b.n	800142e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800132e:	d102      	bne.n	8001336 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001330:	4b41      	ldr	r3, [pc, #260]	; (8001438 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	e001      	b.n	800133a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d10b      	bne.n	8001358 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001344:	f043 0220 	orr.w	r2, r3, #32
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e06a      	b.n	800142e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff5a 	bl	8001214 <LL_ADC_REG_IsConversionOngoing>
 8001360:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff54 	bl	8001214 <LL_ADC_REG_IsConversionOngoing>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d14c      	bne.n	800140c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001372:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001374:	2b00      	cmp	r3, #0
 8001376:	d149      	bne.n	800140c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001378:	4b30      	ldr	r3, [pc, #192]	; (800143c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800137a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d028      	beq.n	80013d6 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6859      	ldr	r1, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001396:	035b      	lsls	r3, r3, #13
 8001398:	430b      	orrs	r3, r1
 800139a:	431a      	orrs	r2, r3
 800139c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800139e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80013a4:	f7ff fef6 	bl	8001194 <LL_ADC_IsEnabled>
 80013a8:	4604      	mov	r4, r0
 80013aa:	4823      	ldr	r0, [pc, #140]	; (8001438 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80013ac:	f7ff fef2 	bl	8001194 <LL_ADC_IsEnabled>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4323      	orrs	r3, r4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d133      	bne.n	8001420 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80013b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80013c0:	f023 030f 	bic.w	r3, r3, #15
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	6811      	ldr	r1, [r2, #0]
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	6892      	ldr	r2, [r2, #8]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	431a      	orrs	r2, r3
 80013d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013d2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80013d4:	e024      	b.n	8001420 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80013d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013e2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80013e6:	f7ff fed5 	bl	8001194 <LL_ADC_IsEnabled>
 80013ea:	4604      	mov	r4, r0
 80013ec:	4812      	ldr	r0, [pc, #72]	; (8001438 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80013ee:	f7ff fed1 	bl	8001194 <LL_ADC_IsEnabled>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4323      	orrs	r3, r4
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d112      	bne.n	8001420 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80013fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001402:	f023 030f 	bic.w	r3, r3, #15
 8001406:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001408:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800140a:	e009      	b.n	8001420 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001410:	f043 0220 	orr.w	r2, r3, #32
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800141e:	e000      	b.n	8001422 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001420:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800142a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800142e:	4618      	mov	r0, r3
 8001430:	3784      	adds	r7, #132	; 0x84
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	bf00      	nop
 8001438:	50000100 	.word	0x50000100
 800143c:	50000300 	.word	0x50000300

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db0b      	blt.n	80014ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 021f 	and.w	r2, r3, #31
 80014bc:	4907      	ldr	r1, [pc, #28]	; (80014dc <__NVIC_EnableIRQ+0x38>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	2001      	movs	r0, #1
 80014c6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100

080014e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	db0a      	blt.n	800150a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	490c      	ldr	r1, [pc, #48]	; (800152c <__NVIC_SetPriority+0x4c>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	0112      	lsls	r2, r2, #4
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	440b      	add	r3, r1
 8001504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001508:	e00a      	b.n	8001520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4908      	ldr	r1, [pc, #32]	; (8001530 <__NVIC_SetPriority+0x50>)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	3b04      	subs	r3, #4
 8001518:	0112      	lsls	r2, r2, #4
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	440b      	add	r3, r1
 800151e:	761a      	strb	r2, [r3, #24]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000e100 	.word	0xe000e100
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f1c3 0307 	rsb	r3, r3, #7
 800154e:	2b04      	cmp	r3, #4
 8001550:	bf28      	it	cs
 8001552:	2304      	movcs	r3, #4
 8001554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3304      	adds	r3, #4
 800155a:	2b06      	cmp	r3, #6
 800155c:	d902      	bls.n	8001564 <NVIC_EncodePriority+0x30>
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3b03      	subs	r3, #3
 8001562:	e000      	b.n	8001566 <NVIC_EncodePriority+0x32>
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	f04f 32ff 	mov.w	r2, #4294967295
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	43d9      	mvns	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	4313      	orrs	r3, r2
         );
}
 800158e:	4618      	mov	r0, r3
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ac:	d301      	bcc.n	80015b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00f      	b.n	80015d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <SysTick_Config+0x40>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ba:	210f      	movs	r1, #15
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f7ff ff8e 	bl	80014e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <SysTick_Config+0x40>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <SysTick_Config+0x40>)
 80015cc:	2207      	movs	r2, #7
 80015ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	e000e010 	.word	0xe000e010

080015e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ff29 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001604:	f7ff ff40 	bl	8001488 <__NVIC_GetPriorityGrouping>
 8001608:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	6978      	ldr	r0, [r7, #20]
 8001610:	f7ff ff90 	bl	8001534 <NVIC_EncodePriority>
 8001614:	4602      	mov	r2, r0
 8001616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff5f 	bl	80014e0 <__NVIC_SetPriority>
}
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff33 	bl	80014a4 <__NVIC_EnableIRQ>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffa4 	bl	800159c <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e08d      	b.n	800178e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	4b47      	ldr	r3, [pc, #284]	; (8001798 <HAL_DMA_Init+0x138>)
 800167a:	429a      	cmp	r2, r3
 800167c:	d80f      	bhi.n	800169e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	4b45      	ldr	r3, [pc, #276]	; (800179c <HAL_DMA_Init+0x13c>)
 8001686:	4413      	add	r3, r2
 8001688:	4a45      	ldr	r2, [pc, #276]	; (80017a0 <HAL_DMA_Init+0x140>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	091b      	lsrs	r3, r3, #4
 8001690:	009a      	lsls	r2, r3, #2
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a42      	ldr	r2, [pc, #264]	; (80017a4 <HAL_DMA_Init+0x144>)
 800169a:	641a      	str	r2, [r3, #64]	; 0x40
 800169c:	e00e      	b.n	80016bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <HAL_DMA_Init+0x148>)
 80016a6:	4413      	add	r3, r2
 80016a8:	4a3d      	ldr	r2, [pc, #244]	; (80017a0 <HAL_DMA_Init+0x140>)
 80016aa:	fba2 2303 	umull	r2, r3, r2, r3
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	009a      	lsls	r2, r3, #2
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a3c      	ldr	r2, [pc, #240]	; (80017ac <HAL_DMA_Init+0x14c>)
 80016ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2202      	movs	r2, #2
 80016c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80016e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f8fe 	bl	8001910 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800171c:	d102      	bne.n	8001724 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001738:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d010      	beq.n	8001764 <HAL_DMA_Init+0x104>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b04      	cmp	r3, #4
 8001748:	d80c      	bhi.n	8001764 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f91e 	bl	800198c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	e008      	b.n	8001776 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40020407 	.word	0x40020407
 800179c:	bffdfff8 	.word	0xbffdfff8
 80017a0:	cccccccd 	.word	0xcccccccd
 80017a4:	40020000 	.word	0x40020000
 80017a8:	bffdfbf8 	.word	0xbffdfbf8
 80017ac:	40020400 	.word	0x40020400

080017b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	2204      	movs	r2, #4
 80017d2:	409a      	lsls	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d026      	beq.n	800182a <HAL_DMA_IRQHandler+0x7a>
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d021      	beq.n	800182a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0320 	and.w	r3, r3, #32
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d107      	bne.n	8001804 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0204 	bic.w	r2, r2, #4
 8001802:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	2104      	movs	r1, #4
 8001812:	fa01 f202 	lsl.w	r2, r1, r2
 8001816:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	2b00      	cmp	r3, #0
 800181e:	d071      	beq.n	8001904 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001828:	e06c      	b.n	8001904 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f003 031f 	and.w	r3, r3, #31
 8001832:	2202      	movs	r2, #2
 8001834:	409a      	lsls	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d02e      	beq.n	800189c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d029      	beq.n	800189c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0320 	and.w	r3, r3, #32
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10b      	bne.n	800186e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 020a 	bic.w	r2, r2, #10
 8001864:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f003 021f 	and.w	r2, r3, #31
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	2102      	movs	r1, #2
 800187c:	fa01 f202 	lsl.w	r2, r1, r2
 8001880:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	2b00      	cmp	r3, #0
 8001890:	d038      	beq.n	8001904 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800189a:	e033      	b.n	8001904 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	f003 031f 	and.w	r3, r3, #31
 80018a4:	2208      	movs	r2, #8
 80018a6:	409a      	lsls	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d02a      	beq.n	8001906 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d025      	beq.n	8001906 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 020e 	bic.w	r2, r2, #14
 80018c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f003 021f 	and.w	r2, r3, #31
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	2101      	movs	r1, #1
 80018d8:	fa01 f202 	lsl.w	r2, r1, r2
 80018dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001904:	bf00      	nop
 8001906:	bf00      	nop
}
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001920:	429a      	cmp	r2, r3
 8001922:	d802      	bhi.n	800192a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e001      	b.n	800192e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800192c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	3b08      	subs	r3, #8
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800193c:	fba2 2303 	umull	r2, r3, r2, r3
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	009a      	lsls	r2, r3, #2
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4413      	add	r3, r2
 8001950:	461a      	mov	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800195a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	2201      	movs	r2, #1
 8001964:	409a      	lsls	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	651a      	str	r2, [r3, #80]	; 0x50
}
 800196a:	bf00      	nop
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40020407 	.word	0x40020407
 800197c:	40020800 	.word	0x40020800
 8001980:	40020820 	.word	0x40020820
 8001984:	cccccccd 	.word	0xcccccccd
 8001988:	40020880 	.word	0x40020880

0800198c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	461a      	mov	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	2201      	movs	r2, #1
 80019ba:	409a      	lsls	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	1000823f 	.word	0x1000823f
 80019d0:	40020940 	.word	0x40020940

080019d4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e147      	b.n	8001c76 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f003 fa04 	bl	8004e08 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	699a      	ldr	r2, [r3, #24]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0210 	bic.w	r2, r2, #16
 8001a0e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a10:	f7fe fc66 	bl	80002e0 <HAL_GetTick>
 8001a14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001a16:	e012      	b.n	8001a3e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a18:	f7fe fc62 	bl	80002e0 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b0a      	cmp	r3, #10
 8001a24:	d90b      	bls.n	8001a3e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2a:	f043 0201 	orr.w	r2, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2203      	movs	r2, #3
 8001a36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e11b      	b.n	8001c76 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d0e5      	beq.n	8001a18 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	699a      	ldr	r2, [r3, #24]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0201 	orr.w	r2, r2, #1
 8001a5a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a5c:	f7fe fc40 	bl	80002e0 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001a62:	e012      	b.n	8001a8a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a64:	f7fe fc3c 	bl	80002e0 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b0a      	cmp	r3, #10
 8001a70:	d90b      	bls.n	8001a8a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a76:	f043 0201 	orr.w	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2203      	movs	r2, #3
 8001a82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0f5      	b.n	8001c76 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0e5      	beq.n	8001a64 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0202 	orr.w	r2, r2, #2
 8001aa6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a74      	ldr	r2, [pc, #464]	; (8001c80 <HAL_FDCAN_Init+0x2ac>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d103      	bne.n	8001aba <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001ab2:	4a74      	ldr	r2, [pc, #464]	; (8001c84 <HAL_FDCAN_Init+0x2b0>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7c1b      	ldrb	r3, [r3, #16]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d108      	bne.n	8001ad4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	699a      	ldr	r2, [r3, #24]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ad0:	619a      	str	r2, [r3, #24]
 8001ad2:	e007      	b.n	8001ae4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699a      	ldr	r2, [r3, #24]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ae2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7c5b      	ldrb	r3, [r3, #17]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d108      	bne.n	8001afe <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699a      	ldr	r2, [r3, #24]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001afa:	619a      	str	r2, [r3, #24]
 8001afc:	e007      	b.n	8001b0e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699a      	ldr	r2, [r3, #24]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b0c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	7c9b      	ldrb	r3, [r3, #18]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d108      	bne.n	8001b28 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699a      	ldr	r2, [r3, #24]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b24:	619a      	str	r2, [r3, #24]
 8001b26:	e007      	b.n	8001b38 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699a      	ldr	r2, [r3, #24]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b36:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699a      	ldr	r2, [r3, #24]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001b5c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0210 	bic.w	r2, r2, #16
 8001b6c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d108      	bne.n	8001b88 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699a      	ldr	r2, [r3, #24]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 0204 	orr.w	r2, r2, #4
 8001b84:	619a      	str	r2, [r3, #24]
 8001b86:	e02c      	b.n	8001be2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d028      	beq.n	8001be2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d01c      	beq.n	8001bd2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699a      	ldr	r2, [r3, #24]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ba6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691a      	ldr	r2, [r3, #16]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0210 	orr.w	r2, r2, #16
 8001bb6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d110      	bne.n	8001be2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699a      	ldr	r2, [r3, #24]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0220 	orr.w	r2, r2, #32
 8001bce:	619a      	str	r2, [r3, #24]
 8001bd0:	e007      	b.n	8001be2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699a      	ldr	r2, [r3, #24]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0220 	orr.w	r2, r2, #32
 8001be0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bf2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001bfa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001c0a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c0c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c16:	d115      	bne.n	8001c44 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	3b01      	subs	r3, #1
 8001c24:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c26:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001c30:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001c40:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c42:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 fcb8 	bl	80025d0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40006400 	.word	0x40006400
 8001c84:	40006500 	.word	0x40006500

08001c88 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c98:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001c9a:	7dfb      	ldrb	r3, [r7, #23]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d002      	beq.n	8001ca6 <HAL_FDCAN_ConfigFilter+0x1e>
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d13d      	bne.n	8001d22 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d119      	bne.n	8001ce2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001cba:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001cc2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e01d      	b.n	8001d1e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	075a      	lsls	r2, r3, #29
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	079a      	lsls	r2, r3, #30
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3304      	adds	r3, #4
 8001d16:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e006      	b.n	8001d30 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d26:	f043 0202 	orr.w	r2, r3, #2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
  }
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	371c      	adds	r7, #28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d116      	bne.n	8001d84 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d5e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	011a      	lsls	r2, r3, #4
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	431a      	orrs	r2, r3
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                         (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                                         (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                                         (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	e006      	b.n	8001d92 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d88:	f043 0204 	orr.w	r2, r3, #4
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
  }
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b085      	sub	sp, #20
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d11f      	bne.n	8001df6 <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b40      	cmp	r3, #64	; 0x40
 8001dba:	d10d      	bne.n	8001dd8 <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dc4:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	025a      	lsls	r2, r3, #9
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001dd6:	e00c      	b.n	8001df2 <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001de0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	021a      	lsls	r2, r3, #8
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Return function status */
    return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e006      	b.n	8001e04 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfa:	f043 0204 	orr.w	r2, r3, #4
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
  }
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d110      	bne.n	8001e46 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	e006      	b.n	8001e54 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4a:	f043 0204 	orr.w	r2, r3, #4
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
  }
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d12c      	bne.n	8001ed2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d007      	beq.n	8001e98 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e023      	b.n	8001ee0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ea0:	0c1b      	lsrs	r3, r3, #16
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 fbe4 	bl	800267c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e006      	b.n	8001ee0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed6:	f043 0208 	orr.w	r2, r3, #8
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
  }
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b08b      	sub	sp, #44	; 0x2c
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001efc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001efe:	7efb      	ldrb	r3, [r7, #27]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	f040 80bc 	bne.w	800207e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b40      	cmp	r3, #64	; 0x40
 8001f0a:	d121      	bne.n	8001f50 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d107      	bne.n	8001f2c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0af      	b.n	800208c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4e:	e020      	b.n	8001f92 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d107      	bne.n	8001f70 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e08d      	b.n	800208c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d107      	bne.n	8001fb6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	0c9b      	lsrs	r3, r3, #18
 8001fac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	e005      	b.n	8001fc2 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	3304      	adds	r3, #4
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0e1b      	lsrs	r3, r3, #24
 8002014:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0fda      	lsrs	r2, r3, #31
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	3304      	adds	r3, #4
 800202a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
 8002034:	e00a      	b.n	800204c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	441a      	add	r2, r3
 800203c:	6839      	ldr	r1, [r7, #0]
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	440b      	add	r3, r1
 8002042:	7812      	ldrb	r2, [r2, #0]
 8002044:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	3301      	adds	r3, #1
 800204a:	623b      	str	r3, [r7, #32]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	4a11      	ldr	r2, [pc, #68]	; (8002098 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8002054:	5cd3      	ldrb	r3, [r2, r3]
 8002056:	461a      	mov	r2, r3
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	4293      	cmp	r3, r2
 800205c:	d3eb      	bcc.n	8002036 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b40      	cmp	r3, #64	; 0x40
 8002062:	d105      	bne.n	8002070 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800206e:	e004      	b.n	800207a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e006      	b.n	800208c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002082:	f043 0208 	orr.w	r2, r3, #8
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
  }
}
 800208c:	4618      	mov	r0, r3
 800208e:	372c      	adds	r7, #44	; 0x2c
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	08005030 	.word	0x08005030

0800209c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80020b2:	68fb      	ldr	r3, [r7, #12]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80020d2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d003      	beq.n	80020e2 <HAL_FDCAN_ActivateNotification+0x22>
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	f040 80c8 	bne.w	8002272 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <HAL_FDCAN_ActivateNotification+0x3e>
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d03b      	beq.n	8002176 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d031      	beq.n	8002176 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	d027      	beq.n	8002176 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 800212c:	2b00      	cmp	r3, #0
 800212e:	d004      	beq.n	800213a <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d01d      	beq.n	8002176 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002140:	2b00      	cmp	r3, #0
 8002142:	d004      	beq.n	800214e <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	2b00      	cmp	r3, #0
 800214c:	d013      	beq.n	8002176 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002154:	2b00      	cmp	r3, #0
 8002156:	d004      	beq.n	8002162 <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00c      	beq.n	8002186 <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d107      	bne.n	8002186 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 0201 	orr.w	r2, r2, #1
 8002184:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <HAL_FDCAN_ActivateNotification+0xda>
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d13b      	bne.n	8002212 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d004      	beq.n	80021ae <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d131      	bne.n	8002212 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d004      	beq.n	80021c2 <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d127      	bne.n	8002212 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d11d      	bne.n	8002212 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d004      	beq.n	80021ea <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d113      	bne.n	8002212 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d004      	beq.n	80021fe <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00c      	beq.n	8002222 <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0202 	orr.w	r2, r2, #2
 8002220:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002228:	2b00      	cmp	r3, #0
 800222a:	d009      	beq.n	8002240 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	430a      	orrs	r2, r1
 800223c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	430a      	orrs	r2, r1
 800225a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	430a      	orrs	r2, r1
 800226c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	e006      	b.n	8002280 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002276:	f043 0202 	orr.w	r2, r3, #2
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
  }
}
 8002280:	4618      	mov	r0, r3
 8002282:	371c      	adds	r7, #28
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	4013      	ands	r3, r2
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	6a3a      	ldr	r2, [r7, #32]
 80022c0:	4013      	ands	r3, r2
 80022c2:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022ce:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	4013      	ands	r3, r2
 80022da:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e2:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80022e6:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022fe:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4013      	ands	r3, r2
 800230a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00d      	beq.n	8002336 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d006      	beq.n	8002336 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2240      	movs	r2, #64	; 0x40
 800232e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f92e 	bl	8002592 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01b      	beq.n	800237c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234e:	2b00      	cmp	r3, #0
 8002350:	d014      	beq.n	800237c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800235a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002372:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002374:	6939      	ldr	r1, [r7, #16]
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f8ec 	bl	8002554 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002388:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800238a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f8b6 	bl	80024fe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a3a      	ldr	r2, [r7, #32]
 800239e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80023a0:	6a39      	ldr	r1, [r7, #32]
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f002 f84a 	bl	800443c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80023b6:	69f9      	ldr	r1, [r7, #28]
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f8ab 	bl	8002514 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00e      	beq.n	80023ea <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d007      	beq.n	80023ea <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023e2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f8a0 	bl	800252a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01a      	beq.n	800242e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	2b00      	cmp	r3, #0
 8002404:	d013      	beq.n	800242e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800240e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4013      	ands	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2280      	movs	r2, #128	; 0x80
 8002424:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002426:	68f9      	ldr	r1, [r7, #12]
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f888 	bl	800253e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00e      	beq.n	800245a <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002452:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f888 	bl	800256a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00e      	beq.n	8002486 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800247e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f87c 	bl	800257e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800248c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d011      	beq.n	80024b8 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d007      	beq.n	80024ce <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80024c6:	6979      	ldr	r1, [r7, #20]
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f876 	bl	80025ba <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f858 	bl	80025a6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80024f6:	bf00      	nop
 80024f8:	3728      	adds	r7, #40	; 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80025da:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ea:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f2:	041a      	lsls	r2, r3, #16
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002610:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002618:	061a      	lsls	r2, r3, #24
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e005      	b.n	800265e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3304      	adds	r3, #4
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	429a      	cmp	r2, r3
 8002668:	d3f3      	bcc.n	8002652 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	4000a400 	.word	0x4000a400

0800267c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	; 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10a      	bne.n	80026a8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800269a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e00a      	b.n	80026be <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80026b0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80026b6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80026b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026bc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80026c8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80026ce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80026d4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	440b      	add	r3, r1
 80026ee:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	3304      	adds	r3, #4
 80026fa:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	3304      	adds	r3, #4
 8002706:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	e020      	b.n	8002750 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3303      	adds	r3, #3
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	3302      	adds	r3, #2
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	440b      	add	r3, r1
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002726:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	3301      	adds	r3, #1
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	440b      	add	r3, r1
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002734:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	440a      	add	r2, r1
 800273c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800273e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	3304      	adds	r3, #4
 8002748:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3304      	adds	r3, #4
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	4a06      	ldr	r2, [pc, #24]	; (8002770 <FDCAN_CopyMessageToRAM+0xf4>)
 8002758:	5cd3      	ldrb	r3, [r2, r3]
 800275a:	461a      	mov	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	4293      	cmp	r3, r2
 8002760:	d3d5      	bcc.n	800270e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8002762:	bf00      	nop
 8002764:	3724      	adds	r7, #36	; 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	08005030 	.word	0x08005030

08002774 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_FLASH_Program+0xa4>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_FLASH_Program+0x1e>
 800278e:	2302      	movs	r3, #2
 8002790:	e03e      	b.n	8002810 <HAL_FLASH_Program+0x9c>
 8002792:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_FLASH_Program+0xa4>)
 8002794:	2201      	movs	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002798:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800279c:	f000 f87c 	bl	8002898 <FLASH_WaitForLastOperation>
 80027a0:	4603      	mov	r3, r0
 80027a2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d12e      	bne.n	8002808 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027aa:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <HAL_FLASH_Program+0xa4>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d107      	bne.n	80027c6 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80027b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027ba:	68b8      	ldr	r0, [r7, #8]
 80027bc:	f000 f8c0 	bl	8002940 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80027c0:	2301      	movs	r3, #1
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	e010      	b.n	80027e8 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d002      	beq.n	80027d2 <HAL_FLASH_Program+0x5e>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d10a      	bne.n	80027e8 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	4619      	mov	r1, r3
 80027d6:	68b8      	ldr	r0, [r7, #8]
 80027d8:	f000 f8d6 	bl	8002988 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d102      	bne.n	80027e8 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80027e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027e6:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027ec:	f000 f854 	bl	8002898 <FLASH_WaitForLastOperation>
 80027f0:	4603      	mov	r3, r0
 80027f2:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d006      	beq.n	8002808 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_FLASH_Program+0xa8>)
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	4906      	ldr	r1, [pc, #24]	; (800281c <HAL_FLASH_Program+0xa8>)
 8002804:	4013      	ands	r3, r2
 8002806:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_FLASH_Program+0xa4>)
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800280e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000008 	.word	0x20000008
 800281c:	40022000 	.word	0x40022000

08002820 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800282a:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_FLASH_Unlock+0x38>)
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	2b00      	cmp	r3, #0
 8002830:	da0b      	bge.n	800284a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_FLASH_Unlock+0x38>)
 8002834:	4a09      	ldr	r2, [pc, #36]	; (800285c <HAL_FLASH_Unlock+0x3c>)
 8002836:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002838:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_FLASH_Unlock+0x38>)
 800283a:	4a09      	ldr	r2, [pc, #36]	; (8002860 <HAL_FLASH_Unlock+0x40>)
 800283c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_FLASH_Unlock+0x38>)
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	da01      	bge.n	800284a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800284a:	79fb      	ldrb	r3, [r7, #7]
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	40022000 	.word	0x40022000
 800285c:	45670123 	.word	0x45670123
 8002860:	cdef89ab 	.word	0xcdef89ab

08002864 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_FLASH_Lock+0x30>)
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	4a08      	ldr	r2, [pc, #32]	; (8002894 <HAL_FLASH_Lock+0x30>)
 8002874:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002878:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_FLASH_Lock+0x30>)
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	da01      	bge.n	8002886 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002886:	79fb      	ldrb	r3, [r7, #7]
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	40022000 	.word	0x40022000

08002898 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80028a0:	f7fd fd1e 	bl	80002e0 <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80028a6:	e009      	b.n	80028bc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80028a8:	f7fd fd1a 	bl	80002e0 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d201      	bcs.n	80028bc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e038      	b.n	800292e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80028bc:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <FLASH_WaitForLastOperation+0xa0>)
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c8:	d0ee      	beq.n	80028a8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80028ca:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <FLASH_WaitForLastOperation+0xa0>)
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80028d2:	4013      	ands	r3, r2
 80028d4:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01e      	beq.n	800291a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <FLASH_WaitForLastOperation+0xa4>)
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	4a15      	ldr	r2, [pc, #84]	; (800293c <FLASH_WaitForLastOperation+0xa4>)
 80028e6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d007      	beq.n	8002902 <FLASH_WaitForLastOperation+0x6a>
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <FLASH_WaitForLastOperation+0xa0>)
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80028fc:	490e      	ldr	r1, [pc, #56]	; (8002938 <FLASH_WaitForLastOperation+0xa0>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	618b      	str	r3, [r1, #24]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d004      	beq.n	8002916 <FLASH_WaitForLastOperation+0x7e>
 800290c:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <FLASH_WaitForLastOperation+0xa0>)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002914:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e009      	b.n	800292e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800291a:	4b07      	ldr	r3, [pc, #28]	; (8002938 <FLASH_WaitForLastOperation+0xa0>)
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b01      	cmp	r3, #1
 8002924:	d102      	bne.n	800292c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <FLASH_WaitForLastOperation+0xa0>)
 8002928:	2201      	movs	r2, #1
 800292a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40022000 	.word	0x40022000
 800293c:	20000008 	.word	0x20000008

08002940 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002940:	b490      	push	{r4, r7}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800294c:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <FLASH_Program_DoubleWord+0x44>)
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	4a0c      	ldr	r2, [pc, #48]	; (8002984 <FLASH_Program_DoubleWord+0x44>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800295e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8002962:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	f04f 0400 	mov.w	r4, #0
 800296e:	0013      	movs	r3, r2
 8002970:	2400      	movs	r4, #0
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	3204      	adds	r2, #4
 8002976:	6013      	str	r3, [r2, #0]
}
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bc90      	pop	{r4, r7}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40022000 	.word	0x40022000

08002988 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	; 0x24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8002992:	2340      	movs	r3, #64	; 0x40
 8002994:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800299e:	4b13      	ldr	r3, [pc, #76]	; (80029ec <FLASH_Program_Fast+0x64>)
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	4a12      	ldr	r2, [pc, #72]	; (80029ec <FLASH_Program_Fast+0x64>)
 80029a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029aa:	f3ef 8310 	mrs	r3, PRIMASK
 80029ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80029b0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80029b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80029b4:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	3304      	adds	r3, #4
 80029c2:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3304      	adds	r3, #4
 80029c8:	617b      	str	r3, [r7, #20]
    row_index--;
 80029ca:	7ffb      	ldrb	r3, [r7, #31]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80029d0:	7ffb      	ldrb	r3, [r7, #31]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1ef      	bne.n	80029b6 <FLASH_Program_Fast+0x2e>
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80029e0:	bf00      	nop
 80029e2:	3724      	adds	r7, #36	; 0x24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	40022000 	.word	0x40022000

080029f0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80029fa:	4b4a      	ldr	r3, [pc, #296]	; (8002b24 <HAL_FLASHEx_Erase+0x134>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_FLASHEx_Erase+0x16>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e089      	b.n	8002b1a <HAL_FLASHEx_Erase+0x12a>
 8002a06:	4b47      	ldr	r3, [pc, #284]	; (8002b24 <HAL_FLASHEx_Erase+0x134>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a10:	f7ff ff42 	bl	8002898 <FLASH_WaitForLastOperation>
 8002a14:	4603      	mov	r3, r0
 8002a16:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d179      	bne.n	8002b12 <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a1e:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <HAL_FLASHEx_Erase+0x134>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002a24:	4b40      	ldr	r3, [pc, #256]	; (8002b28 <HAL_FLASHEx_Erase+0x138>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d019      	beq.n	8002a64 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002a30:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <HAL_FLASHEx_Erase+0x138>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a3c      	ldr	r2, [pc, #240]	; (8002b28 <HAL_FLASHEx_Erase+0x138>)
 8002a36:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a3a:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002a3c:	4b3a      	ldr	r3, [pc, #232]	; (8002b28 <HAL_FLASHEx_Erase+0x138>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002a48:	4b37      	ldr	r3, [pc, #220]	; (8002b28 <HAL_FLASHEx_Erase+0x138>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a36      	ldr	r2, [pc, #216]	; (8002b28 <HAL_FLASHEx_Erase+0x138>)
 8002a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a52:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002a54:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <HAL_FLASHEx_Erase+0x134>)
 8002a56:	2203      	movs	r2, #3
 8002a58:	771a      	strb	r2, [r3, #28]
 8002a5a:	e016      	b.n	8002a8a <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002a5c:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <HAL_FLASHEx_Erase+0x134>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	771a      	strb	r2, [r3, #28]
 8002a62:	e012      	b.n	8002a8a <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002a64:	4b30      	ldr	r3, [pc, #192]	; (8002b28 <HAL_FLASHEx_Erase+0x138>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d009      	beq.n	8002a84 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002a70:	4b2d      	ldr	r3, [pc, #180]	; (8002b28 <HAL_FLASHEx_Erase+0x138>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a2c      	ldr	r2, [pc, #176]	; (8002b28 <HAL_FLASHEx_Erase+0x138>)
 8002a76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a7a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002a7c:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <HAL_FLASHEx_Erase+0x134>)
 8002a7e:	2202      	movs	r2, #2
 8002a80:	771a      	strb	r2, [r3, #28]
 8002a82:	e002      	b.n	8002a8a <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002a84:	4b27      	ldr	r3, [pc, #156]	; (8002b24 <HAL_FLASHEx_Erase+0x134>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d111      	bne.n	8002ab6 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 f848 	bl	8002b2c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002aa0:	f7ff fefa 	bl	8002898 <FLASH_WaitForLastOperation>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8002aa8:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <HAL_FLASHEx_Erase+0x138>)
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <HAL_FLASHEx_Erase+0x138>)
 8002aae:	f023 0304 	bic.w	r3, r3, #4
 8002ab2:	6153      	str	r3, [r2, #20]
 8002ab4:	e02b      	b.n	8002b0e <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8002abc:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	e01b      	b.n	8002afe <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4619      	mov	r1, r3
 8002acc:	68b8      	ldr	r0, [r7, #8]
 8002ace:	f000 f84b 	bl	8002b68 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ad2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ad6:	f7ff fedf 	bl	8002898 <FLASH_WaitForLastOperation>
 8002ada:	4603      	mov	r3, r0
 8002adc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002ade:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_FLASHEx_Erase+0x138>)
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	4a11      	ldr	r2, [pc, #68]	; (8002b28 <HAL_FLASHEx_Erase+0x138>)
 8002ae4:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8002ae8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	601a      	str	r2, [r3, #0]
          break;
 8002af6:	e00a      	b.n	8002b0e <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	3301      	adds	r3, #1
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	4413      	add	r3, r2
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d3db      	bcc.n	8002ac6 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002b0e:	f000 f84f 	bl	8002bb0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b12:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <HAL_FLASHEx_Erase+0x134>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]

  return status;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000008 	.word	0x20000008
 8002b28:	40022000 	.word	0x40022000

08002b2c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <FLASH_MassErase+0x38>)
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	4a08      	ldr	r2, [pc, #32]	; (8002b64 <FLASH_MassErase+0x38>)
 8002b44:	f043 0304 	orr.w	r3, r3, #4
 8002b48:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <FLASH_MassErase+0x38>)
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <FLASH_MassErase+0x38>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b54:	6153      	str	r3, [r2, #20]
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40022000 	.word	0x40022000

08002b68 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <FLASH_PageErase+0x44>)
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8002b82:	490a      	ldr	r1, [pc, #40]	; (8002bac <FLASH_PageErase+0x44>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002b88:	4b08      	ldr	r3, [pc, #32]	; (8002bac <FLASH_PageErase+0x44>)
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	4a07      	ldr	r2, [pc, #28]	; (8002bac <FLASH_PageErase+0x44>)
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <FLASH_PageErase+0x44>)
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	4a04      	ldr	r2, [pc, #16]	; (8002bac <FLASH_PageErase+0x44>)
 8002b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9e:	6153      	str	r3, [r2, #20]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	40022000 	.word	0x40022000

08002bb0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	; (8002c30 <FLASH_FlushCaches+0x80>)
 8002bb8:	7f1b      	ldrb	r3, [r3, #28]
 8002bba:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d002      	beq.n	8002bc8 <FLASH_FlushCaches+0x18>
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d111      	bne.n	8002bec <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <FLASH_FlushCaches+0x84>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a19      	ldr	r2, [pc, #100]	; (8002c34 <FLASH_FlushCaches+0x84>)
 8002bce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <FLASH_FlushCaches+0x84>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a16      	ldr	r2, [pc, #88]	; (8002c34 <FLASH_FlushCaches+0x84>)
 8002bda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bde:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <FLASH_FlushCaches+0x84>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <FLASH_FlushCaches+0x84>)
 8002be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d002      	beq.n	8002bf8 <FLASH_FlushCaches+0x48>
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d111      	bne.n	8002c1c <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <FLASH_FlushCaches+0x84>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <FLASH_FlushCaches+0x84>)
 8002bfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <FLASH_FlushCaches+0x84>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <FLASH_FlushCaches+0x84>)
 8002c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c0e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <FLASH_FlushCaches+0x84>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <FLASH_FlushCaches+0x84>)
 8002c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c1a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <FLASH_FlushCaches+0x80>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	771a      	strb	r2, [r3, #28]
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000008 	.word	0x20000008
 8002c34:	40022000 	.word	0x40022000

08002c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c46:	e15a      	b.n	8002efe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	fa01 f303 	lsl.w	r3, r1, r3
 8002c54:	4013      	ands	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 814c 	beq.w	8002ef8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x38>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b12      	cmp	r3, #18
 8002c6e:	d123      	bne.n	8002cb8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	08da      	lsrs	r2, r3, #3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3208      	adds	r2, #8
 8002c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	220f      	movs	r2, #15
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	08da      	lsrs	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3208      	adds	r2, #8
 8002cb2:	6939      	ldr	r1, [r7, #16]
 8002cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0203 	and.w	r2, r3, #3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d00b      	beq.n	8002d0c <HAL_GPIO_Init+0xd4>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d007      	beq.n	8002d0c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d00:	2b11      	cmp	r3, #17
 8002d02:	d003      	beq.n	8002d0c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b12      	cmp	r3, #18
 8002d0a:	d130      	bne.n	8002d6e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2203      	movs	r2, #3
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d42:	2201      	movs	r2, #1
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	091b      	lsrs	r3, r3, #4
 8002d58:	f003 0201 	and.w	r2, r3, #1
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	2203      	movs	r2, #3
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4013      	ands	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 80a6 	beq.w	8002ef8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dac:	4b5b      	ldr	r3, [pc, #364]	; (8002f1c <HAL_GPIO_Init+0x2e4>)
 8002dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db0:	4a5a      	ldr	r2, [pc, #360]	; (8002f1c <HAL_GPIO_Init+0x2e4>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6613      	str	r3, [r2, #96]	; 0x60
 8002db8:	4b58      	ldr	r3, [pc, #352]	; (8002f1c <HAL_GPIO_Init+0x2e4>)
 8002dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dc4:	4a56      	ldr	r2, [pc, #344]	; (8002f20 <HAL_GPIO_Init+0x2e8>)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	3302      	adds	r3, #2
 8002dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	220f      	movs	r2, #15
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dee:	d01f      	beq.n	8002e30 <HAL_GPIO_Init+0x1f8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a4c      	ldr	r2, [pc, #304]	; (8002f24 <HAL_GPIO_Init+0x2ec>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d019      	beq.n	8002e2c <HAL_GPIO_Init+0x1f4>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a4b      	ldr	r2, [pc, #300]	; (8002f28 <HAL_GPIO_Init+0x2f0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d013      	beq.n	8002e28 <HAL_GPIO_Init+0x1f0>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a4a      	ldr	r2, [pc, #296]	; (8002f2c <HAL_GPIO_Init+0x2f4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00d      	beq.n	8002e24 <HAL_GPIO_Init+0x1ec>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a49      	ldr	r2, [pc, #292]	; (8002f30 <HAL_GPIO_Init+0x2f8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d007      	beq.n	8002e20 <HAL_GPIO_Init+0x1e8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a48      	ldr	r2, [pc, #288]	; (8002f34 <HAL_GPIO_Init+0x2fc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d101      	bne.n	8002e1c <HAL_GPIO_Init+0x1e4>
 8002e18:	2305      	movs	r3, #5
 8002e1a:	e00a      	b.n	8002e32 <HAL_GPIO_Init+0x1fa>
 8002e1c:	2306      	movs	r3, #6
 8002e1e:	e008      	b.n	8002e32 <HAL_GPIO_Init+0x1fa>
 8002e20:	2304      	movs	r3, #4
 8002e22:	e006      	b.n	8002e32 <HAL_GPIO_Init+0x1fa>
 8002e24:	2303      	movs	r3, #3
 8002e26:	e004      	b.n	8002e32 <HAL_GPIO_Init+0x1fa>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e002      	b.n	8002e32 <HAL_GPIO_Init+0x1fa>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <HAL_GPIO_Init+0x1fa>
 8002e30:	2300      	movs	r3, #0
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	f002 0203 	and.w	r2, r2, #3
 8002e38:	0092      	lsls	r2, r2, #2
 8002e3a:	4093      	lsls	r3, r2
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e42:	4937      	ldr	r1, [pc, #220]	; (8002f20 <HAL_GPIO_Init+0x2e8>)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	3302      	adds	r3, #2
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e50:	4b39      	ldr	r3, [pc, #228]	; (8002f38 <HAL_GPIO_Init+0x300>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e74:	4a30      	ldr	r2, [pc, #192]	; (8002f38 <HAL_GPIO_Init+0x300>)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002e7a:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <HAL_GPIO_Init+0x300>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e9e:	4a26      	ldr	r2, [pc, #152]	; (8002f38 <HAL_GPIO_Init+0x300>)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ea4:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <HAL_GPIO_Init+0x300>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	; (8002f38 <HAL_GPIO_Init+0x300>)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ece:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <HAL_GPIO_Init+0x300>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4013      	ands	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ef2:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <HAL_GPIO_Init+0x300>)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	3301      	adds	r3, #1
 8002efc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f47f ae9d 	bne.w	8002c48 <HAL_GPIO_Init+0x10>
  }
}
 8002f0e:	bf00      	nop
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40010000 	.word	0x40010000
 8002f24:	48000400 	.word	0x48000400
 8002f28:	48000800 	.word	0x48000800
 8002f2c:	48000c00 	.word	0x48000c00
 8002f30:	48001000 	.word	0x48001000
 8002f34:	48001400 	.word	0x48001400
 8002f38:	40010400 	.word	0x40010400

08002f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	807b      	strh	r3, [r7, #2]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f4c:	787b      	ldrb	r3, [r7, #1]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f58:	e002      	b.n	8002f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	887b      	ldrh	r3, [r7, #2]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f84:	887a      	ldrh	r2, [r7, #2]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002f8a:	e002      	b.n	8002f92 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f8c:	887a      	ldrh	r2, [r7, #2]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	619a      	str	r2, [r3, #24]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d141      	bne.n	8003032 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fae:	4b4b      	ldr	r3, [pc, #300]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fba:	d131      	bne.n	8003020 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fbc:	4b47      	ldr	r3, [pc, #284]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc2:	4a46      	ldr	r2, [pc, #280]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fcc:	4b43      	ldr	r3, [pc, #268]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fd4:	4a41      	ldr	r2, [pc, #260]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fdc:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2232      	movs	r2, #50	; 0x32
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	4a3f      	ldr	r2, [pc, #252]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	0c9b      	lsrs	r3, r3, #18
 8002fee:	3301      	adds	r3, #1
 8002ff0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ff2:	e002      	b.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ffa:	4b38      	ldr	r3, [pc, #224]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003006:	d102      	bne.n	800300e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f2      	bne.n	8002ff4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800300e:	4b33      	ldr	r3, [pc, #204]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301a:	d158      	bne.n	80030ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e057      	b.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003020:	4b2e      	ldr	r3, [pc, #184]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003026:	4a2d      	ldr	r2, [pc, #180]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800302c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003030:	e04d      	b.n	80030ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003038:	d141      	bne.n	80030be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800303a:	4b28      	ldr	r3, [pc, #160]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003046:	d131      	bne.n	80030ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003048:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800304e:	4a23      	ldr	r2, [pc, #140]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003054:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003058:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003060:	4a1e      	ldr	r2, [pc, #120]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003066:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003068:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2232      	movs	r2, #50	; 0x32
 800306e:	fb02 f303 	mul.w	r3, r2, r3
 8003072:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	0c9b      	lsrs	r3, r3, #18
 800307a:	3301      	adds	r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800307e:	e002      	b.n	8003086 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	3b01      	subs	r3, #1
 8003084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003092:	d102      	bne.n	800309a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f2      	bne.n	8003080 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800309a:	4b10      	ldr	r3, [pc, #64]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a6:	d112      	bne.n	80030ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e011      	b.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b2:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030bc:	e007      	b.n	80030ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030be:	4b07      	ldr	r3, [pc, #28]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030c6:	4a05      	ldr	r2, [pc, #20]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	40007000 	.word	0x40007000
 80030e0:	20000040 	.word	0x20000040
 80030e4:	431bde83 	.word	0x431bde83

080030e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e308      	b.n	800370c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d075      	beq.n	80031f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003106:	4ba3      	ldr	r3, [pc, #652]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003110:	4ba0      	ldr	r3, [pc, #640]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b0c      	cmp	r3, #12
 800311e:	d102      	bne.n	8003126 <HAL_RCC_OscConfig+0x3e>
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	2b03      	cmp	r3, #3
 8003124:	d002      	beq.n	800312c <HAL_RCC_OscConfig+0x44>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d10b      	bne.n	8003144 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312c:	4b99      	ldr	r3, [pc, #612]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d05b      	beq.n	80031f0 <HAL_RCC_OscConfig+0x108>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d157      	bne.n	80031f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e2e3      	b.n	800370c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314c:	d106      	bne.n	800315c <HAL_RCC_OscConfig+0x74>
 800314e:	4b91      	ldr	r3, [pc, #580]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a90      	ldr	r2, [pc, #576]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e01d      	b.n	8003198 <HAL_RCC_OscConfig+0xb0>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003164:	d10c      	bne.n	8003180 <HAL_RCC_OscConfig+0x98>
 8003166:	4b8b      	ldr	r3, [pc, #556]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a8a      	ldr	r2, [pc, #552]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	4b88      	ldr	r3, [pc, #544]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a87      	ldr	r2, [pc, #540]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e00b      	b.n	8003198 <HAL_RCC_OscConfig+0xb0>
 8003180:	4b84      	ldr	r3, [pc, #528]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a83      	ldr	r2, [pc, #524]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	4b81      	ldr	r3, [pc, #516]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a80      	ldr	r2, [pc, #512]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d013      	beq.n	80031c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fd f89e 	bl	80002e0 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a8:	f7fd f89a 	bl	80002e0 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	; 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e2a8      	b.n	800370c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ba:	4b76      	ldr	r3, [pc, #472]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0xc0>
 80031c6:	e014      	b.n	80031f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fd f88a 	bl	80002e0 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d0:	f7fd f886 	bl	80002e0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	; 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e294      	b.n	800370c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031e2:	4b6c      	ldr	r3, [pc, #432]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0xe8>
 80031ee:	e000      	b.n	80031f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d075      	beq.n	80032ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031fe:	4b65      	ldr	r3, [pc, #404]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003208:	4b62      	ldr	r3, [pc, #392]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2b0c      	cmp	r3, #12
 8003216:	d102      	bne.n	800321e <HAL_RCC_OscConfig+0x136>
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d002      	beq.n	8003224 <HAL_RCC_OscConfig+0x13c>
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d11f      	bne.n	8003264 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003224:	4b5b      	ldr	r3, [pc, #364]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_OscConfig+0x154>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e267      	b.n	800370c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323c:	4b55      	ldr	r3, [pc, #340]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	061b      	lsls	r3, r3, #24
 800324a:	4952      	ldr	r1, [pc, #328]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003250:	4b51      	ldr	r3, [pc, #324]	; (8003398 <HAL_RCC_OscConfig+0x2b0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fc fff7 	bl	8000248 <HAL_InitTick>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d043      	beq.n	80032e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e253      	b.n	800370c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d023      	beq.n	80032b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326c:	4b49      	ldr	r3, [pc, #292]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a48      	ldr	r2, [pc, #288]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fd f832 	bl	80002e0 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003280:	f7fd f82e 	bl	80002e0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e23c      	b.n	800370c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003292:	4b40      	ldr	r3, [pc, #256]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329e:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	061b      	lsls	r3, r3, #24
 80032ac:	4939      	ldr	r1, [pc, #228]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
 80032b2:	e01a      	b.n	80032ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b4:	4b37      	ldr	r3, [pc, #220]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a36      	ldr	r2, [pc, #216]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 80032ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fd f80e 	bl	80002e0 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c8:	f7fd f80a 	bl	80002e0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e218      	b.n	800370c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032da:	4b2e      	ldr	r3, [pc, #184]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x1e0>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d03c      	beq.n	8003370 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01c      	beq.n	8003338 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fe:	4b25      	ldr	r3, [pc, #148]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003304:	4a23      	ldr	r2, [pc, #140]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7fc ffe7 	bl	80002e0 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003316:	f7fc ffe3 	bl	80002e0 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e1f1      	b.n	800370c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003328:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800332a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0ef      	beq.n	8003316 <HAL_RCC_OscConfig+0x22e>
 8003336:	e01b      	b.n	8003370 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003338:	4b16      	ldr	r3, [pc, #88]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800333e:	4a15      	ldr	r2, [pc, #84]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003348:	f7fc ffca 	bl	80002e0 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003350:	f7fc ffc6 	bl	80002e0 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e1d4      	b.n	800370c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1ef      	bne.n	8003350 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80ab 	beq.w	80034d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800337e:	2300      	movs	r3, #0
 8003380:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003382:	4b04      	ldr	r3, [pc, #16]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_RCC_OscConfig+0x2b4>
 800338e:	2301      	movs	r3, #1
 8003390:	e005      	b.n	800339e <HAL_RCC_OscConfig+0x2b6>
 8003392:	bf00      	nop
 8003394:	40021000 	.word	0x40021000
 8003398:	20000000 	.word	0x20000000
 800339c:	2300      	movs	r3, #0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00d      	beq.n	80033be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	4baf      	ldr	r3, [pc, #700]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	4aae      	ldr	r2, [pc, #696]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80033a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ac:	6593      	str	r3, [r2, #88]	; 0x58
 80033ae:	4bac      	ldr	r3, [pc, #688]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80033b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033ba:	2301      	movs	r3, #1
 80033bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033be:	4ba9      	ldr	r3, [pc, #676]	; (8003664 <HAL_RCC_OscConfig+0x57c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d118      	bne.n	80033fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ca:	4ba6      	ldr	r3, [pc, #664]	; (8003664 <HAL_RCC_OscConfig+0x57c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4aa5      	ldr	r2, [pc, #660]	; (8003664 <HAL_RCC_OscConfig+0x57c>)
 80033d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d6:	f7fc ff83 	bl	80002e0 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033de:	f7fc ff7f 	bl	80002e0 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e18d      	b.n	800370c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f0:	4b9c      	ldr	r3, [pc, #624]	; (8003664 <HAL_RCC_OscConfig+0x57c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d108      	bne.n	8003416 <HAL_RCC_OscConfig+0x32e>
 8003404:	4b96      	ldr	r3, [pc, #600]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340a:	4a95      	ldr	r2, [pc, #596]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003414:	e024      	b.n	8003460 <HAL_RCC_OscConfig+0x378>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b05      	cmp	r3, #5
 800341c:	d110      	bne.n	8003440 <HAL_RCC_OscConfig+0x358>
 800341e:	4b90      	ldr	r3, [pc, #576]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003424:	4a8e      	ldr	r2, [pc, #568]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800342e:	4b8c      	ldr	r3, [pc, #560]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003434:	4a8a      	ldr	r2, [pc, #552]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800343e:	e00f      	b.n	8003460 <HAL_RCC_OscConfig+0x378>
 8003440:	4b87      	ldr	r3, [pc, #540]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	4a86      	ldr	r2, [pc, #536]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003450:	4b83      	ldr	r3, [pc, #524]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	4a82      	ldr	r2, [pc, #520]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003458:	f023 0304 	bic.w	r3, r3, #4
 800345c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d016      	beq.n	8003496 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7fc ff3a 	bl	80002e0 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346e:	e00a      	b.n	8003486 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7fc ff36 	bl	80002e0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	; 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e142      	b.n	800370c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003486:	4b76      	ldr	r3, [pc, #472]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0ed      	beq.n	8003470 <HAL_RCC_OscConfig+0x388>
 8003494:	e015      	b.n	80034c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003496:	f7fc ff23 	bl	80002e0 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800349c:	e00a      	b.n	80034b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349e:	f7fc ff1f 	bl	80002e0 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e12b      	b.n	800370c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b4:	4b6a      	ldr	r3, [pc, #424]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ed      	bne.n	800349e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034c2:	7ffb      	ldrb	r3, [r7, #31]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c8:	4b65      	ldr	r3, [pc, #404]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	4a64      	ldr	r2, [pc, #400]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80034ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d03c      	beq.n	800355a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01c      	beq.n	8003522 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034e8:	4b5d      	ldr	r3, [pc, #372]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80034ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ee:	4a5c      	ldr	r2, [pc, #368]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fc fef2 	bl	80002e0 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003500:	f7fc feee 	bl	80002e0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e0fc      	b.n	800370c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003512:	4b53      	ldr	r3, [pc, #332]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003514:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ef      	beq.n	8003500 <HAL_RCC_OscConfig+0x418>
 8003520:	e01b      	b.n	800355a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003522:	4b4f      	ldr	r3, [pc, #316]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003524:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003528:	4a4d      	ldr	r2, [pc, #308]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 800352a:	f023 0301 	bic.w	r3, r3, #1
 800352e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003532:	f7fc fed5 	bl	80002e0 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800353a:	f7fc fed1 	bl	80002e0 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0df      	b.n	800370c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800354c:	4b44      	ldr	r3, [pc, #272]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 800354e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1ef      	bne.n	800353a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80d3 	beq.w	800370a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003564:	4b3e      	ldr	r3, [pc, #248]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	2b0c      	cmp	r3, #12
 800356e:	f000 808d 	beq.w	800368c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d15a      	bne.n	8003630 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357a:	4b39      	ldr	r3, [pc, #228]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a38      	ldr	r2, [pc, #224]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003580:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7fc feab 	bl	80002e0 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358e:	f7fc fea7 	bl	80002e0 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e0b5      	b.n	800370c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a0:	4b2f      	ldr	r3, [pc, #188]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f0      	bne.n	800358e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ac:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	4b2d      	ldr	r3, [pc, #180]	; (8003668 <HAL_RCC_OscConfig+0x580>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6a11      	ldr	r1, [r2, #32]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035bc:	3a01      	subs	r2, #1
 80035be:	0112      	lsls	r2, r2, #4
 80035c0:	4311      	orrs	r1, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80035c6:	0212      	lsls	r2, r2, #8
 80035c8:	4311      	orrs	r1, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035ce:	0852      	lsrs	r2, r2, #1
 80035d0:	3a01      	subs	r2, #1
 80035d2:	0552      	lsls	r2, r2, #21
 80035d4:	4311      	orrs	r1, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035da:	0852      	lsrs	r2, r2, #1
 80035dc:	3a01      	subs	r2, #1
 80035de:	0652      	lsls	r2, r2, #25
 80035e0:	4311      	orrs	r1, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80035e6:	06d2      	lsls	r2, r2, #27
 80035e8:	430a      	orrs	r2, r1
 80035ea:	491d      	ldr	r1, [pc, #116]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f0:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1a      	ldr	r2, [pc, #104]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035fc:	4b18      	ldr	r3, [pc, #96]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4a17      	ldr	r2, [pc, #92]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003606:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7fc fe6a 	bl	80002e0 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003610:	f7fc fe66 	bl	80002e0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e074      	b.n	800370c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0x528>
 800362e:	e06c      	b.n	800370a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a0a      	ldr	r2, [pc, #40]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800363a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800363c:	4b08      	ldr	r3, [pc, #32]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4a07      	ldr	r2, [pc, #28]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003642:	f023 0303 	bic.w	r3, r3, #3
 8003646:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4a04      	ldr	r2, [pc, #16]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 800364e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003656:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fc fe42 	bl	80002e0 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800365e:	e00e      	b.n	800367e <HAL_RCC_OscConfig+0x596>
 8003660:	40021000 	.word	0x40021000
 8003664:	40007000 	.word	0x40007000
 8003668:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366c:	f7fc fe38 	bl	80002e0 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e046      	b.n	800370c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800367e:	4b25      	ldr	r3, [pc, #148]	; (8003714 <HAL_RCC_OscConfig+0x62c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x584>
 800368a:	e03e      	b.n	800370a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e039      	b.n	800370c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003698:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <HAL_RCC_OscConfig+0x62c>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f003 0203 	and.w	r2, r3, #3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d12c      	bne.n	8003706 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	3b01      	subs	r3, #1
 80036b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d123      	bne.n	8003706 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d11b      	bne.n	8003706 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036da:	429a      	cmp	r2, r3
 80036dc:	d113      	bne.n	8003706 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	3b01      	subs	r3, #1
 80036ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d109      	bne.n	8003706 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	3b01      	subs	r3, #1
 8003700:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d001      	beq.n	800370a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000

08003718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e11e      	b.n	800396e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003730:	4b91      	ldr	r3, [pc, #580]	; (8003978 <HAL_RCC_ClockConfig+0x260>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d910      	bls.n	8003760 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b8e      	ldr	r3, [pc, #568]	; (8003978 <HAL_RCC_ClockConfig+0x260>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 020f 	bic.w	r2, r3, #15
 8003746:	498c      	ldr	r1, [pc, #560]	; (8003978 <HAL_RCC_ClockConfig+0x260>)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b8a      	ldr	r3, [pc, #552]	; (8003978 <HAL_RCC_ClockConfig+0x260>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e106      	b.n	800396e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d073      	beq.n	8003854 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d129      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003774:	4b81      	ldr	r3, [pc, #516]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0f4      	b.n	800396e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003784:	f000 f964 	bl	8003a50 <RCC_GetSysClockFreqFromPLLSource>
 8003788:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4a7c      	ldr	r2, [pc, #496]	; (8003980 <HAL_RCC_ClockConfig+0x268>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d93f      	bls.n	8003812 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003792:	4b7a      	ldr	r3, [pc, #488]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d033      	beq.n	8003812 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d12f      	bne.n	8003812 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037b2:	4b72      	ldr	r3, [pc, #456]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ba:	4a70      	ldr	r2, [pc, #448]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 80037bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037c2:	2380      	movs	r3, #128	; 0x80
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e024      	b.n	8003812 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d107      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d0:	4b6a      	ldr	r3, [pc, #424]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0c6      	b.n	800396e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e0:	4b66      	ldr	r3, [pc, #408]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0be      	b.n	800396e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80037f0:	f000 f8ce 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4a61      	ldr	r2, [pc, #388]	; (8003980 <HAL_RCC_ClockConfig+0x268>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d909      	bls.n	8003812 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037fe:	4b5f      	ldr	r3, [pc, #380]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003806:	4a5d      	ldr	r2, [pc, #372]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 8003808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800380c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800380e:	2380      	movs	r3, #128	; 0x80
 8003810:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003812:	4b5a      	ldr	r3, [pc, #360]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f023 0203 	bic.w	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4957      	ldr	r1, [pc, #348]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 8003820:	4313      	orrs	r3, r2
 8003822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003824:	f7fc fd5c 	bl	80002e0 <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	e00a      	b.n	8003842 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382c:	f7fc fd58 	bl	80002e0 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	; 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e095      	b.n	800396e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	4b4e      	ldr	r3, [pc, #312]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 020c 	and.w	r2, r3, #12
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	429a      	cmp	r2, r3
 8003852:	d1eb      	bne.n	800382c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d023      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800386c:	4b43      	ldr	r3, [pc, #268]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4a42      	ldr	r2, [pc, #264]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 8003872:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003876:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d007      	beq.n	8003894 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003884:	4b3d      	ldr	r3, [pc, #244]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800388c:	4a3b      	ldr	r2, [pc, #236]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 800388e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003892:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003894:	4b39      	ldr	r3, [pc, #228]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4936      	ldr	r1, [pc, #216]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
 80038a6:	e008      	b.n	80038ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2b80      	cmp	r3, #128	; 0x80
 80038ac:	d105      	bne.n	80038ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038ae:	4b33      	ldr	r3, [pc, #204]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	4a32      	ldr	r2, [pc, #200]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 80038b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038ba:	4b2f      	ldr	r3, [pc, #188]	; (8003978 <HAL_RCC_ClockConfig+0x260>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d21d      	bcs.n	8003904 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c8:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <HAL_RCC_ClockConfig+0x260>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 020f 	bic.w	r2, r3, #15
 80038d0:	4929      	ldr	r1, [pc, #164]	; (8003978 <HAL_RCC_ClockConfig+0x260>)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038d8:	f7fc fd02 	bl	80002e0 <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e0:	f7fc fcfe 	bl	80002e0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e03b      	b.n	800396e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f6:	4b20      	ldr	r3, [pc, #128]	; (8003978 <HAL_RCC_ClockConfig+0x260>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d1ed      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003910:	4b1a      	ldr	r3, [pc, #104]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4917      	ldr	r1, [pc, #92]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800392e:	4b13      	ldr	r3, [pc, #76]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	490f      	ldr	r1, [pc, #60]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003942:	f000 f825 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8003946:	4601      	mov	r1, r0
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <HAL_RCC_ClockConfig+0x264>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <HAL_RCC_ClockConfig+0x26c>)
 8003954:	5cd3      	ldrb	r3, [r2, r3]
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	fa21 f303 	lsr.w	r3, r1, r3
 800395e:	4a0a      	ldr	r2, [pc, #40]	; (8003988 <HAL_RCC_ClockConfig+0x270>)
 8003960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003962:	4b0a      	ldr	r3, [pc, #40]	; (800398c <HAL_RCC_ClockConfig+0x274>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fc fc6e 	bl	8000248 <HAL_InitTick>
 800396c:	4603      	mov	r3, r0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40022000 	.word	0x40022000
 800397c:	40021000 	.word	0x40021000
 8003980:	04c4b400 	.word	0x04c4b400
 8003984:	08005070 	.word	0x08005070
 8003988:	20000040 	.word	0x20000040
 800398c:	20000000 	.word	0x20000000

08003990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003996:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d102      	bne.n	80039a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039a2:	4b2a      	ldr	r3, [pc, #168]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	e047      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039a8:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d102      	bne.n	80039ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039b4:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	e03e      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80039ba:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b0c      	cmp	r3, #12
 80039c4:	d136      	bne.n	8003a34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039c6:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	3301      	adds	r3, #1
 80039dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d10c      	bne.n	80039fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039e4:	4a19      	ldr	r2, [pc, #100]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	4a16      	ldr	r2, [pc, #88]	; (8003a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ee:	68d2      	ldr	r2, [r2, #12]
 80039f0:	0a12      	lsrs	r2, r2, #8
 80039f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039f6:	fb02 f303 	mul.w	r3, r2, r3
 80039fa:	617b      	str	r3, [r7, #20]
      break;
 80039fc:	e00c      	b.n	8003a18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039fe:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a06:	4a10      	ldr	r2, [pc, #64]	; (8003a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a08:	68d2      	ldr	r2, [r2, #12]
 8003a0a:	0a12      	lsrs	r2, r2, #8
 8003a0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a10:	fb02 f303 	mul.w	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]
      break;
 8003a16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	0e5b      	lsrs	r3, r3, #25
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	3301      	adds	r3, #1
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	e001      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a38:	693b      	ldr	r3, [r7, #16]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	00f42400 	.word	0x00f42400

08003a50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a56:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a60:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d10c      	bne.n	8003a8e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a74:	4a17      	ldr	r2, [pc, #92]	; (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	4a14      	ldr	r2, [pc, #80]	; (8003ad0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a7e:	68d2      	ldr	r2, [r2, #12]
 8003a80:	0a12      	lsrs	r2, r2, #8
 8003a82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a86:	fb02 f303 	mul.w	r3, r2, r3
 8003a8a:	617b      	str	r3, [r7, #20]
    break;
 8003a8c:	e00c      	b.n	8003aa8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a8e:	4a11      	ldr	r2, [pc, #68]	; (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a96:	4a0e      	ldr	r2, [pc, #56]	; (8003ad0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a98:	68d2      	ldr	r2, [r2, #12]
 8003a9a:	0a12      	lsrs	r2, r2, #8
 8003a9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003aa0:	fb02 f303 	mul.w	r3, r2, r3
 8003aa4:	617b      	str	r3, [r7, #20]
    break;
 8003aa6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	0e5b      	lsrs	r3, r3, #25
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ac2:	687b      	ldr	r3, [r7, #4]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	00f42400 	.word	0x00f42400

08003ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8098 	beq.w	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af6:	2300      	movs	r3, #0
 8003af8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afa:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10d      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b06:	4b40      	ldr	r3, [pc, #256]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	4a3f      	ldr	r2, [pc, #252]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b10:	6593      	str	r3, [r2, #88]	; 0x58
 8003b12:	4b3d      	ldr	r3, [pc, #244]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	60bb      	str	r3, [r7, #8]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b22:	4b3a      	ldr	r3, [pc, #232]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a39      	ldr	r2, [pc, #228]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b2e:	f7fc fbd7 	bl	80002e0 <HAL_GetTick>
 8003b32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b34:	e009      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b36:	f7fc fbd3 	bl	80002e0 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d902      	bls.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	74fb      	strb	r3, [r7, #19]
        break;
 8003b48:	e005      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b4a:	4b30      	ldr	r3, [pc, #192]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0ef      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b56:	7cfb      	ldrb	r3, [r7, #19]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d159      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b5c:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01e      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d019      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b78:	4b23      	ldr	r3, [pc, #140]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b84:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	4a1f      	ldr	r2, [pc, #124]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b94:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ba4:	4a18      	ldr	r2, [pc, #96]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d016      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb6:	f7fc fb93 	bl	80002e0 <HAL_GetTick>
 8003bba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bbc:	e00b      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bbe:	f7fc fb8f 	bl	80002e0 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d902      	bls.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	74fb      	strb	r3, [r7, #19]
            break;
 8003bd4:	e006      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0ec      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003be4:	7cfb      	ldrb	r3, [r7, #19]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bea:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	4903      	ldr	r1, [pc, #12]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c00:	e008      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	74bb      	strb	r3, [r7, #18]
 8003c06:	e005      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c14:	7c7b      	ldrb	r3, [r7, #17]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d105      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1a:	4ba6      	ldr	r3, [pc, #664]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1e:	4aa5      	ldr	r2, [pc, #660]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c32:	4ba0      	ldr	r3, [pc, #640]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c38:	f023 0203 	bic.w	r2, r3, #3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	499c      	ldr	r1, [pc, #624]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c54:	4b97      	ldr	r3, [pc, #604]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5a:	f023 020c 	bic.w	r2, r3, #12
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	4994      	ldr	r1, [pc, #592]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c76:	4b8f      	ldr	r3, [pc, #572]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	498b      	ldr	r1, [pc, #556]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c98:	4b86      	ldr	r3, [pc, #536]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	4983      	ldr	r1, [pc, #524]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cba:	4b7e      	ldr	r3, [pc, #504]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	497a      	ldr	r1, [pc, #488]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cdc:	4b75      	ldr	r3, [pc, #468]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	4972      	ldr	r1, [pc, #456]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cfe:	4b6d      	ldr	r3, [pc, #436]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	4969      	ldr	r1, [pc, #420]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d20:	4b64      	ldr	r3, [pc, #400]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	4961      	ldr	r1, [pc, #388]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d42:	4b5c      	ldr	r3, [pc, #368]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	4958      	ldr	r1, [pc, #352]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d015      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d64:	4b53      	ldr	r3, [pc, #332]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	4950      	ldr	r1, [pc, #320]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d82:	d105      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d84:	4b4b      	ldr	r3, [pc, #300]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4a4a      	ldr	r2, [pc, #296]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d015      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d9c:	4b45      	ldr	r3, [pc, #276]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	4942      	ldr	r1, [pc, #264]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dba:	d105      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dbc:	4b3d      	ldr	r3, [pc, #244]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4a3c      	ldr	r2, [pc, #240]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dc6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d015      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dd4:	4b37      	ldr	r3, [pc, #220]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	4934      	ldr	r1, [pc, #208]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003df2:	d105      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003df4:	4b2f      	ldr	r3, [pc, #188]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4a2e      	ldr	r2, [pc, #184]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dfe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d015      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e0c:	4b29      	ldr	r3, [pc, #164]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	4926      	ldr	r1, [pc, #152]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e2a:	d105      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e2c:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4a20      	ldr	r2, [pc, #128]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e36:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d015      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e44:	4b1b      	ldr	r3, [pc, #108]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	4918      	ldr	r1, [pc, #96]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e62:	d105      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e64:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	4a12      	ldr	r2, [pc, #72]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d015      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	490a      	ldr	r1, [pc, #40]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e9a:	d105      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a04      	ldr	r2, [pc, #16]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003ea8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000

08003eb8 <Switch_Power>:


const pinPort *switches[] = {&U5IN0, &U5IN1, &U6IN0, &U6IN1, &U7IN0, &U7IN1};

void Switch_Power(uint8_t enableSwitching, uint8_t newState)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	460a      	mov	r2, r1
 8003ec2:	71fb      	strb	r3, [r7, #7]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	71bb      	strb	r3, [r7, #6]
	for(uint32_t i=0; i<6; i++)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	e020      	b.n	8003f10 <Switch_Power+0x58>
	{
		if ((1<<i) & enableSwitching)
 8003ece:	79fa      	ldrb	r2, [r7, #7]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	fa42 f303 	asr.w	r3, r2, r3
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d015      	beq.n	8003f0a <Switch_Power+0x52>
		{
			HAL_GPIO_WritePin(switches[i]->PORT, switches[i]->PIN, ((1<<i)&newState)>>i);
 8003ede:	4a10      	ldr	r2, [pc, #64]	; (8003f20 <Switch_Power+0x68>)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	4a0d      	ldr	r2, [pc, #52]	; (8003f20 <Switch_Power+0x68>)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef0:	8899      	ldrh	r1, [r3, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	79bb      	ldrb	r3, [r7, #6]
 8003efa:	401a      	ands	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	fa42 f303 	asr.w	r3, r2, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	f7ff f819 	bl	8002f3c <HAL_GPIO_WritePin>
	for(uint32_t i=0; i<6; i++)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d9db      	bls.n	8003ece <Switch_Power+0x16>
		}
	}
}
 8003f16:	bf00      	nop
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000028 	.word	0x20000028

08003f24 <Config_Setup>:
#include "main.h"
#include "config.h"


void Config_Setup(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
	if(Flash_Read(FLASH_PAGE_63)==0xFFFFFFFF) //initialize the flash to avoid errors
 8003f28:	4807      	ldr	r0, [pc, #28]	; (8003f48 <Config_Setup+0x24>)
 8003f2a:	f000 f9f3 	bl	8004314 <Flash_Read>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f34:	d104      	bne.n	8003f40 <Config_Setup+0x1c>

		Config_1();

#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_0();
 8003f36:	f000 f809 	bl	8003f4c <Config_0>

#endif

		Config_Write_Flash();
 8003f3a:	f000 f84d 	bl	8003fd8 <Config_Write_Flash>
	}
	else //if flash is not blank read in values from flash
	{
		Config_Read_Flash();
	}
}
 8003f3e:	e001      	b.n	8003f44 <Config_Setup+0x20>
		Config_Read_Flash();
 8003f40:	f000 f8d4 	bl	80040ec <Config_Read_Flash>
}
 8003f44:	bf00      	nop
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	0801f800 	.word	0x0801f800

08003f4c <Config_0>:


void Config_0(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0

	Digital_In_EN = 0xb00000000;

#else //in this case we test digital inputs

	Digital_In_EN = 0b00011101; //bit for PB4 is 0 to ensure it isn't used as PB4 seemed to have hardware problems
 8003f50:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <Config_0+0x80>)
 8003f52:	221d      	movs	r2, #29
 8003f54:	601a      	str	r2, [r3, #0]

#endif

	Can_IDs[0] = 0x0F;
 8003f56:	4b1e      	ldr	r3, [pc, #120]	; (8003fd0 <Config_0+0x84>)
 8003f58:	220f      	movs	r2, #15
 8003f5a:	601a      	str	r2, [r3, #0]
	Can_DLCs[0] = 1;
 8003f5c:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <Config_0+0x88>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
	Can_IDs[1] = 0xFF;
 8003f62:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <Config_0+0x84>)
 8003f64:	22ff      	movs	r2, #255	; 0xff
 8003f66:	605a      	str	r2, [r3, #4]
	Can_DLCs[1] = 0;
 8003f68:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <Config_0+0x88>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	605a      	str	r2, [r3, #4]
	Can_IDs[2] = -1;
 8003f6e:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <Config_0+0x84>)
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295
 8003f74:	609a      	str	r2, [r3, #8]
	Can_DLCs[2] = 4;
 8003f76:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <Config_0+0x88>)
 8003f78:	2204      	movs	r2, #4
 8003f7a:	609a      	str	r2, [r3, #8]
	Can_IDs[3] = -1;
 8003f7c:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <Config_0+0x84>)
 8003f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f82:	60da      	str	r2, [r3, #12]
	Can_DLCs[3] = 0;
 8003f84:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <Config_0+0x88>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	60da      	str	r2, [r3, #12]
	Can_IDs[4] = -1;
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <Config_0+0x84>)
 8003f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f90:	611a      	str	r2, [r3, #16]
	Can_DLCs[4] = 0;
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <Config_0+0x88>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	611a      	str	r2, [r3, #16]
	Can_IDs[5] = -1;
 8003f98:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <Config_0+0x84>)
 8003f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9e:	615a      	str	r2, [r3, #20]
	Can_DLCs[5] = 0;
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <Config_0+0x88>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	615a      	str	r2, [r3, #20]
	Can_IDs[6] = -1;
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <Config_0+0x84>)
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fac:	619a      	str	r2, [r3, #24]
	Can_DLCs[6] = 0;
 8003fae:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <Config_0+0x88>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	619a      	str	r2, [r3, #24]
	Can_IDs[7] = -1;
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <Config_0+0x84>)
 8003fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fba:	61da      	str	r2, [r3, #28]
	Can_DLCs[7] = 0;
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <Config_0+0x88>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	61da      	str	r2, [r3, #28]
}
 8003fc2:	bf00      	nop
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	20000084 	.word	0x20000084
 8003fd0:	20000290 	.word	0x20000290
 8003fd4:	200002d0 	.word	0x200002d0

08003fd8 <Config_Write_Flash>:
	//TODO: setup code for each node that will be in the car
}


void Config_Write_Flash(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
 8003fde:	af00      	add	r7, sp, #0
	uint32_t data[512] = {0};
 8003fe0:	463b      	mov	r3, r7
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2100      	movs	r1, #0
 8003fec:	f001 f808 	bl	8005000 <memset>

	//bytes: [enable falling edge to can], [enable rising edge to can], [digital in interrupt enable], [digital in enable]
	data[DIGITAL_IN_0_POS]=Digital_In_EN+(Digital_In_Interrupt_EN<<8)+(Digital_In_Interrupt_Can_Rising<<16)+(Digital_In_Interrupt_Can_Falling<<24); //TODO: set this to be the things it should be for digital_in
 8003ff0:	4b35      	ldr	r3, [pc, #212]	; (80040c8 <Config_Write_Flash+0xf0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	021a      	lsls	r2, r3, #8
 8003ff6:	4b35      	ldr	r3, [pc, #212]	; (80040cc <Config_Write_Flash+0xf4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	441a      	add	r2, r3
 8003ffc:	4b34      	ldr	r3, [pc, #208]	; (80040d0 <Config_Write_Flash+0xf8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	041b      	lsls	r3, r3, #16
 8004002:	441a      	add	r2, r3
 8004004:	4b33      	ldr	r3, [pc, #204]	; (80040d4 <Config_Write_Flash+0xfc>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	061b      	lsls	r3, r3, #24
 800400a:	441a      	add	r2, r3
 800400c:	463b      	mov	r3, r7
 800400e:	601a      	str	r2, [r3, #0]
	//bytes: [unused], [unused], [enable rising edge switch power], [enable falling edge switch power]
	data[DIGITAL_IN_1_POS]=(0)+(0)+(Digital_In_Interrupt_Power_Rising<<16)+(Digital_In_Interrupt_Power_Falling<<24);
 8004010:	4b31      	ldr	r3, [pc, #196]	; (80040d8 <Config_Write_Flash+0x100>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	041a      	lsls	r2, r3, #16
 8004016:	4b31      	ldr	r3, [pc, #196]	; (80040dc <Config_Write_Flash+0x104>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	061b      	lsls	r3, r3, #24
 800401c:	441a      	add	r2, r3
 800401e:	463b      	mov	r3, r7
 8004020:	605a      	str	r2, [r3, #4]
	//bytes: [unused], [can dlc], [can id high], [can id low] x8 //any can id outside the valid range of 0 to 2047 should be treated as disabled
	data[CAN_ID_0_POS]=(0)+(Can_DLCs[0]<<16)+(Can_IDs[0]&0xFFFF);
 8004022:	4b2f      	ldr	r3, [pc, #188]	; (80040e0 <Config_Write_Flash+0x108>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	041a      	lsls	r2, r3, #16
 8004028:	4b2e      	ldr	r3, [pc, #184]	; (80040e4 <Config_Write_Flash+0x10c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	441a      	add	r2, r3
 8004030:	463b      	mov	r3, r7
 8004032:	609a      	str	r2, [r3, #8]
	data[CAN_ID_1_POS]=(0)+(Can_DLCs[1]<<16)+(Can_IDs[1]&0xFFFF);
 8004034:	4b2a      	ldr	r3, [pc, #168]	; (80040e0 <Config_Write_Flash+0x108>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	041a      	lsls	r2, r3, #16
 800403a:	4b2a      	ldr	r3, [pc, #168]	; (80040e4 <Config_Write_Flash+0x10c>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	b29b      	uxth	r3, r3
 8004040:	441a      	add	r2, r3
 8004042:	463b      	mov	r3, r7
 8004044:	60da      	str	r2, [r3, #12]
	data[CAN_ID_2_POS]=(0)+(Can_DLCs[2]<<16)+(Can_IDs[2]&0xFFFF);
 8004046:	4b26      	ldr	r3, [pc, #152]	; (80040e0 <Config_Write_Flash+0x108>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	041a      	lsls	r2, r3, #16
 800404c:	4b25      	ldr	r3, [pc, #148]	; (80040e4 <Config_Write_Flash+0x10c>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	b29b      	uxth	r3, r3
 8004052:	441a      	add	r2, r3
 8004054:	463b      	mov	r3, r7
 8004056:	611a      	str	r2, [r3, #16]
	data[CAN_ID_3_POS]=(0)+(Can_DLCs[3]<<16)+(Can_IDs[3]&0xFFFF);
 8004058:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <Config_Write_Flash+0x108>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	041a      	lsls	r2, r3, #16
 800405e:	4b21      	ldr	r3, [pc, #132]	; (80040e4 <Config_Write_Flash+0x10c>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	b29b      	uxth	r3, r3
 8004064:	441a      	add	r2, r3
 8004066:	463b      	mov	r3, r7
 8004068:	615a      	str	r2, [r3, #20]
	data[CAN_ID_4_POS]=(0)+(Can_DLCs[4]<<16)+(Can_IDs[4]&0xFFFF);
 800406a:	4b1d      	ldr	r3, [pc, #116]	; (80040e0 <Config_Write_Flash+0x108>)
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	041a      	lsls	r2, r3, #16
 8004070:	4b1c      	ldr	r3, [pc, #112]	; (80040e4 <Config_Write_Flash+0x10c>)
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	b29b      	uxth	r3, r3
 8004076:	441a      	add	r2, r3
 8004078:	463b      	mov	r3, r7
 800407a:	619a      	str	r2, [r3, #24]
	data[CAN_ID_5_POS]=(0)+(Can_DLCs[5]<<16)+(Can_IDs[5]&0xFFFF);
 800407c:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <Config_Write_Flash+0x108>)
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	041a      	lsls	r2, r3, #16
 8004082:	4b18      	ldr	r3, [pc, #96]	; (80040e4 <Config_Write_Flash+0x10c>)
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	b29b      	uxth	r3, r3
 8004088:	441a      	add	r2, r3
 800408a:	463b      	mov	r3, r7
 800408c:	61da      	str	r2, [r3, #28]
	data[CAN_ID_6_POS]=(0)+(Can_DLCs[6]<<16)+(Can_IDs[6]&0xFFFF);
 800408e:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <Config_Write_Flash+0x108>)
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	041a      	lsls	r2, r3, #16
 8004094:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <Config_Write_Flash+0x10c>)
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	b29b      	uxth	r3, r3
 800409a:	441a      	add	r2, r3
 800409c:	463b      	mov	r3, r7
 800409e:	621a      	str	r2, [r3, #32]
	data[CAN_ID_7_POS]=(0)+(Can_DLCs[7]<<16)+(Can_IDs[7]&0xFFFF);
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <Config_Write_Flash+0x108>)
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	041a      	lsls	r2, r3, #16
 80040a6:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <Config_Write_Flash+0x10c>)
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	441a      	add	r2, r3
 80040ae:	463b      	mov	r3, r7
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24

	Flash_Write(FLASH_PAGE_63, 63, data, 10);
 80040b2:	463a      	mov	r2, r7
 80040b4:	230a      	movs	r3, #10
 80040b6:	213f      	movs	r1, #63	; 0x3f
 80040b8:	480b      	ldr	r0, [pc, #44]	; (80040e8 <Config_Write_Flash+0x110>)
 80040ba:	f000 f895 	bl	80041e8 <Flash_Write>
}
 80040be:	bf00      	nop
 80040c0:	f507 6700 	add.w	r7, r7, #2048	; 0x800
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20000278 	.word	0x20000278
 80040cc:	20000084 	.word	0x20000084
 80040d0:	2000006c 	.word	0x2000006c
 80040d4:	20000068 	.word	0x20000068
 80040d8:	2000038c 	.word	0x2000038c
 80040dc:	20000388 	.word	0x20000388
 80040e0:	200002d0 	.word	0x200002d0
 80040e4:	20000290 	.word	0x20000290
 80040e8:	0801f800 	.word	0x0801f800

080040ec <Config_Read_Flash>:

void Config_Read_Flash(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
	Digital_In_EN = (0b00011101&(DIGITAL_IN_0>>0)); //bit for PB4 is 0 to ensure it isn't used as PB4 seemed to have hardware problems
 80040f0:	4b31      	ldr	r3, [pc, #196]	; (80041b8 <Config_Read_Flash+0xcc>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 031d 	and.w	r3, r3, #29
 80040f8:	4a30      	ldr	r2, [pc, #192]	; (80041bc <Config_Read_Flash+0xd0>)
 80040fa:	6013      	str	r3, [r2, #0]

	Can_IDs[0] = ((CAN_ID_0>>0)&0xFFFF);
 80040fc:	4b30      	ldr	r3, [pc, #192]	; (80041c0 <Config_Read_Flash+0xd4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	b29b      	uxth	r3, r3
 8004102:	4a30      	ldr	r2, [pc, #192]	; (80041c4 <Config_Read_Flash+0xd8>)
 8004104:	6013      	str	r3, [r2, #0]
	Can_DLCs[0] = ((CAN_ID_0>>16)&0xFF);
 8004106:	4b2e      	ldr	r3, [pc, #184]	; (80041c0 <Config_Read_Flash+0xd4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	0c1b      	lsrs	r3, r3, #16
 800410c:	b2db      	uxtb	r3, r3
 800410e:	4a2e      	ldr	r2, [pc, #184]	; (80041c8 <Config_Read_Flash+0xdc>)
 8004110:	6013      	str	r3, [r2, #0]
	Can_IDs[1] = ((CAN_ID_1>>0)&0xFFFF);
 8004112:	4b2e      	ldr	r3, [pc, #184]	; (80041cc <Config_Read_Flash+0xe0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	4a2a      	ldr	r2, [pc, #168]	; (80041c4 <Config_Read_Flash+0xd8>)
 800411a:	6053      	str	r3, [r2, #4]
	Can_DLCs[1] = ((CAN_ID_1>>16)&0xFF);
 800411c:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <Config_Read_Flash+0xe0>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	b2db      	uxtb	r3, r3
 8004124:	4a28      	ldr	r2, [pc, #160]	; (80041c8 <Config_Read_Flash+0xdc>)
 8004126:	6053      	str	r3, [r2, #4]
	Can_IDs[2] = ((CAN_ID_2>>0)&0xFFFF);
 8004128:	4b29      	ldr	r3, [pc, #164]	; (80041d0 <Config_Read_Flash+0xe4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	b29b      	uxth	r3, r3
 800412e:	4a25      	ldr	r2, [pc, #148]	; (80041c4 <Config_Read_Flash+0xd8>)
 8004130:	6093      	str	r3, [r2, #8]
	Can_DLCs[2] = ((CAN_ID_2>>16)&0xFF);
 8004132:	4b27      	ldr	r3, [pc, #156]	; (80041d0 <Config_Read_Flash+0xe4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	0c1b      	lsrs	r3, r3, #16
 8004138:	b2db      	uxtb	r3, r3
 800413a:	4a23      	ldr	r2, [pc, #140]	; (80041c8 <Config_Read_Flash+0xdc>)
 800413c:	6093      	str	r3, [r2, #8]
	Can_IDs[3] = ((CAN_ID_3>>0)&0xFFFF);
 800413e:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <Config_Read_Flash+0xe8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	4a1f      	ldr	r2, [pc, #124]	; (80041c4 <Config_Read_Flash+0xd8>)
 8004146:	60d3      	str	r3, [r2, #12]
	Can_DLCs[3] = ((CAN_ID_3>>16)&0xFF);
 8004148:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <Config_Read_Flash+0xe8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	b2db      	uxtb	r3, r3
 8004150:	4a1d      	ldr	r2, [pc, #116]	; (80041c8 <Config_Read_Flash+0xdc>)
 8004152:	60d3      	str	r3, [r2, #12]
	Can_IDs[4] = ((CAN_ID_4>>0)&0xFFFF);
 8004154:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <Config_Read_Flash+0xec>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	b29b      	uxth	r3, r3
 800415a:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <Config_Read_Flash+0xd8>)
 800415c:	6113      	str	r3, [r2, #16]
	Can_DLCs[4] = ((CAN_ID_4>>16)&0xFF);
 800415e:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <Config_Read_Flash+0xec>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	0c1b      	lsrs	r3, r3, #16
 8004164:	b2db      	uxtb	r3, r3
 8004166:	4a18      	ldr	r2, [pc, #96]	; (80041c8 <Config_Read_Flash+0xdc>)
 8004168:	6113      	str	r3, [r2, #16]
	Can_IDs[5] = ((CAN_ID_5>>0)&0xFFFF);
 800416a:	4b1c      	ldr	r3, [pc, #112]	; (80041dc <Config_Read_Flash+0xf0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	4a14      	ldr	r2, [pc, #80]	; (80041c4 <Config_Read_Flash+0xd8>)
 8004172:	6153      	str	r3, [r2, #20]
	Can_DLCs[5] = ((CAN_ID_5>>16)&0xFF);
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <Config_Read_Flash+0xf0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	0c1b      	lsrs	r3, r3, #16
 800417a:	b2db      	uxtb	r3, r3
 800417c:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <Config_Read_Flash+0xdc>)
 800417e:	6153      	str	r3, [r2, #20]
	Can_IDs[6] = ((CAN_ID_6>>0)&0xFFFF);
 8004180:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <Config_Read_Flash+0xf4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	b29b      	uxth	r3, r3
 8004186:	4a0f      	ldr	r2, [pc, #60]	; (80041c4 <Config_Read_Flash+0xd8>)
 8004188:	6193      	str	r3, [r2, #24]
	Can_DLCs[6] = ((CAN_ID_6>>16)&0xFF);
 800418a:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <Config_Read_Flash+0xf4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	b2db      	uxtb	r3, r3
 8004192:	4a0d      	ldr	r2, [pc, #52]	; (80041c8 <Config_Read_Flash+0xdc>)
 8004194:	6193      	str	r3, [r2, #24]
	Can_IDs[7] = ((CAN_ID_7>>0)&0xFFFF);
 8004196:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <Config_Read_Flash+0xf8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	4a09      	ldr	r2, [pc, #36]	; (80041c4 <Config_Read_Flash+0xd8>)
 800419e:	61d3      	str	r3, [r2, #28]
	Can_DLCs[7] = ((CAN_ID_7>>16)&0xFF);
 80041a0:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <Config_Read_Flash+0xf8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	0c1b      	lsrs	r3, r3, #16
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	4a07      	ldr	r2, [pc, #28]	; (80041c8 <Config_Read_Flash+0xdc>)
 80041aa:	61d3      	str	r3, [r2, #28]
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	0801f800 	.word	0x0801f800
 80041bc:	20000084 	.word	0x20000084
 80041c0:	0801f808 	.word	0x0801f808
 80041c4:	20000290 	.word	0x20000290
 80041c8:	200002d0 	.word	0x200002d0
 80041cc:	0801f80c 	.word	0x0801f80c
 80041d0:	0801f810 	.word	0x0801f810
 80041d4:	0801f814 	.word	0x0801f814
 80041d8:	0801f818 	.word	0x0801f818
 80041dc:	0801f81c 	.word	0x0801f81c
 80041e0:	0801f820 	.word	0x0801f820
 80041e4:	0801f824 	.word	0x0801f824

080041e8 <Flash_Write>:


void Flash_Write(uint32_t Flash_Address, uint32_t Page, uint32_t Flash_Data[512], int Data_Words)
{
 80041e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80041ec:	b08c      	sub	sp, #48	; 0x30
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	607a      	str	r2, [r7, #4]
 80041f6:	603b      	str	r3, [r7, #0]
	FLASH_EraseInitTypeDef pEraseInit;
	uint32_t pError = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]

	pEraseInit.Page = Page;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	61fb      	str	r3, [r7, #28]
	pEraseInit.NbPages = 1;
 8004200:	2301      	movs	r3, #1
 8004202:	623b      	str	r3, [r7, #32]
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004208:	b672      	cpsid	i

	__disable_irq();
	if(HAL_FLASH_Unlock() != HAL_OK)
 800420a:	f7fe fb09 	bl	8002820 <HAL_FLASH_Unlock>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <Flash_Write+0x32>
  __ASM volatile ("cpsie i" : : : "memory");
 8004214:	b662      	cpsie	i
	{
		__enable_irq();
		Error_Handler();
 8004216:	f000 fcd7 	bl	8004bc8 <Error_Handler>
	}

	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0) { }
 800421a:	bf00      	nop
 800421c:	4b3c      	ldr	r3, [pc, #240]	; (8004310 <Flash_Write+0x128>)
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004228:	d0f8      	beq.n	800421c <Flash_Write+0x34>

	if(HAL_FLASHEx_Erase(&pEraseInit, &pError) != HAL_OK)
 800422a:	f107 0210 	add.w	r2, r7, #16
 800422e:	f107 0314 	add.w	r3, r7, #20
 8004232:	4611      	mov	r1, r2
 8004234:	4618      	mov	r0, r3
 8004236:	f7fe fbdb 	bl	80029f0 <HAL_FLASHEx_Erase>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d009      	beq.n	8004254 <Flash_Write+0x6c>
 8004240:	b662      	cpsie	i
	{
		__enable_irq();
		while(1)
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8004242:	2108      	movs	r1, #8
 8004244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004248:	f7fe fe90 	bl	8002f6c <HAL_GPIO_TogglePin>
			HAL_Delay(33);
 800424c:	2021      	movs	r0, #33	; 0x21
 800424e:	f7fc f853 	bl	80002f8 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8004252:	e7f6      	b.n	8004242 <Flash_Write+0x5a>
		}
	}

	uint64_t data;
	for(int i=0; i<((Data_Words+1)/2); i++) //here we want integer division that rounds up instead of down
 8004254:	2300      	movs	r3, #0
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
 8004258:	e042      	b.n	80042e0 <Flash_Write+0xf8>
	{
		data=(uint64_t)Flash_Data[i*2];
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	461a      	mov	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4413      	add	r3, r2
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f04f 0400 	mov.w	r4, #0
 800426a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		if((i*2)+1<Data_Words)
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	3301      	adds	r3, #1
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	dd17      	ble.n	80042aa <Flash_Write+0xc2>
		{
			data+=((uint64_t)Flash_Data[i*2+1]<<32);
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	3304      	adds	r3, #4
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	4413      	add	r3, r2
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4619      	mov	r1, r3
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0b00 	mov.w	fp, #0
 8004290:	f04f 0c00 	mov.w	ip, #0
 8004294:	468c      	mov	ip, r1
 8004296:	f04f 0b00 	mov.w	fp, #0
 800429a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800429e:	eb1b 0301 	adds.w	r3, fp, r1
 80042a2:	eb4c 0402 	adc.w	r4, ip, r2
 80042a6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		}

			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Flash_Address+i*0x08, data) != HAL_OK)
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	461a      	mov	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	18d1      	adds	r1, r2, r3
 80042b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042b8:	2000      	movs	r0, #0
 80042ba:	f7fe fa5b 	bl	8002774 <HAL_FLASH_Program>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <Flash_Write+0xe2>
 80042c4:	b662      	cpsie	i
			{
				__enable_irq();
				Error_Handler();
 80042c6:	f000 fc7f 	bl	8004bc8 <Error_Handler>
			}
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0) { }
 80042ca:	bf00      	nop
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <Flash_Write+0x128>)
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d8:	d0f8      	beq.n	80042cc <Flash_Write+0xe4>
	for(int i=0; i<((Data_Words+1)/2); i++) //here we want integer division that rounds up instead of down
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	3301      	adds	r3, #1
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	3301      	adds	r3, #1
 80042e4:	0fda      	lsrs	r2, r3, #31
 80042e6:	4413      	add	r3, r2
 80042e8:	105b      	asrs	r3, r3, #1
 80042ea:	461a      	mov	r2, r3
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	4293      	cmp	r3, r2
 80042f0:	dbb3      	blt.n	800425a <Flash_Write+0x72>
	}

	if(HAL_FLASH_Lock() != HAL_OK)
 80042f2:	f7fe fab7 	bl	8002864 <HAL_FLASH_Lock>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <Flash_Write+0x11a>
 80042fc:	b662      	cpsie	i
	{
		__enable_irq();
		Error_Handler();
 80042fe:	f000 fc63 	bl	8004bc8 <Error_Handler>
 8004302:	b662      	cpsie	i
	}
	__enable_irq();
}
 8004304:	bf00      	nop
 8004306:	3730      	adds	r7, #48	; 0x30
 8004308:	46bd      	mov	sp, r7
 800430a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800430e:	bf00      	nop
 8004310:	40022000 	.word	0x40022000

08004314 <Flash_Read>:

uint32_t Flash_Read(uint32_t Flash_Address)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
	return *(uint32_t*)Flash_Address;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <main>:
uint32_t ADC1ConvertedValues[3];
uint32_t ADC2ConvertedValues[3];


int main(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
	HAL_Init();
 8004332:	f7fb ff71 	bl	8000218 <HAL_Init>

	SystemClock_Config();
 8004336:	f000 f8b6 	bl	80044a6 <SystemClock_Config>

	Config_Setup();
 800433a:	f7ff fdf3 	bl	8003f24 <Config_Setup>


	MX_GPIO_Init();
 800433e:	f000 fb1d 	bl	800497c <MX_GPIO_Init>
	MX_DMA_Init();
 8004342:	f000 fae9 	bl	8004918 <MX_DMA_Init>
	MX_ADC1_Init();
 8004346:	f000 f915 	bl	8004574 <MX_ADC1_Init>
	MX_ADC2_Init();
 800434a:	f000 f9b9 	bl	80046c0 <MX_ADC2_Init>
	MX_FDCAN_Init();
 800434e:	f000 fa37 	bl	80047c0 <MX_FDCAN_Init>
	while(1)
	{
		//example commands stored here
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)); //reading pins may be wanted with interrupts at some time, and it may be wanted to debounce some digital inputs

		for(int i=0; i<8; i++)
 8004352:	2300      	movs	r3, #0
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	e006      	b.n	8004366 <main+0x3a>
			{
			CanSend(i);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4618      	mov	r0, r3
 800435c:	f000 f80a 	bl	8004374 <CanSend>
		for(int i=0; i<8; i++)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3301      	adds	r3, #1
 8004364:	607b      	str	r3, [r7, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b07      	cmp	r3, #7
 800436a:	ddf5      	ble.n	8004358 <main+0x2c>
			}
		HAL_Delay(100);
 800436c:	2064      	movs	r0, #100	; 0x64
 800436e:	f7fb ffc3 	bl	80002f8 <HAL_Delay>
		for(int i=0; i<8; i++)
 8004372:	e7ee      	b.n	8004352 <main+0x26>

08004374 <CanSend>:
	}
}


uint32_t CanSend(uint32_t message)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08e      	sub	sp, #56	; 0x38
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	//TODO: maybe have warning states based on these if statements
	if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) < 1)
 800437c:	482b      	ldr	r0, [pc, #172]	; (800442c <CanSend+0xb8>)
 800437e:	f7fd fe8d 	bl	800209c <HAL_FDCAN_GetTxFifoFreeLevel>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <CanSend+0x1a>
	{
		return -1;
 8004388:	f04f 33ff 	mov.w	r3, #4294967295
 800438c:	e049      	b.n	8004422 <CanSend+0xae>
	}

	if(Can_IDs[message]>2047)
 800438e:	4a28      	ldr	r2, [pc, #160]	; (8004430 <CanSend+0xbc>)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439a:	d302      	bcc.n	80043a2 <CanSend+0x2e>
	{
		return -1;
 800439c:	f04f 33ff 	mov.w	r3, #4294967295
 80043a0:	e03f      	b.n	8004422 <CanSend+0xae>
		//TODO: for sure we want warning for trying to send disabled message
	}
	else if(Can_DLCs[message]==0)
 80043a2:	4a24      	ldr	r2, [pc, #144]	; (8004434 <CanSend+0xc0>)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <CanSend+0x40>
	{
		return -1;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295
 80043b2:	e036      	b.n	8004422 <CanSend+0xae>
		//TODO: set warning for trying to send message with 0 DLC
	}
	else if(Can_DLCs[message]>8)
 80043b4:	4a1f      	ldr	r2, [pc, #124]	; (8004434 <CanSend+0xc0>)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d902      	bls.n	80043c6 <CanSend+0x52>
	{
		return -1;
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295
 80043c4:	e02d      	b.n	8004422 <CanSend+0xae>
		//TODO: set warning for trying to send too long message
	}

	FDCAN_TxHeaderTypeDef TxHeader;

	TxHeader.Identifier = Can_IDs[message];
 80043c6:	4a1a      	ldr	r2, [pc, #104]	; (8004430 <CanSend+0xbc>)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ce:	617b      	str	r3, [r7, #20]
	TxHeader.DataLength = Can_DLCs[message];
 80043d0:	4a18      	ldr	r2, [pc, #96]	; (8004434 <CanSend+0xc0>)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d8:	623b      	str	r3, [r7, #32]
	uint8_t CANTxData[8] = { 0x88, 0xFF, 0x00, 0x01, 0x12, 0x11, 0x22, 0x23 }; //TODO: tx data based on values from flash somehow
 80043da:	4a17      	ldr	r2, [pc, #92]	; (8004438 <CanSend+0xc4>)
 80043dc:	f107 030c 	add.w	r3, r7, #12
 80043e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043e4:	e883 0003 	stmia.w	r3, {r0, r1}

	TxHeader.IdType = FDCAN_STANDARD_ID;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61bb      	str	r3, [r7, #24]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61fb      	str	r3, [r7, #28]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80043f0:	2300      	movs	r3, #0
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80043f4:	2300      	movs	r3, #0
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80043f8:	2300      	movs	r3, #0
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80043fc:	2300      	movs	r3, #0
 80043fe:	633b      	str	r3, [r7, #48]	; 0x30
	TxHeader.MessageMarker = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	637b      	str	r3, [r7, #52]	; 0x34

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 8004404:	f107 020c 	add.w	r2, r7, #12
 8004408:	f107 0314 	add.w	r3, r7, #20
 800440c:	4619      	mov	r1, r3
 800440e:	4807      	ldr	r0, [pc, #28]	; (800442c <CanSend+0xb8>)
 8004410:	f7fd fd26 	bl	8001e60 <HAL_FDCAN_AddMessageToTxFifoQ>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <CanSend+0xac>
	{
		return -1;
 800441a:	f04f 33ff 	mov.w	r3, #4294967295
 800441e:	e000      	b.n	8004422 <CanSend+0xae>
		//Error_Handler();
	}

	return 0;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3738      	adds	r7, #56	; 0x38
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000114 	.word	0x20000114
 8004430:	20000290 	.word	0x20000290
 8004434:	200002d0 	.word	0x200002d0
 8004438:	08005028 	.word	0x08005028

0800443c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
// moved everything to one fifo.  consider using both for prioritisation
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08e      	sub	sp, #56	; 0x38
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t CANRxData[8];

	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d026      	beq.n	800449e <HAL_FDCAN_RxFifo0Callback+0x62>
	{
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, CANRxData) != HAL_OK)
 8004450:	f107 0308 	add.w	r3, r7, #8
 8004454:	f107 0210 	add.w	r2, r7, #16
 8004458:	2140      	movs	r1, #64	; 0x40
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fd fd44 	bl	8001ee8 <HAL_FDCAN_GetRxMessage>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_FDCAN_RxFifo0Callback+0x2e>
		{
			Error_Handler();
 8004466:	f000 fbaf 	bl	8004bc8 <Error_Handler>
			//TODO: move to error can message
		}

		if (RxHeader.Identifier == CANID_SYNC)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b80      	cmp	r3, #128	; 0x80
 800446e:	d016      	beq.n	800449e <HAL_FDCAN_RxFifo0Callback+0x62>
		{
			//TODO: put logic for sync message here
		}
		else if (RxHeader.Identifier == CANID_CONFIG)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004476:	d10e      	bne.n	8004496 <HAL_FDCAN_RxFifo0Callback+0x5a>
		{
			//TODO: put logic here for toggling output pins and pwm frequencies
			//TODO: logic for writing config to flash
			if(CANRxData[0] == ID)
 8004478:	7a3b      	ldrb	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10e      	bne.n	800449c <HAL_FDCAN_RxFifo0Callback+0x60>
			{
				switch(CANRxData[1])
 800447e:	7a7b      	ldrb	r3, [r7, #9]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d000      	beq.n	8004486 <HAL_FDCAN_RxFifo0Callback+0x4a>
				case SWITCH_POWER:
					Switch_Power(CANRxData[2], CANRxData[3]);
					break;
				default:
					//TODO: warning to canbus for undefined configuration command
					break;
 8004484:	e00b      	b.n	800449e <HAL_FDCAN_RxFifo0Callback+0x62>
					Switch_Power(CANRxData[2], CANRxData[3]);
 8004486:	7abb      	ldrb	r3, [r7, #10]
 8004488:	461a      	mov	r2, r3
 800448a:	7afb      	ldrb	r3, [r7, #11]
 800448c:	4619      	mov	r1, r3
 800448e:	4610      	mov	r0, r2
 8004490:	f7ff fd12 	bl	8003eb8 <Switch_Power>
					break;
 8004494:	e003      	b.n	800449e <HAL_FDCAN_RxFifo0Callback+0x62>
				}
			}
		}
		else
		{
			Error_Handler();
 8004496:	f000 fb97 	bl	8004bc8 <Error_Handler>
			//TODO: move to error can message
		}
	}
}
 800449a:	e000      	b.n	800449e <HAL_FDCAN_RxFifo0Callback+0x62>
			}
 800449c:	bf00      	nop
}
 800449e:	bf00      	nop
 80044a0:	3738      	adds	r7, #56	; 0x38
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <SystemClock_Config>:



void SystemClock_Config(void)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b0a4      	sub	sp, #144	; 0x90
 80044aa:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044b0:	2238      	movs	r2, #56	; 0x38
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fda3 	bl	8005000 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	605a      	str	r2, [r3, #4]
 80044c4:	609a      	str	r2, [r3, #8]
 80044c6:	60da      	str	r2, [r3, #12]
 80044c8:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044ca:	463b      	mov	r3, r7
 80044cc:	2244      	movs	r2, #68	; 0x44
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fd95 	bl	8005000 <memset>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80044d6:	2000      	movs	r0, #0
 80044d8:	f7fe fd62 	bl	8002fa0 <HAL_PWREx_ControlVoltageScaling>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044dc:	2301      	movs	r3, #1
 80044de:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80044e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80044e4:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044e6:	2302      	movs	r3, #2
 80044e8:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044ea:	2303      	movs	r3, #3
 80044ec:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80044ee:	2304      	movs	r3, #4
 80044f0:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80044f2:	2355      	movs	r3, #85	; 0x55
 80044f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044f8:	2302      	movs	r3, #2
 80044fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80044fe:	2302      	movs	r3, #2
 8004500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004504:	2302      	movs	r3, #2
 8004506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800450a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe fdea 	bl	80030e8 <HAL_RCC_OscConfig>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <SystemClock_Config+0x78>
	{
		Error_Handler();
 800451a:	f000 fb55 	bl	8004bc8 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800451e:	230f      	movs	r3, #15
 8004520:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004522:	2303      	movs	r3, #3
 8004524:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004526:	2300      	movs	r3, #0
 8004528:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800452a:	2300      	movs	r3, #0
 800452c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800452e:	2300      	movs	r3, #0
 8004530:	657b      	str	r3, [r7, #84]	; 0x54

	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8004532:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004536:	2108      	movs	r1, #8
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff f8ed 	bl	8003718 <HAL_RCC_ClockConfig>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8004544:	f000 fb40 	bl	8004bc8 <Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
 8004548:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800454c:	603b      	str	r3, [r7, #0]
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800454e:	2300      	movs	r3, #0
 8004550:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004552:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004556:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004558:	463b      	mov	r3, r7
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fabc 	bl	8003ad8 <HAL_RCCEx_PeriphCLKConfig>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8004566:	f000 fb2f 	bl	8004bc8 <Error_Handler>
	}
}
 800456a:	bf00      	nop
 800456c:	3790      	adds	r7, #144	; 0x90
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08c      	sub	sp, #48	; 0x30
 8004578:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode = {0};
 800457a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8004586:	1d3b      	adds	r3, r7, #4
 8004588:	2220      	movs	r2, #32
 800458a:	2100      	movs	r1, #0
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fd37 	bl	8005000 <memset>

	hadc1.Instance = ADC1;
 8004592:	4b47      	ldr	r3, [pc, #284]	; (80046b0 <MX_ADC1_Init+0x13c>)
 8004594:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004598:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800459a:	4b45      	ldr	r3, [pc, #276]	; (80046b0 <MX_ADC1_Init+0x13c>)
 800459c:	2200      	movs	r2, #0
 800459e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80045a0:	4b43      	ldr	r3, [pc, #268]	; (80046b0 <MX_ADC1_Init+0x13c>)
 80045a2:	2208      	movs	r2, #8
 80045a4:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80045a6:	4b42      	ldr	r3, [pc, #264]	; (80046b0 <MX_ADC1_Init+0x13c>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 80045ac:	4b40      	ldr	r3, [pc, #256]	; (80046b0 <MX_ADC1_Init+0x13c>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80045b2:	4b3f      	ldr	r3, [pc, #252]	; (80046b0 <MX_ADC1_Init+0x13c>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80045b8:	4b3d      	ldr	r3, [pc, #244]	; (80046b0 <MX_ADC1_Init+0x13c>)
 80045ba:	2204      	movs	r2, #4
 80045bc:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80045be:	4b3c      	ldr	r3, [pc, #240]	; (80046b0 <MX_ADC1_Init+0x13c>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80045c4:	4b3a      	ldr	r3, [pc, #232]	; (80046b0 <MX_ADC1_Init+0x13c>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 3;
 80045ca:	4b39      	ldr	r3, [pc, #228]	; (80046b0 <MX_ADC1_Init+0x13c>)
 80045cc:	2203      	movs	r2, #3
 80045ce:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80045d0:	4b37      	ldr	r3, [pc, #220]	; (80046b0 <MX_ADC1_Init+0x13c>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80045d8:	4b35      	ldr	r3, [pc, #212]	; (80046b0 <MX_ADC1_Init+0x13c>)
 80045da:	2200      	movs	r2, #0
 80045dc:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80045de:	4b34      	ldr	r3, [pc, #208]	; (80046b0 <MX_ADC1_Init+0x13c>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80045e4:	4b32      	ldr	r3, [pc, #200]	; (80046b0 <MX_ADC1_Init+0x13c>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80045ec:	4b30      	ldr	r3, [pc, #192]	; (80046b0 <MX_ADC1_Init+0x13c>)
 80045ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045f2:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 80045f4:	4b2e      	ldr	r3, [pc, #184]	; (80046b0 <MX_ADC1_Init+0x13c>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80045fc:	482c      	ldr	r0, [pc, #176]	; (80046b0 <MX_ADC1_Init+0x13c>)
 80045fe:	f7fc f885 	bl	800070c <HAL_ADC_Init>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <MX_ADC1_Init+0x98>
	{
		Error_Handler();
 8004608:	f000 fade 	bl	8004bc8 <Error_Handler>
	}

	multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800460c:	2306      	movs	r3, #6
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8004610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8004616:	2300      	movs	r3, #0
 8004618:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800461a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800461e:	4619      	mov	r1, r3
 8004620:	4823      	ldr	r0, [pc, #140]	; (80046b0 <MX_ADC1_Init+0x13c>)
 8004622:	f7fc fe6d 	bl	8001300 <HAL_ADCEx_MultiModeConfigChannel>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <MX_ADC1_Init+0xbc>
	{
		Error_Handler();
 800462c:	f000 facc 	bl	8004bc8 <Error_Handler>
	}


	sConfig.Channel = ADC_CHANNEL_1;
 8004630:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <MX_ADC1_Init+0x140>)
 8004632:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004634:	2306      	movs	r3, #6
 8004636:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8004638:	2303      	movs	r3, #3
 800463a:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800463c:	237f      	movs	r3, #127	; 0x7f
 800463e:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004640:	2304      	movs	r3, #4
 8004642:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004648:	1d3b      	adds	r3, r7, #4
 800464a:	4619      	mov	r1, r3
 800464c:	4818      	ldr	r0, [pc, #96]	; (80046b0 <MX_ADC1_Init+0x13c>)
 800464e:	f7fc f9e5 	bl	8000a1c <HAL_ADC_ConfigChannel>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <MX_ADC1_Init+0xe8>
	{
		Error_Handler();
 8004658:	f000 fab6 	bl	8004bc8 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_2;
 800465c:	4b16      	ldr	r3, [pc, #88]	; (80046b8 <MX_ADC1_Init+0x144>)
 800465e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8004660:	230c      	movs	r3, #12
 8004662:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004664:	1d3b      	adds	r3, r7, #4
 8004666:	4619      	mov	r1, r3
 8004668:	4811      	ldr	r0, [pc, #68]	; (80046b0 <MX_ADC1_Init+0x13c>)
 800466a:	f7fc f9d7 	bl	8000a1c <HAL_ADC_ConfigChannel>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <MX_ADC1_Init+0x104>
	{
		Error_Handler();
 8004674:	f000 faa8 	bl	8004bc8 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_3;
 8004678:	4b10      	ldr	r3, [pc, #64]	; (80046bc <MX_ADC1_Init+0x148>)
 800467a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800467c:	2312      	movs	r3, #18
 800467e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004680:	1d3b      	adds	r3, r7, #4
 8004682:	4619      	mov	r1, r3
 8004684:	480a      	ldr	r0, [pc, #40]	; (80046b0 <MX_ADC1_Init+0x13c>)
 8004686:	f7fc f9c9 	bl	8000a1c <HAL_ADC_ConfigChannel>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <MX_ADC1_Init+0x120>
	{
		Error_Handler();
 8004690:	f000 fa9a 	bl	8004bc8 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8004694:	217f      	movs	r1, #127	; 0x7f
 8004696:	4806      	ldr	r0, [pc, #24]	; (80046b0 <MX_ADC1_Init+0x13c>)
 8004698:	f7fc fdd0 	bl	800123c <HAL_ADCEx_Calibration_Start>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <MX_ADC1_Init+0x132>
	{
		Error_Handler();
 80046a2:	f000 fa91 	bl	8004bc8 <Error_Handler>
	}
}
 80046a6:	bf00      	nop
 80046a8:	3730      	adds	r7, #48	; 0x30
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	200001ac 	.word	0x200001ac
 80046b4:	04300002 	.word	0x04300002
 80046b8:	08600004 	.word	0x08600004
 80046bc:	0c900008 	.word	0x0c900008

080046c0 <MX_ADC2_Init>:

static void MX_ADC2_Init(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80046c6:	463b      	mov	r3, r7
 80046c8:	2220      	movs	r2, #32
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fc97 	bl	8005000 <memset>

	hadc2.Instance = ADC2;
 80046d2:	4b38      	ldr	r3, [pc, #224]	; (80047b4 <MX_ADC2_Init+0xf4>)
 80046d4:	4a38      	ldr	r2, [pc, #224]	; (80047b8 <MX_ADC2_Init+0xf8>)
 80046d6:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80046d8:	4b36      	ldr	r3, [pc, #216]	; (80047b4 <MX_ADC2_Init+0xf4>)
 80046da:	2200      	movs	r2, #0
 80046dc:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 80046de:	4b35      	ldr	r3, [pc, #212]	; (80047b4 <MX_ADC2_Init+0xf4>)
 80046e0:	2208      	movs	r2, #8
 80046e2:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80046e4:	4b33      	ldr	r3, [pc, #204]	; (80047b4 <MX_ADC2_Init+0xf4>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 80046ea:	4b32      	ldr	r3, [pc, #200]	; (80047b4 <MX_ADC2_Init+0xf4>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80046f0:	4b30      	ldr	r3, [pc, #192]	; (80047b4 <MX_ADC2_Init+0xf4>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80046f6:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <MX_ADC2_Init+0xf4>)
 80046f8:	2204      	movs	r2, #4
 80046fa:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 80046fc:	4b2d      	ldr	r3, [pc, #180]	; (80047b4 <MX_ADC2_Init+0xf4>)
 80046fe:	2200      	movs	r2, #0
 8004700:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8004702:	4b2c      	ldr	r3, [pc, #176]	; (80047b4 <MX_ADC2_Init+0xf4>)
 8004704:	2200      	movs	r2, #0
 8004706:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 3;
 8004708:	4b2a      	ldr	r3, [pc, #168]	; (80047b4 <MX_ADC2_Init+0xf4>)
 800470a:	2203      	movs	r2, #3
 800470c:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800470e:	4b29      	ldr	r3, [pc, #164]	; (80047b4 <MX_ADC2_Init+0xf4>)
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8004716:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <MX_ADC2_Init+0xf4>)
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800471e:	4b25      	ldr	r3, [pc, #148]	; (80047b4 <MX_ADC2_Init+0xf4>)
 8004720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004724:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 8004726:	4b23      	ldr	r3, [pc, #140]	; (80047b4 <MX_ADC2_Init+0xf4>)
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800472e:	4821      	ldr	r0, [pc, #132]	; (80047b4 <MX_ADC2_Init+0xf4>)
 8004730:	f7fb ffec 	bl	800070c <HAL_ADC_Init>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <MX_ADC2_Init+0x7e>
	{
		Error_Handler();
 800473a:	f000 fa45 	bl	8004bc8 <Error_Handler>
	}


	sConfig.Channel = ADC_CHANNEL_10;
 800473e:	4b1f      	ldr	r3, [pc, #124]	; (80047bc <MX_ADC2_Init+0xfc>)
 8004740:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004742:	2306      	movs	r3, #6
 8004744:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8004746:	2303      	movs	r3, #3
 8004748:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800474a:	237f      	movs	r3, #127	; 0x7f
 800474c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800474e:	2304      	movs	r3, #4
 8004750:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004756:	463b      	mov	r3, r7
 8004758:	4619      	mov	r1, r3
 800475a:	4816      	ldr	r0, [pc, #88]	; (80047b4 <MX_ADC2_Init+0xf4>)
 800475c:	f7fc f95e 	bl	8000a1c <HAL_ADC_ConfigChannel>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <MX_ADC2_Init+0xaa>
	{
		Error_Handler();
 8004766:	f000 fa2f 	bl	8004bc8 <Error_Handler>
	}

	sConfig.Rank = ADC_REGULAR_RANK_2;
 800476a:	230c      	movs	r3, #12
 800476c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800476e:	463b      	mov	r3, r7
 8004770:	4619      	mov	r1, r3
 8004772:	4810      	ldr	r0, [pc, #64]	; (80047b4 <MX_ADC2_Init+0xf4>)
 8004774:	f7fc f952 	bl	8000a1c <HAL_ADC_ConfigChannel>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <MX_ADC2_Init+0xc2>
	{
		Error_Handler();
 800477e:	f000 fa23 	bl	8004bc8 <Error_Handler>
	}

	sConfig.Rank = ADC_REGULAR_RANK_3;
 8004782:	2312      	movs	r3, #18
 8004784:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004786:	463b      	mov	r3, r7
 8004788:	4619      	mov	r1, r3
 800478a:	480a      	ldr	r0, [pc, #40]	; (80047b4 <MX_ADC2_Init+0xf4>)
 800478c:	f7fc f946 	bl	8000a1c <HAL_ADC_ConfigChannel>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <MX_ADC2_Init+0xda>
	{
		Error_Handler();
 8004796:	f000 fa17 	bl	8004bc8 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 800479a:	217f      	movs	r1, #127	; 0x7f
 800479c:	4805      	ldr	r0, [pc, #20]	; (80047b4 <MX_ADC2_Init+0xf4>)
 800479e:	f7fc fd4d 	bl	800123c <HAL_ADCEx_Calibration_Start>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <MX_ADC2_Init+0xec>
	{
		Error_Handler();
 80047a8:	f000 fa0e 	bl	8004bc8 <Error_Handler>
	}
}
 80047ac:	bf00      	nop
 80047ae:	3720      	adds	r7, #32
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20000088 	.word	0x20000088
 80047b8:	50000100 	.word	0x50000100
 80047bc:	2a000400 	.word	0x2a000400

080047c0 <MX_FDCAN_Init>:

static void MX_FDCAN_Init(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef	sFilterConfig;

	hfdcan.Instance = FDCAN1;
 80047c6:	4b52      	ldr	r3, [pc, #328]	; (8004910 <MX_FDCAN_Init+0x150>)
 80047c8:	4a52      	ldr	r2, [pc, #328]	; (8004914 <MX_FDCAN_Init+0x154>)
 80047ca:	601a      	str	r2, [r3, #0]
	hfdcan.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80047cc:	4b50      	ldr	r3, [pc, #320]	; (8004910 <MX_FDCAN_Init+0x150>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	605a      	str	r2, [r3, #4]
	hfdcan.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80047d2:	4b4f      	ldr	r3, [pc, #316]	; (8004910 <MX_FDCAN_Init+0x150>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	609a      	str	r2, [r3, #8]
	hfdcan.Init.Mode = FDCAN_MODE_NORMAL;
 80047d8:	4b4d      	ldr	r3, [pc, #308]	; (8004910 <MX_FDCAN_Init+0x150>)
 80047da:	2200      	movs	r2, #0
 80047dc:	60da      	str	r2, [r3, #12]
	hfdcan.Init.AutoRetransmission = DISABLE;
 80047de:	4b4c      	ldr	r3, [pc, #304]	; (8004910 <MX_FDCAN_Init+0x150>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	741a      	strb	r2, [r3, #16]
	hfdcan.Init.TransmitPause = DISABLE;
 80047e4:	4b4a      	ldr	r3, [pc, #296]	; (8004910 <MX_FDCAN_Init+0x150>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	745a      	strb	r2, [r3, #17]
	hfdcan.Init.ProtocolException = DISABLE;
 80047ea:	4b49      	ldr	r3, [pc, #292]	; (8004910 <MX_FDCAN_Init+0x150>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	749a      	strb	r2, [r3, #18]
	hfdcan.Init.NominalPrescaler = 1;
 80047f0:	4b47      	ldr	r3, [pc, #284]	; (8004910 <MX_FDCAN_Init+0x150>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	615a      	str	r2, [r3, #20]
	hfdcan.Init.NominalSyncJumpWidth = 1;
 80047f6:	4b46      	ldr	r3, [pc, #280]	; (8004910 <MX_FDCAN_Init+0x150>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	619a      	str	r2, [r3, #24]
	hfdcan.Init.NominalTimeSeg1 = 13;
 80047fc:	4b44      	ldr	r3, [pc, #272]	; (8004910 <MX_FDCAN_Init+0x150>)
 80047fe:	220d      	movs	r2, #13
 8004800:	61da      	str	r2, [r3, #28]
	hfdcan.Init.NominalTimeSeg2 = 2;
 8004802:	4b43      	ldr	r3, [pc, #268]	; (8004910 <MX_FDCAN_Init+0x150>)
 8004804:	2202      	movs	r2, #2
 8004806:	621a      	str	r2, [r3, #32]
	hfdcan.Init.DataPrescaler = 1;
 8004808:	4b41      	ldr	r3, [pc, #260]	; (8004910 <MX_FDCAN_Init+0x150>)
 800480a:	2201      	movs	r2, #1
 800480c:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan.Init.DataSyncJumpWidth = 1;
 800480e:	4b40      	ldr	r3, [pc, #256]	; (8004910 <MX_FDCAN_Init+0x150>)
 8004810:	2201      	movs	r2, #1
 8004812:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan.Init.DataTimeSeg1 = 1;
 8004814:	4b3e      	ldr	r3, [pc, #248]	; (8004910 <MX_FDCAN_Init+0x150>)
 8004816:	2201      	movs	r2, #1
 8004818:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan.Init.DataTimeSeg2 = 1;
 800481a:	4b3d      	ldr	r3, [pc, #244]	; (8004910 <MX_FDCAN_Init+0x150>)
 800481c:	2201      	movs	r2, #1
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan.Init.StdFiltersNbr = 2;
 8004820:	4b3b      	ldr	r3, [pc, #236]	; (8004910 <MX_FDCAN_Init+0x150>)
 8004822:	2202      	movs	r2, #2
 8004824:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan.Init.ExtFiltersNbr = 0;
 8004826:	4b3a      	ldr	r3, [pc, #232]	; (8004910 <MX_FDCAN_Init+0x150>)
 8004828:	2200      	movs	r2, #0
 800482a:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800482c:	4b38      	ldr	r3, [pc, #224]	; (8004910 <MX_FDCAN_Init+0x150>)
 800482e:	2200      	movs	r2, #0
 8004830:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_FDCAN_Init(&hfdcan) != HAL_OK)
 8004832:	4837      	ldr	r0, [pc, #220]	; (8004910 <MX_FDCAN_Init+0x150>)
 8004834:	f7fd f8ce 	bl	80019d4 <HAL_FDCAN_Init>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <MX_FDCAN_Init+0x82>
	{
		Error_Handler();
 800483e:	f000 f9c3 	bl	8004bc8 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8004842:	2201      	movs	r2, #1
 8004844:	2140      	movs	r1, #64	; 0x40
 8004846:	4832      	ldr	r0, [pc, #200]	; (8004910 <MX_FDCAN_Init+0x150>)
 8004848:	f7fd faa9 	bl	8001d9e <HAL_FDCAN_ConfigRxFifoOverwrite>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <MX_FDCAN_Init+0x96>
	{
		Error_Handler();
 8004852:	f000 f9b9 	bl	8004bc8 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8004856:	2201      	movs	r2, #1
 8004858:	2141      	movs	r1, #65	; 0x41
 800485a:	482d      	ldr	r0, [pc, #180]	; (8004910 <MX_FDCAN_Init+0x150>)
 800485c:	f7fd fa9f 	bl	8001d9e <HAL_FDCAN_ConfigRxFifoOverwrite>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <MX_FDCAN_Init+0xaa>
	{
		Error_Handler();
 8004866:	f000 f9af 	bl	8004bc8 <Error_Handler>
	}

	//only accept config/request can messages and sync can messages
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800486a:	2300      	movs	r3, #0
 800486c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 800486e:	2300      	movs	r3, #0
 8004870:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8004872:	2302      	movs	r3, #2
 8004874:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8004876:	2301      	movs	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_CONFIG;
 800487a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800487e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8004880:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004884:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 8004886:	463b      	mov	r3, r7
 8004888:	4619      	mov	r1, r3
 800488a:	4821      	ldr	r0, [pc, #132]	; (8004910 <MX_FDCAN_Init+0x150>)
 800488c:	f7fd f9fc 	bl	8001c88 <HAL_FDCAN_ConfigFilter>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <MX_FDCAN_Init+0xda>
	{
		Error_Handler();
 8004896:	f000 f997 	bl	8004bc8 <Error_Handler>
	}

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800489a:	2300      	movs	r3, #0
 800489c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 1;
 800489e:	2301      	movs	r3, #1
 80048a0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80048a2:	2302      	movs	r3, #2
 80048a4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80048a6:	2301      	movs	r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_SYNC;
 80048aa:	2380      	movs	r3, #128	; 0x80
 80048ac:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 80048ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80048b2:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 80048b4:	463b      	mov	r3, r7
 80048b6:	4619      	mov	r1, r3
 80048b8:	4815      	ldr	r0, [pc, #84]	; (8004910 <MX_FDCAN_Init+0x150>)
 80048ba:	f7fd f9e5 	bl	8001c88 <HAL_FDCAN_ConfigFilter>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <MX_FDCAN_Init+0x108>
	{
		Error_Handler();
 80048c4:	f000 f980 	bl	8004bc8 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 80048c8:	2301      	movs	r3, #1
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	2301      	movs	r3, #1
 80048ce:	2202      	movs	r2, #2
 80048d0:	2102      	movs	r1, #2
 80048d2:	480f      	ldr	r0, [pc, #60]	; (8004910 <MX_FDCAN_Init+0x150>)
 80048d4:	f7fd fa32 	bl	8001d3c <HAL_FDCAN_ConfigGlobalFilter>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <MX_FDCAN_Init+0x122>
	{
		Error_Handler();
 80048de:	f000 f973 	bl	8004bc8 <Error_Handler>
	}

	if(HAL_FDCAN_Start(&hfdcan) != HAL_OK)
 80048e2:	480b      	ldr	r0, [pc, #44]	; (8004910 <MX_FDCAN_Init+0x150>)
 80048e4:	f7fd fa94 	bl	8001e10 <HAL_FDCAN_Start>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <MX_FDCAN_Init+0x132>
	{
		Error_Handler();
 80048ee:	f000 f96b 	bl	8004bc8 <Error_Handler>
	}
	if(HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80048f2:	2200      	movs	r2, #0
 80048f4:	2101      	movs	r1, #1
 80048f6:	4806      	ldr	r0, [pc, #24]	; (8004910 <MX_FDCAN_Init+0x150>)
 80048f8:	f7fd fbe2 	bl	80020c0 <HAL_FDCAN_ActivateNotification>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <MX_FDCAN_Init+0x146>
	{
		Error_Handler();
 8004902:	f000 f961 	bl	8004bc8 <Error_Handler>
	}
}
 8004906:	bf00      	nop
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000114 	.word	0x20000114
 8004914:	40006400 	.word	0x40006400

08004918 <MX_DMA_Init>:

static void MX_DMA_Init(void) 
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <MX_DMA_Init+0x60>)
 8004920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004922:	4a15      	ldr	r2, [pc, #84]	; (8004978 <MX_DMA_Init+0x60>)
 8004924:	f043 0304 	orr.w	r3, r3, #4
 8004928:	6493      	str	r3, [r2, #72]	; 0x48
 800492a:	4b13      	ldr	r3, [pc, #76]	; (8004978 <MX_DMA_Init+0x60>)
 800492c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	607b      	str	r3, [r7, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004936:	4b10      	ldr	r3, [pc, #64]	; (8004978 <MX_DMA_Init+0x60>)
 8004938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493a:	4a0f      	ldr	r2, [pc, #60]	; (8004978 <MX_DMA_Init+0x60>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	6493      	str	r3, [r2, #72]	; 0x48
 8004942:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <MX_DMA_Init+0x60>)
 8004944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800494e:	2200      	movs	r2, #0
 8004950:	2100      	movs	r1, #0
 8004952:	200b      	movs	r0, #11
 8004954:	f7fc fe4f 	bl	80015f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004958:	200b      	movs	r0, #11
 800495a:	f7fc fe66 	bl	800162a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800495e:	2200      	movs	r2, #0
 8004960:	2100      	movs	r1, #0
 8004962:	200c      	movs	r0, #12
 8004964:	f7fc fe47 	bl	80015f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004968:	200c      	movs	r0, #12
 800496a:	f7fc fe5e 	bl	800162a <HAL_NVIC_EnableIRQ>

}
 800496e:	bf00      	nop
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40021000 	.word	0x40021000

0800497c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004982:	f107 030c 	add.w	r3, r7, #12
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	605a      	str	r2, [r3, #4]
 800498c:	609a      	str	r2, [r3, #8]
 800498e:	60da      	str	r2, [r3, #12]
 8004990:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004992:	4b8a      	ldr	r3, [pc, #552]	; (8004bbc <MX_GPIO_Init+0x240>)
 8004994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004996:	4a89      	ldr	r2, [pc, #548]	; (8004bbc <MX_GPIO_Init+0x240>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800499e:	4b87      	ldr	r3, [pc, #540]	; (8004bbc <MX_GPIO_Init+0x240>)
 80049a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80049aa:	4b84      	ldr	r3, [pc, #528]	; (8004bbc <MX_GPIO_Init+0x240>)
 80049ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ae:	4a83      	ldr	r2, [pc, #524]	; (8004bbc <MX_GPIO_Init+0x240>)
 80049b0:	f043 0302 	orr.w	r3, r3, #2
 80049b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049b6:	4b81      	ldr	r3, [pc, #516]	; (8004bbc <MX_GPIO_Init+0x240>)
 80049b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80049c2:	4b7e      	ldr	r3, [pc, #504]	; (8004bbc <MX_GPIO_Init+0x240>)
 80049c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c6:	4a7d      	ldr	r2, [pc, #500]	; (8004bbc <MX_GPIO_Init+0x240>)
 80049c8:	f043 0320 	orr.w	r3, r3, #32
 80049cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049ce:	4b7b      	ldr	r3, [pc, #492]	; (8004bbc <MX_GPIO_Init+0x240>)
 80049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d2:	f003 0320 	and.w	r3, r3, #32
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]

	//led pin, sel pins, and in pins should always be outputs
	//led pin and sel pins should always start low, in pins should start based on configuration
	//TODO: somewhere else check and set the default for IN pins
	//TODO: in analog reading section use SEL0 and SEL1 for multisense multiplexing
	HAL_GPIO_WritePin(LED.PORT, LED.PIN, 0);
 80049da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049e2:	2200      	movs	r2, #0
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe faa9 	bl	8002f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 80049ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049f2:	2200      	movs	r2, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fe faa1 	bl	8002f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 80049fa:	4b71      	ldr	r3, [pc, #452]	; (8004bc0 <MX_GPIO_Init+0x244>)
 80049fc:	2101      	movs	r1, #1
 80049fe:	2200      	movs	r2, #0
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fe fa9b 	bl	8002f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U5IN0.PORT, U5IN0.PIN, 1);
 8004a06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a0e:	2201      	movs	r2, #1
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe fa93 	bl	8002f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U5IN1.PORT, U5IN1.PIN, 1);
 8004a16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a1a:	2180      	movs	r1, #128	; 0x80
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe fa8c 	bl	8002f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U6IN0.PORT, U6IN0.PIN, 1);
 8004a24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a28:	2140      	movs	r1, #64	; 0x40
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fe fa85 	bl	8002f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U6IN1.PORT, U6IN1.PIN, 0);
 8004a32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a36:	2120      	movs	r1, #32
 8004a38:	2200      	movs	r2, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe fa7e 	bl	8002f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U7IN0.PORT, U7IN0.PIN, 0);
 8004a40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a44:	2110      	movs	r1, #16
 8004a46:	2200      	movs	r2, #0
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fe fa77 	bl	8002f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U7IN1.PORT, U7IN1.PIN, 0);
 8004a4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a52:	2108      	movs	r1, #8
 8004a54:	2200      	movs	r2, #0
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe fa70 	bl	8002f3c <HAL_GPIO_WritePin>

	//all outputs on portA assigned here
	GPIO_InitStruct.Pin = LED.PIN|SEL0.PIN|U5IN0.PIN|U5IN1.PIN|U6IN0.PIN|U6IN1.PIN|U7IN0.PIN|U7IN1.PIN;
 8004a5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a64:	4313      	orrs	r3, r2
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2280      	movs	r2, #128	; 0x80
 8004a72:	4313      	orrs	r3, r2
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2240      	movs	r2, #64	; 0x40
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2210      	movs	r2, #16
 8004a84:	4313      	orrs	r3, r2
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2208      	movs	r2, #8
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a90:	2301      	movs	r3, #1
 8004a92:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a9c:	f107 030c 	add.w	r3, r7, #12
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004aa6:	f7fe f8c7 	bl	8002c38 <HAL_GPIO_Init>

	//all outputs on portB assigned here
	GPIO_InitStruct.Pin = SEL1.PIN;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aba:	f107 030c 	add.w	r3, r7, #12
 8004abe:	4619      	mov	r1, r3
 8004ac0:	483f      	ldr	r0, [pc, #252]	; (8004bc0 <MX_GPIO_Init+0x244>)
 8004ac2:	f7fe f8b9 	bl	8002c38 <HAL_GPIO_Init>


	if(Digital_In_EN && (1<<0))
 8004ac6:	4b3f      	ldr	r3, [pc, #252]	; (8004bc4 <MX_GPIO_Init+0x248>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d012      	beq.n	8004af4 <MX_GPIO_Init+0x178>
	{
		HAL_GPIO_WritePin(DIO3.PORT, DIO3.PIN, GPIO_PIN_RESET);
 8004ace:	4b3c      	ldr	r3, [pc, #240]	; (8004bc0 <MX_GPIO_Init+0x244>)
 8004ad0:	2108      	movs	r1, #8
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fe fa31 	bl	8002f3c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO3.PIN;
 8004ada:	2308      	movs	r3, #8
 8004adc:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO3.PORT, &GPIO_InitStruct);
 8004ae6:	4a36      	ldr	r2, [pc, #216]	; (8004bc0 <MX_GPIO_Init+0x244>)
 8004ae8:	f107 030c 	add.w	r3, r7, #12
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f7fe f8a2 	bl	8002c38 <HAL_GPIO_Init>
	else if (1)
	{
		//here we configure pins intended for PWM purposes
	}

	if(Digital_In_EN && (1<<1))
 8004af4:	4b33      	ldr	r3, [pc, #204]	; (8004bc4 <MX_GPIO_Init+0x248>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d012      	beq.n	8004b22 <MX_GPIO_Init+0x1a6>
	{
		HAL_GPIO_WritePin(DIO4.PORT, DIO4.PIN, GPIO_PIN_RESET);
 8004afc:	4b30      	ldr	r3, [pc, #192]	; (8004bc0 <MX_GPIO_Init+0x244>)
 8004afe:	2110      	movs	r1, #16
 8004b00:	2200      	movs	r2, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fe fa1a 	bl	8002f3c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO4.PIN;
 8004b08:	2310      	movs	r3, #16
 8004b0a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO4.PORT, &GPIO_InitStruct);
 8004b14:	4a2a      	ldr	r2, [pc, #168]	; (8004bc0 <MX_GPIO_Init+0x244>)
 8004b16:	f107 030c 	add.w	r3, r7, #12
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f7fe f88b 	bl	8002c38 <HAL_GPIO_Init>
	else if (1)
	{
		//here we configure pins intended for PWM purposes
	}

	if(Digital_In_EN && (1<<2))
 8004b22:	4b28      	ldr	r3, [pc, #160]	; (8004bc4 <MX_GPIO_Init+0x248>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d012      	beq.n	8004b50 <MX_GPIO_Init+0x1d4>
	{
		HAL_GPIO_WritePin(DIO5.PORT, DIO5.PIN, GPIO_PIN_RESET);
 8004b2a:	4b25      	ldr	r3, [pc, #148]	; (8004bc0 <MX_GPIO_Init+0x244>)
 8004b2c:	2120      	movs	r1, #32
 8004b2e:	2200      	movs	r2, #0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe fa03 	bl	8002f3c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO5.PIN;
 8004b36:	2320      	movs	r3, #32
 8004b38:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO5.PORT, &GPIO_InitStruct);
 8004b42:	4a1f      	ldr	r2, [pc, #124]	; (8004bc0 <MX_GPIO_Init+0x244>)
 8004b44:	f107 030c 	add.w	r3, r7, #12
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f7fe f874 	bl	8002c38 <HAL_GPIO_Init>
	else if (1)
	{
		//here we configure pins intended for PWM purposes
	}

	if(Digital_In_EN && (1<<3))
 8004b50:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <MX_GPIO_Init+0x248>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d012      	beq.n	8004b7e <MX_GPIO_Init+0x202>
	{
		HAL_GPIO_WritePin(DIO6.PORT, DIO6.PIN, GPIO_PIN_RESET);
 8004b58:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <MX_GPIO_Init+0x244>)
 8004b5a:	2140      	movs	r1, #64	; 0x40
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe f9ec 	bl	8002f3c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO6.PIN;
 8004b64:	2340      	movs	r3, #64	; 0x40
 8004b66:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO6.PORT, &GPIO_InitStruct);
 8004b70:	4a13      	ldr	r2, [pc, #76]	; (8004bc0 <MX_GPIO_Init+0x244>)
 8004b72:	f107 030c 	add.w	r3, r7, #12
 8004b76:	4619      	mov	r1, r3
 8004b78:	4610      	mov	r0, r2
 8004b7a:	f7fe f85d 	bl	8002c38 <HAL_GPIO_Init>
	else if (1)
	{
		//here we configure pins intended for PWM purposes
	}

	if(Digital_In_EN && (1<<4))
 8004b7e:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <MX_GPIO_Init+0x248>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d016      	beq.n	8004bb4 <MX_GPIO_Init+0x238>
	{
		HAL_GPIO_WritePin(DIO15.PORT, DIO15.PIN, GPIO_PIN_RESET);
 8004b86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b8e:	2200      	movs	r2, #0
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fe f9d3 	bl	8002f3c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO15.PIN;
 8004b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b9a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO15.PORT, &GPIO_InitStruct);
 8004ba4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004ba8:	f107 030c 	add.w	r3, r7, #12
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f7fe f842 	bl	8002c38 <HAL_GPIO_Init>
	}
	else if (1)
	{
		//here we configure pins intended for PWM purposes
	}
}
 8004bb4:	bf00      	nop
 8004bb6:	3720      	adds	r7, #32
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	48000400 	.word	0x48000400
 8004bc4:	20000084 	.word	0x20000084

08004bc8 <Error_Handler>:


void Error_Handler(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(LED.PORT, LED.PIN);
 8004bcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fe f9c8 	bl	8002f6c <HAL_GPIO_TogglePin>
		HAL_Delay(33);
 8004bdc:	2021      	movs	r0, #33	; 0x21
 8004bde:	f7fb fb8b 	bl	80002f8 <HAL_Delay>
		HAL_GPIO_TogglePin(LED.PORT, LED.PIN);
 8004be2:	e7f3      	b.n	8004bcc <Error_Handler+0x4>

08004be4 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4a04      	ldr	r2, [pc, #16]	; (8004c00 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8004bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bf2:	6093      	str	r3, [r2, #8]
}
 8004bf4:	bf00      	nop
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40007000 	.word	0x40007000

08004c04 <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_adc1;
extern DMA_HandleTypeDef hdma_adc2;


void HAL_MspInit(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c0a:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <HAL_MspInit+0x44>)
 8004c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0e:	4a0e      	ldr	r2, [pc, #56]	; (8004c48 <HAL_MspInit+0x44>)
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	6613      	str	r3, [r2, #96]	; 0x60
 8004c16:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <HAL_MspInit+0x44>)
 8004c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	607b      	str	r3, [r7, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c22:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_MspInit+0x44>)
 8004c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c26:	4a08      	ldr	r2, [pc, #32]	; (8004c48 <HAL_MspInit+0x44>)
 8004c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <HAL_MspInit+0x44>)
 8004c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	683b      	ldr	r3, [r7, #0]

  LL_PWR_DisableDeadBatteryPD();
 8004c3a:	f7ff ffd3 	bl	8004be4 <LL_PWR_DisableDeadBatteryPD>
}
 8004c3e:	bf00      	nop
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40021000 	.word	0x40021000

08004c4c <HAL_ADC_MspInit>:

//counter to keep track of how many peripherals require ADC12 clock, so that deinitializing ADC1 allows ADC2 to run
static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08c      	sub	sp, #48	; 0x30
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c54:	f107 031c 	add.w	r3, r7, #28
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	60da      	str	r2, [r3, #12]
 8004c62:	611a      	str	r2, [r3, #16]
	if(hadc->Instance==ADC1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c6c:	d15a      	bne.n	8004d24 <HAL_ADC_MspInit+0xd8>
	{
		HAL_RCC_ADC12_CLK_ENABLED++;
 8004c6e:	4b5e      	ldr	r3, [pc, #376]	; (8004de8 <HAL_ADC_MspInit+0x19c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3301      	adds	r3, #1
 8004c74:	4a5c      	ldr	r2, [pc, #368]	; (8004de8 <HAL_ADC_MspInit+0x19c>)
 8004c76:	6013      	str	r3, [r2, #0]
		if(HAL_RCC_ADC12_CLK_ENABLED==1)
 8004c78:	4b5b      	ldr	r3, [pc, #364]	; (8004de8 <HAL_ADC_MspInit+0x19c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d10b      	bne.n	8004c98 <HAL_ADC_MspInit+0x4c>
		{
			__HAL_RCC_ADC12_CLK_ENABLE();
 8004c80:	4b5a      	ldr	r3, [pc, #360]	; (8004dec <HAL_ADC_MspInit+0x1a0>)
 8004c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c84:	4a59      	ldr	r2, [pc, #356]	; (8004dec <HAL_ADC_MspInit+0x1a0>)
 8004c86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c8c:	4b57      	ldr	r3, [pc, #348]	; (8004dec <HAL_ADC_MspInit+0x1a0>)
 8004c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c94:	61bb      	str	r3, [r7, #24]
 8004c96:	69bb      	ldr	r3, [r7, #24]
		}
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8004c98:	4b54      	ldr	r3, [pc, #336]	; (8004dec <HAL_ADC_MspInit+0x1a0>)
 8004c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9c:	4a53      	ldr	r2, [pc, #332]	; (8004dec <HAL_ADC_MspInit+0x1a0>)
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ca4:	4b51      	ldr	r3, [pc, #324]	; (8004dec <HAL_ADC_MspInit+0x1a0>)
 8004ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	697b      	ldr	r3, [r7, #20]

		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004cb0:	2307      	movs	r3, #7
 8004cb2:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cbc:	f107 031c 	add.w	r3, r7, #28
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cc6:	f7fd ffb7 	bl	8002c38 <HAL_GPIO_Init>

		hdma_adc1.Instance = DMA1_Channel1;
 8004cca:	4b49      	ldr	r3, [pc, #292]	; (8004df0 <HAL_ADC_MspInit+0x1a4>)
 8004ccc:	4a49      	ldr	r2, [pc, #292]	; (8004df4 <HAL_ADC_MspInit+0x1a8>)
 8004cce:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004cd0:	4b47      	ldr	r3, [pc, #284]	; (8004df0 <HAL_ADC_MspInit+0x1a4>)
 8004cd2:	2205      	movs	r2, #5
 8004cd4:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cd6:	4b46      	ldr	r3, [pc, #280]	; (8004df0 <HAL_ADC_MspInit+0x1a4>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cdc:	4b44      	ldr	r3, [pc, #272]	; (8004df0 <HAL_ADC_MspInit+0x1a4>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004ce2:	4b43      	ldr	r3, [pc, #268]	; (8004df0 <HAL_ADC_MspInit+0x1a4>)
 8004ce4:	2280      	movs	r2, #128	; 0x80
 8004ce6:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004ce8:	4b41      	ldr	r3, [pc, #260]	; (8004df0 <HAL_ADC_MspInit+0x1a4>)
 8004cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cee:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004cf0:	4b3f      	ldr	r3, [pc, #252]	; (8004df0 <HAL_ADC_MspInit+0x1a4>)
 8004cf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cf6:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_NORMAL;
 8004cf8:	4b3d      	ldr	r3, [pc, #244]	; (8004df0 <HAL_ADC_MspInit+0x1a4>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004cfe:	4b3c      	ldr	r3, [pc, #240]	; (8004df0 <HAL_ADC_MspInit+0x1a4>)
 8004d00:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004d04:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004d06:	483a      	ldr	r0, [pc, #232]	; (8004df0 <HAL_ADC_MspInit+0x1a4>)
 8004d08:	f7fc fcaa 	bl	8001660 <HAL_DMA_Init>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_ADC_MspInit+0xca>
		{
			Error_Handler();
 8004d12:	f7ff ff59 	bl	8004bc8 <Error_Handler>
		}

		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a35      	ldr	r2, [pc, #212]	; (8004df0 <HAL_ADC_MspInit+0x1a4>)
 8004d1a:	655a      	str	r2, [r3, #84]	; 0x54
 8004d1c:	4a34      	ldr	r2, [pc, #208]	; (8004df0 <HAL_ADC_MspInit+0x1a4>)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6293      	str	r3, [r2, #40]	; 0x28
		  Error_Handler();
		}

		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
	}
}
 8004d22:	e05d      	b.n	8004de0 <HAL_ADC_MspInit+0x194>
	else if(hadc->Instance==ADC2)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a33      	ldr	r2, [pc, #204]	; (8004df8 <HAL_ADC_MspInit+0x1ac>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d158      	bne.n	8004de0 <HAL_ADC_MspInit+0x194>
		HAL_RCC_ADC12_CLK_ENABLED++;
 8004d2e:	4b2e      	ldr	r3, [pc, #184]	; (8004de8 <HAL_ADC_MspInit+0x19c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3301      	adds	r3, #1
 8004d34:	4a2c      	ldr	r2, [pc, #176]	; (8004de8 <HAL_ADC_MspInit+0x19c>)
 8004d36:	6013      	str	r3, [r2, #0]
		if(HAL_RCC_ADC12_CLK_ENABLED==1)
 8004d38:	4b2b      	ldr	r3, [pc, #172]	; (8004de8 <HAL_ADC_MspInit+0x19c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d10b      	bne.n	8004d58 <HAL_ADC_MspInit+0x10c>
		  __HAL_RCC_ADC12_CLK_ENABLE();
 8004d40:	4b2a      	ldr	r3, [pc, #168]	; (8004dec <HAL_ADC_MspInit+0x1a0>)
 8004d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d44:	4a29      	ldr	r2, [pc, #164]	; (8004dec <HAL_ADC_MspInit+0x1a0>)
 8004d46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d4c:	4b27      	ldr	r3, [pc, #156]	; (8004dec <HAL_ADC_MspInit+0x1a0>)
 8004d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8004d58:	4b24      	ldr	r3, [pc, #144]	; (8004dec <HAL_ADC_MspInit+0x1a0>)
 8004d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d5c:	4a23      	ldr	r2, [pc, #140]	; (8004dec <HAL_ADC_MspInit+0x1a0>)
 8004d5e:	f043 0320 	orr.w	r3, r3, #32
 8004d62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d64:	4b21      	ldr	r3, [pc, #132]	; (8004dec <HAL_ADC_MspInit+0x1a0>)
 8004d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004d70:	2302      	movs	r3, #2
 8004d72:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d74:	2303      	movs	r3, #3
 8004d76:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004d7c:	f107 031c 	add.w	r3, r7, #28
 8004d80:	4619      	mov	r1, r3
 8004d82:	481e      	ldr	r0, [pc, #120]	; (8004dfc <HAL_ADC_MspInit+0x1b0>)
 8004d84:	f7fd ff58 	bl	8002c38 <HAL_GPIO_Init>
		hdma_adc2.Instance = DMA1_Channel2;
 8004d88:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <HAL_ADC_MspInit+0x1b4>)
 8004d8a:	4a1e      	ldr	r2, [pc, #120]	; (8004e04 <HAL_ADC_MspInit+0x1b8>)
 8004d8c:	601a      	str	r2, [r3, #0]
		hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004d8e:	4b1c      	ldr	r3, [pc, #112]	; (8004e00 <HAL_ADC_MspInit+0x1b4>)
 8004d90:	2224      	movs	r2, #36	; 0x24
 8004d92:	605a      	str	r2, [r3, #4]
		hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d94:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <HAL_ADC_MspInit+0x1b4>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	609a      	str	r2, [r3, #8]
		hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d9a:	4b19      	ldr	r3, [pc, #100]	; (8004e00 <HAL_ADC_MspInit+0x1b4>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	60da      	str	r2, [r3, #12]
		hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004da0:	4b17      	ldr	r3, [pc, #92]	; (8004e00 <HAL_ADC_MspInit+0x1b4>)
 8004da2:	2280      	movs	r2, #128	; 0x80
 8004da4:	611a      	str	r2, [r3, #16]
		hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004da6:	4b16      	ldr	r3, [pc, #88]	; (8004e00 <HAL_ADC_MspInit+0x1b4>)
 8004da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dac:	615a      	str	r2, [r3, #20]
		hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004dae:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <HAL_ADC_MspInit+0x1b4>)
 8004db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004db4:	619a      	str	r2, [r3, #24]
		hdma_adc2.Init.Mode = DMA_NORMAL;
 8004db6:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <HAL_ADC_MspInit+0x1b4>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	61da      	str	r2, [r3, #28]
		hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8004dbc:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <HAL_ADC_MspInit+0x1b4>)
 8004dbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004dc2:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004dc4:	480e      	ldr	r0, [pc, #56]	; (8004e00 <HAL_ADC_MspInit+0x1b4>)
 8004dc6:	f7fc fc4b 	bl	8001660 <HAL_DMA_Init>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_ADC_MspInit+0x188>
		  Error_Handler();
 8004dd0:	f7ff fefa 	bl	8004bc8 <Error_Handler>
		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a0a      	ldr	r2, [pc, #40]	; (8004e00 <HAL_ADC_MspInit+0x1b4>)
 8004dd8:	655a      	str	r2, [r3, #84]	; 0x54
 8004dda:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <HAL_ADC_MspInit+0x1b4>)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004de0:	bf00      	nop
 8004de2:	3730      	adds	r7, #48	; 0x30
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000060 	.word	0x20000060
 8004dec:	40021000 	.word	0x40021000
 8004df0:	20000218 	.word	0x20000218
 8004df4:	40020008 	.word	0x40020008
 8004df8:	50000100 	.word	0x50000100
 8004dfc:	48001400 	.word	0x48001400
 8004e00:	200002f0 	.word	0x200002f0
 8004e04:	4002001c 	.word	0x4002001c

08004e08 <HAL_FDCAN_MspInit>:

}


void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	; 0x28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e10:	f107 0314 	add.w	r3, r7, #20
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	609a      	str	r2, [r3, #8]
 8004e1c:	60da      	str	r2, [r3, #12]
 8004e1e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1c      	ldr	r2, [pc, #112]	; (8004e98 <HAL_FDCAN_MspInit+0x90>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d131      	bne.n	8004e8e <HAL_FDCAN_MspInit+0x86>
  {
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004e2a:	4b1c      	ldr	r3, [pc, #112]	; (8004e9c <HAL_FDCAN_MspInit+0x94>)
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2e:	4a1b      	ldr	r2, [pc, #108]	; (8004e9c <HAL_FDCAN_MspInit+0x94>)
 8004e30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e34:	6593      	str	r3, [r2, #88]	; 0x58
 8004e36:	4b19      	ldr	r3, [pc, #100]	; (8004e9c <HAL_FDCAN_MspInit+0x94>)
 8004e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e42:	4b16      	ldr	r3, [pc, #88]	; (8004e9c <HAL_FDCAN_MspInit+0x94>)
 8004e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e46:	4a15      	ldr	r2, [pc, #84]	; (8004e9c <HAL_FDCAN_MspInit+0x94>)
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e4e:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <HAL_FDCAN_MspInit+0x94>)
 8004e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004e5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e60:	2302      	movs	r3, #2
 8004e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004e6c:	2309      	movs	r3, #9
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e70:	f107 0314 	add.w	r3, r7, #20
 8004e74:	4619      	mov	r1, r3
 8004e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e7a:	f7fd fedd 	bl	8002c38 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2100      	movs	r1, #0
 8004e82:	2015      	movs	r0, #21
 8004e84:	f7fc fbb7 	bl	80015f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004e88:	2015      	movs	r0, #21
 8004e8a:	f7fc fbce 	bl	800162a <HAL_NVIC_EnableIRQ>
  }
}
 8004e8e:	bf00      	nop
 8004e90:	3728      	adds	r7, #40	; 0x28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40006400 	.word	0x40006400
 8004e9c:	40021000 	.word	0x40021000

08004ea0 <NMI_Handler>:
extern FDCAN_HandleTypeDef hfdcan;
extern DMA_HandleTypeDef hdma_adc1;
extern DMA_HandleTypeDef hdma_adc2;

void NMI_Handler(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0

}
 8004ea4:	bf00      	nop
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <HardFault_Handler>:

void HardFault_Handler(void)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	af00      	add	r7, sp, #0
  while (1)
 8004eb2:	e7fe      	b.n	8004eb2 <HardFault_Handler+0x4>

08004eb4 <MemManage_Handler>:

  }
}

void MemManage_Handler(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  while (1)
 8004eb8:	e7fe      	b.n	8004eb8 <MemManage_Handler+0x4>

08004eba <BusFault_Handler>:

  }
}

void BusFault_Handler(void)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	af00      	add	r7, sp, #0
  while (1)
 8004ebe:	e7fe      	b.n	8004ebe <BusFault_Handler+0x4>

08004ec0 <UsageFault_Handler>:

  }
}

void UsageFault_Handler(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  while (1)
 8004ec4:	e7fe      	b.n	8004ec4 <UsageFault_Handler+0x4>

08004ec6 <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	af00      	add	r7, sp, #0

}
 8004eca:	bf00      	nop
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0

}
 8004ed8:	bf00      	nop
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	af00      	add	r7, sp, #0

}
 8004ee6:	bf00      	nop
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8004ef4:	f7fb f9e2 	bl	80002bc <HAL_IncTick>
}
 8004ef8:	bf00      	nop
 8004efa:	bd80      	pop	{r7, pc}

08004efc <DMA1_Channel1_IRQHandler>:


void DMA1_Channel1_IRQHandler(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 8004f00:	4802      	ldr	r0, [pc, #8]	; (8004f0c <DMA1_Channel1_IRQHandler+0x10>)
 8004f02:	f7fc fc55 	bl	80017b0 <HAL_DMA_IRQHandler>
}
 8004f06:	bf00      	nop
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000218 	.word	0x20000218

08004f10 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 8004f14:	4802      	ldr	r0, [pc, #8]	; (8004f20 <DMA1_Channel2_IRQHandler+0x10>)
 8004f16:	f7fc fc4b 	bl	80017b0 <HAL_DMA_IRQHandler>
}
 8004f1a:	bf00      	nop
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200002f0 	.word	0x200002f0

08004f24 <FDCAN1_IT0_IRQHandler>:


void FDCAN1_IT0_IRQHandler(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(&hfdcan);
 8004f28:	4802      	ldr	r0, [pc, #8]	; (8004f34 <FDCAN1_IT0_IRQHandler+0x10>)
 8004f2a:	f7fd f9af 	bl	800228c <HAL_FDCAN_IRQHandler>
}
 8004f2e:	bf00      	nop
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000114 	.word	0x20000114

08004f38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004f3c:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <SystemInit+0x28>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f42:	4a07      	ldr	r2, [pc, #28]	; (8004f60 <SystemInit+0x28>)
 8004f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f4c:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <SystemInit+0x28>)
 8004f4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f52:	609a      	str	r2, [r3, #8]
#endif
}
 8004f54:	bf00      	nop
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	e000ed00 	.word	0xe000ed00

08004f64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004f64:	480d      	ldr	r0, [pc, #52]	; (8004f9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004f66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f68:	480d      	ldr	r0, [pc, #52]	; (8004fa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8004f6a:	490e      	ldr	r1, [pc, #56]	; (8004fa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004f6c:	4a0e      	ldr	r2, [pc, #56]	; (8004fa8 <LoopForever+0xe>)
  movs r3, #0
 8004f6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004f70:	e002      	b.n	8004f78 <LoopCopyDataInit>

08004f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f76:	3304      	adds	r3, #4

08004f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f7c:	d3f9      	bcc.n	8004f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f7e:	4a0b      	ldr	r2, [pc, #44]	; (8004fac <LoopForever+0x12>)
  ldr r4, =_ebss
 8004f80:	4c0b      	ldr	r4, [pc, #44]	; (8004fb0 <LoopForever+0x16>)
  movs r3, #0
 8004f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f84:	e001      	b.n	8004f8a <LoopFillZerobss>

08004f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f88:	3204      	adds	r2, #4

08004f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f8c:	d3fb      	bcc.n	8004f86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004f8e:	f7ff ffd3 	bl	8004f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f92:	f000 f811 	bl	8004fb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004f96:	f7ff f9c9 	bl	800432c <main>

08004f9a <LoopForever>:

LoopForever:
    b LoopForever
 8004f9a:	e7fe      	b.n	8004f9a <LoopForever>
  ldr   r0, =_estack
 8004f9c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fa4:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8004fa8:	08005088 	.word	0x08005088
  ldr r2, =_sbss
 8004fac:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8004fb0:	200003a0 	.word	0x200003a0

08004fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004fb4:	e7fe      	b.n	8004fb4 <ADC1_2_IRQHandler>
	...

08004fb8 <__libc_init_array>:
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	4e0d      	ldr	r6, [pc, #52]	; (8004ff0 <__libc_init_array+0x38>)
 8004fbc:	4c0d      	ldr	r4, [pc, #52]	; (8004ff4 <__libc_init_array+0x3c>)
 8004fbe:	1ba4      	subs	r4, r4, r6
 8004fc0:	10a4      	asrs	r4, r4, #2
 8004fc2:	2500      	movs	r5, #0
 8004fc4:	42a5      	cmp	r5, r4
 8004fc6:	d109      	bne.n	8004fdc <__libc_init_array+0x24>
 8004fc8:	4e0b      	ldr	r6, [pc, #44]	; (8004ff8 <__libc_init_array+0x40>)
 8004fca:	4c0c      	ldr	r4, [pc, #48]	; (8004ffc <__libc_init_array+0x44>)
 8004fcc:	f000 f820 	bl	8005010 <_init>
 8004fd0:	1ba4      	subs	r4, r4, r6
 8004fd2:	10a4      	asrs	r4, r4, #2
 8004fd4:	2500      	movs	r5, #0
 8004fd6:	42a5      	cmp	r5, r4
 8004fd8:	d105      	bne.n	8004fe6 <__libc_init_array+0x2e>
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fe0:	4798      	blx	r3
 8004fe2:	3501      	adds	r5, #1
 8004fe4:	e7ee      	b.n	8004fc4 <__libc_init_array+0xc>
 8004fe6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fea:	4798      	blx	r3
 8004fec:	3501      	adds	r5, #1
 8004fee:	e7f2      	b.n	8004fd6 <__libc_init_array+0x1e>
 8004ff0:	08005080 	.word	0x08005080
 8004ff4:	08005080 	.word	0x08005080
 8004ff8:	08005080 	.word	0x08005080
 8004ffc:	08005084 	.word	0x08005084

08005000 <memset>:
 8005000:	4402      	add	r2, r0
 8005002:	4603      	mov	r3, r0
 8005004:	4293      	cmp	r3, r2
 8005006:	d100      	bne.n	800500a <memset+0xa>
 8005008:	4770      	bx	lr
 800500a:	f803 1b01 	strb.w	r1, [r3], #1
 800500e:	e7f9      	b.n	8005004 <memset+0x4>

08005010 <_init>:
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	bf00      	nop
 8005014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005016:	bc08      	pop	{r3}
 8005018:	469e      	mov	lr, r3
 800501a:	4770      	bx	lr

0800501c <_fini>:
 800501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501e:	bf00      	nop
 8005020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005022:	bc08      	pop	{r3}
 8005024:	469e      	mov	lr, r3
 8005026:	4770      	bx	lr
