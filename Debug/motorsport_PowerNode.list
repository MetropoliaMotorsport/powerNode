
motorsport_PowerNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003800  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039e8  080039e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080039e8  080039e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039e8  080039e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039e8  080039e8  000139e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039ec  080039ec  000139ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000000c  080039fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080039fc  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e91a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bcc  00000000  00000000  0002e956  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d30  00000000  00000000  00030528  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c48  00000000  00000000  00031258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e5ac  00000000  00000000  00031ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000986e  00000000  00000000  0005044c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c84da  00000000  00000000  00059cba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122194  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003754  00000000  00000000  00122210  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080039c0 	.word	0x080039c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080039c0 	.word	0x080039c0

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f001 f8ac 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f003 f9bb 	bl	80035b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f001 f8b8 	bl	80013e6 <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f001 f884 	bl	8001396 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	20000008 	.word	0x20000008
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	2000002c 	.word	0x2000002c
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	2000002c 	.word	0x2000002c

080002f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	431a      	orrs	r2, r3
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	609a      	str	r2, [r3, #8]
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr

0800031e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800031e:	b480      	push	{r7}
 8000320:	b083      	sub	sp, #12
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
 8000326:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	431a      	orrs	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	609a      	str	r2, [r3, #8]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000354:	4618      	mov	r0, r3
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000360:	b490      	push	{r4, r7}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
 800036c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3360      	adds	r3, #96	; 0x60
 8000372:	461a      	mov	r2, r3
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	4413      	add	r3, r2
 800037a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800037c:	6822      	ldr	r2, [r4, #0]
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <LL_ADC_SetOffset+0x40>)
 8000380:	4013      	ands	r3, r2
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000388:	683a      	ldr	r2, [r7, #0]
 800038a:	430a      	orrs	r2, r1
 800038c:	4313      	orrs	r3, r2
 800038e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000392:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000394:	bf00      	nop
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bc90      	pop	{r4, r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	03fff000 	.word	0x03fff000

080003a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80003a4:	b490      	push	{r4, r7}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	3360      	adds	r3, #96	; 0x60
 80003b2:	461a      	mov	r2, r3
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	4413      	add	r3, r2
 80003ba:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80003bc:	6823      	ldr	r3, [r4, #0]
 80003be:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc90      	pop	{r4, r7}
 80003ca:	4770      	bx	lr

080003cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80003cc:	b490      	push	{r4, r7}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	3360      	adds	r3, #96	; 0x60
 80003dc:	461a      	mov	r2, r3
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	4413      	add	r3, r2
 80003e4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80003e6:	6823      	ldr	r3, [r4, #0]
 80003e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4313      	orrs	r3, r2
 80003f0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80003f2:	bf00      	nop
 80003f4:	3710      	adds	r7, #16
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc90      	pop	{r4, r7}
 80003fa:	4770      	bx	lr

080003fc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80003fc:	b490      	push	{r4, r7}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	3360      	adds	r3, #96	; 0x60
 800040c:	461a      	mov	r2, r3
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	4413      	add	r3, r2
 8000414:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000416:	6823      	ldr	r3, [r4, #0]
 8000418:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4313      	orrs	r3, r2
 8000420:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000422:	bf00      	nop
 8000424:	3710      	adds	r7, #16
 8000426:	46bd      	mov	sp, r7
 8000428:	bc90      	pop	{r4, r7}
 800042a:	4770      	bx	lr

0800042c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800042c:	b490      	push	{r4, r7}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	3360      	adds	r3, #96	; 0x60
 800043c:	461a      	mov	r2, r3
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	4413      	add	r3, r2
 8000444:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000446:	6823      	ldr	r3, [r4, #0]
 8000448:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4313      	orrs	r3, r2
 8000450:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000452:	bf00      	nop
 8000454:	3710      	adds	r7, #16
 8000456:	46bd      	mov	sp, r7
 8000458:	bc90      	pop	{r4, r7}
 800045a:	4770      	bx	lr

0800045c <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	431a      	orrs	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	615a      	str	r2, [r3, #20]
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000482:	b490      	push	{r4, r7}
 8000484:	b084      	sub	sp, #16
 8000486:	af00      	add	r7, sp, #0
 8000488:	60f8      	str	r0, [r7, #12]
 800048a:	60b9      	str	r1, [r7, #8]
 800048c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	3330      	adds	r3, #48	; 0x30
 8000492:	461a      	mov	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	0a1b      	lsrs	r3, r3, #8
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	f003 030c 	and.w	r3, r3, #12
 800049e:	4413      	add	r3, r2
 80004a0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80004a2:	6822      	ldr	r2, [r4, #0]
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	f003 031f 	and.w	r3, r3, #31
 80004aa:	211f      	movs	r1, #31
 80004ac:	fa01 f303 	lsl.w	r3, r1, r3
 80004b0:	43db      	mvns	r3, r3
 80004b2:	401a      	ands	r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	0e9b      	lsrs	r3, r3, #26
 80004b8:	f003 011f 	and.w	r1, r3, #31
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	f003 031f 	and.w	r3, r3, #31
 80004c2:	fa01 f303 	lsl.w	r3, r1, r3
 80004c6:	4313      	orrs	r3, r2
 80004c8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc90      	pop	{r4, r7}
 80004d2:	4770      	bx	lr

080004d4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80004d4:	b490      	push	{r4, r7}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	3314      	adds	r3, #20
 80004e4:	461a      	mov	r2, r3
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	0e5b      	lsrs	r3, r3, #25
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	f003 0304 	and.w	r3, r3, #4
 80004f0:	4413      	add	r3, r2
 80004f2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80004f4:	6822      	ldr	r2, [r4, #0]
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	0d1b      	lsrs	r3, r3, #20
 80004fa:	f003 031f 	and.w	r3, r3, #31
 80004fe:	2107      	movs	r1, #7
 8000500:	fa01 f303 	lsl.w	r3, r1, r3
 8000504:	43db      	mvns	r3, r3
 8000506:	401a      	ands	r2, r3
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	0d1b      	lsrs	r3, r3, #20
 800050c:	f003 031f 	and.w	r3, r3, #31
 8000510:	6879      	ldr	r1, [r7, #4]
 8000512:	fa01 f303 	lsl.w	r3, r1, r3
 8000516:	4313      	orrs	r3, r2
 8000518:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bc90      	pop	{r4, r7}
 8000522:	4770      	bx	lr

08000524 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800053c:	43db      	mvns	r3, r3
 800053e:	401a      	ands	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f003 0318 	and.w	r3, r3, #24
 8000546:	4908      	ldr	r1, [pc, #32]	; (8000568 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000548:	40d9      	lsrs	r1, r3
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	400b      	ands	r3, r1
 800054e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000552:	431a      	orrs	r2, r3
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	0007ffff 	.word	0x0007ffff

0800056c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800057c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	6093      	str	r3, [r2, #8]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005a4:	d101      	bne.n	80005aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80005a6:	2301      	movs	r3, #1
 80005a8:	e000      	b.n	80005ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80005aa:	2300      	movs	r3, #0
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80005c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80005f4:	d101      	bne.n	80005fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80005f6:	2301      	movs	r3, #1
 80005f8:	e000      	b.n	80005fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	2b01      	cmp	r3, #1
 800061a:	d101      	bne.n	8000620 <LL_ADC_IsEnabled+0x18>
 800061c:	2301      	movs	r3, #1
 800061e:	e000      	b.n	8000622 <LL_ADC_IsEnabled+0x1a>
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	2b04      	cmp	r3, #4
 8000640:	d101      	bne.n	8000646 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000642:	2301      	movs	r3, #1
 8000644:	e000      	b.n	8000648 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	f003 0308 	and.w	r3, r3, #8
 8000664:	2b08      	cmp	r3, #8
 8000666:	d101      	bne.n	800066c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000668:	2301      	movs	r3, #1
 800066a:	e000      	b.n	800066e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b089      	sub	sp, #36	; 0x24
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000684:	2300      	movs	r3, #0
 8000686:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d101      	bne.n	8000696 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	e16b      	b.n	800096e <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d109      	bne.n	80006b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f002 ffa9 	bl	80035fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2200      	movs	r2, #0
 80006ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff67 	bl	8000590 <LL_ADC_IsDeepPowerDownEnabled>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d004      	beq.n	80006d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff4d 	bl	800056c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff82 	bl	80005e0 <LL_ADC_IsInternalRegulatorEnabled>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d113      	bne.n	800070a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff66 	bl	80005b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80006ec:	4ba2      	ldr	r3, [pc, #648]	; (8000978 <HAL_ADC_Init+0x2fc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	099b      	lsrs	r3, r3, #6
 80006f2:	4aa2      	ldr	r2, [pc, #648]	; (800097c <HAL_ADC_Init+0x300>)
 80006f4:	fba2 2303 	umull	r2, r3, r2, r3
 80006f8:	099b      	lsrs	r3, r3, #6
 80006fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80006fc:	e002      	b.n	8000704 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	3b01      	subs	r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1f9      	bne.n	80006fe <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff66 	bl	80005e0 <LL_ADC_IsInternalRegulatorEnabled>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d10d      	bne.n	8000736 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800071e:	f043 0210 	orr.w	r2, r3, #16
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800072a:	f043 0201 	orr.w	r2, r3, #1
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff77 	bl	800062e <LL_ADC_REG_IsConversionOngoing>
 8000740:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	2b00      	cmp	r3, #0
 800074c:	f040 8106 	bne.w	800095c <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	2b00      	cmp	r3, #0
 8000754:	f040 8102 	bne.w	800095c <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800075c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000760:	f043 0202 	orr.w	r2, r3, #2
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff4b 	bl	8000608 <LL_ADC_IsEnabled>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d111      	bne.n	800079c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000778:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800077c:	f7ff ff44 	bl	8000608 <LL_ADC_IsEnabled>
 8000780:	4604      	mov	r4, r0
 8000782:	487f      	ldr	r0, [pc, #508]	; (8000980 <HAL_ADC_Init+0x304>)
 8000784:	f7ff ff40 	bl	8000608 <LL_ADC_IsEnabled>
 8000788:	4603      	mov	r3, r0
 800078a:	4323      	orrs	r3, r4
 800078c:	2b00      	cmp	r3, #0
 800078e:	d105      	bne.n	800079c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	4619      	mov	r1, r3
 8000796:	487b      	ldr	r0, [pc, #492]	; (8000984 <HAL_ADC_Init+0x308>)
 8000798:	f7ff fdae 	bl	80002f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7f5b      	ldrb	r3, [r3, #29]
 80007a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80007a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80007ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80007b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80007ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80007bc:	4313      	orrs	r3, r2
 80007be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d106      	bne.n	80007d8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ce:	3b01      	subs	r3, #1
 80007d0:	045b      	lsls	r3, r3, #17
 80007d2:	69ba      	ldr	r2, [r7, #24]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d009      	beq.n	80007f4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80007ee:	69ba      	ldr	r2, [r7, #24]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	68da      	ldr	r2, [r3, #12]
 80007fa:	4b63      	ldr	r3, [pc, #396]	; (8000988 <HAL_ADC_Init+0x30c>)
 80007fc:	4013      	ands	r3, r2
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	6812      	ldr	r2, [r2, #0]
 8000802:	69b9      	ldr	r1, [r7, #24]
 8000804:	430b      	orrs	r3, r1
 8000806:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	691b      	ldr	r3, [r3, #16]
 800080e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	430a      	orrs	r2, r1
 800081c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff03 	bl	800062e <LL_ADC_REG_IsConversionOngoing>
 8000828:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff10 	bl	8000654 <LL_ADC_INJ_IsConversionOngoing>
 8000834:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d16d      	bne.n	8000918 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d16a      	bne.n	8000918 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000846:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800084e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000850:	4313      	orrs	r3, r2
 8000852:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800085e:	f023 0302 	bic.w	r3, r3, #2
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	6812      	ldr	r2, [r2, #0]
 8000866:	69b9      	ldr	r1, [r7, #24]
 8000868:	430b      	orrs	r3, r1
 800086a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d017      	beq.n	80008a4 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	691a      	ldr	r2, [r3, #16]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000882:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800088c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000890:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	6911      	ldr	r1, [r2, #16]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	6812      	ldr	r2, [r2, #0]
 800089c:	430b      	orrs	r3, r1
 800089e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80008a2:	e013      	b.n	80008cc <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	691a      	ldr	r2, [r3, #16]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	6812      	ldr	r2, [r2, #0]
 80008c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80008c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d118      	bne.n	8000908 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	691b      	ldr	r3, [r3, #16]
 80008dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80008e0:	f023 0304 	bic.w	r3, r3, #4
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80008ec:	4311      	orrs	r1, r2
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80008f2:	4311      	orrs	r1, r2
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80008f8:	430a      	orrs	r2, r1
 80008fa:	431a      	orrs	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f042 0201 	orr.w	r2, r2, #1
 8000904:	611a      	str	r2, [r3, #16]
 8000906:	e007      	b.n	8000918 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	691a      	ldr	r2, [r3, #16]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f022 0201 	bic.w	r2, r2, #1
 8000916:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d10c      	bne.n	800093a <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f023 010f 	bic.w	r1, r3, #15
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6a1b      	ldr	r3, [r3, #32]
 800092e:	1e5a      	subs	r2, r3, #1
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	430a      	orrs	r2, r1
 8000936:	631a      	str	r2, [r3, #48]	; 0x30
 8000938:	e007      	b.n	800094a <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f022 020f 	bic.w	r2, r2, #15
 8000948:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800094e:	f023 0303 	bic.w	r3, r3, #3
 8000952:	f043 0201 	orr.w	r2, r3, #1
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	65da      	str	r2, [r3, #92]	; 0x5c
 800095a:	e007      	b.n	800096c <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000960:	f043 0210 	orr.w	r2, r3, #16
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000968:	2301      	movs	r3, #1
 800096a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800096c:	7ffb      	ldrb	r3, [r7, #31]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	; 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd90      	pop	{r4, r7, pc}
 8000976:	bf00      	nop
 8000978:	20000008 	.word	0x20000008
 800097c:	053e2d63 	.word	0x053e2d63
 8000980:	50000100 	.word	0x50000100
 8000984:	50000300 	.word	0x50000300
 8000988:	fff04007 	.word	0xfff04007

0800098c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b0a6      	sub	sp, #152	; 0x98
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d101      	bne.n	80009ae <HAL_ADC_ConfigChannel+0x22>
 80009aa:	2302      	movs	r3, #2
 80009ac:	e348      	b.n	8001040 <HAL_ADC_ConfigChannel+0x6b4>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2201      	movs	r2, #1
 80009b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fe37 	bl	800062e <LL_ADC_REG_IsConversionOngoing>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f040 832d 	bne.w	8001022 <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6818      	ldr	r0, [r3, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	6859      	ldr	r1, [r3, #4]
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	f7ff fd54 	bl	8000482 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fe25 	bl	800062e <LL_ADC_REG_IsConversionOngoing>
 80009e4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fe31 	bl	8000654 <LL_ADC_INJ_IsConversionOngoing>
 80009f2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80009f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f040 817b 	bne.w	8000cf6 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f040 8176 	bne.w	8000cf6 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a12:	d10f      	bne.n	8000a34 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f7ff fd58 	bl	80004d4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fd15 	bl	800045c <LL_ADC_SetSamplingTimeCommonConfig>
 8000a32:	e00e      	b.n	8000a52 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6818      	ldr	r0, [r3, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	6819      	ldr	r1, [r3, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	461a      	mov	r2, r3
 8000a42:	f7ff fd47 	bl	80004d4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fd05 	bl	800045c <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	695a      	ldr	r2, [r3, #20]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	08db      	lsrs	r3, r3, #3
 8000a5e:	f003 0303 	and.w	r3, r3, #3
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d022      	beq.n	8000aba <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6818      	ldr	r0, [r3, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	6919      	ldr	r1, [r3, #16]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a84:	f7ff fc6c 	bl	8000360 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	6919      	ldr	r1, [r3, #16]
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	461a      	mov	r2, r3
 8000a96:	f7ff fcb1 	bl	80003fc <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	6919      	ldr	r1, [r3, #16]
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	7f1b      	ldrb	r3, [r3, #28]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d102      	bne.n	8000ab0 <HAL_ADC_ConfigChannel+0x124>
 8000aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aae:	e000      	b.n	8000ab2 <HAL_ADC_ConfigChannel+0x126>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	f7ff fcba 	bl	800042c <LL_ADC_SetOffsetSaturation>
 8000ab8:	e11d      	b.n	8000cf6 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fc6f 	bl	80003a4 <LL_ADC_GetOffsetChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d10a      	bne.n	8000ae6 <HAL_ADC_ConfigChannel+0x15a>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fc64 	bl	80003a4 <LL_ADC_GetOffsetChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	0e9b      	lsrs	r3, r3, #26
 8000ae0:	f003 021f 	and.w	r2, r3, #31
 8000ae4:	e012      	b.n	8000b0c <HAL_ADC_ConfigChannel+0x180>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fc59 	bl	80003a4 <LL_ADC_GetOffsetChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000afc:	fa93 f3a3 	rbit	r3, r3
 8000b00:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b04:	fab3 f383 	clz	r3, r3
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d105      	bne.n	8000b24 <HAL_ADC_ConfigChannel+0x198>
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	0e9b      	lsrs	r3, r3, #26
 8000b1e:	f003 031f 	and.w	r3, r3, #31
 8000b22:	e00a      	b.n	8000b3a <HAL_ADC_ConfigChannel+0x1ae>
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b2c:	fa93 f3a3 	rbit	r3, r3
 8000b30:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b34:	fab3 f383 	clz	r3, r3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d106      	bne.n	8000b4c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fc40 	bl	80003cc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2101      	movs	r1, #1
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fc26 	bl	80003a4 <LL_ADC_GetOffsetChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d10a      	bne.n	8000b78 <HAL_ADC_ConfigChannel+0x1ec>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2101      	movs	r1, #1
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fc1b 	bl	80003a4 <LL_ADC_GetOffsetChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	0e9b      	lsrs	r3, r3, #26
 8000b72:	f003 021f 	and.w	r2, r3, #31
 8000b76:	e010      	b.n	8000b9a <HAL_ADC_ConfigChannel+0x20e>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fc10 	bl	80003a4 <LL_ADC_GetOffsetChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b8a:	fa93 f3a3 	rbit	r3, r3
 8000b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b92:	fab3 f383 	clz	r3, r3
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	461a      	mov	r2, r3
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d105      	bne.n	8000bb2 <HAL_ADC_ConfigChannel+0x226>
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	0e9b      	lsrs	r3, r3, #26
 8000bac:	f003 031f 	and.w	r3, r3, #31
 8000bb0:	e00a      	b.n	8000bc8 <HAL_ADC_ConfigChannel+0x23c>
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bba:	fa93 f3a3 	rbit	r3, r3
 8000bbe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000bc2:	fab3 f383 	clz	r3, r3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d106      	bne.n	8000bda <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fbf9 	bl	80003cc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2102      	movs	r1, #2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fbdf 	bl	80003a4 <LL_ADC_GetOffsetChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d10a      	bne.n	8000c06 <HAL_ADC_ConfigChannel+0x27a>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fbd4 	bl	80003a4 <LL_ADC_GetOffsetChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	0e9b      	lsrs	r3, r3, #26
 8000c00:	f003 021f 	and.w	r2, r3, #31
 8000c04:	e010      	b.n	8000c28 <HAL_ADC_ConfigChannel+0x29c>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fbc9 	bl	80003a4 <LL_ADC_GetOffsetChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c18:	fa93 f3a3 	rbit	r3, r3
 8000c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c20:	fab3 f383 	clz	r3, r3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	461a      	mov	r2, r3
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d105      	bne.n	8000c40 <HAL_ADC_ConfigChannel+0x2b4>
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	0e9b      	lsrs	r3, r3, #26
 8000c3a:	f003 031f 	and.w	r3, r3, #31
 8000c3e:	e00a      	b.n	8000c56 <HAL_ADC_ConfigChannel+0x2ca>
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c48:	fa93 f3a3 	rbit	r3, r3
 8000c4c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c50:	fab3 f383 	clz	r3, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d106      	bne.n	8000c68 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2102      	movs	r1, #2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fbb2 	bl	80003cc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2103      	movs	r1, #3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fb98 	bl	80003a4 <LL_ADC_GetOffsetChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d10a      	bne.n	8000c94 <HAL_ADC_ConfigChannel+0x308>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2103      	movs	r1, #3
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fb8d 	bl	80003a4 <LL_ADC_GetOffsetChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	0e9b      	lsrs	r3, r3, #26
 8000c8e:	f003 021f 	and.w	r2, r3, #31
 8000c92:	e010      	b.n	8000cb6 <HAL_ADC_ConfigChannel+0x32a>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2103      	movs	r1, #3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fb82 	bl	80003a4 <LL_ADC_GetOffsetChannel>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ca6:	fa93 f3a3 	rbit	r3, r3
 8000caa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cae:	fab3 f383 	clz	r3, r3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d105      	bne.n	8000cce <HAL_ADC_ConfigChannel+0x342>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	0e9b      	lsrs	r3, r3, #26
 8000cc8:	f003 031f 	and.w	r3, r3, #31
 8000ccc:	e00a      	b.n	8000ce4 <HAL_ADC_ConfigChannel+0x358>
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd6:	fa93 f3a3 	rbit	r3, r3
 8000cda:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cde:	fab3 f383 	clz	r3, r3
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d106      	bne.n	8000cf6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2200      	movs	r2, #0
 8000cee:	2103      	movs	r1, #3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fb6b 	bl	80003cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fc84 	bl	8000608 <LL_ADC_IsEnabled>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 810c 	bne.w	8000f20 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	6819      	ldr	r1, [r3, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	461a      	mov	r2, r3
 8000d16:	f7ff fc05 	bl	8000524 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	4aab      	ldr	r2, [pc, #684]	; (8000fcc <HAL_ADC_ConfigChannel+0x640>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	f040 80fd 	bne.w	8000f20 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10b      	bne.n	8000d4e <HAL_ADC_ConfigChannel+0x3c2>
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	0e9b      	lsrs	r3, r3, #26
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	f003 031f 	and.w	r3, r3, #31
 8000d42:	2b09      	cmp	r3, #9
 8000d44:	bf94      	ite	ls
 8000d46:	2301      	movls	r3, #1
 8000d48:	2300      	movhi	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	e012      	b.n	8000d74 <HAL_ADC_ConfigChannel+0x3e8>
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d56:	fa93 f3a3 	rbit	r3, r3
 8000d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d5e:	fab3 f383 	clz	r3, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	3301      	adds	r3, #1
 8000d66:	f003 031f 	and.w	r3, r3, #31
 8000d6a:	2b09      	cmp	r3, #9
 8000d6c:	bf94      	ite	ls
 8000d6e:	2301      	movls	r3, #1
 8000d70:	2300      	movhi	r3, #0
 8000d72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d064      	beq.n	8000e42 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d107      	bne.n	8000d94 <HAL_ADC_ConfigChannel+0x408>
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	0e9b      	lsrs	r3, r3, #26
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	069b      	lsls	r3, r3, #26
 8000d8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000d92:	e00e      	b.n	8000db2 <HAL_ADC_ConfigChannel+0x426>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d9c:	fa93 f3a3 	rbit	r3, r3
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da4:	fab3 f383 	clz	r3, r3
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	3301      	adds	r3, #1
 8000dac:	069b      	lsls	r3, r3, #26
 8000dae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d109      	bne.n	8000dd2 <HAL_ADC_ConfigChannel+0x446>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	0e9b      	lsrs	r3, r3, #26
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	f003 031f 	and.w	r3, r3, #31
 8000dca:	2101      	movs	r1, #1
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	e010      	b.n	8000df4 <HAL_ADC_ConfigChannel+0x468>
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dda:	fa93 f3a3 	rbit	r3, r3
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8000de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de2:	fab3 f383 	clz	r3, r3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	3301      	adds	r3, #1
 8000dea:	f003 031f 	and.w	r3, r3, #31
 8000dee:	2101      	movs	r1, #1
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	ea42 0103 	orr.w	r1, r2, r3
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d10a      	bne.n	8000e1a <HAL_ADC_ConfigChannel+0x48e>
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	0e9b      	lsrs	r3, r3, #26
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	051b      	lsls	r3, r3, #20
 8000e18:	e011      	b.n	8000e3e <HAL_ADC_ConfigChannel+0x4b2>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e22:	fa93 f3a3 	rbit	r3, r3
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	fab3 f383 	clz	r3, r3
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	3301      	adds	r3, #1
 8000e32:	f003 021f 	and.w	r2, r3, #31
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e3e:	430b      	orrs	r3, r1
 8000e40:	e069      	b.n	8000f16 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d107      	bne.n	8000e5e <HAL_ADC_ConfigChannel+0x4d2>
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	0e9b      	lsrs	r3, r3, #26
 8000e54:	3301      	adds	r3, #1
 8000e56:	069b      	lsls	r3, r3, #26
 8000e58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e5c:	e00e      	b.n	8000e7c <HAL_ADC_ConfigChannel+0x4f0>
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e64:	6a3b      	ldr	r3, [r7, #32]
 8000e66:	fa93 f3a3 	rbit	r3, r3
 8000e6a:	61fb      	str	r3, [r7, #28]
  return result;
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	fab3 f383 	clz	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	3301      	adds	r3, #1
 8000e76:	069b      	lsls	r3, r3, #26
 8000e78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d109      	bne.n	8000e9c <HAL_ADC_ConfigChannel+0x510>
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	0e9b      	lsrs	r3, r3, #26
 8000e8e:	3301      	adds	r3, #1
 8000e90:	f003 031f 	and.w	r3, r3, #31
 8000e94:	2101      	movs	r1, #1
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	e010      	b.n	8000ebe <HAL_ADC_ConfigChannel+0x532>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	617b      	str	r3, [r7, #20]
  return result;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	fab3 f383 	clz	r3, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	f003 031f 	and.w	r3, r3, #31
 8000eb8:	2101      	movs	r1, #1
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	ea42 0103 	orr.w	r1, r2, r3
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10d      	bne.n	8000eea <HAL_ADC_ConfigChannel+0x55e>
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	0e9b      	lsrs	r3, r3, #26
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f003 021f 	and.w	r2, r3, #31
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	3b1e      	subs	r3, #30
 8000ee2:	051b      	lsls	r3, r3, #20
 8000ee4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee8:	e014      	b.n	8000f14 <HAL_ADC_ConfigChannel+0x588>
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	fa93 f3a3 	rbit	r3, r3
 8000ef6:	60fb      	str	r3, [r7, #12]
  return result;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	fab3 f383 	clz	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	3301      	adds	r3, #1
 8000f02:	f003 021f 	and.w	r2, r3, #31
 8000f06:	4613      	mov	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4413      	add	r3, r2
 8000f0c:	3b1e      	subs	r3, #30
 8000f0e:	051b      	lsls	r3, r3, #20
 8000f10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f14:	430b      	orrs	r3, r1
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	6892      	ldr	r2, [r2, #8]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f7ff fada 	bl	80004d4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_ADC_ConfigChannel+0x644>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 8083 	beq.w	8001034 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f2e:	4829      	ldr	r0, [pc, #164]	; (8000fd4 <HAL_ADC_ConfigChannel+0x648>)
 8000f30:	f7ff fa08 	bl	8000344 <LL_ADC_GetCommonPathInternalCh>
 8000f34:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a26      	ldr	r2, [pc, #152]	; (8000fd8 <HAL_ADC_ConfigChannel+0x64c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d004      	beq.n	8000f4c <HAL_ADC_ConfigChannel+0x5c0>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a25      	ldr	r2, [pc, #148]	; (8000fdc <HAL_ADC_ConfigChannel+0x650>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d126      	bne.n	8000f9a <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d120      	bne.n	8000f9a <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f60:	d168      	bne.n	8001034 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000f62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4819      	ldr	r0, [pc, #100]	; (8000fd4 <HAL_ADC_ConfigChannel+0x648>)
 8000f6e:	f7ff f9d6 	bl	800031e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_ADC_ConfigChannel+0x654>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	099b      	lsrs	r3, r3, #6
 8000f78:	4a1a      	ldr	r2, [pc, #104]	; (8000fe4 <HAL_ADC_ConfigChannel+0x658>)
 8000f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7e:	099a      	lsrs	r2, r3, #6
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8000f8a:	e002      	b.n	8000f92 <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f9      	bne.n	8000f8c <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000f98:	e04c      	b.n	8001034 <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <HAL_ADC_ConfigChannel+0x65c>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d125      	bne.n	8000ff0 <HAL_ADC_ConfigChannel+0x664>
 8000fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d11f      	bne.n	8000ff0 <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <HAL_ADC_ConfigChannel+0x660>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d03c      	beq.n	8001034 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000fba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <HAL_ADC_ConfigChannel+0x648>)
 8000fc6:	f7ff f9aa 	bl	800031e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000fca:	e033      	b.n	8001034 <HAL_ADC_ConfigChannel+0x6a8>
 8000fcc:	407f0000 	.word	0x407f0000
 8000fd0:	80080000 	.word	0x80080000
 8000fd4:	50000300 	.word	0x50000300
 8000fd8:	c3210000 	.word	0xc3210000
 8000fdc:	90c00010 	.word	0x90c00010
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	053e2d63 	.word	0x053e2d63
 8000fe8:	c7520000 	.word	0xc7520000
 8000fec:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <HAL_ADC_ConfigChannel+0x6bc>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d11c      	bne.n	8001034 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000ffa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d116      	bne.n	8001034 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_ADC_ConfigChannel+0x6c0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d011      	beq.n	8001034 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001010:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001014:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001018:	4619      	mov	r1, r3
 800101a:	480d      	ldr	r0, [pc, #52]	; (8001050 <HAL_ADC_ConfigChannel+0x6c4>)
 800101c:	f7ff f97f 	bl	800031e <LL_ADC_SetCommonPathInternalCh>
 8001020:	e008      	b.n	8001034 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001026:	f043 0220 	orr.w	r2, r3, #32
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800103c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001040:	4618      	mov	r0, r3
 8001042:	3798      	adds	r7, #152	; 0x98
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	cb840000 	.word	0xcb840000
 800104c:	50000100 	.word	0x50000100
 8001050:	50000300 	.word	0x50000300

08001054 <LL_ADC_IsEnabled>:
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b01      	cmp	r3, #1
 8001066:	d101      	bne.n	800106c <LL_ADC_IsEnabled+0x18>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <LL_ADC_IsEnabled+0x1a>
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_ADC_REG_IsConversionOngoing>:
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	2b04      	cmp	r3, #4
 800108c:	d101      	bne.n	8001092 <LL_ADC_REG_IsConversionOngoing+0x18>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b0a1      	sub	sp, #132	; 0x84
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d101      	bne.n	80010be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e087      	b.n	80011ce <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010ce:	d102      	bne.n	80010d6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80010d0:	4b41      	ldr	r3, [pc, #260]	; (80011d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	e001      	b.n	80010da <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10b      	bne.n	80010f8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e4:	f043 0220 	orr.w	r2, r3, #32
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e06a      	b.n	80011ce <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ffbd 	bl	800107a <LL_ADC_REG_IsConversionOngoing>
 8001100:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ffb7 	bl	800107a <LL_ADC_REG_IsConversionOngoing>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d14c      	bne.n	80011ac <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001112:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001114:	2b00      	cmp	r3, #0
 8001116:	d149      	bne.n	80011ac <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001118:	4b30      	ldr	r3, [pc, #192]	; (80011dc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800111a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d028      	beq.n	8001176 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	6859      	ldr	r1, [r3, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001136:	035b      	lsls	r3, r3, #13
 8001138:	430b      	orrs	r3, r1
 800113a:	431a      	orrs	r2, r3
 800113c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800113e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001140:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001144:	f7ff ff86 	bl	8001054 <LL_ADC_IsEnabled>
 8001148:	4604      	mov	r4, r0
 800114a:	4823      	ldr	r0, [pc, #140]	; (80011d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800114c:	f7ff ff82 	bl	8001054 <LL_ADC_IsEnabled>
 8001150:	4603      	mov	r3, r0
 8001152:	4323      	orrs	r3, r4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d133      	bne.n	80011c0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001160:	f023 030f 	bic.w	r3, r3, #15
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	6811      	ldr	r1, [r2, #0]
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	6892      	ldr	r2, [r2, #8]
 800116c:	430a      	orrs	r2, r1
 800116e:	431a      	orrs	r2, r3
 8001170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001172:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001174:	e024      	b.n	80011c0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800117e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001180:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001182:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001186:	f7ff ff65 	bl	8001054 <LL_ADC_IsEnabled>
 800118a:	4604      	mov	r4, r0
 800118c:	4812      	ldr	r0, [pc, #72]	; (80011d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800118e:	f7ff ff61 	bl	8001054 <LL_ADC_IsEnabled>
 8001192:	4603      	mov	r3, r0
 8001194:	4323      	orrs	r3, r4
 8001196:	2b00      	cmp	r3, #0
 8001198:	d112      	bne.n	80011c0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800119a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80011a2:	f023 030f 	bic.w	r3, r3, #15
 80011a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80011a8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80011aa:	e009      	b.n	80011c0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b0:	f043 0220 	orr.w	r2, r3, #32
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80011be:	e000      	b.n	80011c2 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80011c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80011ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3784      	adds	r7, #132	; 0x84
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}
 80011d6:	bf00      	nop
 80011d8:	50000100 	.word	0x50000100
 80011dc:	50000300 	.word	0x50000300

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4907      	ldr	r1, [pc, #28]	; (800127c <__NVIC_EnableIRQ+0x38>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff8e 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff29 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff40 	bl	8001228 <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff90 	bl	80012d4 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5f 	bl	8001280 <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff33 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ffa4 	bl	800133c <SysTick_Config>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e08d      	b.n	800152e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	4b47      	ldr	r3, [pc, #284]	; (8001538 <HAL_DMA_Init+0x138>)
 800141a:	429a      	cmp	r2, r3
 800141c:	d80f      	bhi.n	800143e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	4b45      	ldr	r3, [pc, #276]	; (800153c <HAL_DMA_Init+0x13c>)
 8001426:	4413      	add	r3, r2
 8001428:	4a45      	ldr	r2, [pc, #276]	; (8001540 <HAL_DMA_Init+0x140>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	009a      	lsls	r2, r3, #2
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a42      	ldr	r2, [pc, #264]	; (8001544 <HAL_DMA_Init+0x144>)
 800143a:	641a      	str	r2, [r3, #64]	; 0x40
 800143c:	e00e      	b.n	800145c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	4b40      	ldr	r3, [pc, #256]	; (8001548 <HAL_DMA_Init+0x148>)
 8001446:	4413      	add	r3, r2
 8001448:	4a3d      	ldr	r2, [pc, #244]	; (8001540 <HAL_DMA_Init+0x140>)
 800144a:	fba2 2303 	umull	r2, r3, r2, r3
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	009a      	lsls	r2, r3, #2
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a3c      	ldr	r2, [pc, #240]	; (800154c <HAL_DMA_Init+0x14c>)
 800145a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001476:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800148c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f8fe 	bl	80016b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014bc:	d102      	bne.n	80014c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d010      	beq.n	8001504 <HAL_DMA_Init+0x104>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d80c      	bhi.n	8001504 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f91e 	bl	800172c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	e008      	b.n	8001516 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40020407 	.word	0x40020407
 800153c:	bffdfff8 	.word	0xbffdfff8
 8001540:	cccccccd 	.word	0xcccccccd
 8001544:	40020000 	.word	0x40020000
 8001548:	bffdfbf8 	.word	0xbffdfbf8
 800154c:	40020400 	.word	0x40020400

08001550 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156c:	f003 031f 	and.w	r3, r3, #31
 8001570:	2204      	movs	r2, #4
 8001572:	409a      	lsls	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d026      	beq.n	80015ca <HAL_DMA_IRQHandler+0x7a>
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b00      	cmp	r3, #0
 8001584:	d021      	beq.n	80015ca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0320 	and.w	r3, r3, #32
 8001590:	2b00      	cmp	r3, #0
 8001592:	d107      	bne.n	80015a4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0204 	bic.w	r2, r2, #4
 80015a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	2104      	movs	r1, #4
 80015b2:	fa01 f202 	lsl.w	r2, r1, r2
 80015b6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d071      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80015c8:	e06c      	b.n	80016a4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	2202      	movs	r2, #2
 80015d4:	409a      	lsls	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d02e      	beq.n	800163c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d029      	beq.n	800163c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0320 	and.w	r3, r3, #32
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10b      	bne.n	800160e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 020a 	bic.w	r2, r2, #10
 8001604:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f003 021f 	and.w	r2, r3, #31
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	2102      	movs	r1, #2
 800161c:	fa01 f202 	lsl.w	r2, r1, r2
 8001620:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162e:	2b00      	cmp	r3, #0
 8001630:	d038      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800163a:	e033      	b.n	80016a4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001640:	f003 031f 	and.w	r3, r3, #31
 8001644:	2208      	movs	r2, #8
 8001646:	409a      	lsls	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d02a      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d025      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 020e 	bic.w	r2, r2, #14
 8001668:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f003 021f 	and.w	r2, r3, #31
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	2101      	movs	r1, #1
 8001678:	fa01 f202 	lsl.w	r2, r1, r2
 800167c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
}
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d802      	bhi.n	80016ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e001      	b.n	80016ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80016cc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	3b08      	subs	r3, #8
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	009a      	lsls	r2, r3, #2
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4413      	add	r3, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80016fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 031f 	and.w	r3, r3, #31
 8001702:	2201      	movs	r2, #1
 8001704:	409a      	lsls	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	651a      	str	r2, [r3, #80]	; 0x50
}
 800170a:	bf00      	nop
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40020407 	.word	0x40020407
 800171c:	40020800 	.word	0x40020800
 8001720:	40020820 	.word	0x40020820
 8001724:	cccccccd 	.word	0xcccccccd
 8001728:	40020880 	.word	0x40020880

0800172c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	461a      	mov	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a08      	ldr	r2, [pc, #32]	; (8001770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800174e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3b01      	subs	r3, #1
 8001754:	f003 031f 	and.w	r3, r3, #31
 8001758:	2201      	movs	r2, #1
 800175a:	409a      	lsls	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	1000823f 	.word	0x1000823f
 8001770:	40020940 	.word	0x40020940

08001774 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e147      	b.n	8001a16 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d106      	bne.n	80017a0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f002 f80c 	bl	80037b8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	699a      	ldr	r2, [r3, #24]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0210 	bic.w	r2, r2, #16
 80017ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b0:	f7fe fd96 	bl	80002e0 <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80017b6:	e012      	b.n	80017de <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80017b8:	f7fe fd92 	bl	80002e0 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b0a      	cmp	r3, #10
 80017c4:	d90b      	bls.n	80017de <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	f043 0201 	orr.w	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2203      	movs	r2, #3
 80017d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e11b      	b.n	8001a16 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d0e5      	beq.n	80017b8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017fc:	f7fe fd70 	bl	80002e0 <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001802:	e012      	b.n	800182a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001804:	f7fe fd6c 	bl	80002e0 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b0a      	cmp	r3, #10
 8001810:	d90b      	bls.n	800182a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001816:	f043 0201 	orr.w	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2203      	movs	r2, #3
 8001822:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0f5      	b.n	8001a16 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0e5      	beq.n	8001804 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	699a      	ldr	r2, [r3, #24]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0202 	orr.w	r2, r2, #2
 8001846:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a74      	ldr	r2, [pc, #464]	; (8001a20 <HAL_FDCAN_Init+0x2ac>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d103      	bne.n	800185a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001852:	4a74      	ldr	r2, [pc, #464]	; (8001a24 <HAL_FDCAN_Init+0x2b0>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	7c1b      	ldrb	r3, [r3, #16]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d108      	bne.n	8001874 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699a      	ldr	r2, [r3, #24]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001870:	619a      	str	r2, [r3, #24]
 8001872:	e007      	b.n	8001884 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699a      	ldr	r2, [r3, #24]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001882:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7c5b      	ldrb	r3, [r3, #17]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d108      	bne.n	800189e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800189a:	619a      	str	r2, [r3, #24]
 800189c:	e007      	b.n	80018ae <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	699a      	ldr	r2, [r3, #24]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	7c9b      	ldrb	r3, [r3, #18]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d108      	bne.n	80018c8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699a      	ldr	r2, [r3, #24]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018c4:	619a      	str	r2, [r3, #24]
 80018c6:	e007      	b.n	80018d8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80018d6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699a      	ldr	r2, [r3, #24]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80018fc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0210 	bic.w	r2, r2, #16
 800190c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d108      	bne.n	8001928 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699a      	ldr	r2, [r3, #24]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0204 	orr.w	r2, r2, #4
 8001924:	619a      	str	r2, [r3, #24]
 8001926:	e02c      	b.n	8001982 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d028      	beq.n	8001982 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d01c      	beq.n	8001972 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001946:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0210 	orr.w	r2, r2, #16
 8001956:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d110      	bne.n	8001982 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699a      	ldr	r2, [r3, #24]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0220 	orr.w	r2, r2, #32
 800196e:	619a      	str	r2, [r3, #24]
 8001970:	e007      	b.n	8001982 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699a      	ldr	r2, [r3, #24]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0220 	orr.w	r2, r2, #32
 8001980:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	3b01      	subs	r3, #1
 8001988:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	3b01      	subs	r3, #1
 8001990:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001992:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800199a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019aa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019ac:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019b6:	d115      	bne.n	80019e4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	3b01      	subs	r3, #1
 80019c4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019c6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	3b01      	subs	r3, #1
 80019ce:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019d0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	3b01      	subs	r3, #1
 80019da:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019e0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019e2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f9c2 	bl	8001d84 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40006400 	.word	0x40006400
 8001a24:	40006500 	.word	0x40006500

08001a28 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a36:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a44:	4013      	ands	r3, r2
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5a:	6a3a      	ldr	r2, [r7, #32]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a6a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a7e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001a82:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a96:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a9a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2240      	movs	r2, #64	; 0x40
 8001aca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f939 	bl	8001d44 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d01b      	beq.n	8001b18 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d014      	beq.n	8001b18 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001af6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b0e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001b10:	6939      	ldr	r1, [r7, #16]
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f8f7 	bl	8001d06 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b24:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001b26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f8b6 	bl	8001c9a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6a3a      	ldr	r2, [r7, #32]
 8001b3a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001b3c:	6a39      	ldr	r1, [r7, #32]
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f8b6 	bl	8001cb0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001b52:	69f9      	ldr	r1, [r7, #28]
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f8b6 	bl	8001cc6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00e      	beq.n	8001b86 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f8ab 	bl	8001cdc <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d01a      	beq.n	8001bca <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d013      	beq.n	8001bca <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001baa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2280      	movs	r2, #128	; 0x80
 8001bc0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001bc2:	68f9      	ldr	r1, [r7, #12]
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f893 	bl	8001cf0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00e      	beq.n	8001bf6 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f893 	bl	8001d1c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00e      	beq.n	8001c22 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c1a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f887 	bl	8001d30 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d011      	beq.n	8001c54 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00a      	beq.n	8001c54 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d007      	beq.n	8001c6a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001c62:	6979      	ldr	r1, [r7, #20]
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f881 	bl	8001d6c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d009      	beq.n	8001c84 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f863 	bl	8001d58 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001c92:	bf00      	nop
 8001c94:	3728      	adds	r7, #40	; 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001d8c:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001d8e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d9e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da6:	041a      	lsls	r2, r3, #16
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dc4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dcc:	061a      	lsls	r2, r3, #24
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	e005      	b.n	8001e12 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d3f3      	bcc.n	8001e06 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	4000a400 	.word	0x4000a400

08001e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e3e:	e15a      	b.n	80020f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2101      	movs	r1, #1
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 814c 	beq.w	80020f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x38>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b12      	cmp	r3, #18
 8001e66:	d123      	bne.n	8001eb0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	08da      	lsrs	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3208      	adds	r2, #8
 8001e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	08da      	lsrs	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3208      	adds	r2, #8
 8001eaa:	6939      	ldr	r1, [r7, #16]
 8001eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0203 	and.w	r2, r3, #3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d00b      	beq.n	8001f04 <HAL_GPIO_Init+0xd4>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d007      	beq.n	8001f04 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ef8:	2b11      	cmp	r3, #17
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b12      	cmp	r3, #18
 8001f02:	d130      	bne.n	8001f66 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	f003 0201 	and.w	r2, r3, #1
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	2203      	movs	r2, #3
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80a6 	beq.w	80020f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa4:	4b5b      	ldr	r3, [pc, #364]	; (8002114 <HAL_GPIO_Init+0x2e4>)
 8001fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa8:	4a5a      	ldr	r2, [pc, #360]	; (8002114 <HAL_GPIO_Init+0x2e4>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6613      	str	r3, [r2, #96]	; 0x60
 8001fb0:	4b58      	ldr	r3, [pc, #352]	; (8002114 <HAL_GPIO_Init+0x2e4>)
 8001fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fbc:	4a56      	ldr	r2, [pc, #344]	; (8002118 <HAL_GPIO_Init+0x2e8>)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	220f      	movs	r2, #15
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fe6:	d01f      	beq.n	8002028 <HAL_GPIO_Init+0x1f8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a4c      	ldr	r2, [pc, #304]	; (800211c <HAL_GPIO_Init+0x2ec>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d019      	beq.n	8002024 <HAL_GPIO_Init+0x1f4>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a4b      	ldr	r2, [pc, #300]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d013      	beq.n	8002020 <HAL_GPIO_Init+0x1f0>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a4a      	ldr	r2, [pc, #296]	; (8002124 <HAL_GPIO_Init+0x2f4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00d      	beq.n	800201c <HAL_GPIO_Init+0x1ec>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a49      	ldr	r2, [pc, #292]	; (8002128 <HAL_GPIO_Init+0x2f8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d007      	beq.n	8002018 <HAL_GPIO_Init+0x1e8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a48      	ldr	r2, [pc, #288]	; (800212c <HAL_GPIO_Init+0x2fc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_GPIO_Init+0x1e4>
 8002010:	2305      	movs	r3, #5
 8002012:	e00a      	b.n	800202a <HAL_GPIO_Init+0x1fa>
 8002014:	2306      	movs	r3, #6
 8002016:	e008      	b.n	800202a <HAL_GPIO_Init+0x1fa>
 8002018:	2304      	movs	r3, #4
 800201a:	e006      	b.n	800202a <HAL_GPIO_Init+0x1fa>
 800201c:	2303      	movs	r3, #3
 800201e:	e004      	b.n	800202a <HAL_GPIO_Init+0x1fa>
 8002020:	2302      	movs	r3, #2
 8002022:	e002      	b.n	800202a <HAL_GPIO_Init+0x1fa>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_GPIO_Init+0x1fa>
 8002028:	2300      	movs	r3, #0
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	f002 0203 	and.w	r2, r2, #3
 8002030:	0092      	lsls	r2, r2, #2
 8002032:	4093      	lsls	r3, r2
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800203a:	4937      	ldr	r1, [pc, #220]	; (8002118 <HAL_GPIO_Init+0x2e8>)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002048:	4b39      	ldr	r3, [pc, #228]	; (8002130 <HAL_GPIO_Init+0x300>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800206c:	4a30      	ldr	r2, [pc, #192]	; (8002130 <HAL_GPIO_Init+0x300>)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002072:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <HAL_GPIO_Init+0x300>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002096:	4a26      	ldr	r2, [pc, #152]	; (8002130 <HAL_GPIO_Init+0x300>)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800209c:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_GPIO_Init+0x300>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020c0:	4a1b      	ldr	r2, [pc, #108]	; (8002130 <HAL_GPIO_Init+0x300>)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020c6:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <HAL_GPIO_Init+0x300>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ea:	4a11      	ldr	r2, [pc, #68]	; (8002130 <HAL_GPIO_Init+0x300>)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	3301      	adds	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	f47f ae9d 	bne.w	8001e40 <HAL_GPIO_Init+0x10>
  }
}
 8002106:	bf00      	nop
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	40010000 	.word	0x40010000
 800211c:	48000400 	.word	0x48000400
 8002120:	48000800 	.word	0x48000800
 8002124:	48000c00 	.word	0x48000c00
 8002128:	48001000 	.word	0x48001000
 800212c:	48001400 	.word	0x48001400
 8002130:	40010400 	.word	0x40010400

08002134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	887b      	ldrh	r3, [r7, #2]
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e001      	b.n	8002156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002156:	7bfb      	ldrb	r3, [r7, #15]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
 8002170:	4613      	mov	r3, r2
 8002172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002174:	787b      	ldrb	r3, [r7, #1]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002180:	e002      	b.n	8002188 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002182:	887a      	ldrh	r2, [r7, #2]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d141      	bne.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021a2:	4b4b      	ldr	r3, [pc, #300]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ae:	d131      	bne.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021b0:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021b6:	4a46      	ldr	r2, [pc, #280]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c0:	4b43      	ldr	r3, [pc, #268]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021c8:	4a41      	ldr	r2, [pc, #260]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021d0:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2232      	movs	r2, #50	; 0x32
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	4a3f      	ldr	r2, [pc, #252]	; (80022d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	0c9b      	lsrs	r3, r3, #18
 80021e2:	3301      	adds	r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e6:	e002      	b.n	80021ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ee:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fa:	d102      	bne.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f2      	bne.n	80021e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002202:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220e:	d158      	bne.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e057      	b.n	80022c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002214:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800221a:	4a2d      	ldr	r2, [pc, #180]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002220:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002224:	e04d      	b.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800222c:	d141      	bne.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800222e:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223a:	d131      	bne.n	80022a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002242:	4a23      	ldr	r2, [pc, #140]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002254:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800225a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2232      	movs	r2, #50	; 0x32
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	0c9b      	lsrs	r3, r3, #18
 800226e:	3301      	adds	r3, #1
 8002270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002272:	e002      	b.n	800227a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3b01      	subs	r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002286:	d102      	bne.n	800228e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f2      	bne.n	8002274 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229a:	d112      	bne.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e011      	b.n	80022c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022b0:	e007      	b.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022ba:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40007000 	.word	0x40007000
 80022d4:	20000008 	.word	0x20000008
 80022d8:	431bde83 	.word	0x431bde83

080022dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e308      	b.n	8002900 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d075      	beq.n	80023e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022fa:	4ba3      	ldr	r3, [pc, #652]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002304:	4ba0      	ldr	r3, [pc, #640]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2b0c      	cmp	r3, #12
 8002312:	d102      	bne.n	800231a <HAL_RCC_OscConfig+0x3e>
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d002      	beq.n	8002320 <HAL_RCC_OscConfig+0x44>
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b08      	cmp	r3, #8
 800231e:	d10b      	bne.n	8002338 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002320:	4b99      	ldr	r3, [pc, #612]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d05b      	beq.n	80023e4 <HAL_RCC_OscConfig+0x108>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d157      	bne.n	80023e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e2e3      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002340:	d106      	bne.n	8002350 <HAL_RCC_OscConfig+0x74>
 8002342:	4b91      	ldr	r3, [pc, #580]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a90      	ldr	r2, [pc, #576]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e01d      	b.n	800238c <HAL_RCC_OscConfig+0xb0>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0x98>
 800235a:	4b8b      	ldr	r3, [pc, #556]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a8a      	ldr	r2, [pc, #552]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	4b88      	ldr	r3, [pc, #544]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a87      	ldr	r2, [pc, #540]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e00b      	b.n	800238c <HAL_RCC_OscConfig+0xb0>
 8002374:	4b84      	ldr	r3, [pc, #528]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a83      	ldr	r2, [pc, #524]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 800237a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	4b81      	ldr	r3, [pc, #516]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a80      	ldr	r2, [pc, #512]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d013      	beq.n	80023bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fd ffa4 	bl	80002e0 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800239c:	f7fd ffa0 	bl	80002e0 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b64      	cmp	r3, #100	; 0x64
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e2a8      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ae:	4b76      	ldr	r3, [pc, #472]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0xc0>
 80023ba:	e014      	b.n	80023e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7fd ff90 	bl	80002e0 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c4:	f7fd ff8c 	bl	80002e0 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	; 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e294      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023d6:	4b6c      	ldr	r3, [pc, #432]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0xe8>
 80023e2:	e000      	b.n	80023e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d075      	beq.n	80024de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f2:	4b65      	ldr	r3, [pc, #404]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023fc:	4b62      	ldr	r3, [pc, #392]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2b0c      	cmp	r3, #12
 800240a:	d102      	bne.n	8002412 <HAL_RCC_OscConfig+0x136>
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d002      	beq.n	8002418 <HAL_RCC_OscConfig+0x13c>
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b04      	cmp	r3, #4
 8002416:	d11f      	bne.n	8002458 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002418:	4b5b      	ldr	r3, [pc, #364]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_OscConfig+0x154>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e267      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002430:	4b55      	ldr	r3, [pc, #340]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	061b      	lsls	r3, r3, #24
 800243e:	4952      	ldr	r1, [pc, #328]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002444:	4b51      	ldr	r3, [pc, #324]	; (800258c <HAL_RCC_OscConfig+0x2b0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fd fefd 	bl	8000248 <HAL_InitTick>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d043      	beq.n	80024dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e253      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d023      	beq.n	80024a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002460:	4b49      	ldr	r3, [pc, #292]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a48      	ldr	r2, [pc, #288]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7fd ff38 	bl	80002e0 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002474:	f7fd ff34 	bl	80002e0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e23c      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002486:	4b40      	ldr	r3, [pc, #256]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	061b      	lsls	r3, r3, #24
 80024a0:	4939      	ldr	r1, [pc, #228]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
 80024a6:	e01a      	b.n	80024de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a8:	4b37      	ldr	r3, [pc, #220]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a36      	ldr	r2, [pc, #216]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 80024ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fd ff14 	bl	80002e0 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024bc:	f7fd ff10 	bl	80002e0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e218      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024ce:	4b2e      	ldr	r3, [pc, #184]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x1e0>
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d03c      	beq.n	8002564 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d01c      	beq.n	800252c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f2:	4b25      	ldr	r3, [pc, #148]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f8:	4a23      	ldr	r2, [pc, #140]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002502:	f7fd feed 	bl	80002e0 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250a:	f7fd fee9 	bl	80002e0 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e1f1      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 800251e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0ef      	beq.n	800250a <HAL_RCC_OscConfig+0x22e>
 800252a:	e01b      	b.n	8002564 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252c:	4b16      	ldr	r3, [pc, #88]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 800252e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002532:	4a15      	ldr	r2, [pc, #84]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253c:	f7fd fed0 	bl	80002e0 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002544:	f7fd fecc 	bl	80002e0 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e1d4      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1ef      	bne.n	8002544 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80ab 	beq.w	80026c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_RCC_OscConfig+0x2b4>
 8002582:	2301      	movs	r3, #1
 8002584:	e005      	b.n	8002592 <HAL_RCC_OscConfig+0x2b6>
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	20000000 	.word	0x20000000
 8002590:	2300      	movs	r3, #0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00d      	beq.n	80025b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	4baf      	ldr	r3, [pc, #700]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	4aae      	ldr	r2, [pc, #696]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a0:	6593      	str	r3, [r2, #88]	; 0x58
 80025a2:	4bac      	ldr	r3, [pc, #688]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025ae:	2301      	movs	r3, #1
 80025b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b2:	4ba9      	ldr	r3, [pc, #676]	; (8002858 <HAL_RCC_OscConfig+0x57c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d118      	bne.n	80025f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025be:	4ba6      	ldr	r3, [pc, #664]	; (8002858 <HAL_RCC_OscConfig+0x57c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4aa5      	ldr	r2, [pc, #660]	; (8002858 <HAL_RCC_OscConfig+0x57c>)
 80025c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ca:	f7fd fe89 	bl	80002e0 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d2:	f7fd fe85 	bl	80002e0 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e18d      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e4:	4b9c      	ldr	r3, [pc, #624]	; (8002858 <HAL_RCC_OscConfig+0x57c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d108      	bne.n	800260a <HAL_RCC_OscConfig+0x32e>
 80025f8:	4b96      	ldr	r3, [pc, #600]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	4a95      	ldr	r2, [pc, #596]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002608:	e024      	b.n	8002654 <HAL_RCC_OscConfig+0x378>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b05      	cmp	r3, #5
 8002610:	d110      	bne.n	8002634 <HAL_RCC_OscConfig+0x358>
 8002612:	4b90      	ldr	r3, [pc, #576]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002618:	4a8e      	ldr	r2, [pc, #568]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 800261a:	f043 0304 	orr.w	r3, r3, #4
 800261e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002622:	4b8c      	ldr	r3, [pc, #560]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002628:	4a8a      	ldr	r2, [pc, #552]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002632:	e00f      	b.n	8002654 <HAL_RCC_OscConfig+0x378>
 8002634:	4b87      	ldr	r3, [pc, #540]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	4a86      	ldr	r2, [pc, #536]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002644:	4b83      	ldr	r3, [pc, #524]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	4a82      	ldr	r2, [pc, #520]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 800264c:	f023 0304 	bic.w	r3, r3, #4
 8002650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d016      	beq.n	800268a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265c:	f7fd fe40 	bl	80002e0 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002662:	e00a      	b.n	800267a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002664:	f7fd fe3c 	bl	80002e0 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e142      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800267a:	4b76      	ldr	r3, [pc, #472]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ed      	beq.n	8002664 <HAL_RCC_OscConfig+0x388>
 8002688:	e015      	b.n	80026b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268a:	f7fd fe29 	bl	80002e0 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002690:	e00a      	b.n	80026a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7fd fe25 	bl	80002e0 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e12b      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026a8:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1ed      	bne.n	8002692 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026b6:	7ffb      	ldrb	r3, [r7, #31]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d105      	bne.n	80026c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026bc:	4b65      	ldr	r3, [pc, #404]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	4a64      	ldr	r2, [pc, #400]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 80026c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d03c      	beq.n	800274e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01c      	beq.n	8002716 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026dc:	4b5d      	ldr	r3, [pc, #372]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 80026de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026e2:	4a5c      	ldr	r2, [pc, #368]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7fd fdf8 	bl	80002e0 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026f4:	f7fd fdf4 	bl	80002e0 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e0fc      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002706:	4b53      	ldr	r3, [pc, #332]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002708:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0ef      	beq.n	80026f4 <HAL_RCC_OscConfig+0x418>
 8002714:	e01b      	b.n	800274e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002716:	4b4f      	ldr	r3, [pc, #316]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800271c:	4a4d      	ldr	r2, [pc, #308]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002726:	f7fd fddb 	bl	80002e0 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800272e:	f7fd fdd7 	bl	80002e0 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0df      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002740:	4b44      	ldr	r3, [pc, #272]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1ef      	bne.n	800272e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80d3 	beq.w	80028fe <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002758:	4b3e      	ldr	r3, [pc, #248]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	2b0c      	cmp	r3, #12
 8002762:	f000 808d 	beq.w	8002880 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d15a      	bne.n	8002824 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	4b39      	ldr	r3, [pc, #228]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a38      	ldr	r2, [pc, #224]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002774:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277a:	f7fd fdb1 	bl	80002e0 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002782:	f7fd fdad 	bl	80002e0 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0b5      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002794:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f0      	bne.n	8002782 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a0:	4b2c      	ldr	r3, [pc, #176]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	4b2d      	ldr	r3, [pc, #180]	; (800285c <HAL_RCC_OscConfig+0x580>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6a11      	ldr	r1, [r2, #32]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027b0:	3a01      	subs	r2, #1
 80027b2:	0112      	lsls	r2, r2, #4
 80027b4:	4311      	orrs	r1, r2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80027ba:	0212      	lsls	r2, r2, #8
 80027bc:	4311      	orrs	r1, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027c2:	0852      	lsrs	r2, r2, #1
 80027c4:	3a01      	subs	r2, #1
 80027c6:	0552      	lsls	r2, r2, #21
 80027c8:	4311      	orrs	r1, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027ce:	0852      	lsrs	r2, r2, #1
 80027d0:	3a01      	subs	r2, #1
 80027d2:	0652      	lsls	r2, r2, #25
 80027d4:	4311      	orrs	r1, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027da:	06d2      	lsls	r2, r2, #27
 80027dc:	430a      	orrs	r2, r1
 80027de:	491d      	ldr	r1, [pc, #116]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1a      	ldr	r2, [pc, #104]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 80027ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a17      	ldr	r2, [pc, #92]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 80027f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7fd fd70 	bl	80002e0 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002804:	f7fd fd6c 	bl	80002e0 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e074      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002816:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x528>
 8002822:	e06c      	b.n	80028fe <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 800282a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800282e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a07      	ldr	r2, [pc, #28]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002836:	f023 0303 	bic.w	r3, r3, #3
 800283a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_RCC_OscConfig+0x578>)
 8002842:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fd fd48 	bl	80002e0 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002852:	e00e      	b.n	8002872 <HAL_RCC_OscConfig+0x596>
 8002854:	40021000 	.word	0x40021000
 8002858:	40007000 	.word	0x40007000
 800285c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002860:	f7fd fd3e 	bl	80002e0 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e046      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002872:	4b25      	ldr	r3, [pc, #148]	; (8002908 <HAL_RCC_OscConfig+0x62c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x584>
 800287e:	e03e      	b.n	80028fe <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e039      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800288c:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <HAL_RCC_OscConfig+0x62c>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 0203 	and.w	r2, r3, #3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	429a      	cmp	r2, r3
 800289e:	d12c      	bne.n	80028fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	3b01      	subs	r3, #1
 80028ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d123      	bne.n	80028fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d11b      	bne.n	80028fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d113      	bne.n	80028fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	3b01      	subs	r3, #1
 80028e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	3b01      	subs	r3, #1
 80028f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d001      	beq.n	80028fe <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3720      	adds	r7, #32
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000

0800290c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e11e      	b.n	8002b62 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002924:	4b91      	ldr	r3, [pc, #580]	; (8002b6c <HAL_RCC_ClockConfig+0x260>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d910      	bls.n	8002954 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b8e      	ldr	r3, [pc, #568]	; (8002b6c <HAL_RCC_ClockConfig+0x260>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 020f 	bic.w	r2, r3, #15
 800293a:	498c      	ldr	r1, [pc, #560]	; (8002b6c <HAL_RCC_ClockConfig+0x260>)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b8a      	ldr	r3, [pc, #552]	; (8002b6c <HAL_RCC_ClockConfig+0x260>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e106      	b.n	8002b62 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d073      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d129      	bne.n	80029bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002968:	4b81      	ldr	r3, [pc, #516]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0f4      	b.n	8002b62 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002978:	f000 f964 	bl	8002c44 <RCC_GetSysClockFreqFromPLLSource>
 800297c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4a7c      	ldr	r2, [pc, #496]	; (8002b74 <HAL_RCC_ClockConfig+0x268>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d93f      	bls.n	8002a06 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002986:	4b7a      	ldr	r3, [pc, #488]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800299a:	2b00      	cmp	r3, #0
 800299c:	d033      	beq.n	8002a06 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d12f      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029a6:	4b72      	ldr	r3, [pc, #456]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ae:	4a70      	ldr	r2, [pc, #448]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 80029b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e024      	b.n	8002a06 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d107      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c4:	4b6a      	ldr	r3, [pc, #424]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d109      	bne.n	80029e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0c6      	b.n	8002b62 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029d4:	4b66      	ldr	r3, [pc, #408]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0be      	b.n	8002b62 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80029e4:	f000 f8ce 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4a61      	ldr	r2, [pc, #388]	; (8002b74 <HAL_RCC_ClockConfig+0x268>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d909      	bls.n	8002a06 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029f2:	4b5f      	ldr	r3, [pc, #380]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029fa:	4a5d      	ldr	r2, [pc, #372]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 80029fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a00:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a06:	4b5a      	ldr	r3, [pc, #360]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f023 0203 	bic.w	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4957      	ldr	r1, [pc, #348]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a18:	f7fd fc62 	bl	80002e0 <HAL_GetTick>
 8002a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a20:	f7fd fc5e 	bl	80002e0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e095      	b.n	8002b62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	4b4e      	ldr	r3, [pc, #312]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 020c 	and.w	r2, r3, #12
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d1eb      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d023      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a60:	4b43      	ldr	r3, [pc, #268]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a42      	ldr	r2, [pc, #264]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002a66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a6a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002a78:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a80:	4a3b      	ldr	r2, [pc, #236]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002a82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a88:	4b39      	ldr	r3, [pc, #228]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4936      	ldr	r1, [pc, #216]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b80      	cmp	r3, #128	; 0x80
 8002aa0:	d105      	bne.n	8002aae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002aa2:	4b33      	ldr	r3, [pc, #204]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	4a32      	ldr	r2, [pc, #200]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002aa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aae:	4b2f      	ldr	r3, [pc, #188]	; (8002b6c <HAL_RCC_ClockConfig+0x260>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d21d      	bcs.n	8002af8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abc:	4b2b      	ldr	r3, [pc, #172]	; (8002b6c <HAL_RCC_ClockConfig+0x260>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f023 020f 	bic.w	r2, r3, #15
 8002ac4:	4929      	ldr	r1, [pc, #164]	; (8002b6c <HAL_RCC_ClockConfig+0x260>)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002acc:	f7fd fc08 	bl	80002e0 <HAL_GetTick>
 8002ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad4:	f7fd fc04 	bl	80002e0 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e03b      	b.n	8002b62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_RCC_ClockConfig+0x260>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d1ed      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b04:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4917      	ldr	r1, [pc, #92]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b22:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	490f      	ldr	r1, [pc, #60]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b36:	f000 f825 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8002b3a:	4601      	mov	r1, r0
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <HAL_RCC_ClockConfig+0x264>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	4a0c      	ldr	r2, [pc, #48]	; (8002b78 <HAL_RCC_ClockConfig+0x26c>)
 8002b48:	5cd3      	ldrb	r3, [r2, r3]
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b52:	4a0a      	ldr	r2, [pc, #40]	; (8002b7c <HAL_RCC_ClockConfig+0x270>)
 8002b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <HAL_RCC_ClockConfig+0x274>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd fb74 	bl	8000248 <HAL_InitTick>
 8002b60:	4603      	mov	r3, r0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40022000 	.word	0x40022000
 8002b70:	40021000 	.word	0x40021000
 8002b74:	04c4b400 	.word	0x04c4b400
 8002b78:	080039d8 	.word	0x080039d8
 8002b7c:	20000008 	.word	0x20000008
 8002b80:	20000000 	.word	0x20000000

08002b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b8a:	4b2c      	ldr	r3, [pc, #176]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d102      	bne.n	8002b9c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b96:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	e047      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b9c:	4b27      	ldr	r3, [pc, #156]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d102      	bne.n	8002bae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ba8:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	e03e      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002bae:	4b23      	ldr	r3, [pc, #140]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	d136      	bne.n	8002c28 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bba:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	3301      	adds	r3, #1
 8002bd0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bd8:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	4a16      	ldr	r2, [pc, #88]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be2:	68d2      	ldr	r2, [r2, #12]
 8002be4:	0a12      	lsrs	r2, r2, #8
 8002be6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	617b      	str	r3, [r7, #20]
      break;
 8002bf0:	e00c      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bf2:	4a13      	ldr	r2, [pc, #76]	; (8002c40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfa:	4a10      	ldr	r2, [pc, #64]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bfc:	68d2      	ldr	r2, [r2, #12]
 8002bfe:	0a12      	lsrs	r2, r2, #8
 8002c00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c04:	fb02 f303 	mul.w	r3, r2, r3
 8002c08:	617b      	str	r3, [r7, #20]
      break;
 8002c0a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	0e5b      	lsrs	r3, r3, #25
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	3301      	adds	r3, #1
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	e001      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c2c:	693b      	ldr	r3, [r7, #16]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	00f42400 	.word	0x00f42400

08002c44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c54:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3301      	adds	r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d10c      	bne.n	8002c82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c68:	4a17      	ldr	r2, [pc, #92]	; (8002cc8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c72:	68d2      	ldr	r2, [r2, #12]
 8002c74:	0a12      	lsrs	r2, r2, #8
 8002c76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	617b      	str	r3, [r7, #20]
    break;
 8002c80:	e00c      	b.n	8002c9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c82:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8a:	4a0e      	ldr	r2, [pc, #56]	; (8002cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c8c:	68d2      	ldr	r2, [r2, #12]
 8002c8e:	0a12      	lsrs	r2, r2, #8
 8002c90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c94:	fb02 f303 	mul.w	r3, r2, r3
 8002c98:	617b      	str	r3, [r7, #20]
    break;
 8002c9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c9c:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	0e5b      	lsrs	r3, r3, #25
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002cb6:	687b      	ldr	r3, [r7, #4]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	00f42400 	.word	0x00f42400

08002ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cd8:	2300      	movs	r3, #0
 8002cda:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8098 	beq.w	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cee:	4b43      	ldr	r3, [pc, #268]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10d      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	4b40      	ldr	r3, [pc, #256]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	4a3f      	ldr	r2, [pc, #252]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6593      	str	r3, [r2, #88]	; 0x58
 8002d06:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d12:	2301      	movs	r3, #1
 8002d14:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d16:	4b3a      	ldr	r3, [pc, #232]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a39      	ldr	r2, [pc, #228]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d22:	f7fd fadd 	bl	80002e0 <HAL_GetTick>
 8002d26:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d28:	e009      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2a:	f7fd fad9 	bl	80002e0 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d902      	bls.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	74fb      	strb	r3, [r7, #19]
        break;
 8002d3c:	e005      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d3e:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0ef      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d4a:	7cfb      	ldrb	r3, [r7, #19]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d159      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d50:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d01e      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d019      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d6c:	4b23      	ldr	r3, [pc, #140]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d78:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7e:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d88:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8e:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d98:	4a18      	ldr	r2, [pc, #96]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d016      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fd fa99 	bl	80002e0 <HAL_GetTick>
 8002dae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db0:	e00b      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fd fa95 	bl	80002e0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d902      	bls.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	74fb      	strb	r3, [r7, #19]
            break;
 8002dc8:	e006      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ec      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10b      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	4903      	ldr	r1, [pc, #12]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002df4:	e008      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002df6:	7cfb      	ldrb	r3, [r7, #19]
 8002df8:	74bb      	strb	r3, [r7, #18]
 8002dfa:	e005      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e08:	7c7b      	ldrb	r3, [r7, #17]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d105      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0e:	4ba6      	ldr	r3, [pc, #664]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	4aa5      	ldr	r2, [pc, #660]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e26:	4ba0      	ldr	r3, [pc, #640]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2c:	f023 0203 	bic.w	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	499c      	ldr	r1, [pc, #624]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e48:	4b97      	ldr	r3, [pc, #604]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	f023 020c 	bic.w	r2, r3, #12
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	4994      	ldr	r1, [pc, #592]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e6a:	4b8f      	ldr	r3, [pc, #572]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	498b      	ldr	r1, [pc, #556]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e8c:	4b86      	ldr	r3, [pc, #536]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	4983      	ldr	r1, [pc, #524]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eae:	4b7e      	ldr	r3, [pc, #504]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	497a      	ldr	r1, [pc, #488]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ed0:	4b75      	ldr	r3, [pc, #468]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	4972      	ldr	r1, [pc, #456]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ef2:	4b6d      	ldr	r3, [pc, #436]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	4969      	ldr	r1, [pc, #420]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f14:	4b64      	ldr	r3, [pc, #400]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	4961      	ldr	r1, [pc, #388]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f36:	4b5c      	ldr	r3, [pc, #368]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	4958      	ldr	r1, [pc, #352]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d015      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f58:	4b53      	ldr	r3, [pc, #332]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	4950      	ldr	r1, [pc, #320]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f76:	d105      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f78:	4b4b      	ldr	r3, [pc, #300]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a4a      	ldr	r2, [pc, #296]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d015      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f90:	4b45      	ldr	r3, [pc, #276]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	4942      	ldr	r1, [pc, #264]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fae:	d105      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb0:	4b3d      	ldr	r3, [pc, #244]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a3c      	ldr	r2, [pc, #240]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d015      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fc8:	4b37      	ldr	r3, [pc, #220]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	4934      	ldr	r1, [pc, #208]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe6:	d105      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fe8:	4b2f      	ldr	r3, [pc, #188]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4a2e      	ldr	r2, [pc, #184]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ff2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d015      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003000:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003006:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300e:	4926      	ldr	r1, [pc, #152]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800301e:	d105      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003020:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4a20      	ldr	r2, [pc, #128]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800302a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d015      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003038:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	4918      	ldr	r1, [pc, #96]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003056:	d105      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003058:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800305e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003062:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d015      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003070:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307e:	490a      	ldr	r1, [pc, #40]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800308e:	d105      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800309c:	7cbb      	ldrb	r3, [r7, #18]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000

080030ac <main>:

//global varaiables


int main(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
	HAL_Init();
 80030b0:	f7fd f8b2 	bl	8000218 <HAL_Init>

	SystemClock_Config();
 80030b4:	f000 f81a 	bl	80030ec <SystemClock_Config>

	MX_GPIO_Init();
 80030b8:	f000 fa08 	bl	80034cc <MX_GPIO_Init>
	MX_DMA_Init();
 80030bc:	f000 f9d4 	bl	8003468 <MX_DMA_Init>
	MX_ADC1_Init();
 80030c0:	f000 f87a 	bl	80031b8 <MX_ADC1_Init>
	MX_ADC2_Init();
 80030c4:	f000 f914 	bl	80032f0 <MX_ADC2_Init>
	MX_FDCAN1_Init();
 80030c8:	f000 f988 	bl	80033dc <MX_FDCAN1_Init>
	while (1)
	{
		//example commands stored here
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)); //reading pins may be wanted with interrupts at some time, and it may be wanted to debounce some digital inputs

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)); //lets setup and test all 5 inputs //then lets set it up to be configurable by flash, so we need to write flash already
 80030cc:	2120      	movs	r1, #32
 80030ce:	4806      	ldr	r0, [pc, #24]	; (80030e8 <main+0x3c>)
 80030d0:	f7ff f830 	bl	8002134 <HAL_GPIO_ReadPin>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030e0:	f7ff f840 	bl	8002164 <HAL_GPIO_WritePin>
 80030e4:	e7f2      	b.n	80030cc <main+0x20>
 80030e6:	bf00      	nop
 80030e8:	48000400 	.word	0x48000400

080030ec <SystemClock_Config>:
	}
}


void SystemClock_Config(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b0a4      	sub	sp, #144	; 0x90
 80030f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030f6:	2238      	movs	r2, #56	; 0x38
 80030f8:	2100      	movs	r1, #0
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fc58 	bl	80039b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003100:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003110:	463b      	mov	r3, r7
 8003112:	2244      	movs	r2, #68	; 0x44
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fc4a 	bl	80039b0 <memset>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800311c:	2000      	movs	r0, #0
 800311e:	f7ff f839 	bl	8002194 <HAL_PWREx_ControlVoltageScaling>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003122:	2301      	movs	r3, #1
 8003124:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003126:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800312a:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800312c:	2302      	movs	r3, #2
 800312e:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003130:	2303      	movs	r3, #3
 8003132:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003134:	2304      	movs	r3, #4
 8003136:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8003138:	2355      	movs	r3, #85	; 0x55
 800313a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800313e:	2302      	movs	r3, #2
 8003140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003144:	2302      	movs	r3, #2
 8003146:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800314a:	2302      	movs	r3, #2
 800314c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003150:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff f8c1 	bl	80022dc <HAL_RCC_OscConfig>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <SystemClock_Config+0x78>
	{
		Error_Handler();
 8003160:	f000 fa10 	bl	8003584 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8003164:	230f      	movs	r3, #15
 8003166:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003168:	2303      	movs	r3, #3
 800316a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800316c:	2300      	movs	r3, #0
 800316e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003170:	2300      	movs	r3, #0
 8003172:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003174:	2300      	movs	r3, #0
 8003176:	657b      	str	r3, [r7, #84]	; 0x54

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8003178:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800317c:	2108      	movs	r1, #8
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fbc4 	bl	800290c <HAL_RCC_ClockConfig>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <SystemClock_Config+0xa2>
	{
		Error_Handler();
 800318a:	f000 f9fb 	bl	8003584 <Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
 800318e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8003192:	603b      	str	r3, [r7, #0]
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8003194:	2300      	movs	r3, #0
 8003196:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003198:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800319c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800319e:	463b      	mov	r3, r7
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fd93 	bl	8002ccc <HAL_RCCEx_PeriphCLKConfig>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80031ac:	f000 f9ea 	bl	8003584 <Error_Handler>
	}
}
 80031b0:	bf00      	nop
 80031b2:	3790      	adds	r7, #144	; 0x90
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08c      	sub	sp, #48	; 0x30
 80031bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80031be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80031ca:	1d3b      	adds	r3, r7, #4
 80031cc:	2220      	movs	r2, #32
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fbed 	bl	80039b0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80031d6:	4b42      	ldr	r3, [pc, #264]	; (80032e0 <MX_ADC1_Init+0x128>)
 80031d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80031dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80031de:	4b40      	ldr	r3, [pc, #256]	; (80032e0 <MX_ADC1_Init+0x128>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80031e4:	4b3e      	ldr	r3, [pc, #248]	; (80032e0 <MX_ADC1_Init+0x128>)
 80031e6:	2208      	movs	r2, #8
 80031e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031ea:	4b3d      	ldr	r3, [pc, #244]	; (80032e0 <MX_ADC1_Init+0x128>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80031f0:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <MX_ADC1_Init+0x128>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80031f6:	4b3a      	ldr	r3, [pc, #232]	; (80032e0 <MX_ADC1_Init+0x128>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031fc:	4b38      	ldr	r3, [pc, #224]	; (80032e0 <MX_ADC1_Init+0x128>)
 80031fe:	2204      	movs	r2, #4
 8003200:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003202:	4b37      	ldr	r3, [pc, #220]	; (80032e0 <MX_ADC1_Init+0x128>)
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003208:	4b35      	ldr	r3, [pc, #212]	; (80032e0 <MX_ADC1_Init+0x128>)
 800320a:	2201      	movs	r2, #1
 800320c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 800320e:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <MX_ADC1_Init+0x128>)
 8003210:	2203      	movs	r2, #3
 8003212:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003214:	4b32      	ldr	r3, [pc, #200]	; (80032e0 <MX_ADC1_Init+0x128>)
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800321c:	4b30      	ldr	r3, [pc, #192]	; (80032e0 <MX_ADC1_Init+0x128>)
 800321e:	2200      	movs	r2, #0
 8003220:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003222:	4b2f      	ldr	r3, [pc, #188]	; (80032e0 <MX_ADC1_Init+0x128>)
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003228:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <MX_ADC1_Init+0x128>)
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003230:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <MX_ADC1_Init+0x128>)
 8003232:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003236:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003238:	4b29      	ldr	r3, [pc, #164]	; (80032e0 <MX_ADC1_Init+0x128>)
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003240:	4827      	ldr	r0, [pc, #156]	; (80032e0 <MX_ADC1_Init+0x128>)
 8003242:	f7fd fa1b 	bl	800067c <HAL_ADC_Init>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800324c:	f000 f99a 	bl	8003584 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8003250:	2306      	movs	r3, #6
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8003254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003258:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800325a:	2300      	movs	r3, #0
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800325e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003262:	4619      	mov	r1, r3
 8003264:	481e      	ldr	r0, [pc, #120]	; (80032e0 <MX_ADC1_Init+0x128>)
 8003266:	f7fd ff1b 	bl	80010a0 <HAL_ADCEx_MultiModeConfigChannel>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8003270:	f000 f988 	bl	8003584 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <MX_ADC1_Init+0x12c>)
 8003276:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003278:	2306      	movs	r3, #6
 800327a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800327c:	2303      	movs	r3, #3
 800327e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003280:	237f      	movs	r3, #127	; 0x7f
 8003282:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003284:	2304      	movs	r3, #4
 8003286:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800328c:	1d3b      	adds	r3, r7, #4
 800328e:	4619      	mov	r1, r3
 8003290:	4813      	ldr	r0, [pc, #76]	; (80032e0 <MX_ADC1_Init+0x128>)
 8003292:	f7fd fb7b 	bl	800098c <HAL_ADC_ConfigChannel>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800329c:	f000 f972 	bl	8003584 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80032a0:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <MX_ADC1_Init+0x130>)
 80032a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80032a4:	230c      	movs	r3, #12
 80032a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	4619      	mov	r1, r3
 80032ac:	480c      	ldr	r0, [pc, #48]	; (80032e0 <MX_ADC1_Init+0x128>)
 80032ae:	f7fd fb6d 	bl	800098c <HAL_ADC_ConfigChannel>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80032b8:	f000 f964 	bl	8003584 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <MX_ADC1_Init+0x134>)
 80032be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80032c0:	2312      	movs	r3, #18
 80032c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032c4:	1d3b      	adds	r3, r7, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	4805      	ldr	r0, [pc, #20]	; (80032e0 <MX_ADC1_Init+0x128>)
 80032ca:	f7fd fb5f 	bl	800098c <HAL_ADC_ConfigChannel>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80032d4:	f000 f956 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80032d8:	bf00      	nop
 80032da:	3730      	adds	r7, #48	; 0x30
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20000100 	.word	0x20000100
 80032e4:	04300002 	.word	0x04300002
 80032e8:	08600004 	.word	0x08600004
 80032ec:	0c900008 	.word	0x0c900008

080032f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032f6:	463b      	mov	r3, r7
 80032f8:	2220      	movs	r2, #32
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fb57 	bl	80039b0 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8003302:	4b33      	ldr	r3, [pc, #204]	; (80033d0 <MX_ADC2_Init+0xe0>)
 8003304:	4a33      	ldr	r2, [pc, #204]	; (80033d4 <MX_ADC2_Init+0xe4>)
 8003306:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003308:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <MX_ADC2_Init+0xe0>)
 800330a:	2200      	movs	r2, #0
 800330c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800330e:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <MX_ADC2_Init+0xe0>)
 8003310:	2200      	movs	r2, #0
 8003312:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003314:	4b2e      	ldr	r3, [pc, #184]	; (80033d0 <MX_ADC2_Init+0xe0>)
 8003316:	2200      	movs	r2, #0
 8003318:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800331a:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <MX_ADC2_Init+0xe0>)
 800331c:	2200      	movs	r2, #0
 800331e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003320:	4b2b      	ldr	r3, [pc, #172]	; (80033d0 <MX_ADC2_Init+0xe0>)
 8003322:	2201      	movs	r2, #1
 8003324:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003326:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <MX_ADC2_Init+0xe0>)
 8003328:	2204      	movs	r2, #4
 800332a:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800332c:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <MX_ADC2_Init+0xe0>)
 800332e:	2200      	movs	r2, #0
 8003330:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003332:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <MX_ADC2_Init+0xe0>)
 8003334:	2201      	movs	r2, #1
 8003336:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8003338:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <MX_ADC2_Init+0xe0>)
 800333a:	2203      	movs	r2, #3
 800333c:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800333e:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <MX_ADC2_Init+0xe0>)
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003346:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <MX_ADC2_Init+0xe0>)
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800334e:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <MX_ADC2_Init+0xe0>)
 8003350:	2200      	movs	r2, #0
 8003352:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8003354:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <MX_ADC2_Init+0xe0>)
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800335c:	481c      	ldr	r0, [pc, #112]	; (80033d0 <MX_ADC2_Init+0xe0>)
 800335e:	f7fd f98d 	bl	800067c <HAL_ADC_Init>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_ADC2_Init+0x7c>
  {
    Error_Handler();
 8003368:	f000 f90c 	bl	8003584 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800336c:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <MX_ADC2_Init+0xe8>)
 800336e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003370:	2306      	movs	r3, #6
 8003372:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8003374:	2303      	movs	r3, #3
 8003376:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003378:	237f      	movs	r3, #127	; 0x7f
 800337a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800337c:	2304      	movs	r3, #4
 800337e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003384:	463b      	mov	r3, r7
 8003386:	4619      	mov	r1, r3
 8003388:	4811      	ldr	r0, [pc, #68]	; (80033d0 <MX_ADC2_Init+0xe0>)
 800338a:	f7fd faff 	bl	800098c <HAL_ADC_ConfigChannel>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <MX_ADC2_Init+0xa8>
  {
    Error_Handler();
 8003394:	f000 f8f6 	bl	8003584 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003398:	230c      	movs	r3, #12
 800339a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800339c:	463b      	mov	r3, r7
 800339e:	4619      	mov	r1, r3
 80033a0:	480b      	ldr	r0, [pc, #44]	; (80033d0 <MX_ADC2_Init+0xe0>)
 80033a2:	f7fd faf3 	bl	800098c <HAL_ADC_ConfigChannel>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_ADC2_Init+0xc0>
  {
    Error_Handler();
 80033ac:	f000 f8ea 	bl	8003584 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80033b0:	2312      	movs	r3, #18
 80033b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80033b4:	463b      	mov	r3, r7
 80033b6:	4619      	mov	r1, r3
 80033b8:	4805      	ldr	r0, [pc, #20]	; (80033d0 <MX_ADC2_Init+0xe0>)
 80033ba:	f7fd fae7 	bl	800098c <HAL_ADC_ConfigChannel>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_ADC2_Init+0xd8>
  {
    Error_Handler();
 80033c4:	f000 f8de 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80033c8:	bf00      	nop
 80033ca:	3720      	adds	r7, #32
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20000030 	.word	0x20000030
 80033d4:	50000100 	.word	0x50000100
 80033d8:	2a000400 	.word	0x2a000400

080033dc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan.Instance = FDCAN1;
 80033e0:	4b1f      	ldr	r3, [pc, #124]	; (8003460 <MX_FDCAN1_Init+0x84>)
 80033e2:	4a20      	ldr	r2, [pc, #128]	; (8003464 <MX_FDCAN1_Init+0x88>)
 80033e4:	601a      	str	r2, [r3, #0]
  hfdcan.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80033e6:	4b1e      	ldr	r3, [pc, #120]	; (8003460 <MX_FDCAN1_Init+0x84>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	605a      	str	r2, [r3, #4]
  hfdcan.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80033ec:	4b1c      	ldr	r3, [pc, #112]	; (8003460 <MX_FDCAN1_Init+0x84>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
  hfdcan.Init.Mode = FDCAN_MODE_NORMAL;
 80033f2:	4b1b      	ldr	r3, [pc, #108]	; (8003460 <MX_FDCAN1_Init+0x84>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	60da      	str	r2, [r3, #12]
  hfdcan.Init.AutoRetransmission = DISABLE;
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <MX_FDCAN1_Init+0x84>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	741a      	strb	r2, [r3, #16]
  hfdcan.Init.TransmitPause = DISABLE;
 80033fe:	4b18      	ldr	r3, [pc, #96]	; (8003460 <MX_FDCAN1_Init+0x84>)
 8003400:	2200      	movs	r2, #0
 8003402:	745a      	strb	r2, [r3, #17]
  hfdcan.Init.ProtocolException = DISABLE;
 8003404:	4b16      	ldr	r3, [pc, #88]	; (8003460 <MX_FDCAN1_Init+0x84>)
 8003406:	2200      	movs	r2, #0
 8003408:	749a      	strb	r2, [r3, #18]
  hfdcan.Init.NominalPrescaler = 1;
 800340a:	4b15      	ldr	r3, [pc, #84]	; (8003460 <MX_FDCAN1_Init+0x84>)
 800340c:	2201      	movs	r2, #1
 800340e:	615a      	str	r2, [r3, #20]
  hfdcan.Init.NominalSyncJumpWidth = 1;
 8003410:	4b13      	ldr	r3, [pc, #76]	; (8003460 <MX_FDCAN1_Init+0x84>)
 8003412:	2201      	movs	r2, #1
 8003414:	619a      	str	r2, [r3, #24]
  hfdcan.Init.NominalTimeSeg1 = 13;
 8003416:	4b12      	ldr	r3, [pc, #72]	; (8003460 <MX_FDCAN1_Init+0x84>)
 8003418:	220d      	movs	r2, #13
 800341a:	61da      	str	r2, [r3, #28]
  hfdcan.Init.NominalTimeSeg2 = 2;
 800341c:	4b10      	ldr	r3, [pc, #64]	; (8003460 <MX_FDCAN1_Init+0x84>)
 800341e:	2202      	movs	r2, #2
 8003420:	621a      	str	r2, [r3, #32]
  hfdcan.Init.DataPrescaler = 1;
 8003422:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <MX_FDCAN1_Init+0x84>)
 8003424:	2201      	movs	r2, #1
 8003426:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan.Init.DataSyncJumpWidth = 1;
 8003428:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <MX_FDCAN1_Init+0x84>)
 800342a:	2201      	movs	r2, #1
 800342c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan.Init.DataTimeSeg1 = 1;
 800342e:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <MX_FDCAN1_Init+0x84>)
 8003430:	2201      	movs	r2, #1
 8003432:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan.Init.DataTimeSeg2 = 1;
 8003434:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <MX_FDCAN1_Init+0x84>)
 8003436:	2201      	movs	r2, #1
 8003438:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan.Init.StdFiltersNbr = 0;
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <MX_FDCAN1_Init+0x84>)
 800343c:	2200      	movs	r2, #0
 800343e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan.Init.ExtFiltersNbr = 0;
 8003440:	4b07      	ldr	r3, [pc, #28]	; (8003460 <MX_FDCAN1_Init+0x84>)
 8003442:	2200      	movs	r2, #0
 8003444:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <MX_FDCAN1_Init+0x84>)
 8003448:	2200      	movs	r2, #0
 800344a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan) != HAL_OK)
 800344c:	4804      	ldr	r0, [pc, #16]	; (8003460 <MX_FDCAN1_Init+0x84>)
 800344e:	f7fe f991 	bl	8001774 <HAL_FDCAN_Init>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8003458:	f000 f894 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800345c:	bf00      	nop
 800345e:	bd80      	pop	{r7, pc}
 8003460:	2000009c 	.word	0x2000009c
 8003464:	40006400 	.word	0x40006400

08003468 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800346e:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <MX_DMA_Init+0x60>)
 8003470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003472:	4a15      	ldr	r2, [pc, #84]	; (80034c8 <MX_DMA_Init+0x60>)
 8003474:	f043 0304 	orr.w	r3, r3, #4
 8003478:	6493      	str	r3, [r2, #72]	; 0x48
 800347a:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <MX_DMA_Init+0x60>)
 800347c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <MX_DMA_Init+0x60>)
 8003488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348a:	4a0f      	ldr	r2, [pc, #60]	; (80034c8 <MX_DMA_Init+0x60>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6493      	str	r3, [r2, #72]	; 0x48
 8003492:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <MX_DMA_Init+0x60>)
 8003494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800349e:	2200      	movs	r2, #0
 80034a0:	2100      	movs	r1, #0
 80034a2:	200b      	movs	r0, #11
 80034a4:	f7fd ff77 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80034a8:	200b      	movs	r0, #11
 80034aa:	f7fd ff8e 	bl	80013ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80034ae:	2200      	movs	r2, #0
 80034b0:	2100      	movs	r1, #0
 80034b2:	200c      	movs	r0, #12
 80034b4:	f7fd ff6f 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80034b8:	200c      	movs	r0, #12
 80034ba:	f7fd ff86 	bl	80013ca <HAL_NVIC_EnableIRQ>

}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000

080034cc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d2:	f107 030c 	add.w	r3, r7, #12
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	60da      	str	r2, [r3, #12]
 80034e0:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80034e2:	4b26      	ldr	r3, [pc, #152]	; (800357c <MX_GPIO_Init+0xb0>)
 80034e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e6:	4a25      	ldr	r2, [pc, #148]	; (800357c <MX_GPIO_Init+0xb0>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034ee:	4b23      	ldr	r3, [pc, #140]	; (800357c <MX_GPIO_Init+0xb0>)
 80034f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80034fa:	4b20      	ldr	r3, [pc, #128]	; (800357c <MX_GPIO_Init+0xb0>)
 80034fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fe:	4a1f      	ldr	r2, [pc, #124]	; (800357c <MX_GPIO_Init+0xb0>)
 8003500:	f043 0302 	orr.w	r3, r3, #2
 8003504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003506:	4b1d      	ldr	r3, [pc, #116]	; (800357c <MX_GPIO_Init+0xb0>)
 8003508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003512:	4b1a      	ldr	r3, [pc, #104]	; (800357c <MX_GPIO_Init+0xb0>)
 8003514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003516:	4a19      	ldr	r2, [pc, #100]	; (800357c <MX_GPIO_Init+0xb0>)
 8003518:	f043 0320 	orr.w	r3, r3, #32
 800351c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800351e:	4b17      	ldr	r3, [pc, #92]	; (800357c <MX_GPIO_Init+0xb0>)
 8003520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800352a:	2200      	movs	r2, #0
 800352c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003534:	f7fe fe16 	bl	8002164 <HAL_GPIO_WritePin>


	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800353c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800353e:	2301      	movs	r3, #1
 8003540:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003546:	2300      	movs	r3, #0
 8003548:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354a:	f107 030c 	add.w	r3, r7, #12
 800354e:	4619      	mov	r1, r3
 8003550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003554:	f7fe fc6c 	bl	8001e30 <HAL_GPIO_Init>


	GPIO_InitStruct.Pin = DIO5.PIN;
 8003558:	2320      	movs	r3, #32
 800355a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(DIO5.PORT, &GPIO_InitStruct);
 8003564:	4a06      	ldr	r2, [pc, #24]	; (8003580 <MX_GPIO_Init+0xb4>)
 8003566:	f107 030c 	add.w	r3, r7, #12
 800356a:	4619      	mov	r1, r3
 800356c:	4610      	mov	r0, r2
 800356e:	f7fe fc5f 	bl	8001e30 <HAL_GPIO_Init>
}
 8003572:	bf00      	nop
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000
 8003580:	48000400 	.word	0x48000400

08003584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800359e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035a2:	6093      	str	r3, [r2, #8]
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40007000 	.word	0x40007000

080035b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ba:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <HAL_MspInit+0x44>)
 80035bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035be:	4a0e      	ldr	r2, [pc, #56]	; (80035f8 <HAL_MspInit+0x44>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6613      	str	r3, [r2, #96]	; 0x60
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <HAL_MspInit+0x44>)
 80035c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <HAL_MspInit+0x44>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <HAL_MspInit+0x44>)
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035dc:	6593      	str	r3, [r2, #88]	; 0x58
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_MspInit+0x44>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80035ea:	f7ff ffd3 	bl	8003594 <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000

080035fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	; 0x30
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	f107 031c 	add.w	r3, r7, #28
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800361c:	d15a      	bne.n	80036d4 <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800361e:	4b5e      	ldr	r3, [pc, #376]	; (8003798 <HAL_ADC_MspInit+0x19c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3301      	adds	r3, #1
 8003624:	4a5c      	ldr	r2, [pc, #368]	; (8003798 <HAL_ADC_MspInit+0x19c>)
 8003626:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003628:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <HAL_ADC_MspInit+0x19c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d10b      	bne.n	8003648 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003630:	4b5a      	ldr	r3, [pc, #360]	; (800379c <HAL_ADC_MspInit+0x1a0>)
 8003632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003634:	4a59      	ldr	r2, [pc, #356]	; (800379c <HAL_ADC_MspInit+0x1a0>)
 8003636:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800363a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800363c:	4b57      	ldr	r3, [pc, #348]	; (800379c <HAL_ADC_MspInit+0x1a0>)
 800363e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003648:	4b54      	ldr	r3, [pc, #336]	; (800379c <HAL_ADC_MspInit+0x1a0>)
 800364a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364c:	4a53      	ldr	r2, [pc, #332]	; (800379c <HAL_ADC_MspInit+0x1a0>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003654:	4b51      	ldr	r3, [pc, #324]	; (800379c <HAL_ADC_MspInit+0x1a0>)
 8003656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003660:	2307      	movs	r3, #7
 8003662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003664:	2303      	movs	r3, #3
 8003666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366c:	f107 031c 	add.w	r3, r7, #28
 8003670:	4619      	mov	r1, r3
 8003672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003676:	f7fe fbdb 	bl	8001e30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800367a:	4b49      	ldr	r3, [pc, #292]	; (80037a0 <HAL_ADC_MspInit+0x1a4>)
 800367c:	4a49      	ldr	r2, [pc, #292]	; (80037a4 <HAL_ADC_MspInit+0x1a8>)
 800367e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003680:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <HAL_ADC_MspInit+0x1a4>)
 8003682:	2205      	movs	r2, #5
 8003684:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003686:	4b46      	ldr	r3, [pc, #280]	; (80037a0 <HAL_ADC_MspInit+0x1a4>)
 8003688:	2200      	movs	r2, #0
 800368a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800368c:	4b44      	ldr	r3, [pc, #272]	; (80037a0 <HAL_ADC_MspInit+0x1a4>)
 800368e:	2200      	movs	r2, #0
 8003690:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003692:	4b43      	ldr	r3, [pc, #268]	; (80037a0 <HAL_ADC_MspInit+0x1a4>)
 8003694:	2280      	movs	r2, #128	; 0x80
 8003696:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003698:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <HAL_ADC_MspInit+0x1a4>)
 800369a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800369e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036a0:	4b3f      	ldr	r3, [pc, #252]	; (80037a0 <HAL_ADC_MspInit+0x1a4>)
 80036a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80036a8:	4b3d      	ldr	r3, [pc, #244]	; (80037a0 <HAL_ADC_MspInit+0x1a4>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036ae:	4b3c      	ldr	r3, [pc, #240]	; (80037a0 <HAL_ADC_MspInit+0x1a4>)
 80036b0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80036b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80036b6:	483a      	ldr	r0, [pc, #232]	; (80037a0 <HAL_ADC_MspInit+0x1a4>)
 80036b8:	f7fd fea2 	bl	8001400 <HAL_DMA_Init>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 80036c2:	f7ff ff5f 	bl	8003584 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a35      	ldr	r2, [pc, #212]	; (80037a0 <HAL_ADC_MspInit+0x1a4>)
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54
 80036cc:	4a34      	ldr	r2, [pc, #208]	; (80037a0 <HAL_ADC_MspInit+0x1a4>)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80036d2:	e05d      	b.n	8003790 <HAL_ADC_MspInit+0x194>
  else if(hadc->Instance==ADC2)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a33      	ldr	r2, [pc, #204]	; (80037a8 <HAL_ADC_MspInit+0x1ac>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d158      	bne.n	8003790 <HAL_ADC_MspInit+0x194>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80036de:	4b2e      	ldr	r3, [pc, #184]	; (8003798 <HAL_ADC_MspInit+0x19c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3301      	adds	r3, #1
 80036e4:	4a2c      	ldr	r2, [pc, #176]	; (8003798 <HAL_ADC_MspInit+0x19c>)
 80036e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80036e8:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <HAL_ADC_MspInit+0x19c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d10b      	bne.n	8003708 <HAL_ADC_MspInit+0x10c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80036f0:	4b2a      	ldr	r3, [pc, #168]	; (800379c <HAL_ADC_MspInit+0x1a0>)
 80036f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f4:	4a29      	ldr	r2, [pc, #164]	; (800379c <HAL_ADC_MspInit+0x1a0>)
 80036f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036fc:	4b27      	ldr	r3, [pc, #156]	; (800379c <HAL_ADC_MspInit+0x1a0>)
 80036fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003708:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_ADC_MspInit+0x1a0>)
 800370a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370c:	4a23      	ldr	r2, [pc, #140]	; (800379c <HAL_ADC_MspInit+0x1a0>)
 800370e:	f043 0320 	orr.w	r3, r3, #32
 8003712:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003714:	4b21      	ldr	r3, [pc, #132]	; (800379c <HAL_ADC_MspInit+0x1a0>)
 8003716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003720:	2302      	movs	r3, #2
 8003722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003724:	2303      	movs	r3, #3
 8003726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800372c:	f107 031c 	add.w	r3, r7, #28
 8003730:	4619      	mov	r1, r3
 8003732:	481e      	ldr	r0, [pc, #120]	; (80037ac <HAL_ADC_MspInit+0x1b0>)
 8003734:	f7fe fb7c 	bl	8001e30 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8003738:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <HAL_ADC_MspInit+0x1b4>)
 800373a:	4a1e      	ldr	r2, [pc, #120]	; (80037b4 <HAL_ADC_MspInit+0x1b8>)
 800373c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800373e:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <HAL_ADC_MspInit+0x1b4>)
 8003740:	2224      	movs	r2, #36	; 0x24
 8003742:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003744:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <HAL_ADC_MspInit+0x1b4>)
 8003746:	2200      	movs	r2, #0
 8003748:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800374a:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <HAL_ADC_MspInit+0x1b4>)
 800374c:	2200      	movs	r2, #0
 800374e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003750:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <HAL_ADC_MspInit+0x1b4>)
 8003752:	2280      	movs	r2, #128	; 0x80
 8003754:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003756:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <HAL_ADC_MspInit+0x1b4>)
 8003758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800375c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800375e:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <HAL_ADC_MspInit+0x1b4>)
 8003760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003764:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8003766:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <HAL_ADC_MspInit+0x1b4>)
 8003768:	2200      	movs	r2, #0
 800376a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800376c:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <HAL_ADC_MspInit+0x1b4>)
 800376e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003772:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003774:	480e      	ldr	r0, [pc, #56]	; (80037b0 <HAL_ADC_MspInit+0x1b4>)
 8003776:	f7fd fe43 	bl	8001400 <HAL_DMA_Init>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_ADC_MspInit+0x188>
      Error_Handler();
 8003780:	f7ff ff00 	bl	8003584 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <HAL_ADC_MspInit+0x1b4>)
 8003788:	655a      	str	r2, [r3, #84]	; 0x54
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <HAL_ADC_MspInit+0x1b4>)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003790:	bf00      	nop
 8003792:	3730      	adds	r7, #48	; 0x30
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	20000028 	.word	0x20000028
 800379c:	40021000 	.word	0x40021000
 80037a0:	2000016c 	.word	0x2000016c
 80037a4:	40020008 	.word	0x40020008
 80037a8:	50000100 	.word	0x50000100
 80037ac:	48001400 	.word	0x48001400
 80037b0:	200001cc 	.word	0x200001cc
 80037b4:	4002001c 	.word	0x4002001c

080037b8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	; 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1c      	ldr	r2, [pc, #112]	; (8003848 <HAL_FDCAN_MspInit+0x90>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d131      	bne.n	800383e <HAL_FDCAN_MspInit+0x86>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <HAL_FDCAN_MspInit+0x94>)
 80037dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037de:	4a1b      	ldr	r2, [pc, #108]	; (800384c <HAL_FDCAN_MspInit+0x94>)
 80037e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037e4:	6593      	str	r3, [r2, #88]	; 0x58
 80037e6:	4b19      	ldr	r3, [pc, #100]	; (800384c <HAL_FDCAN_MspInit+0x94>)
 80037e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f2:	4b16      	ldr	r3, [pc, #88]	; (800384c <HAL_FDCAN_MspInit+0x94>)
 80037f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f6:	4a15      	ldr	r2, [pc, #84]	; (800384c <HAL_FDCAN_MspInit+0x94>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037fe:	4b13      	ldr	r3, [pc, #76]	; (800384c <HAL_FDCAN_MspInit+0x94>)
 8003800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800380a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800380e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003810:	2302      	movs	r3, #2
 8003812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003818:	2300      	movs	r3, #0
 800381a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800381c:	2309      	movs	r3, #9
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	4619      	mov	r1, r3
 8003826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800382a:	f7fe fb01 	bl	8001e30 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800382e:	2200      	movs	r2, #0
 8003830:	2100      	movs	r1, #0
 8003832:	2015      	movs	r0, #21
 8003834:	f7fd fdaf 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003838:	2015      	movs	r0, #21
 800383a:	f7fd fdc6 	bl	80013ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800383e:	bf00      	nop
 8003840:	3728      	adds	r7, #40	; 0x28
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40006400 	.word	0x40006400
 800384c:	40021000 	.word	0x40021000

08003850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003862:	e7fe      	b.n	8003862 <HardFault_Handler+0x4>

08003864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003868:	e7fe      	b.n	8003868 <MemManage_Handler+0x4>

0800386a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800386a:	b480      	push	{r7}
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800386e:	e7fe      	b.n	800386e <BusFault_Handler+0x4>

08003870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003874:	e7fe      	b.n	8003874 <UsageFault_Handler+0x4>

08003876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003892:	b480      	push	{r7}
 8003894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038a4:	f7fc fd0a 	bl	80002bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038a8:	bf00      	nop
 80038aa:	bd80      	pop	{r7, pc}

080038ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038b0:	4802      	ldr	r0, [pc, #8]	; (80038bc <DMA1_Channel1_IRQHandler+0x10>)
 80038b2:	f7fd fe4d 	bl	8001550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	2000016c 	.word	0x2000016c

080038c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80038c4:	4802      	ldr	r0, [pc, #8]	; (80038d0 <DMA1_Channel2_IRQHandler+0x10>)
 80038c6:	f7fd fe43 	bl	8001550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	200001cc 	.word	0x200001cc

080038d4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan);
 80038d8:	4802      	ldr	r0, [pc, #8]	; (80038e4 <FDCAN1_IT0_IRQHandler+0x10>)
 80038da:	f7fe f8a5 	bl	8001a28 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	2000009c 	.word	0x2000009c

080038e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80038ec:	4b08      	ldr	r3, [pc, #32]	; (8003910 <SystemInit+0x28>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	4a07      	ldr	r2, [pc, #28]	; (8003910 <SystemInit+0x28>)
 80038f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <SystemInit+0x28>)
 80038fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003902:	609a      	str	r2, [r3, #8]
#endif
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003914:	480d      	ldr	r0, [pc, #52]	; (800394c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003916:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003918:	480d      	ldr	r0, [pc, #52]	; (8003950 <LoopForever+0x6>)
  ldr r1, =_edata
 800391a:	490e      	ldr	r1, [pc, #56]	; (8003954 <LoopForever+0xa>)
  ldr r2, =_sidata
 800391c:	4a0e      	ldr	r2, [pc, #56]	; (8003958 <LoopForever+0xe>)
  movs r3, #0
 800391e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003920:	e002      	b.n	8003928 <LoopCopyDataInit>

08003922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003926:	3304      	adds	r3, #4

08003928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800392a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800392c:	d3f9      	bcc.n	8003922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800392e:	4a0b      	ldr	r2, [pc, #44]	; (800395c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003930:	4c0b      	ldr	r4, [pc, #44]	; (8003960 <LoopForever+0x16>)
  movs r3, #0
 8003932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003934:	e001      	b.n	800393a <LoopFillZerobss>

08003936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003938:	3204      	adds	r2, #4

0800393a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800393a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800393c:	d3fb      	bcc.n	8003936 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800393e:	f7ff ffd3 	bl	80038e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003942:	f000 f811 	bl	8003968 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003946:	f7ff fbb1 	bl	80030ac <main>

0800394a <LoopForever>:

LoopForever:
    b LoopForever
 800394a:	e7fe      	b.n	800394a <LoopForever>
  ldr   r0, =_estack
 800394c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003954:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003958:	080039f0 	.word	0x080039f0
  ldr r2, =_sbss
 800395c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003960:	20000278 	.word	0x20000278

08003964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003964:	e7fe      	b.n	8003964 <ADC1_2_IRQHandler>
	...

08003968 <__libc_init_array>:
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	4e0d      	ldr	r6, [pc, #52]	; (80039a0 <__libc_init_array+0x38>)
 800396c:	4c0d      	ldr	r4, [pc, #52]	; (80039a4 <__libc_init_array+0x3c>)
 800396e:	1ba4      	subs	r4, r4, r6
 8003970:	10a4      	asrs	r4, r4, #2
 8003972:	2500      	movs	r5, #0
 8003974:	42a5      	cmp	r5, r4
 8003976:	d109      	bne.n	800398c <__libc_init_array+0x24>
 8003978:	4e0b      	ldr	r6, [pc, #44]	; (80039a8 <__libc_init_array+0x40>)
 800397a:	4c0c      	ldr	r4, [pc, #48]	; (80039ac <__libc_init_array+0x44>)
 800397c:	f000 f820 	bl	80039c0 <_init>
 8003980:	1ba4      	subs	r4, r4, r6
 8003982:	10a4      	asrs	r4, r4, #2
 8003984:	2500      	movs	r5, #0
 8003986:	42a5      	cmp	r5, r4
 8003988:	d105      	bne.n	8003996 <__libc_init_array+0x2e>
 800398a:	bd70      	pop	{r4, r5, r6, pc}
 800398c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003990:	4798      	blx	r3
 8003992:	3501      	adds	r5, #1
 8003994:	e7ee      	b.n	8003974 <__libc_init_array+0xc>
 8003996:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800399a:	4798      	blx	r3
 800399c:	3501      	adds	r5, #1
 800399e:	e7f2      	b.n	8003986 <__libc_init_array+0x1e>
 80039a0:	080039e8 	.word	0x080039e8
 80039a4:	080039e8 	.word	0x080039e8
 80039a8:	080039e8 	.word	0x080039e8
 80039ac:	080039ec 	.word	0x080039ec

080039b0 <memset>:
 80039b0:	4402      	add	r2, r0
 80039b2:	4603      	mov	r3, r0
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d100      	bne.n	80039ba <memset+0xa>
 80039b8:	4770      	bx	lr
 80039ba:	f803 1b01 	strb.w	r1, [r3], #1
 80039be:	e7f9      	b.n	80039b4 <memset+0x4>

080039c0 <_init>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	bf00      	nop
 80039c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c6:	bc08      	pop	{r3}
 80039c8:	469e      	mov	lr, r3
 80039ca:	4770      	bx	lr

080039cc <_fini>:
 80039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ce:	bf00      	nop
 80039d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d2:	bc08      	pop	{r3}
 80039d4:	469e      	mov	lr, r3
 80039d6:	4770      	bx	lr
