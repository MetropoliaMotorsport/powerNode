
motorsport_PowerNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080056cc  080056cc  000156cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800571c  0800571c  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  0800571c  0800571c  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800571c  0800571c  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800571c  0800571c  0001571c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005720  08005720  00015720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08005724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000044  08005768  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08005768  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010caf  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002405  00000000  00000000  00030d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f08  00000000  00000000  00033128  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de0  00000000  00000000  00034030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001efcd  00000000  00000000  00034e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb62  00000000  00000000  00053ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9992  00000000  00000000  0005f93f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001292d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e68  00000000  00000000  0012934c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000044 	.word	0x20000044
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080056b4 	.word	0x080056b4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000048 	.word	0x20000048
 8000214:	080056b4 	.word	0x080056b4

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f001 fbb8 	bl	8001998 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f005 f835 	bl	80052a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f001 fbc4 	bl	80019fe <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f001 fb90 	bl	80019ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	20000040 	.word	0x20000040
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	20000068 	.word	0x20000068
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000068 	.word	0x20000068

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	431a      	orrs	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	609a      	str	r2, [r3, #8]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	431a      	orrs	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	609a      	str	r2, [r3, #8]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000398:	4618      	mov	r0, r3
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80003a4:	b490      	push	{r4, r7}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	3360      	adds	r3, #96	; 0x60
 80003b6:	461a      	mov	r2, r3
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	4413      	add	r3, r2
 80003be:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80003c0:	6822      	ldr	r2, [r4, #0]
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <LL_ADC_SetOffset+0x40>)
 80003c4:	4013      	ands	r3, r2
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	430a      	orrs	r2, r1
 80003d0:	4313      	orrs	r3, r2
 80003d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003d6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc90      	pop	{r4, r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	03fff000 	.word	0x03fff000

080003e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80003e8:	b490      	push	{r4, r7}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3360      	adds	r3, #96	; 0x60
 80003f6:	461a      	mov	r2, r3
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000400:	6823      	ldr	r3, [r4, #0]
 8000402:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bc90      	pop	{r4, r7}
 800040e:	4770      	bx	lr

08000410 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000410:	b490      	push	{r4, r7}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	3360      	adds	r3, #96	; 0x60
 8000420:	461a      	mov	r2, r3
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800042a:	6823      	ldr	r3, [r4, #0]
 800042c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4313      	orrs	r3, r2
 8000434:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bc90      	pop	{r4, r7}
 800043e:	4770      	bx	lr

08000440 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000440:	b490      	push	{r4, r7}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3360      	adds	r3, #96	; 0x60
 8000450:	461a      	mov	r2, r3
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800045a:	6823      	ldr	r3, [r4, #0]
 800045c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4313      	orrs	r3, r2
 8000464:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bc90      	pop	{r4, r7}
 800046e:	4770      	bx	lr

08000470 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000470:	b490      	push	{r4, r7}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3360      	adds	r3, #96	; 0x60
 8000480:	461a      	mov	r2, r3
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4413      	add	r3, r2
 8000488:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800048a:	6823      	ldr	r3, [r4, #0]
 800048c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bc90      	pop	{r4, r7}
 800049e:	4770      	bx	lr

080004a0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	615a      	str	r2, [r3, #20]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d101      	bne.n	80004de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80004da:	2301      	movs	r3, #1
 80004dc:	e000      	b.n	80004e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80004de:	2300      	movs	r3, #0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004ec:	b490      	push	{r4, r7}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3330      	adds	r3, #48	; 0x30
 80004fc:	461a      	mov	r2, r3
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	0a1b      	lsrs	r3, r3, #8
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	f003 030c 	and.w	r3, r3, #12
 8000508:	4413      	add	r3, r2
 800050a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800050c:	6822      	ldr	r2, [r4, #0]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	f003 031f 	and.w	r3, r3, #31
 8000514:	211f      	movs	r1, #31
 8000516:	fa01 f303 	lsl.w	r3, r1, r3
 800051a:	43db      	mvns	r3, r3
 800051c:	401a      	ands	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	0e9b      	lsrs	r3, r3, #26
 8000522:	f003 011f 	and.w	r1, r3, #31
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	f003 031f 	and.w	r3, r3, #31
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	4313      	orrs	r3, r2
 8000532:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bc90      	pop	{r4, r7}
 800053c:	4770      	bx	lr

0800053e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800053e:	b490      	push	{r4, r7}
 8000540:	b084      	sub	sp, #16
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	3314      	adds	r3, #20
 800054e:	461a      	mov	r2, r3
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	0e5b      	lsrs	r3, r3, #25
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	4413      	add	r3, r2
 800055c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800055e:	6822      	ldr	r2, [r4, #0]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	0d1b      	lsrs	r3, r3, #20
 8000564:	f003 031f 	and.w	r3, r3, #31
 8000568:	2107      	movs	r1, #7
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	43db      	mvns	r3, r3
 8000570:	401a      	ands	r2, r3
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	0d1b      	lsrs	r3, r3, #20
 8000576:	f003 031f 	and.w	r3, r3, #31
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	4313      	orrs	r3, r2
 8000582:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bc90      	pop	{r4, r7}
 800058c:	4770      	bx	lr
	...

08000590 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005a8:	43db      	mvns	r3, r3
 80005aa:	401a      	ands	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f003 0318 	and.w	r3, r3, #24
 80005b2:	4908      	ldr	r1, [pc, #32]	; (80005d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80005b4:	40d9      	lsrs	r1, r3
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	400b      	ands	r3, r1
 80005ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005be:	431a      	orrs	r2, r3
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	0007ffff 	.word	0x0007ffff

080005d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80005e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	6093      	str	r3, [r2, #8]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800060c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000610:	d101      	bne.n	8000616 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000612:	2301      	movs	r3, #1
 8000614:	e000      	b.n	8000618 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000634:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000638:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000660:	d101      	bne.n	8000666 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000662:	2301      	movs	r3, #1
 8000664:	e000      	b.n	8000668 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000684:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000688:	f043 0201 	orr.w	r2, r3, #1
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80006ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006b0:	f043 0202 	orr.w	r2, r3, #2
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d101      	bne.n	80006dc <LL_ADC_IsEnabled+0x18>
 80006d8:	2301      	movs	r3, #1
 80006da:	e000      	b.n	80006de <LL_ADC_IsEnabled+0x1a>
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d101      	bne.n	8000702 <LL_ADC_IsDisableOngoing+0x18>
 80006fe:	2301      	movs	r3, #1
 8000700:	e000      	b.n	8000704 <LL_ADC_IsDisableOngoing+0x1a>
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f003 0304 	and.w	r3, r3, #4
 8000720:	2b04      	cmp	r3, #4
 8000722:	d101      	bne.n	8000728 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000724:	2301      	movs	r3, #1
 8000726:	e000      	b.n	800072a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	689b      	ldr	r3, [r3, #8]
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	2b08      	cmp	r3, #8
 8000748:	d101      	bne.n	800074e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800074a:	2301      	movs	r3, #1
 800074c:	e000      	b.n	8000750 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000764:	2300      	movs	r3, #0
 8000766:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d101      	bne.n	8000776 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e16b      	b.n	8000a4e <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000780:	2b00      	cmp	r3, #0
 8000782:	d109      	bne.n	8000798 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f004 fdb3 	bl	80052f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2200      	movs	r2, #0
 800078e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff2d 	bl	80005fc <LL_ADC_IsDeepPowerDownEnabled>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d004      	beq.n	80007b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff13 	bl	80005d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff48 	bl	800064c <LL_ADC_IsInternalRegulatorEnabled>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d113      	bne.n	80007ea <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff2c 	bl	8000624 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80007cc:	4ba2      	ldr	r3, [pc, #648]	; (8000a58 <HAL_ADC_Init+0x2fc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	099b      	lsrs	r3, r3, #6
 80007d2:	4aa2      	ldr	r2, [pc, #648]	; (8000a5c <HAL_ADC_Init+0x300>)
 80007d4:	fba2 2303 	umull	r2, r3, r2, r3
 80007d8:	099b      	lsrs	r3, r3, #6
 80007da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80007dc:	e002      	b.n	80007e4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1f9      	bne.n	80007de <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff2c 	bl	800064c <LL_ADC_IsInternalRegulatorEnabled>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d10d      	bne.n	8000816 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007fe:	f043 0210 	orr.w	r2, r3, #16
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800080a:	f043 0201 	orr.w	r2, r3, #1
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff78 	bl	8000710 <LL_ADC_REG_IsConversionOngoing>
 8000820:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000826:	f003 0310 	and.w	r3, r3, #16
 800082a:	2b00      	cmp	r3, #0
 800082c:	f040 8106 	bne.w	8000a3c <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	2b00      	cmp	r3, #0
 8000834:	f040 8102 	bne.w	8000a3c <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800083c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000840:	f043 0202 	orr.w	r2, r3, #2
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff39 	bl	80006c4 <LL_ADC_IsEnabled>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d111      	bne.n	800087c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000858:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800085c:	f7ff ff32 	bl	80006c4 <LL_ADC_IsEnabled>
 8000860:	4604      	mov	r4, r0
 8000862:	487f      	ldr	r0, [pc, #508]	; (8000a60 <HAL_ADC_Init+0x304>)
 8000864:	f7ff ff2e 	bl	80006c4 <LL_ADC_IsEnabled>
 8000868:	4603      	mov	r3, r0
 800086a:	4323      	orrs	r3, r4
 800086c:	2b00      	cmp	r3, #0
 800086e:	d105      	bne.n	800087c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	4619      	mov	r1, r3
 8000876:	487b      	ldr	r0, [pc, #492]	; (8000a64 <HAL_ADC_Init+0x308>)
 8000878:	f7ff fd60 	bl	800033c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7f5b      	ldrb	r3, [r3, #29]
 8000880:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000886:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800088c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000892:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800089a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800089c:	4313      	orrs	r3, r2
 800089e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d106      	bne.n	80008b8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ae:	3b01      	subs	r3, #1
 80008b0:	045b      	lsls	r3, r3, #17
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d009      	beq.n	80008d4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	68da      	ldr	r2, [r3, #12]
 80008da:	4b63      	ldr	r3, [pc, #396]	; (8000a68 <HAL_ADC_Init+0x30c>)
 80008dc:	4013      	ands	r3, r2
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	6812      	ldr	r2, [r2, #0]
 80008e2:	69b9      	ldr	r1, [r7, #24]
 80008e4:	430b      	orrs	r3, r1
 80008e6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	691b      	ldr	r3, [r3, #16]
 80008ee:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	430a      	orrs	r2, r1
 80008fc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ff04 	bl	8000710 <LL_ADC_REG_IsConversionOngoing>
 8000908:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff11 	bl	8000736 <LL_ADC_INJ_IsConversionOngoing>
 8000914:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d16d      	bne.n	80009f8 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d16a      	bne.n	80009f8 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000926:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800092e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000930:	4313      	orrs	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800093e:	f023 0302 	bic.w	r3, r3, #2
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	6812      	ldr	r2, [r2, #0]
 8000946:	69b9      	ldr	r1, [r7, #24]
 8000948:	430b      	orrs	r3, r1
 800094a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	691b      	ldr	r3, [r3, #16]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d017      	beq.n	8000984 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	691a      	ldr	r2, [r3, #16]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000962:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800096c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000970:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	6911      	ldr	r1, [r2, #16]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	430b      	orrs	r3, r1
 800097e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8000982:	e013      	b.n	80009ac <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	691a      	ldr	r2, [r3, #16]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000992:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	6812      	ldr	r2, [r2, #0]
 80009a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d118      	bne.n	80009e8 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	691b      	ldr	r3, [r3, #16]
 80009bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80009c0:	f023 0304 	bic.w	r3, r3, #4
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80009cc:	4311      	orrs	r1, r2
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80009d2:	4311      	orrs	r1, r2
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80009d8:	430a      	orrs	r2, r1
 80009da:	431a      	orrs	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f042 0201 	orr.w	r2, r2, #1
 80009e4:	611a      	str	r2, [r3, #16]
 80009e6:	e007      	b.n	80009f8 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	691a      	ldr	r2, [r3, #16]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f022 0201 	bic.w	r2, r2, #1
 80009f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d10c      	bne.n	8000a1a <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f023 010f 	bic.w	r1, r3, #15
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6a1b      	ldr	r3, [r3, #32]
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	430a      	orrs	r2, r1
 8000a16:	631a      	str	r2, [r3, #48]	; 0x30
 8000a18:	e007      	b.n	8000a2a <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f022 020f 	bic.w	r2, r2, #15
 8000a28:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a2e:	f023 0303 	bic.w	r3, r3, #3
 8000a32:	f043 0201 	orr.w	r2, r3, #1
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	65da      	str	r2, [r3, #92]	; 0x5c
 8000a3a:	e007      	b.n	8000a4c <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a40:	f043 0210 	orr.w	r2, r3, #16
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000a4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3724      	adds	r7, #36	; 0x24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd90      	pop	{r4, r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000040 	.word	0x20000040
 8000a5c:	053e2d63 	.word	0x053e2d63
 8000a60:	50000100 	.word	0x50000100
 8000a64:	50000300 	.word	0x50000300
 8000a68:	fff04007 	.word	0xfff04007

08000a6c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b0a6      	sub	sp, #152	; 0x98
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d101      	bne.n	8000ab6 <HAL_ADC_ConfigChannel+0x22>
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	e348      	b.n	8001148 <HAL_ADC_ConfigChannel+0x6b4>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fe24 	bl	8000710 <LL_ADC_REG_IsConversionOngoing>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f040 832d 	bne.w	800112a <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6818      	ldr	r0, [r3, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	6859      	ldr	r1, [r3, #4]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	f7ff fd05 	bl	80004ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fe12 	bl	8000710 <LL_ADC_REG_IsConversionOngoing>
 8000aec:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fe1e 	bl	8000736 <LL_ADC_INJ_IsConversionOngoing>
 8000afa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000afe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f040 817b 	bne.w	8000dfe <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	f040 8176 	bne.w	8000dfe <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b1a:	d10f      	bne.n	8000b3c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6818      	ldr	r0, [r3, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2200      	movs	r2, #0
 8000b26:	4619      	mov	r1, r3
 8000b28:	f7ff fd09 	bl	800053e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fcb3 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>
 8000b3a:	e00e      	b.n	8000b5a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	6819      	ldr	r1, [r3, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	f7ff fcf8 	bl	800053e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fca3 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	695a      	ldr	r2, [r3, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	08db      	lsrs	r3, r3, #3
 8000b66:	f003 0303 	and.w	r3, r3, #3
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d022      	beq.n	8000bc2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6818      	ldr	r0, [r3, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	6919      	ldr	r1, [r3, #16]
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b8c:	f7ff fc0a 	bl	80003a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	6919      	ldr	r1, [r3, #16]
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	f7ff fc4f 	bl	8000440 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	6919      	ldr	r1, [r3, #16]
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	7f1b      	ldrb	r3, [r3, #28]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d102      	bne.n	8000bb8 <HAL_ADC_ConfigChannel+0x124>
 8000bb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bb6:	e000      	b.n	8000bba <HAL_ADC_ConfigChannel+0x126>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	461a      	mov	r2, r3
 8000bbc:	f7ff fc58 	bl	8000470 <LL_ADC_SetOffsetSaturation>
 8000bc0:	e11d      	b.n	8000dfe <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fc0d 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d10a      	bne.n	8000bee <HAL_ADC_ConfigChannel+0x15a>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fc02 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	0e9b      	lsrs	r3, r3, #26
 8000be8:	f003 021f 	and.w	r2, r3, #31
 8000bec:	e012      	b.n	8000c14 <HAL_ADC_ConfigChannel+0x180>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fbf7 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c04:	fa93 f3a3 	rbit	r3, r3
 8000c08:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c0c:	fab3 f383 	clz	r3, r3
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d105      	bne.n	8000c2c <HAL_ADC_ConfigChannel+0x198>
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	0e9b      	lsrs	r3, r3, #26
 8000c26:	f003 031f 	and.w	r3, r3, #31
 8000c2a:	e00a      	b.n	8000c42 <HAL_ADC_ConfigChannel+0x1ae>
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c34:	fa93 f3a3 	rbit	r3, r3
 8000c38:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c3c:	fab3 f383 	clz	r3, r3
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d106      	bne.n	8000c54 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fbde 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2101      	movs	r1, #1
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fbc4 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10a      	bne.n	8000c80 <HAL_ADC_ConfigChannel+0x1ec>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2101      	movs	r1, #1
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fbb9 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c76:	4603      	mov	r3, r0
 8000c78:	0e9b      	lsrs	r3, r3, #26
 8000c7a:	f003 021f 	and.w	r2, r3, #31
 8000c7e:	e010      	b.n	8000ca2 <HAL_ADC_ConfigChannel+0x20e>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2101      	movs	r1, #1
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fbae 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c92:	fa93 f3a3 	rbit	r3, r3
 8000c96:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c9a:	fab3 f383 	clz	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d105      	bne.n	8000cba <HAL_ADC_ConfigChannel+0x226>
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	0e9b      	lsrs	r3, r3, #26
 8000cb4:	f003 031f 	and.w	r3, r3, #31
 8000cb8:	e00a      	b.n	8000cd0 <HAL_ADC_ConfigChannel+0x23c>
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000cc2:	fa93 f3a3 	rbit	r3, r3
 8000cc6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000cca:	fab3 f383 	clz	r3, r3
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d106      	bne.n	8000ce2 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fb97 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fb7d 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d10a      	bne.n	8000d0e <HAL_ADC_ConfigChannel+0x27a>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fb72 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	0e9b      	lsrs	r3, r3, #26
 8000d08:	f003 021f 	and.w	r2, r3, #31
 8000d0c:	e010      	b.n	8000d30 <HAL_ADC_ConfigChannel+0x29c>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2102      	movs	r1, #2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fb67 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d20:	fa93 f3a3 	rbit	r3, r3
 8000d24:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d28:	fab3 f383 	clz	r3, r3
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d105      	bne.n	8000d48 <HAL_ADC_ConfigChannel+0x2b4>
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	0e9b      	lsrs	r3, r3, #26
 8000d42:	f003 031f 	and.w	r3, r3, #31
 8000d46:	e00a      	b.n	8000d5e <HAL_ADC_ConfigChannel+0x2ca>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d50:	fa93 f3a3 	rbit	r3, r3
 8000d54:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d58:	fab3 f383 	clz	r3, r3
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d106      	bne.n	8000d70 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2200      	movs	r2, #0
 8000d68:	2102      	movs	r1, #2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fb50 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2103      	movs	r1, #3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fb36 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10a      	bne.n	8000d9c <HAL_ADC_ConfigChannel+0x308>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2103      	movs	r1, #3
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fb2b 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	0e9b      	lsrs	r3, r3, #26
 8000d96:	f003 021f 	and.w	r2, r3, #31
 8000d9a:	e010      	b.n	8000dbe <HAL_ADC_ConfigChannel+0x32a>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2103      	movs	r1, #3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fb20 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dae:	fa93 f3a3 	rbit	r3, r3
 8000db2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000db6:	fab3 f383 	clz	r3, r3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d105      	bne.n	8000dd6 <HAL_ADC_ConfigChannel+0x342>
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	0e9b      	lsrs	r3, r3, #26
 8000dd0:	f003 031f 	and.w	r3, r3, #31
 8000dd4:	e00a      	b.n	8000dec <HAL_ADC_ConfigChannel+0x358>
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dde:	fa93 f3a3 	rbit	r3, r3
 8000de2:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000de6:	fab3 f383 	clz	r3, r3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d106      	bne.n	8000dfe <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2200      	movs	r2, #0
 8000df6:	2103      	movs	r1, #3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fb09 	bl	8000410 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fc5e 	bl	80006c4 <LL_ADC_IsEnabled>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f040 810c 	bne.w	8001028 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	6819      	ldr	r1, [r3, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	f7ff fbb7 	bl	8000590 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	4aab      	ldr	r2, [pc, #684]	; (80010d4 <HAL_ADC_ConfigChannel+0x640>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	f040 80fd 	bne.w	8001028 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10b      	bne.n	8000e56 <HAL_ADC_ConfigChannel+0x3c2>
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	0e9b      	lsrs	r3, r3, #26
 8000e44:	3301      	adds	r3, #1
 8000e46:	f003 031f 	and.w	r3, r3, #31
 8000e4a:	2b09      	cmp	r3, #9
 8000e4c:	bf94      	ite	ls
 8000e4e:	2301      	movls	r3, #1
 8000e50:	2300      	movhi	r3, #0
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	e012      	b.n	8000e7c <HAL_ADC_ConfigChannel+0x3e8>
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e5e:	fa93 f3a3 	rbit	r3, r3
 8000e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e66:	fab3 f383 	clz	r3, r3
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	f003 031f 	and.w	r3, r3, #31
 8000e72:	2b09      	cmp	r3, #9
 8000e74:	bf94      	ite	ls
 8000e76:	2301      	movls	r3, #1
 8000e78:	2300      	movhi	r3, #0
 8000e7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d064      	beq.n	8000f4a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d107      	bne.n	8000e9c <HAL_ADC_ConfigChannel+0x408>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	0e9b      	lsrs	r3, r3, #26
 8000e92:	3301      	adds	r3, #1
 8000e94:	069b      	lsls	r3, r3, #26
 8000e96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e9a:	e00e      	b.n	8000eba <HAL_ADC_ConfigChannel+0x426>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eac:	fab3 f383 	clz	r3, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	069b      	lsls	r3, r3, #26
 8000eb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d109      	bne.n	8000eda <HAL_ADC_ConfigChannel+0x446>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	0e9b      	lsrs	r3, r3, #26
 8000ecc:	3301      	adds	r3, #1
 8000ece:	f003 031f 	and.w	r3, r3, #31
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	e010      	b.n	8000efc <HAL_ADC_ConfigChannel+0x468>
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee2:	fa93 f3a3 	rbit	r3, r3
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8000ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eea:	fab3 f383 	clz	r3, r3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	f003 031f 	and.w	r3, r3, #31
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8000efc:	ea42 0103 	orr.w	r1, r2, r3
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10a      	bne.n	8000f22 <HAL_ADC_ConfigChannel+0x48e>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	0e9b      	lsrs	r3, r3, #26
 8000f12:	3301      	adds	r3, #1
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	051b      	lsls	r3, r3, #20
 8000f20:	e011      	b.n	8000f46 <HAL_ADC_ConfigChannel+0x4b2>
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2a:	fa93 f3a3 	rbit	r3, r3
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	fab3 f383 	clz	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	3301      	adds	r3, #1
 8000f3a:	f003 021f 	and.w	r2, r3, #31
 8000f3e:	4613      	mov	r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	4413      	add	r3, r2
 8000f44:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f46:	430b      	orrs	r3, r1
 8000f48:	e069      	b.n	800101e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d107      	bne.n	8000f66 <HAL_ADC_ConfigChannel+0x4d2>
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	0e9b      	lsrs	r3, r3, #26
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	069b      	lsls	r3, r3, #26
 8000f60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f64:	e00e      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x4f0>
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6c:	6a3b      	ldr	r3, [r7, #32]
 8000f6e:	fa93 f3a3 	rbit	r3, r3
 8000f72:	61fb      	str	r3, [r7, #28]
  return result;
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	fab3 f383 	clz	r3, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	069b      	lsls	r3, r3, #26
 8000f80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d109      	bne.n	8000fa4 <HAL_ADC_ConfigChannel+0x510>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	0e9b      	lsrs	r3, r3, #26
 8000f96:	3301      	adds	r3, #1
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	e010      	b.n	8000fc6 <HAL_ADC_ConfigChannel+0x532>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	fa93 f3a3 	rbit	r3, r3
 8000fb0:	617b      	str	r3, [r7, #20]
  return result;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	fab3 f383 	clz	r3, r3
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f003 031f 	and.w	r3, r3, #31
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	ea42 0103 	orr.w	r1, r2, r3
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10d      	bne.n	8000ff2 <HAL_ADC_ConfigChannel+0x55e>
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	0e9b      	lsrs	r3, r3, #26
 8000fdc:	3301      	adds	r3, #1
 8000fde:	f003 021f 	and.w	r2, r3, #31
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3b1e      	subs	r3, #30
 8000fea:	051b      	lsls	r3, r3, #20
 8000fec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ff0:	e014      	b.n	800101c <HAL_ADC_ConfigChannel+0x588>
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	fa93 f3a3 	rbit	r3, r3
 8000ffe:	60fb      	str	r3, [r7, #12]
  return result;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	fab3 f383 	clz	r3, r3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	3301      	adds	r3, #1
 800100a:	f003 021f 	and.w	r2, r3, #31
 800100e:	4613      	mov	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	3b1e      	subs	r3, #30
 8001016:	051b      	lsls	r3, r3, #20
 8001018:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800101c:	430b      	orrs	r3, r1
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	6892      	ldr	r2, [r2, #8]
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fa8b 	bl	800053e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <HAL_ADC_ConfigChannel+0x644>)
 800102e:	4013      	ands	r3, r2
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 8083 	beq.w	800113c <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001036:	4829      	ldr	r0, [pc, #164]	; (80010dc <HAL_ADC_ConfigChannel+0x648>)
 8001038:	f7ff f9a6 	bl	8000388 <LL_ADC_GetCommonPathInternalCh>
 800103c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <HAL_ADC_ConfigChannel+0x64c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d004      	beq.n	8001054 <HAL_ADC_ConfigChannel+0x5c0>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a25      	ldr	r2, [pc, #148]	; (80010e4 <HAL_ADC_ConfigChannel+0x650>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d126      	bne.n	80010a2 <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001054:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001058:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d120      	bne.n	80010a2 <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001068:	d168      	bne.n	800113c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800106a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800106e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001072:	4619      	mov	r1, r3
 8001074:	4819      	ldr	r0, [pc, #100]	; (80010dc <HAL_ADC_ConfigChannel+0x648>)
 8001076:	f7ff f974 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <HAL_ADC_ConfigChannel+0x654>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	099b      	lsrs	r3, r3, #6
 8001080:	4a1a      	ldr	r2, [pc, #104]	; (80010ec <HAL_ADC_ConfigChannel+0x658>)
 8001082:	fba2 2303 	umull	r2, r3, r2, r3
 8001086:	099a      	lsrs	r2, r3, #6
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001092:	e002      	b.n	800109a <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	3b01      	subs	r3, #1
 8001098:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f9      	bne.n	8001094 <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80010a0:	e04c      	b.n	800113c <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <HAL_ADC_ConfigChannel+0x65c>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d125      	bne.n	80010f8 <HAL_ADC_ConfigChannel+0x664>
 80010ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d11f      	bne.n	80010f8 <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <HAL_ADC_ConfigChannel+0x660>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d03c      	beq.n	800113c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ca:	4619      	mov	r1, r3
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <HAL_ADC_ConfigChannel+0x648>)
 80010ce:	f7ff f948 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80010d2:	e033      	b.n	800113c <HAL_ADC_ConfigChannel+0x6a8>
 80010d4:	407f0000 	.word	0x407f0000
 80010d8:	80080000 	.word	0x80080000
 80010dc:	50000300 	.word	0x50000300
 80010e0:	c3210000 	.word	0xc3210000
 80010e4:	90c00010 	.word	0x90c00010
 80010e8:	20000040 	.word	0x20000040
 80010ec:	053e2d63 	.word	0x053e2d63
 80010f0:	c7520000 	.word	0xc7520000
 80010f4:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_ADC_ConfigChannel+0x6bc>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d11c      	bne.n	800113c <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001102:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d116      	bne.n	800113c <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <HAL_ADC_ConfigChannel+0x6c0>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d011      	beq.n	800113c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800111c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001120:	4619      	mov	r1, r3
 8001122:	480d      	ldr	r0, [pc, #52]	; (8001158 <HAL_ADC_ConfigChannel+0x6c4>)
 8001124:	f7ff f91d 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
 8001128:	e008      	b.n	800113c <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800112e:	f043 0220 	orr.w	r2, r3, #32
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001144:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001148:	4618      	mov	r0, r3
 800114a:	3798      	adds	r7, #152	; 0x98
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	cb840000 	.word	0xcb840000
 8001154:	50000100 	.word	0x50000100
 8001158:	50000300 	.word	0x50000300

0800115c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff faab 	bl	80006c4 <LL_ADC_IsEnabled>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d146      	bne.n	8001202 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <ADC_Enable+0xb0>)
 800117c:	4013      	ands	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00d      	beq.n	800119e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001186:	f043 0210 	orr.w	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	f043 0201 	orr.w	r2, r3, #1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e032      	b.n	8001204 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fa66 	bl	8000674 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80011a8:	f7ff f89a 	bl	80002e0 <HAL_GetTick>
 80011ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80011ae:	e021      	b.n	80011f4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fa85 	bl	80006c4 <LL_ADC_IsEnabled>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d104      	bne.n	80011ca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fa55 	bl	8000674 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011ca:	f7ff f889 	bl	80002e0 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d90d      	bls.n	80011f4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011dc:	f043 0210 	orr.w	r2, r3, #16
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e8:	f043 0201 	orr.w	r2, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e007      	b.n	8001204 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d1d6      	bne.n	80011b0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	8000003f 	.word	0x8000003f

08001210 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fa64 	bl	80006ea <LL_ADC_IsDisableOngoing>
 8001222:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fa4b 	bl	80006c4 <LL_ADC_IsEnabled>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d040      	beq.n	80012b6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d13d      	bne.n	80012b6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 030d 	and.w	r3, r3, #13
 8001244:	2b01      	cmp	r3, #1
 8001246:	d10c      	bne.n	8001262 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fa25 	bl	800069c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2203      	movs	r2, #3
 8001258:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800125a:	f7ff f841 	bl	80002e0 <HAL_GetTick>
 800125e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001260:	e022      	b.n	80012a8 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001266:	f043 0210 	orr.w	r2, r3, #16
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001272:	f043 0201 	orr.w	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e01c      	b.n	80012b8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800127e:	f7ff f82f 	bl	80002e0 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d90d      	bls.n	80012a8 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001290:	f043 0210 	orr.w	r2, r3, #16
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129c:	f043 0201 	orr.w	r2, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e007      	b.n	80012b8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1e3      	bne.n	800127e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d14b      	bne.n	8001372 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d021      	beq.n	8001338 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f8e4 	bl	80004c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d032      	beq.n	800136a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d12b      	bne.n	800136a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001316:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d11f      	bne.n	800136a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132e:	f043 0201 	orr.w	r2, r3, #1
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	65da      	str	r2, [r3, #92]	; 0x5c
 8001336:	e018      	b.n	800136a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d111      	bne.n	800136a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d105      	bne.n	800136a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001362:	f043 0201 	orr.w	r2, r3, #1
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f003 faa4 	bl	80048b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001370:	e00e      	b.n	8001390 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f7ff fb7e 	bl	8000a80 <HAL_ADC_ErrorCallback>
}
 8001384:	e004      	b.n	8001390 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	4798      	blx	r3
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f7ff fb60 	bl	8000a6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d2:	f043 0204 	orr.w	r2, r3, #4
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f7ff fb50 	bl	8000a80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013e0:	bf00      	nop
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <LL_ADC_IsEnabled>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <LL_ADC_IsEnabled+0x18>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <LL_ADC_IsEnabled+0x1a>
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <LL_ADC_StartCalibration>:
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001420:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800142a:	4313      	orrs	r3, r2
 800142c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	609a      	str	r2, [r3, #8]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_IsCalibrationOnGoing>:
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001454:	d101      	bne.n	800145a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_REG_StartConversion>:
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800147c:	f043 0204 	orr.w	r2, r3, #4
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	609a      	str	r2, [r3, #8]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_REG_IsConversionOngoing>:
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d101      	bne.n	80014a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_ADCEx_Calibration_Start+0x1c>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e04d      	b.n	8001570 <HAL_ADCEx_Calibration_Start+0xb8>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fe97 	bl	8001210 <ADC_Disable>
 80014e2:	4603      	mov	r3, r0
 80014e4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d136      	bne.n	800155a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014f4:	f023 0302 	bic.w	r3, r3, #2
 80014f8:	f043 0202 	orr.w	r2, r3, #2
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6839      	ldr	r1, [r7, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff81 	bl	800140e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800150c:	e014      	b.n	8001538 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	3301      	adds	r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4a18      	ldr	r2, [pc, #96]	; (8001578 <HAL_ADCEx_Calibration_Start+0xc0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d90d      	bls.n	8001538 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001520:	f023 0312 	bic.w	r3, r3, #18
 8001524:	f043 0210 	orr.w	r2, r3, #16
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e01b      	b.n	8001570 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff7f 	bl	8001440 <LL_ADC_IsCalibrationOnGoing>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1e2      	bne.n	800150e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154c:	f023 0303 	bic.w	r3, r3, #3
 8001550:	f043 0201 	orr.w	r2, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	65da      	str	r2, [r3, #92]	; 0x5c
 8001558:	e005      	b.n	8001566 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155e:	f043 0210 	orr.w	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	0004de01 	.word	0x0004de01

0800157c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b0a2      	sub	sp, #136	; 0x88
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff7f 	bl	8001490 <LL_ADC_REG_IsConversionOngoing>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8001598:	2302      	movs	r3, #2
 800159a:	e07e      	b.n	800169a <HAL_ADCEx_MultiModeStart_DMA+0x11e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d101      	bne.n	80015aa <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e077      	b.n	800169a <HAL_ADCEx_MultiModeStart_DMA+0x11e>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ba:	d102      	bne.n	80015c2 <HAL_ADCEx_MultiModeStart_DMA+0x46>
 80015bc:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_ADCEx_MultiModeStart_DMA+0x128>)
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	e001      	b.n	80015c6 <HAL_ADCEx_MultiModeStart_DMA+0x4a>
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10b      	bne.n	80015e4 <HAL_ADCEx_MultiModeStart_DMA+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	f043 0220 	orr.w	r2, r3, #32
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e05a      	b.n	800169a <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7ff fdb9 	bl	800115c <ADC_Enable>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 80015f0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d107      	bne.n	8001608 <HAL_ADCEx_MultiModeStart_DMA+0x8c>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fdad 	bl	800115c <ADC_Enable>
 8001602:	4603      	mov	r3, r0
 8001604:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8001608:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800160c:	2b00      	cmp	r3, #0
 800160e:	d13e      	bne.n	800168e <HAL_ADCEx_MultiModeStart_DMA+0x112>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001614:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162e:	4a1e      	ldr	r2, [pc, #120]	; (80016a8 <HAL_ADCEx_MultiModeStart_DMA+0x12c>)
 8001630:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001636:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 8001638:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163e:	4a1c      	ldr	r2, [pc, #112]	; (80016b0 <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 8001640:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 8001644:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	221c      	movs	r2, #28
 800164e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0210 	orr.w	r2, r2, #16
 8001666:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800166c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001670:	330c      	adds	r3, #12
 8001672:	4619      	mov	r1, r3
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f000 fa76 	bl	8001b68 <HAL_DMA_Start_IT>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff feee 	bl	8001468 <LL_ADC_REG_StartConversion>
 800168c:	e003      	b.n	8001696 <HAL_ADCEx_MultiModeStart_DMA+0x11a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8001696:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 800169a:	4618      	mov	r0, r3
 800169c:	3788      	adds	r7, #136	; 0x88
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	50000100 	.word	0x50000100
 80016a8:	080012c1 	.word	0x080012c1
 80016ac:	08001399 	.word	0x08001399
 80016b0:	080013b5 	.word	0x080013b5
 80016b4:	50000300 	.word	0x50000300

080016b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b0a1      	sub	sp, #132	; 0x84
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e087      	b.n	80017e6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016e6:	d102      	bne.n	80016ee <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80016e8:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	e001      	b.n	80016f2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10b      	bne.n	8001710 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fc:	f043 0220 	orr.w	r2, r3, #32
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e06a      	b.n	80017e6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff febc 	bl	8001490 <LL_ADC_REG_IsConversionOngoing>
 8001718:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff feb6 	bl	8001490 <LL_ADC_REG_IsConversionOngoing>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d14c      	bne.n	80017c4 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800172a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800172c:	2b00      	cmp	r3, #0
 800172e:	d149      	bne.n	80017c4 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001730:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001732:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d028      	beq.n	800178e <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800173c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	6859      	ldr	r1, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800174e:	035b      	lsls	r3, r3, #13
 8001750:	430b      	orrs	r3, r1
 8001752:	431a      	orrs	r2, r3
 8001754:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001756:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001758:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800175c:	f7ff fe44 	bl	80013e8 <LL_ADC_IsEnabled>
 8001760:	4604      	mov	r4, r0
 8001762:	4823      	ldr	r0, [pc, #140]	; (80017f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001764:	f7ff fe40 	bl	80013e8 <LL_ADC_IsEnabled>
 8001768:	4603      	mov	r3, r0
 800176a:	4323      	orrs	r3, r4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d133      	bne.n	80017d8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001778:	f023 030f 	bic.w	r3, r3, #15
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	6811      	ldr	r1, [r2, #0]
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	6892      	ldr	r2, [r2, #8]
 8001784:	430a      	orrs	r2, r1
 8001786:	431a      	orrs	r2, r3
 8001788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800178a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800178c:	e024      	b.n	80017d8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800178e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001798:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800179a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800179e:	f7ff fe23 	bl	80013e8 <LL_ADC_IsEnabled>
 80017a2:	4604      	mov	r4, r0
 80017a4:	4812      	ldr	r0, [pc, #72]	; (80017f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80017a6:	f7ff fe1f 	bl	80013e8 <LL_ADC_IsEnabled>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4323      	orrs	r3, r4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d112      	bne.n	80017d8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80017b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80017ba:	f023 030f 	bic.w	r3, r3, #15
 80017be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80017c0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80017c2:	e009      	b.n	80017d8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c8:	f043 0220 	orr.w	r2, r3, #32
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80017d6:	e000      	b.n	80017da <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80017d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80017e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3784      	adds	r7, #132	; 0x84
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	50000100 	.word	0x50000100
 80017f4:	50000300 	.word	0x50000300

080017f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001814:	4013      	ands	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182a:	4a04      	ldr	r2, [pc, #16]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	60d3      	str	r3, [r2, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <__NVIC_GetPriorityGrouping+0x18>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0307 	and.w	r3, r3, #7
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	2b00      	cmp	r3, #0
 800186c:	db0b      	blt.n	8001886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	4907      	ldr	r1, [pc, #28]	; (8001894 <__NVIC_EnableIRQ+0x38>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	2001      	movs	r0, #1
 800187e:	fa00 f202 	lsl.w	r2, r0, r2
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000e100 	.word	0xe000e100

08001898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db0a      	blt.n	80018c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	490c      	ldr	r1, [pc, #48]	; (80018e4 <__NVIC_SetPriority+0x4c>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	0112      	lsls	r2, r2, #4
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	440b      	add	r3, r1
 80018bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c0:	e00a      	b.n	80018d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4908      	ldr	r1, [pc, #32]	; (80018e8 <__NVIC_SetPriority+0x50>)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	3b04      	subs	r3, #4
 80018d0:	0112      	lsls	r2, r2, #4
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	440b      	add	r3, r1
 80018d6:	761a      	strb	r2, [r3, #24]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f1c3 0307 	rsb	r3, r3, #7
 8001906:	2b04      	cmp	r3, #4
 8001908:	bf28      	it	cs
 800190a:	2304      	movcs	r3, #4
 800190c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3304      	adds	r3, #4
 8001912:	2b06      	cmp	r3, #6
 8001914:	d902      	bls.n	800191c <NVIC_EncodePriority+0x30>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3b03      	subs	r3, #3
 800191a:	e000      	b.n	800191e <NVIC_EncodePriority+0x32>
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001934:	f04f 31ff 	mov.w	r1, #4294967295
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43d9      	mvns	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	4313      	orrs	r3, r2
         );
}
 8001946:	4618      	mov	r0, r3
 8001948:	3724      	adds	r7, #36	; 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001964:	d301      	bcc.n	800196a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001966:	2301      	movs	r3, #1
 8001968:	e00f      	b.n	800198a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <SysTick_Config+0x40>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001972:	210f      	movs	r1, #15
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	f7ff ff8e 	bl	8001898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <SysTick_Config+0x40>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <SysTick_Config+0x40>)
 8001984:	2207      	movs	r2, #7
 8001986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	e000e010 	.word	0xe000e010

08001998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ff29 	bl	80017f8 <__NVIC_SetPriorityGrouping>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019bc:	f7ff ff40 	bl	8001840 <__NVIC_GetPriorityGrouping>
 80019c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	6978      	ldr	r0, [r7, #20]
 80019c8:	f7ff ff90 	bl	80018ec <NVIC_EncodePriority>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff5f 	bl	8001898 <__NVIC_SetPriority>
}
 80019da:	bf00      	nop
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff33 	bl	800185c <__NVIC_EnableIRQ>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ffa4 	bl	8001954 <SysTick_Config>
 8001a0c:	4603      	mov	r3, r0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e08d      	b.n	8001b46 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <HAL_DMA_Init+0x138>)
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d80f      	bhi.n	8001a56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4b45      	ldr	r3, [pc, #276]	; (8001b54 <HAL_DMA_Init+0x13c>)
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a45      	ldr	r2, [pc, #276]	; (8001b58 <HAL_DMA_Init+0x140>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	009a      	lsls	r2, r3, #2
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a42      	ldr	r2, [pc, #264]	; (8001b5c <HAL_DMA_Init+0x144>)
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40
 8001a54:	e00e      	b.n	8001a74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b40      	ldr	r3, [pc, #256]	; (8001b60 <HAL_DMA_Init+0x148>)
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a3d      	ldr	r2, [pc, #244]	; (8001b58 <HAL_DMA_Init+0x140>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	009a      	lsls	r2, r3, #2
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a3c      	ldr	r2, [pc, #240]	; (8001b64 <HAL_DMA_Init+0x14c>)
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2202      	movs	r2, #2
 8001a78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f9b6 	bl	8001e38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ad4:	d102      	bne.n	8001adc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001af0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d010      	beq.n	8001b1c <HAL_DMA_Init+0x104>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d80c      	bhi.n	8001b1c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f9d6 	bl	8001eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	e008      	b.n	8001b2e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40020407 	.word	0x40020407
 8001b54:	bffdfff8 	.word	0xbffdfff8
 8001b58:	cccccccd 	.word	0xcccccccd
 8001b5c:	40020000 	.word	0x40020000
 8001b60:	bffdfbf8 	.word	0xbffdfbf8
 8001b64:	40020400 	.word	0x40020400

08001b68 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_DMA_Start_IT+0x20>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e066      	b.n	8001c56 <HAL_DMA_Start_IT+0xee>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d155      	bne.n	8001c48 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 f8fb 	bl	8001dbc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d008      	beq.n	8001be0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 020e 	orr.w	r2, r2, #14
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	e00f      	b.n	8001c00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0204 	bic.w	r2, r2, #4
 8001bee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 020a 	orr.w	r2, r2, #10
 8001bfe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c1c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c34:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	e005      	b.n	8001c54 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c50:	2302      	movs	r3, #2
 8001c52:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	2204      	movs	r2, #4
 8001c80:	409a      	lsls	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d026      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x7a>
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d021      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0320 	and.w	r3, r3, #32
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d107      	bne.n	8001cb2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0204 	bic.w	r2, r2, #4
 8001cb0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f003 021f 	and.w	r2, r3, #31
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	2104      	movs	r1, #4
 8001cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d071      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001cd6:	e06c      	b.n	8001db2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d02e      	beq.n	8001d4a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d029      	beq.n	8001d4a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0320 	and.w	r3, r3, #32
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10b      	bne.n	8001d1c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 020a 	bic.w	r2, r2, #10
 8001d12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	2102      	movs	r1, #2
 8001d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d038      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001d48:	e033      	b.n	8001db2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	2208      	movs	r2, #8
 8001d54:	409a      	lsls	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d02a      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d025      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 020e 	bic.w	r2, r2, #14
 8001d76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	2101      	movs	r1, #1
 8001d86:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001db2:	bf00      	nop
 8001db4:	bf00      	nop
}
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001dd2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d004      	beq.n	8001de6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001de4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f003 021f 	and.w	r2, r3, #31
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b10      	cmp	r3, #16
 8001e08:	d108      	bne.n	8001e1c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e1a:	e007      	b.n	8001e2c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	60da      	str	r2, [r3, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d802      	bhi.n	8001e52 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001e4c:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	e001      	b.n	8001e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001e54:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3b08      	subs	r3, #8
 8001e62:	4a12      	ldr	r2, [pc, #72]	; (8001eac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	009a      	lsls	r2, r3, #2
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4413      	add	r3, r2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001e82:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e92:	bf00      	nop
 8001e94:	371c      	adds	r7, #28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40020407 	.word	0x40020407
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	40020820 	.word	0x40020820
 8001eac:	cccccccd 	.word	0xcccccccd
 8001eb0:	40020880 	.word	0x40020880

08001eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001ed6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	1000823f 	.word	0x1000823f
 8001ef8:	40020940 	.word	0x40020940

08001efc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e147      	b.n	800219e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f003 fac2 	bl	80054ac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0210 	bic.w	r2, r2, #16
 8001f36:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f38:	f7fe f9d2 	bl	80002e0 <HAL_GetTick>
 8001f3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001f3e:	e012      	b.n	8001f66 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001f40:	f7fe f9ce 	bl	80002e0 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b0a      	cmp	r3, #10
 8001f4c:	d90b      	bls.n	8001f66 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f52:	f043 0201 	orr.w	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e11b      	b.n	800219e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d0e5      	beq.n	8001f40 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f84:	f7fe f9ac 	bl	80002e0 <HAL_GetTick>
 8001f88:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001f8a:	e012      	b.n	8001fb2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001f8c:	f7fe f9a8 	bl	80002e0 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b0a      	cmp	r3, #10
 8001f98:	d90b      	bls.n	8001fb2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9e:	f043 0201 	orr.w	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2203      	movs	r2, #3
 8001faa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0f5      	b.n	800219e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0e5      	beq.n	8001f8c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699a      	ldr	r2, [r3, #24]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0202 	orr.w	r2, r2, #2
 8001fce:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a74      	ldr	r2, [pc, #464]	; (80021a8 <HAL_FDCAN_Init+0x2ac>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d103      	bne.n	8001fe2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001fda:	4a74      	ldr	r2, [pc, #464]	; (80021ac <HAL_FDCAN_Init+0x2b0>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	7c1b      	ldrb	r3, [r3, #16]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d108      	bne.n	8001ffc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699a      	ldr	r2, [r3, #24]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ff8:	619a      	str	r2, [r3, #24]
 8001ffa:	e007      	b.n	800200c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699a      	ldr	r2, [r3, #24]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800200a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	7c5b      	ldrb	r3, [r3, #17]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d108      	bne.n	8002026 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002022:	619a      	str	r2, [r3, #24]
 8002024:	e007      	b.n	8002036 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002034:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7c9b      	ldrb	r3, [r3, #18]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d108      	bne.n	8002050 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800204c:	619a      	str	r2, [r3, #24]
 800204e:	e007      	b.n	8002060 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800205e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699a      	ldr	r2, [r3, #24]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002084:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0210 	bic.w	r2, r2, #16
 8002094:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d108      	bne.n	80020b0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699a      	ldr	r2, [r3, #24]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0204 	orr.w	r2, r2, #4
 80020ac:	619a      	str	r2, [r3, #24]
 80020ae:	e02c      	b.n	800210a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d028      	beq.n	800210a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d01c      	beq.n	80020fa <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020ce:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0210 	orr.w	r2, r2, #16
 80020de:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d110      	bne.n	800210a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0220 	orr.w	r2, r2, #32
 80020f6:	619a      	str	r2, [r3, #24]
 80020f8:	e007      	b.n	800210a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0220 	orr.w	r2, r2, #32
 8002108:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	3b01      	subs	r3, #1
 8002110:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	3b01      	subs	r3, #1
 8002118:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800211a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002122:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	3b01      	subs	r3, #1
 800212c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002132:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002134:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800213e:	d115      	bne.n	800216c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	3b01      	subs	r3, #1
 800214c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800214e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	3b01      	subs	r3, #1
 8002156:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002158:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	3b01      	subs	r3, #1
 8002162:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002168:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800216a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fcb8 	bl	8002af8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40006400 	.word	0x40006400
 80021ac:	40006500 	.word	0x40006500

080021b0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80021c0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80021c2:	7dfb      	ldrb	r3, [r7, #23]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d002      	beq.n	80021ce <HAL_FDCAN_ConfigFilter+0x1e>
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d13d      	bne.n	800224a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d119      	bne.n	800220a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80021e2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80021ea:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e01d      	b.n	8002246 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	075a      	lsls	r2, r3, #29
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	079a      	lsls	r2, r3, #30
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	3304      	adds	r3, #4
 800223e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e006      	b.n	8002258 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224e:	f043 0202 	orr.w	r2, r3, #2
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
  }
}
 8002258:	4618      	mov	r0, r3
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d116      	bne.n	80022ac <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002286:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	011a      	lsls	r2, r3, #4
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	431a      	orrs	r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	431a      	orrs	r2, r3
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	431a      	orrs	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                         (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                                         (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                                         (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	e006      	b.n	80022ba <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b0:	f043 0204 	orr.w	r2, r3, #4
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
  }
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b085      	sub	sp, #20
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d11f      	bne.n	800231e <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d10d      	bne.n	8002300 <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ec:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	025a      	lsls	r2, r3, #9
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80022fe:	e00c      	b.n	800231a <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002308:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	021a      	lsls	r2, r3, #8
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Return function status */
    return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e006      	b.n	800232c <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002322:	f043 0204 	orr.w	r2, r3, #4
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
  }
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b01      	cmp	r3, #1
 800234a:	d110      	bne.n	800236e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0201 	bic.w	r2, r2, #1
 8002362:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e006      	b.n	800237c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002372:	f043 0204 	orr.w	r2, r3, #4
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
  }
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d12c      	bne.n	80023fa <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80023a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d007      	beq.n	80023c0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e023      	b.n	8002408 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 fbe4 	bl	8002ba4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2101      	movs	r1, #1
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	fa01 f202 	lsl.w	r2, r1, r2
 80023e8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80023ec:	2201      	movs	r2, #1
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	409a      	lsls	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e006      	b.n	8002408 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fe:	f043 0208 	orr.w	r2, r3, #8
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
  }
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002410:	b480      	push	{r7}
 8002412:	b08b      	sub	sp, #44	; 0x2c
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002424:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002426:	7efb      	ldrb	r3, [r7, #27]
 8002428:	2b02      	cmp	r3, #2
 800242a:	f040 80bc 	bne.w	80025a6 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b40      	cmp	r3, #64	; 0x40
 8002432:	d121      	bne.n	8002478 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	2b00      	cmp	r3, #0
 8002442:	d107      	bne.n	8002454 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002448:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0af      	b.n	80025b4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	440b      	add	r3, r1
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
 8002476:	e020      	b.n	80024ba <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e08d      	b.n	80025b4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	440b      	add	r3, r1
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d107      	bne.n	80024de <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0c9b      	lsrs	r3, r3, #18
 80024d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e005      	b.n	80024ea <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	3304      	adds	r3, #4
 8002506:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	b29a      	uxth	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	0e1b      	lsrs	r3, r3, #24
 800253c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0fda      	lsrs	r2, r3, #31
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	3304      	adds	r3, #4
 8002552:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002558:	2300      	movs	r3, #0
 800255a:	623b      	str	r3, [r7, #32]
 800255c:	e00a      	b.n	8002574 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	441a      	add	r2, r3
 8002564:	6839      	ldr	r1, [r7, #0]
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	440b      	add	r3, r1
 800256a:	7812      	ldrb	r2, [r2, #0]
 800256c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	3301      	adds	r3, #1
 8002572:	623b      	str	r3, [r7, #32]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	4a11      	ldr	r2, [pc, #68]	; (80025c0 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800257c:	5cd3      	ldrb	r3, [r2, r3]
 800257e:	461a      	mov	r2, r3
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	4293      	cmp	r3, r2
 8002584:	d3eb      	bcc.n	800255e <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b40      	cmp	r3, #64	; 0x40
 800258a:	d105      	bne.n	8002598 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69fa      	ldr	r2, [r7, #28]
 8002592:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8002596:	e004      	b.n	80025a2 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e006      	b.n	80025b4 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	f043 0208 	orr.w	r2, r3, #8
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
  }
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	372c      	adds	r7, #44	; 0x2c
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	080056cc 	.word	0x080056cc

080025c4 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80025da:	68fb      	ldr	r3, [r7, #12]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80025fa:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d003      	beq.n	800260a <HAL_FDCAN_ActivateNotification+0x22>
 8002602:	7dfb      	ldrb	r3, [r7, #23]
 8002604:	2b02      	cmp	r3, #2
 8002606:	f040 80c8 	bne.w	800279a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	2b00      	cmp	r3, #0
 800261a:	d004      	beq.n	8002626 <HAL_FDCAN_ActivateNotification+0x3e>
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d03b      	beq.n	800269e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d031      	beq.n	800269e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b00      	cmp	r3, #0
 800264c:	d027      	beq.n	800269e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002654:	2b00      	cmp	r3, #0
 8002656:	d004      	beq.n	8002662 <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d01d      	beq.n	800269e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002668:	2b00      	cmp	r3, #0
 800266a:	d004      	beq.n	8002676 <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d013      	beq.n	800269e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00c      	beq.n	80026ae <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d107      	bne.n	80026ae <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_FDCAN_ActivateNotification+0xda>
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d13b      	bne.n	800273a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d004      	beq.n	80026d6 <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d131      	bne.n	800273a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d004      	beq.n	80026ea <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d127      	bne.n	800273a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d004      	beq.n	80026fe <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d11d      	bne.n	800273a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002704:	2b00      	cmp	r3, #0
 8002706:	d004      	beq.n	8002712 <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b00      	cmp	r3, #0
 8002710:	d113      	bne.n	800273a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002718:	2b00      	cmp	r3, #0
 800271a:	d004      	beq.n	8002726 <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00c      	beq.n	800274a <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0202 	orr.w	r2, r2, #2
 8002748:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	430a      	orrs	r2, r1
 8002764:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	430a      	orrs	r2, r1
 8002782:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	430a      	orrs	r2, r1
 8002794:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e006      	b.n	80027a8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279e:	f043 0202 	orr.w	r2, r3, #2
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
  }
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d0:	4013      	ands	r3, r2
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	6a3a      	ldr	r2, [r7, #32]
 80027e8:	4013      	ands	r3, r2
 80027ea:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027f6:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	4013      	ands	r3, r2
 8002802:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800280e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002822:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002826:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4013      	ands	r3, r2
 8002832:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00d      	beq.n	800285e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	d006      	beq.n	800285e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2240      	movs	r2, #64	; 0x40
 8002856:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f92e 	bl	8002aba <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01b      	beq.n	80028a4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d014      	beq.n	80028a4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002882:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800289a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800289c:	6939      	ldr	r1, [r7, #16]
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f8ec 	bl	8002a7c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80028b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f8b6 	bl	8002a26 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6a3a      	ldr	r2, [r7, #32]
 80028c6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80028c8:	6a39      	ldr	r1, [r7, #32]
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f002 f90a 	bl	8004ae4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69fa      	ldr	r2, [r7, #28]
 80028dc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80028de:	69f9      	ldr	r1, [r7, #28]
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f8ab 	bl	8002a3c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00e      	beq.n	8002912 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f8a0 	bl	8002a52 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01a      	beq.n	8002956 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	2b00      	cmp	r3, #0
 800292c:	d013      	beq.n	8002956 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002936:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4013      	ands	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2280      	movs	r2, #128	; 0x80
 800294c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800294e:	68f9      	ldr	r1, [r7, #12]
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f888 	bl	8002a66 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00e      	beq.n	8002982 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d007      	beq.n	8002982 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800297a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f888 	bl	8002a92 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00e      	beq.n	80029ae <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d007      	beq.n	80029ae <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80029a6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f87c 	bl	8002aa6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d011      	beq.n	80029e0 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80029ee:	6979      	ldr	r1, [r7, #20]
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f876 	bl	8002ae2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d009      	beq.n	8002a10 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f858 	bl	8002ace <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002a1e:	bf00      	nop
 8002a20:	3728      	adds	r7, #40	; 0x28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002b00:	4b27      	ldr	r3, [pc, #156]	; (8002ba0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002b02:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b12:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1a:	041a      	lsls	r2, r3, #16
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b38:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b40:	061a      	lsls	r2, r3, #24
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	e005      	b.n	8002b86 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3304      	adds	r3, #4
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d3f3      	bcc.n	8002b7a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	4000a400 	.word	0x4000a400

08002ba4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b089      	sub	sp, #36	; 0x24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002bc2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	e00a      	b.n	8002be6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002bd8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002bde:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002be0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002be4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002bf0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002bf6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002bfc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	440b      	add	r3, r1
 8002c16:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	3304      	adds	r3, #4
 8002c22:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	e020      	b.n	8002c78 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	3303      	adds	r3, #3
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	3302      	adds	r3, #2
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	440b      	add	r3, r1
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002c4e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	3301      	adds	r3, #1
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	440b      	add	r3, r1
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002c5c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	440a      	add	r2, r1
 8002c64:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002c66:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	3304      	adds	r3, #4
 8002c70:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	3304      	adds	r3, #4
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	4a06      	ldr	r2, [pc, #24]	; (8002c98 <FDCAN_CopyMessageToRAM+0xf4>)
 8002c80:	5cd3      	ldrb	r3, [r2, r3]
 8002c82:	461a      	mov	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d3d5      	bcc.n	8002c36 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	080056cc 	.word	0x080056cc

08002c9c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002cae:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <HAL_FLASH_Program+0xa4>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_FLASH_Program+0x1e>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e03e      	b.n	8002d38 <HAL_FLASH_Program+0x9c>
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <HAL_FLASH_Program+0xa4>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cc4:	f000 f87c 	bl	8002dc0 <FLASH_WaitForLastOperation>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d12e      	bne.n	8002d30 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002cd2:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <HAL_FLASH_Program+0xa4>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d107      	bne.n	8002cee <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002cde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ce2:	68b8      	ldr	r0, [r7, #8]
 8002ce4:	f000 f8c0 	bl	8002e68 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	e010      	b.n	8002d10 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d002      	beq.n	8002cfa <HAL_FLASH_Program+0x5e>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d10a      	bne.n	8002d10 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	68b8      	ldr	r0, [r7, #8]
 8002d00:	f000 f8d6 	bl	8002eb0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d102      	bne.n	8002d10 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8002d0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d0e:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d14:	f000 f854 	bl	8002dc0 <FLASH_WaitForLastOperation>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <HAL_FLASH_Program+0xa8>)
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	4906      	ldr	r1, [pc, #24]	; (8002d44 <HAL_FLASH_Program+0xa8>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <HAL_FLASH_Program+0xa4>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000008 	.word	0x20000008
 8002d44:	40022000 	.word	0x40022000

08002d48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_FLASH_Unlock+0x38>)
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	da0b      	bge.n	8002d72 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_FLASH_Unlock+0x38>)
 8002d5c:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <HAL_FLASH_Unlock+0x3c>)
 8002d5e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <HAL_FLASH_Unlock+0x38>)
 8002d62:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <HAL_FLASH_Unlock+0x40>)
 8002d64:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_FLASH_Unlock+0x38>)
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	da01      	bge.n	8002d72 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002d72:	79fb      	ldrb	r3, [r7, #7]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	40022000 	.word	0x40022000
 8002d84:	45670123 	.word	0x45670123
 8002d88:	cdef89ab 	.word	0xcdef89ab

08002d8c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002d96:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <HAL_FLASH_Lock+0x30>)
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <HAL_FLASH_Lock+0x30>)
 8002d9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002da0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_FLASH_Lock+0x30>)
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	da01      	bge.n	8002dae <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002dae:	79fb      	ldrb	r3, [r7, #7]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	40022000 	.word	0x40022000

08002dc0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7fd fa8a 	bl	80002e0 <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002dce:	e009      	b.n	8002de4 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8002dd0:	f7fd fa86 	bl	80002e0 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d201      	bcs.n	8002de4 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e038      	b.n	8002e56 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002de4:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <FLASH_WaitForLastOperation+0xa0>)
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df0:	d0ee      	beq.n	8002dd0 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002df2:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <FLASH_WaitForLastOperation+0xa0>)
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01e      	beq.n	8002e42 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8002e04:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <FLASH_WaitForLastOperation+0xa4>)
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	4a15      	ldr	r2, [pc, #84]	; (8002e64 <FLASH_WaitForLastOperation+0xa4>)
 8002e0e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d007      	beq.n	8002e2a <FLASH_WaitForLastOperation+0x6a>
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <FLASH_WaitForLastOperation+0xa0>)
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002e24:	490e      	ldr	r1, [pc, #56]	; (8002e60 <FLASH_WaitForLastOperation+0xa0>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	618b      	str	r3, [r1, #24]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d004      	beq.n	8002e3e <FLASH_WaitForLastOperation+0x7e>
 8002e34:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <FLASH_WaitForLastOperation+0xa0>)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002e3c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e009      	b.n	8002e56 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <FLASH_WaitForLastOperation+0xa0>)
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002e4e:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <FLASH_WaitForLastOperation+0xa0>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40022000 	.word	0x40022000
 8002e64:	20000008 	.word	0x20000008

08002e68 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002e68:	b490      	push	{r4, r7}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002e74:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <FLASH_Program_DoubleWord+0x44>)
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	4a0c      	ldr	r2, [pc, #48]	; (8002eac <FLASH_Program_DoubleWord+0x44>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002e86:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8002e8a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	f04f 0400 	mov.w	r4, #0
 8002e96:	0013      	movs	r3, r2
 8002e98:	2400      	movs	r4, #0
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	3204      	adds	r2, #4
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc90      	pop	{r4, r7}
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40022000 	.word	0x40022000

08002eb0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b089      	sub	sp, #36	; 0x24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8002eba:	2340      	movs	r3, #64	; 0x40
 8002ebc:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <FLASH_Program_Fast+0x64>)
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <FLASH_Program_Fast+0x64>)
 8002ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ed8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8002eda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002edc:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	617b      	str	r3, [r7, #20]
    row_index--;
 8002ef2:	7ffb      	ldrb	r3, [r7, #31]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8002ef8:	7ffb      	ldrb	r3, [r7, #31]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1ef      	bne.n	8002ede <FLASH_Program_Fast+0x2e>
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002f08:	bf00      	nop
 8002f0a:	3724      	adds	r7, #36	; 0x24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40022000 	.word	0x40022000

08002f18 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f22:	4b4a      	ldr	r3, [pc, #296]	; (800304c <HAL_FLASHEx_Erase+0x134>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_FLASHEx_Erase+0x16>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e089      	b.n	8003042 <HAL_FLASHEx_Erase+0x12a>
 8002f2e:	4b47      	ldr	r3, [pc, #284]	; (800304c <HAL_FLASHEx_Erase+0x134>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f38:	f7ff ff42 	bl	8002dc0 <FLASH_WaitForLastOperation>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d179      	bne.n	800303a <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f46:	4b41      	ldr	r3, [pc, #260]	; (800304c <HAL_FLASHEx_Erase+0x134>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002f4c:	4b40      	ldr	r3, [pc, #256]	; (8003050 <HAL_FLASHEx_Erase+0x138>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d019      	beq.n	8002f8c <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002f58:	4b3d      	ldr	r3, [pc, #244]	; (8003050 <HAL_FLASHEx_Erase+0x138>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a3c      	ldr	r2, [pc, #240]	; (8003050 <HAL_FLASHEx_Erase+0x138>)
 8002f5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f62:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002f64:	4b3a      	ldr	r3, [pc, #232]	; (8003050 <HAL_FLASHEx_Erase+0x138>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002f70:	4b37      	ldr	r3, [pc, #220]	; (8003050 <HAL_FLASHEx_Erase+0x138>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a36      	ldr	r2, [pc, #216]	; (8003050 <HAL_FLASHEx_Erase+0x138>)
 8002f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f7a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002f7c:	4b33      	ldr	r3, [pc, #204]	; (800304c <HAL_FLASHEx_Erase+0x134>)
 8002f7e:	2203      	movs	r2, #3
 8002f80:	771a      	strb	r2, [r3, #28]
 8002f82:	e016      	b.n	8002fb2 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002f84:	4b31      	ldr	r3, [pc, #196]	; (800304c <HAL_FLASHEx_Erase+0x134>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	771a      	strb	r2, [r3, #28]
 8002f8a:	e012      	b.n	8002fb2 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002f8c:	4b30      	ldr	r3, [pc, #192]	; (8003050 <HAL_FLASHEx_Erase+0x138>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002f98:	4b2d      	ldr	r3, [pc, #180]	; (8003050 <HAL_FLASHEx_Erase+0x138>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a2c      	ldr	r2, [pc, #176]	; (8003050 <HAL_FLASHEx_Erase+0x138>)
 8002f9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fa2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002fa4:	4b29      	ldr	r3, [pc, #164]	; (800304c <HAL_FLASHEx_Erase+0x134>)
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	771a      	strb	r2, [r3, #28]
 8002faa:	e002      	b.n	8002fb2 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002fac:	4b27      	ldr	r3, [pc, #156]	; (800304c <HAL_FLASHEx_Erase+0x134>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d111      	bne.n	8002fde <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f848 	bl	8003054 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fc8:	f7ff fefa 	bl	8002dc0 <FLASH_WaitForLastOperation>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8002fd0:	4b1f      	ldr	r3, [pc, #124]	; (8003050 <HAL_FLASHEx_Erase+0x138>)
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	4a1e      	ldr	r2, [pc, #120]	; (8003050 <HAL_FLASHEx_Erase+0x138>)
 8002fd6:	f023 0304 	bic.w	r3, r3, #4
 8002fda:	6153      	str	r3, [r2, #20]
 8002fdc:	e02b      	b.n	8003036 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe4:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	e01b      	b.n	8003026 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	68b8      	ldr	r0, [r7, #8]
 8002ff6:	f000 f84b 	bl	8003090 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ffa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ffe:	f7ff fedf 	bl	8002dc0 <FLASH_WaitForLastOperation>
 8003002:	4603      	mov	r3, r0
 8003004:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <HAL_FLASHEx_Erase+0x138>)
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	4a11      	ldr	r2, [pc, #68]	; (8003050 <HAL_FLASHEx_Erase+0x138>)
 800300c:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8003010:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	601a      	str	r2, [r3, #0]
          break;
 800301e:	e00a      	b.n	8003036 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	3301      	adds	r3, #1
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	4413      	add	r3, r2
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	d3db      	bcc.n	8002fee <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003036:	f000 f84f 	bl	80030d8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800303a:	4b04      	ldr	r3, [pc, #16]	; (800304c <HAL_FLASHEx_Erase+0x134>)
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]

  return status;
 8003040:	7bfb      	ldrb	r3, [r7, #15]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000008 	.word	0x20000008
 8003050:	40022000 	.word	0x40022000

08003054 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <FLASH_MassErase+0x38>)
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	4a08      	ldr	r2, [pc, #32]	; (800308c <FLASH_MassErase+0x38>)
 800306c:	f043 0304 	orr.w	r3, r3, #4
 8003070:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <FLASH_MassErase+0x38>)
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	4a05      	ldr	r2, [pc, #20]	; (800308c <FLASH_MassErase+0x38>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6153      	str	r3, [r2, #20]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40022000 	.word	0x40022000

08003090 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800309a:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <FLASH_PageErase+0x44>)
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80030aa:	490a      	ldr	r1, [pc, #40]	; (80030d4 <FLASH_PageErase+0x44>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <FLASH_PageErase+0x44>)
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <FLASH_PageErase+0x44>)
 80030b6:	f043 0302 	orr.w	r3, r3, #2
 80030ba:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <FLASH_PageErase+0x44>)
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <FLASH_PageErase+0x44>)
 80030c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c6:	6153      	str	r3, [r2, #20]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	40022000 	.word	0x40022000

080030d8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80030de:	4b1e      	ldr	r3, [pc, #120]	; (8003158 <FLASH_FlushCaches+0x80>)
 80030e0:	7f1b      	ldrb	r3, [r3, #28]
 80030e2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d002      	beq.n	80030f0 <FLASH_FlushCaches+0x18>
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d111      	bne.n	8003114 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80030f0:	4b1a      	ldr	r3, [pc, #104]	; (800315c <FLASH_FlushCaches+0x84>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a19      	ldr	r2, [pc, #100]	; (800315c <FLASH_FlushCaches+0x84>)
 80030f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b17      	ldr	r3, [pc, #92]	; (800315c <FLASH_FlushCaches+0x84>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a16      	ldr	r2, [pc, #88]	; (800315c <FLASH_FlushCaches+0x84>)
 8003102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003106:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <FLASH_FlushCaches+0x84>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a13      	ldr	r2, [pc, #76]	; (800315c <FLASH_FlushCaches+0x84>)
 800310e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003112:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d002      	beq.n	8003120 <FLASH_FlushCaches+0x48>
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d111      	bne.n	8003144 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <FLASH_FlushCaches+0x84>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0d      	ldr	r2, [pc, #52]	; (800315c <FLASH_FlushCaches+0x84>)
 8003126:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <FLASH_FlushCaches+0x84>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0a      	ldr	r2, [pc, #40]	; (800315c <FLASH_FlushCaches+0x84>)
 8003132:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003136:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003138:	4b08      	ldr	r3, [pc, #32]	; (800315c <FLASH_FlushCaches+0x84>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a07      	ldr	r2, [pc, #28]	; (800315c <FLASH_FlushCaches+0x84>)
 800313e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003142:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <FLASH_FlushCaches+0x80>)
 8003146:	2200      	movs	r2, #0
 8003148:	771a      	strb	r2, [r3, #28]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000008 	.word	0x20000008
 800315c:	40022000 	.word	0x40022000

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800316e:	e15a      	b.n	8003426 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	2101      	movs	r1, #1
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	4013      	ands	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 814c 	beq.w	8003420 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d003      	beq.n	8003198 <HAL_GPIO_Init+0x38>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b12      	cmp	r3, #18
 8003196:	d123      	bne.n	80031e0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	08da      	lsrs	r2, r3, #3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3208      	adds	r2, #8
 80031a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	220f      	movs	r2, #15
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	08da      	lsrs	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3208      	adds	r2, #8
 80031da:	6939      	ldr	r1, [r7, #16]
 80031dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	2203      	movs	r2, #3
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0203 	and.w	r2, r3, #3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d00b      	beq.n	8003234 <HAL_GPIO_Init+0xd4>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d007      	beq.n	8003234 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003228:	2b11      	cmp	r3, #17
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b12      	cmp	r3, #18
 8003232:	d130      	bne.n	8003296 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	2203      	movs	r2, #3
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4013      	ands	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800326a:	2201      	movs	r2, #1
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4013      	ands	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	f003 0201 	and.w	r2, r3, #1
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	2203      	movs	r2, #3
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80a6 	beq.w	8003420 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d4:	4b5b      	ldr	r3, [pc, #364]	; (8003444 <HAL_GPIO_Init+0x2e4>)
 80032d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d8:	4a5a      	ldr	r2, [pc, #360]	; (8003444 <HAL_GPIO_Init+0x2e4>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6613      	str	r3, [r2, #96]	; 0x60
 80032e0:	4b58      	ldr	r3, [pc, #352]	; (8003444 <HAL_GPIO_Init+0x2e4>)
 80032e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ec:	4a56      	ldr	r2, [pc, #344]	; (8003448 <HAL_GPIO_Init+0x2e8>)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	3302      	adds	r3, #2
 80032f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	220f      	movs	r2, #15
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003316:	d01f      	beq.n	8003358 <HAL_GPIO_Init+0x1f8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a4c      	ldr	r2, [pc, #304]	; (800344c <HAL_GPIO_Init+0x2ec>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d019      	beq.n	8003354 <HAL_GPIO_Init+0x1f4>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a4b      	ldr	r2, [pc, #300]	; (8003450 <HAL_GPIO_Init+0x2f0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d013      	beq.n	8003350 <HAL_GPIO_Init+0x1f0>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a4a      	ldr	r2, [pc, #296]	; (8003454 <HAL_GPIO_Init+0x2f4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00d      	beq.n	800334c <HAL_GPIO_Init+0x1ec>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a49      	ldr	r2, [pc, #292]	; (8003458 <HAL_GPIO_Init+0x2f8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <HAL_GPIO_Init+0x1e8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a48      	ldr	r2, [pc, #288]	; (800345c <HAL_GPIO_Init+0x2fc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d101      	bne.n	8003344 <HAL_GPIO_Init+0x1e4>
 8003340:	2305      	movs	r3, #5
 8003342:	e00a      	b.n	800335a <HAL_GPIO_Init+0x1fa>
 8003344:	2306      	movs	r3, #6
 8003346:	e008      	b.n	800335a <HAL_GPIO_Init+0x1fa>
 8003348:	2304      	movs	r3, #4
 800334a:	e006      	b.n	800335a <HAL_GPIO_Init+0x1fa>
 800334c:	2303      	movs	r3, #3
 800334e:	e004      	b.n	800335a <HAL_GPIO_Init+0x1fa>
 8003350:	2302      	movs	r3, #2
 8003352:	e002      	b.n	800335a <HAL_GPIO_Init+0x1fa>
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <HAL_GPIO_Init+0x1fa>
 8003358:	2300      	movs	r3, #0
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	f002 0203 	and.w	r2, r2, #3
 8003360:	0092      	lsls	r2, r2, #2
 8003362:	4093      	lsls	r3, r2
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800336a:	4937      	ldr	r1, [pc, #220]	; (8003448 <HAL_GPIO_Init+0x2e8>)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	3302      	adds	r3, #2
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003378:	4b39      	ldr	r3, [pc, #228]	; (8003460 <HAL_GPIO_Init+0x300>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	43db      	mvns	r3, r3
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800339c:	4a30      	ldr	r2, [pc, #192]	; (8003460 <HAL_GPIO_Init+0x300>)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80033a2:	4b2f      	ldr	r3, [pc, #188]	; (8003460 <HAL_GPIO_Init+0x300>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033c6:	4a26      	ldr	r2, [pc, #152]	; (8003460 <HAL_GPIO_Init+0x300>)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033cc:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_GPIO_Init+0x300>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033f0:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <HAL_GPIO_Init+0x300>)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033f6:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <HAL_GPIO_Init+0x300>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800341a:	4a11      	ldr	r2, [pc, #68]	; (8003460 <HAL_GPIO_Init+0x300>)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	3301      	adds	r3, #1
 8003424:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	f47f ae9d 	bne.w	8003170 <HAL_GPIO_Init+0x10>
  }
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	40010000 	.word	0x40010000
 800344c:	48000400 	.word	0x48000400
 8003450:	48000800 	.word	0x48000800
 8003454:	48000c00 	.word	0x48000c00
 8003458:	48001000 	.word	0x48001000
 800345c:	48001400 	.word	0x48001400
 8003460:	40010400 	.word	0x40010400

08003464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
 8003470:	4613      	mov	r3, r2
 8003472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003474:	787b      	ldrb	r3, [r7, #1]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800347a:	887a      	ldrh	r2, [r7, #2]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003480:	e002      	b.n	8003488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003482:	887a      	ldrh	r2, [r7, #2]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	887b      	ldrh	r3, [r7, #2]
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034ac:	887a      	ldrh	r2, [r7, #2]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80034b2:	e002      	b.n	80034ba <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034b4:	887a      	ldrh	r2, [r7, #2]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	619a      	str	r2, [r3, #24]
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d141      	bne.n	800355a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034d6:	4b4b      	ldr	r3, [pc, #300]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e2:	d131      	bne.n	8003548 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034e4:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ea:	4a46      	ldr	r2, [pc, #280]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034f4:	4b43      	ldr	r3, [pc, #268]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034fc:	4a41      	ldr	r2, [pc, #260]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003502:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003504:	4b40      	ldr	r3, [pc, #256]	; (8003608 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2232      	movs	r2, #50	; 0x32
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	4a3f      	ldr	r2, [pc, #252]	; (800360c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	0c9b      	lsrs	r3, r3, #18
 8003516:	3301      	adds	r3, #1
 8003518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800351a:	e002      	b.n	8003522 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3b01      	subs	r3, #1
 8003520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003522:	4b38      	ldr	r3, [pc, #224]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352e:	d102      	bne.n	8003536 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f2      	bne.n	800351c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003536:	4b33      	ldr	r3, [pc, #204]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003542:	d158      	bne.n	80035f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e057      	b.n	80035f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003548:	4b2e      	ldr	r3, [pc, #184]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800354a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800354e:	4a2d      	ldr	r2, [pc, #180]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003554:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003558:	e04d      	b.n	80035f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003560:	d141      	bne.n	80035e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003562:	4b28      	ldr	r3, [pc, #160]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800356a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800356e:	d131      	bne.n	80035d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003570:	4b24      	ldr	r3, [pc, #144]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003576:	4a23      	ldr	r2, [pc, #140]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003580:	4b20      	ldr	r3, [pc, #128]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003588:	4a1e      	ldr	r2, [pc, #120]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800358a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800358e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003590:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2232      	movs	r2, #50	; 0x32
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	4a1c      	ldr	r2, [pc, #112]	; (800360c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	0c9b      	lsrs	r3, r3, #18
 80035a2:	3301      	adds	r3, #1
 80035a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035a6:	e002      	b.n	80035ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ba:	d102      	bne.n	80035c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f2      	bne.n	80035a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ce:	d112      	bne.n	80035f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e011      	b.n	80035f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035da:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80035e4:	e007      	b.n	80035f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035e6:	4b07      	ldr	r3, [pc, #28]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035ee:	4a05      	ldr	r2, [pc, #20]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40007000 	.word	0x40007000
 8003608:	20000040 	.word	0x20000040
 800360c:	431bde83 	.word	0x431bde83

08003610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e308      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d075      	beq.n	800371a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800362e:	4ba3      	ldr	r3, [pc, #652]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003638:	4ba0      	ldr	r3, [pc, #640]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	2b0c      	cmp	r3, #12
 8003646:	d102      	bne.n	800364e <HAL_RCC_OscConfig+0x3e>
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d002      	beq.n	8003654 <HAL_RCC_OscConfig+0x44>
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b08      	cmp	r3, #8
 8003652:	d10b      	bne.n	800366c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003654:	4b99      	ldr	r3, [pc, #612]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d05b      	beq.n	8003718 <HAL_RCC_OscConfig+0x108>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d157      	bne.n	8003718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e2e3      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003674:	d106      	bne.n	8003684 <HAL_RCC_OscConfig+0x74>
 8003676:	4b91      	ldr	r3, [pc, #580]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a90      	ldr	r2, [pc, #576]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 800367c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e01d      	b.n	80036c0 <HAL_RCC_OscConfig+0xb0>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800368c:	d10c      	bne.n	80036a8 <HAL_RCC_OscConfig+0x98>
 800368e:	4b8b      	ldr	r3, [pc, #556]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a8a      	ldr	r2, [pc, #552]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	4b88      	ldr	r3, [pc, #544]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a87      	ldr	r2, [pc, #540]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	e00b      	b.n	80036c0 <HAL_RCC_OscConfig+0xb0>
 80036a8:	4b84      	ldr	r3, [pc, #528]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a83      	ldr	r2, [pc, #524]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80036ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	4b81      	ldr	r3, [pc, #516]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a80      	ldr	r2, [pc, #512]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80036ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d013      	beq.n	80036f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fc fe0a 	bl	80002e0 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d0:	f7fc fe06 	bl	80002e0 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e2a8      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e2:	4b76      	ldr	r3, [pc, #472]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0xc0>
 80036ee:	e014      	b.n	800371a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fc fdf6 	bl	80002e0 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f8:	f7fc fdf2 	bl	80002e0 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	; 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e294      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800370a:	4b6c      	ldr	r3, [pc, #432]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0xe8>
 8003716:	e000      	b.n	800371a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d075      	beq.n	8003812 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003726:	4b65      	ldr	r3, [pc, #404]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003730:	4b62      	ldr	r3, [pc, #392]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2b0c      	cmp	r3, #12
 800373e:	d102      	bne.n	8003746 <HAL_RCC_OscConfig+0x136>
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d002      	beq.n	800374c <HAL_RCC_OscConfig+0x13c>
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2b04      	cmp	r3, #4
 800374a:	d11f      	bne.n	800378c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800374c:	4b5b      	ldr	r3, [pc, #364]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_OscConfig+0x154>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e267      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003764:	4b55      	ldr	r3, [pc, #340]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	4952      	ldr	r1, [pc, #328]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003778:	4b51      	ldr	r3, [pc, #324]	; (80038c0 <HAL_RCC_OscConfig+0x2b0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f7fc fd63 	bl	8000248 <HAL_InitTick>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d043      	beq.n	8003810 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e253      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d023      	beq.n	80037dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003794:	4b49      	ldr	r3, [pc, #292]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a48      	ldr	r2, [pc, #288]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 800379a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fc fd9e 	bl	80002e0 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a8:	f7fc fd9a 	bl	80002e0 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e23c      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ba:	4b40      	ldr	r3, [pc, #256]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c6:	4b3d      	ldr	r3, [pc, #244]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	061b      	lsls	r3, r3, #24
 80037d4:	4939      	ldr	r1, [pc, #228]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	604b      	str	r3, [r1, #4]
 80037da:	e01a      	b.n	8003812 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037dc:	4b37      	ldr	r3, [pc, #220]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a36      	ldr	r2, [pc, #216]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80037e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e8:	f7fc fd7a 	bl	80002e0 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f0:	f7fc fd76 	bl	80002e0 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e218      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003802:	4b2e      	ldr	r3, [pc, #184]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x1e0>
 800380e:	e000      	b.n	8003812 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003810:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d03c      	beq.n	8003898 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d01c      	beq.n	8003860 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003826:	4b25      	ldr	r3, [pc, #148]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382c:	4a23      	ldr	r2, [pc, #140]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003836:	f7fc fd53 	bl	80002e0 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800383e:	f7fc fd4f 	bl	80002e0 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e1f1      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003850:	4b1a      	ldr	r3, [pc, #104]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0ef      	beq.n	800383e <HAL_RCC_OscConfig+0x22e>
 800385e:	e01b      	b.n	8003898 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003860:	4b16      	ldr	r3, [pc, #88]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003866:	4a15      	ldr	r2, [pc, #84]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003870:	f7fc fd36 	bl	80002e0 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003878:	f7fc fd32 	bl	80002e0 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e1d4      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800388a:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 800388c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1ef      	bne.n	8003878 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80ab 	beq.w	80039fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a6:	2300      	movs	r3, #0
 80038a8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_RCC_OscConfig+0x2b4>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e005      	b.n	80038c6 <HAL_RCC_OscConfig+0x2b6>
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000
 80038c0:	20000000 	.word	0x20000000
 80038c4:	2300      	movs	r3, #0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00d      	beq.n	80038e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ca:	4baf      	ldr	r3, [pc, #700]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 80038cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ce:	4aae      	ldr	r2, [pc, #696]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 80038d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d4:	6593      	str	r3, [r2, #88]	; 0x58
 80038d6:	4bac      	ldr	r3, [pc, #688]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038e2:	2301      	movs	r3, #1
 80038e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e6:	4ba9      	ldr	r3, [pc, #676]	; (8003b8c <HAL_RCC_OscConfig+0x57c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d118      	bne.n	8003924 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038f2:	4ba6      	ldr	r3, [pc, #664]	; (8003b8c <HAL_RCC_OscConfig+0x57c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4aa5      	ldr	r2, [pc, #660]	; (8003b8c <HAL_RCC_OscConfig+0x57c>)
 80038f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fe:	f7fc fcef 	bl	80002e0 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003906:	f7fc fceb 	bl	80002e0 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e18d      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003918:	4b9c      	ldr	r3, [pc, #624]	; (8003b8c <HAL_RCC_OscConfig+0x57c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d108      	bne.n	800393e <HAL_RCC_OscConfig+0x32e>
 800392c:	4b96      	ldr	r3, [pc, #600]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 800392e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003932:	4a95      	ldr	r2, [pc, #596]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800393c:	e024      	b.n	8003988 <HAL_RCC_OscConfig+0x378>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b05      	cmp	r3, #5
 8003944:	d110      	bne.n	8003968 <HAL_RCC_OscConfig+0x358>
 8003946:	4b90      	ldr	r3, [pc, #576]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	4a8e      	ldr	r2, [pc, #568]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 800394e:	f043 0304 	orr.w	r3, r3, #4
 8003952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003956:	4b8c      	ldr	r3, [pc, #560]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	4a8a      	ldr	r2, [pc, #552]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003966:	e00f      	b.n	8003988 <HAL_RCC_OscConfig+0x378>
 8003968:	4b87      	ldr	r3, [pc, #540]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	4a86      	ldr	r2, [pc, #536]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003978:	4b83      	ldr	r3, [pc, #524]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	4a82      	ldr	r2, [pc, #520]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003980:	f023 0304 	bic.w	r3, r3, #4
 8003984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d016      	beq.n	80039be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003990:	f7fc fca6 	bl	80002e0 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003996:	e00a      	b.n	80039ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003998:	f7fc fca2 	bl	80002e0 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e142      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ae:	4b76      	ldr	r3, [pc, #472]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 80039b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0ed      	beq.n	8003998 <HAL_RCC_OscConfig+0x388>
 80039bc:	e015      	b.n	80039ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039be:	f7fc fc8f 	bl	80002e0 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039c4:	e00a      	b.n	80039dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c6:	f7fc fc8b 	bl	80002e0 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e12b      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039dc:	4b6a      	ldr	r3, [pc, #424]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1ed      	bne.n	80039c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039ea:	7ffb      	ldrb	r3, [r7, #31]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d105      	bne.n	80039fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f0:	4b65      	ldr	r3, [pc, #404]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 80039f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f4:	4a64      	ldr	r2, [pc, #400]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 80039f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d03c      	beq.n	8003a82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01c      	beq.n	8003a4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a10:	4b5d      	ldr	r3, [pc, #372]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a16:	4a5c      	ldr	r2, [pc, #368]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fc fc5e 	bl	80002e0 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a28:	f7fc fc5a 	bl	80002e0 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e0fc      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a3a:	4b53      	ldr	r3, [pc, #332]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ef      	beq.n	8003a28 <HAL_RCC_OscConfig+0x418>
 8003a48:	e01b      	b.n	8003a82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a4a:	4b4f      	ldr	r3, [pc, #316]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003a4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a50:	4a4d      	ldr	r2, [pc, #308]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5a:	f7fc fc41 	bl	80002e0 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a62:	f7fc fc3d 	bl	80002e0 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e0df      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a74:	4b44      	ldr	r3, [pc, #272]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1ef      	bne.n	8003a62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80d3 	beq.w	8003c32 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a8c:	4b3e      	ldr	r3, [pc, #248]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 030c 	and.w	r3, r3, #12
 8003a94:	2b0c      	cmp	r3, #12
 8003a96:	f000 808d 	beq.w	8003bb4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d15a      	bne.n	8003b58 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa2:	4b39      	ldr	r3, [pc, #228]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a38      	ldr	r2, [pc, #224]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003aa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aae:	f7fc fc17 	bl	80002e0 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab6:	f7fc fc13 	bl	80002e0 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e0b5      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac8:	4b2f      	ldr	r3, [pc, #188]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f0      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ad4:	4b2c      	ldr	r3, [pc, #176]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	4b2d      	ldr	r3, [pc, #180]	; (8003b90 <HAL_RCC_OscConfig+0x580>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6a11      	ldr	r1, [r2, #32]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ae4:	3a01      	subs	r2, #1
 8003ae6:	0112      	lsls	r2, r2, #4
 8003ae8:	4311      	orrs	r1, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003aee:	0212      	lsls	r2, r2, #8
 8003af0:	4311      	orrs	r1, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003af6:	0852      	lsrs	r2, r2, #1
 8003af8:	3a01      	subs	r2, #1
 8003afa:	0552      	lsls	r2, r2, #21
 8003afc:	4311      	orrs	r1, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b02:	0852      	lsrs	r2, r2, #1
 8003b04:	3a01      	subs	r2, #1
 8003b06:	0652      	lsls	r2, r2, #25
 8003b08:	4311      	orrs	r1, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b0e:	06d2      	lsls	r2, r2, #27
 8003b10:	430a      	orrs	r2, r1
 8003b12:	491d      	ldr	r1, [pc, #116]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b18:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1a      	ldr	r2, [pc, #104]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b24:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fc fbd6 	bl	80002e0 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b38:	f7fc fbd2 	bl	80002e0 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e074      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b4a:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0x528>
 8003b56:	e06c      	b.n	8003c32 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b62:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b64:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4a07      	ldr	r2, [pc, #28]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003b6a:	f023 0303 	bic.w	r3, r3, #3
 8003b6e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4a04      	ldr	r2, [pc, #16]	; (8003b88 <HAL_RCC_OscConfig+0x578>)
 8003b76:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fc fbae 	bl	80002e0 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b86:	e00e      	b.n	8003ba6 <HAL_RCC_OscConfig+0x596>
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40007000 	.word	0x40007000
 8003b90:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b94:	f7fc fba4 	bl	80002e0 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e046      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ba6:	4b25      	ldr	r3, [pc, #148]	; (8003c3c <HAL_RCC_OscConfig+0x62c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x584>
 8003bb2:	e03e      	b.n	8003c32 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e039      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003bc0:	4b1e      	ldr	r3, [pc, #120]	; (8003c3c <HAL_RCC_OscConfig+0x62c>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f003 0203 	and.w	r2, r3, #3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d12c      	bne.n	8003c2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	3b01      	subs	r3, #1
 8003be0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d123      	bne.n	8003c2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d11b      	bne.n	8003c2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d113      	bne.n	8003c2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	085b      	lsrs	r3, r3, #1
 8003c12:	3b01      	subs	r3, #1
 8003c14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d109      	bne.n	8003c2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c24:	085b      	lsrs	r3, r3, #1
 8003c26:	3b01      	subs	r3, #1
 8003c28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3720      	adds	r7, #32
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40021000 	.word	0x40021000

08003c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e11e      	b.n	8003e96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c58:	4b91      	ldr	r3, [pc, #580]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d910      	bls.n	8003c88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	4b8e      	ldr	r3, [pc, #568]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 020f 	bic.w	r2, r3, #15
 8003c6e:	498c      	ldr	r1, [pc, #560]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	4b8a      	ldr	r3, [pc, #552]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e106      	b.n	8003e96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d073      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d129      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9c:	4b81      	ldr	r3, [pc, #516]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0f4      	b.n	8003e96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003cac:	f000 f964 	bl	8003f78 <RCC_GetSysClockFreqFromPLLSource>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4a7c      	ldr	r2, [pc, #496]	; (8003ea8 <HAL_RCC_ClockConfig+0x268>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d93f      	bls.n	8003d3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003cba:	4b7a      	ldr	r3, [pc, #488]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d033      	beq.n	8003d3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d12f      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cda:	4b72      	ldr	r3, [pc, #456]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ce2:	4a70      	ldr	r2, [pc, #448]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	e024      	b.n	8003d3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cf8:	4b6a      	ldr	r3, [pc, #424]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d109      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e0c6      	b.n	8003e96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d08:	4b66      	ldr	r3, [pc, #408]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0be      	b.n	8003e96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d18:	f000 f8ce 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4a61      	ldr	r2, [pc, #388]	; (8003ea8 <HAL_RCC_ClockConfig+0x268>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d909      	bls.n	8003d3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d26:	4b5f      	ldr	r3, [pc, #380]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2e:	4a5d      	ldr	r2, [pc, #372]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d3a:	4b5a      	ldr	r3, [pc, #360]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f023 0203 	bic.w	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4957      	ldr	r1, [pc, #348]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d4c:	f7fc fac8 	bl	80002e0 <HAL_GetTick>
 8003d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d52:	e00a      	b.n	8003d6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d54:	f7fc fac4 	bl	80002e0 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e095      	b.n	8003e96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6a:	4b4e      	ldr	r3, [pc, #312]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 020c 	and.w	r2, r3, #12
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d1eb      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d023      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d94:	4b43      	ldr	r3, [pc, #268]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4a42      	ldr	r2, [pc, #264]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d007      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003dac:	4b3d      	ldr	r3, [pc, #244]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003db4:	4a3b      	ldr	r2, [pc, #236]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003db6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dbc:	4b39      	ldr	r3, [pc, #228]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4936      	ldr	r1, [pc, #216]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2b80      	cmp	r3, #128	; 0x80
 8003dd4:	d105      	bne.n	8003de2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003dd6:	4b33      	ldr	r3, [pc, #204]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	4a32      	ldr	r2, [pc, #200]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003ddc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003de0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003de2:	4b2f      	ldr	r3, [pc, #188]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d21d      	bcs.n	8003e2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df0:	4b2b      	ldr	r3, [pc, #172]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 020f 	bic.w	r2, r3, #15
 8003df8:	4929      	ldr	r1, [pc, #164]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e00:	f7fc fa6e 	bl	80002e0 <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e08:	f7fc fa6a 	bl	80002e0 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e03b      	b.n	8003e96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1e:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d1ed      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e38:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4917      	ldr	r1, [pc, #92]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d009      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e56:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	490f      	ldr	r1, [pc, #60]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e6a:	f000 f825 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8003e6e:	4601      	mov	r1, r0
 8003e70:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	091b      	lsrs	r3, r3, #4
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	4a0c      	ldr	r2, [pc, #48]	; (8003eac <HAL_RCC_ClockConfig+0x26c>)
 8003e7c:	5cd3      	ldrb	r3, [r2, r3]
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	fa21 f303 	lsr.w	r3, r1, r3
 8003e86:	4a0a      	ldr	r2, [pc, #40]	; (8003eb0 <HAL_RCC_ClockConfig+0x270>)
 8003e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <HAL_RCC_ClockConfig+0x274>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fc f9da 	bl	8000248 <HAL_InitTick>
 8003e94:	4603      	mov	r3, r0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40022000 	.word	0x40022000
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	04c4b400 	.word	0x04c4b400
 8003eac:	0800570c 	.word	0x0800570c
 8003eb0:	20000040 	.word	0x20000040
 8003eb4:	20000000 	.word	0x20000000

08003eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ebe:	4b2c      	ldr	r3, [pc, #176]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d102      	bne.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eca:	4b2a      	ldr	r3, [pc, #168]	; (8003f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	e047      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ed0:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d102      	bne.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003edc:	4b25      	ldr	r3, [pc, #148]	; (8003f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	e03e      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003ee2:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	2b0c      	cmp	r3, #12
 8003eec:	d136      	bne.n	8003f5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	3301      	adds	r3, #1
 8003f04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d10c      	bne.n	8003f26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f0c:	4a19      	ldr	r2, [pc, #100]	; (8003f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	4a16      	ldr	r2, [pc, #88]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f16:	68d2      	ldr	r2, [r2, #12]
 8003f18:	0a12      	lsrs	r2, r2, #8
 8003f1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	617b      	str	r3, [r7, #20]
      break;
 8003f24:	e00c      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f26:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	4a10      	ldr	r2, [pc, #64]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f30:	68d2      	ldr	r2, [r2, #12]
 8003f32:	0a12      	lsrs	r2, r2, #8
 8003f34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f38:	fb02 f303 	mul.w	r3, r2, r3
 8003f3c:	617b      	str	r3, [r7, #20]
      break;
 8003f3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	0e5b      	lsrs	r3, r3, #25
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	e001      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f60:	693b      	ldr	r3, [r7, #16]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40021000 	.word	0x40021000
 8003f74:	00f42400 	.word	0x00f42400

08003f78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f88:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	3301      	adds	r3, #1
 8003f94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d10c      	bne.n	8003fb6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f9c:	4a17      	ldr	r2, [pc, #92]	; (8003ffc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	4a14      	ldr	r2, [pc, #80]	; (8003ff8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fa6:	68d2      	ldr	r2, [r2, #12]
 8003fa8:	0a12      	lsrs	r2, r2, #8
 8003faa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fae:	fb02 f303 	mul.w	r3, r2, r3
 8003fb2:	617b      	str	r3, [r7, #20]
    break;
 8003fb4:	e00c      	b.n	8003fd0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fb6:	4a11      	ldr	r2, [pc, #68]	; (8003ffc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbe:	4a0e      	ldr	r2, [pc, #56]	; (8003ff8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fc0:	68d2      	ldr	r2, [r2, #12]
 8003fc2:	0a12      	lsrs	r2, r2, #8
 8003fc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fc8:	fb02 f303 	mul.w	r3, r2, r3
 8003fcc:	617b      	str	r3, [r7, #20]
    break;
 8003fce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	0e5b      	lsrs	r3, r3, #25
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	3301      	adds	r3, #1
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003fea:	687b      	ldr	r3, [r7, #4]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	00f42400 	.word	0x00f42400

08004000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004008:	2300      	movs	r3, #0
 800400a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800400c:	2300      	movs	r3, #0
 800400e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8098 	beq.w	800414e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004022:	4b43      	ldr	r3, [pc, #268]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10d      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402e:	4b40      	ldr	r3, [pc, #256]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	4a3f      	ldr	r2, [pc, #252]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004038:	6593      	str	r3, [r2, #88]	; 0x58
 800403a:	4b3d      	ldr	r3, [pc, #244]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004046:	2301      	movs	r3, #1
 8004048:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800404a:	4b3a      	ldr	r3, [pc, #232]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a39      	ldr	r2, [pc, #228]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004054:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004056:	f7fc f943 	bl	80002e0 <HAL_GetTick>
 800405a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800405c:	e009      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405e:	f7fc f93f 	bl	80002e0 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d902      	bls.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	74fb      	strb	r3, [r7, #19]
        break;
 8004070:	e005      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004072:	4b30      	ldr	r3, [pc, #192]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0ef      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d159      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004084:	4b2a      	ldr	r3, [pc, #168]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d01e      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	429a      	cmp	r2, r3
 800409e:	d019      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040a0:	4b23      	ldr	r3, [pc, #140]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040ac:	4b20      	ldr	r3, [pc, #128]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040bc:	4b1c      	ldr	r3, [pc, #112]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c2:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040cc:	4a18      	ldr	r2, [pc, #96]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040de:	f7fc f8ff 	bl	80002e0 <HAL_GetTick>
 80040e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e4:	e00b      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e6:	f7fc f8fb 	bl	80002e0 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d902      	bls.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	74fb      	strb	r3, [r7, #19]
            break;
 80040fc:	e006      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fe:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0ec      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10b      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	4903      	ldr	r1, [pc, #12]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004128:	e008      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800412a:	7cfb      	ldrb	r3, [r7, #19]
 800412c:	74bb      	strb	r3, [r7, #18]
 800412e:	e005      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004130:	40021000 	.word	0x40021000
 8004134:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800413c:	7c7b      	ldrb	r3, [r7, #17]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d105      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004142:	4ba6      	ldr	r3, [pc, #664]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	4aa5      	ldr	r2, [pc, #660]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800414c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800415a:	4ba0      	ldr	r3, [pc, #640]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f023 0203 	bic.w	r2, r3, #3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	499c      	ldr	r1, [pc, #624]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800417c:	4b97      	ldr	r3, [pc, #604]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f023 020c 	bic.w	r2, r3, #12
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4994      	ldr	r1, [pc, #592]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800419e:	4b8f      	ldr	r3, [pc, #572]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	498b      	ldr	r1, [pc, #556]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041c0:	4b86      	ldr	r3, [pc, #536]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	4983      	ldr	r1, [pc, #524]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041e2:	4b7e      	ldr	r3, [pc, #504]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	497a      	ldr	r1, [pc, #488]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004204:	4b75      	ldr	r3, [pc, #468]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	4972      	ldr	r1, [pc, #456]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004226:	4b6d      	ldr	r3, [pc, #436]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	4969      	ldr	r1, [pc, #420]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004248:	4b64      	ldr	r3, [pc, #400]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	4961      	ldr	r1, [pc, #388]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800426a:	4b5c      	ldr	r3, [pc, #368]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	4958      	ldr	r1, [pc, #352]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	2b00      	cmp	r3, #0
 800428a:	d015      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800428c:	4b53      	ldr	r3, [pc, #332]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	4950      	ldr	r1, [pc, #320]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042aa:	d105      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ac:	4b4b      	ldr	r3, [pc, #300]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4a4a      	ldr	r2, [pc, #296]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d015      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042c4:	4b45      	ldr	r3, [pc, #276]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	4942      	ldr	r1, [pc, #264]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042e2:	d105      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e4:	4b3d      	ldr	r3, [pc, #244]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4a3c      	ldr	r2, [pc, #240]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d015      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042fc:	4b37      	ldr	r3, [pc, #220]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	4934      	ldr	r1, [pc, #208]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800431a:	d105      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800431c:	4b2f      	ldr	r3, [pc, #188]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a2e      	ldr	r2, [pc, #184]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004326:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d015      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004334:	4b29      	ldr	r3, [pc, #164]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004342:	4926      	ldr	r1, [pc, #152]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004352:	d105      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004354:	4b21      	ldr	r3, [pc, #132]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4a20      	ldr	r2, [pc, #128]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800435a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800435e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d015      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800436c:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004372:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	4918      	ldr	r1, [pc, #96]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800438a:	d105      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800438c:	4b13      	ldr	r3, [pc, #76]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a12      	ldr	r2, [pc, #72]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004396:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d015      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043a4:	4b0d      	ldr	r3, [pc, #52]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b2:	490a      	ldr	r1, [pc, #40]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043c2:	d105      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4a04      	ldr	r2, [pc, #16]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80043d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40021000 	.word	0x40021000

080043e0 <Switch_Power>:


const pinPort *switches[] = {&U5IN0, &U5IN1, &U6IN0, &U6IN1, &U7IN0, &U7IN1};

void Switch_Power(uint8_t enableSwitching, uint8_t newState)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	460a      	mov	r2, r1
 80043ea:	71fb      	strb	r3, [r7, #7]
 80043ec:	4613      	mov	r3, r2
 80043ee:	71bb      	strb	r3, [r7, #6]
	for(uint32_t i=0; i<6; i++)
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e020      	b.n	8004438 <Switch_Power+0x58>
	{
		if ((1<<i) & enableSwitching)
 80043f6:	79fa      	ldrb	r2, [r7, #7]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	fa42 f303 	asr.w	r3, r2, r3
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d015      	beq.n	8004432 <Switch_Power+0x52>
		{
			HAL_GPIO_WritePin(switches[i]->PORT, switches[i]->PIN, ((1<<i)&newState)>>i);
 8004406:	4a10      	ldr	r2, [pc, #64]	; (8004448 <Switch_Power+0x68>)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	4a0d      	ldr	r2, [pc, #52]	; (8004448 <Switch_Power+0x68>)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004418:	8899      	ldrh	r1, [r3, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	409a      	lsls	r2, r3
 8004420:	79bb      	ldrb	r3, [r7, #6]
 8004422:	401a      	ands	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	fa42 f303 	asr.w	r3, r2, r3
 800442a:	b2db      	uxtb	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	f7ff f819 	bl	8003464 <HAL_GPIO_WritePin>
	for(uint32_t i=0; i<6; i++)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3301      	adds	r3, #1
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b05      	cmp	r3, #5
 800443c:	d9db      	bls.n	80043f6 <Switch_Power+0x16>
		}
	}
}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000028 	.word	0x20000028

0800444c <Config_Setup>:
#include "main.h"
#include "config.h"


void Config_Setup(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
	if(Flash_Read(FLASH_PAGE_63)==0xFFFFFFFF) //initialize the flash to avoid errors
 8004450:	4807      	ldr	r0, [pc, #28]	; (8004470 <Config_Setup+0x24>)
 8004452:	f000 f9f3 	bl	800483c <Flash_Read>
 8004456:	4603      	mov	r3, r0
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d104      	bne.n	8004468 <Config_Setup+0x1c>

		Config_1();

#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_0();
 800445e:	f000 f809 	bl	8004474 <Config_0>

#endif

		Config_Write_Flash();
 8004462:	f000 f84d 	bl	8004500 <Config_Write_Flash>
	}
	else //if flash is not blank read in values from flash
	{
		Config_Read_Flash();
	}
}
 8004466:	e001      	b.n	800446c <Config_Setup+0x20>
		Config_Read_Flash();
 8004468:	f000 f8d4 	bl	8004614 <Config_Read_Flash>
}
 800446c:	bf00      	nop
 800446e:	bd80      	pop	{r7, pc}
 8004470:	0801f800 	.word	0x0801f800

08004474 <Config_0>:


void Config_0(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0

	Digital_In_EN = 0xb00000000;

#else //in this case we test digital inputs

	Digital_In_EN = 0b00011101; //bit for PB4 is 0 to ensure it isn't used as PB4 seemed to have hardware problems
 8004478:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <Config_0+0x80>)
 800447a:	221d      	movs	r2, #29
 800447c:	601a      	str	r2, [r3, #0]

#endif

	Can_IDs[0] = 0x0F;
 800447e:	4b1e      	ldr	r3, [pc, #120]	; (80044f8 <Config_0+0x84>)
 8004480:	220f      	movs	r2, #15
 8004482:	601a      	str	r2, [r3, #0]
	Can_DLCs[0] = 8;
 8004484:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <Config_0+0x88>)
 8004486:	2208      	movs	r2, #8
 8004488:	601a      	str	r2, [r3, #0]
	Can_IDs[1] = 0xFF;
 800448a:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <Config_0+0x84>)
 800448c:	22ff      	movs	r2, #255	; 0xff
 800448e:	605a      	str	r2, [r3, #4]
	Can_DLCs[1] = 0;
 8004490:	4b1a      	ldr	r3, [pc, #104]	; (80044fc <Config_0+0x88>)
 8004492:	2200      	movs	r2, #0
 8004494:	605a      	str	r2, [r3, #4]
	Can_IDs[2] = -1;
 8004496:	4b18      	ldr	r3, [pc, #96]	; (80044f8 <Config_0+0x84>)
 8004498:	f04f 32ff 	mov.w	r2, #4294967295
 800449c:	609a      	str	r2, [r3, #8]
	Can_DLCs[2] = 4;
 800449e:	4b17      	ldr	r3, [pc, #92]	; (80044fc <Config_0+0x88>)
 80044a0:	2204      	movs	r2, #4
 80044a2:	609a      	str	r2, [r3, #8]
	Can_IDs[3] = -1;
 80044a4:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <Config_0+0x84>)
 80044a6:	f04f 32ff 	mov.w	r2, #4294967295
 80044aa:	60da      	str	r2, [r3, #12]
	Can_DLCs[3] = 0;
 80044ac:	4b13      	ldr	r3, [pc, #76]	; (80044fc <Config_0+0x88>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	60da      	str	r2, [r3, #12]
	Can_IDs[4] = -1;
 80044b2:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <Config_0+0x84>)
 80044b4:	f04f 32ff 	mov.w	r2, #4294967295
 80044b8:	611a      	str	r2, [r3, #16]
	Can_DLCs[4] = 0;
 80044ba:	4b10      	ldr	r3, [pc, #64]	; (80044fc <Config_0+0x88>)
 80044bc:	2200      	movs	r2, #0
 80044be:	611a      	str	r2, [r3, #16]
	Can_IDs[5] = -1;
 80044c0:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <Config_0+0x84>)
 80044c2:	f04f 32ff 	mov.w	r2, #4294967295
 80044c6:	615a      	str	r2, [r3, #20]
	Can_DLCs[5] = 0;
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <Config_0+0x88>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	615a      	str	r2, [r3, #20]
	Can_IDs[6] = -1;
 80044ce:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <Config_0+0x84>)
 80044d0:	f04f 32ff 	mov.w	r2, #4294967295
 80044d4:	619a      	str	r2, [r3, #24]
	Can_DLCs[6] = 0;
 80044d6:	4b09      	ldr	r3, [pc, #36]	; (80044fc <Config_0+0x88>)
 80044d8:	2200      	movs	r2, #0
 80044da:	619a      	str	r2, [r3, #24]
	Can_IDs[7] = -1;
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <Config_0+0x84>)
 80044de:	f04f 32ff 	mov.w	r2, #4294967295
 80044e2:	61da      	str	r2, [r3, #28]
	Can_DLCs[7] = 0;
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <Config_0+0x88>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	61da      	str	r2, [r3, #28]
}
 80044ea:	bf00      	nop
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	20000088 	.word	0x20000088
 80044f8:	200002a8 	.word	0x200002a8
 80044fc:	200002e8 	.word	0x200002e8

08004500 <Config_Write_Flash>:
	//TODO: setup code for each node that will be in the car
}


void Config_Write_Flash(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
 8004506:	af00      	add	r7, sp, #0
	uint32_t data[512] = {0};
 8004508:	463b      	mov	r3, r7
 800450a:	4618      	mov	r0, r3
 800450c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004510:	461a      	mov	r2, r3
 8004512:	2100      	movs	r1, #0
 8004514:	f001 f8c6 	bl	80056a4 <memset>

	//bytes: [enable falling edge to can], [enable rising edge to can], [digital in interrupt enable], [digital in enable]
	data[DIGITAL_IN_0_POS]=Digital_In_EN+(Digital_In_Interrupt_EN<<8)+(Digital_In_Interrupt_Can_Rising<<16)+(Digital_In_Interrupt_Can_Falling<<24); //TODO: set this to be the things it should be for digital_in
 8004518:	4b35      	ldr	r3, [pc, #212]	; (80045f0 <Config_Write_Flash+0xf0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	021a      	lsls	r2, r3, #8
 800451e:	4b35      	ldr	r3, [pc, #212]	; (80045f4 <Config_Write_Flash+0xf4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	441a      	add	r2, r3
 8004524:	4b34      	ldr	r3, [pc, #208]	; (80045f8 <Config_Write_Flash+0xf8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	041b      	lsls	r3, r3, #16
 800452a:	441a      	add	r2, r3
 800452c:	4b33      	ldr	r3, [pc, #204]	; (80045fc <Config_Write_Flash+0xfc>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	061b      	lsls	r3, r3, #24
 8004532:	441a      	add	r2, r3
 8004534:	463b      	mov	r3, r7
 8004536:	601a      	str	r2, [r3, #0]
	//bytes: [unused], [unused], [enable rising edge switch power], [enable falling edge switch power]
	data[DIGITAL_IN_1_POS]=(0)+(0)+(Digital_In_Interrupt_Power_Rising<<16)+(Digital_In_Interrupt_Power_Falling<<24);
 8004538:	4b31      	ldr	r3, [pc, #196]	; (8004600 <Config_Write_Flash+0x100>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	041a      	lsls	r2, r3, #16
 800453e:	4b31      	ldr	r3, [pc, #196]	; (8004604 <Config_Write_Flash+0x104>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	061b      	lsls	r3, r3, #24
 8004544:	441a      	add	r2, r3
 8004546:	463b      	mov	r3, r7
 8004548:	605a      	str	r2, [r3, #4]
	//bytes: [unused], [can dlc], [can id high], [can id low] x8 //any can id outside the valid range of 0 to 2047 should be treated as disabled
	data[CAN_ID_0_POS]=(0)+(Can_DLCs[0]<<16)+(Can_IDs[0]&0xFFFF);
 800454a:	4b2f      	ldr	r3, [pc, #188]	; (8004608 <Config_Write_Flash+0x108>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	041a      	lsls	r2, r3, #16
 8004550:	4b2e      	ldr	r3, [pc, #184]	; (800460c <Config_Write_Flash+0x10c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	b29b      	uxth	r3, r3
 8004556:	441a      	add	r2, r3
 8004558:	463b      	mov	r3, r7
 800455a:	609a      	str	r2, [r3, #8]
	data[CAN_ID_1_POS]=(0)+(Can_DLCs[1]<<16)+(Can_IDs[1]&0xFFFF);
 800455c:	4b2a      	ldr	r3, [pc, #168]	; (8004608 <Config_Write_Flash+0x108>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	041a      	lsls	r2, r3, #16
 8004562:	4b2a      	ldr	r3, [pc, #168]	; (800460c <Config_Write_Flash+0x10c>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	b29b      	uxth	r3, r3
 8004568:	441a      	add	r2, r3
 800456a:	463b      	mov	r3, r7
 800456c:	60da      	str	r2, [r3, #12]
	data[CAN_ID_2_POS]=(0)+(Can_DLCs[2]<<16)+(Can_IDs[2]&0xFFFF);
 800456e:	4b26      	ldr	r3, [pc, #152]	; (8004608 <Config_Write_Flash+0x108>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	041a      	lsls	r2, r3, #16
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <Config_Write_Flash+0x10c>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	b29b      	uxth	r3, r3
 800457a:	441a      	add	r2, r3
 800457c:	463b      	mov	r3, r7
 800457e:	611a      	str	r2, [r3, #16]
	data[CAN_ID_3_POS]=(0)+(Can_DLCs[3]<<16)+(Can_IDs[3]&0xFFFF);
 8004580:	4b21      	ldr	r3, [pc, #132]	; (8004608 <Config_Write_Flash+0x108>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	041a      	lsls	r2, r3, #16
 8004586:	4b21      	ldr	r3, [pc, #132]	; (800460c <Config_Write_Flash+0x10c>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	b29b      	uxth	r3, r3
 800458c:	441a      	add	r2, r3
 800458e:	463b      	mov	r3, r7
 8004590:	615a      	str	r2, [r3, #20]
	data[CAN_ID_4_POS]=(0)+(Can_DLCs[4]<<16)+(Can_IDs[4]&0xFFFF);
 8004592:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <Config_Write_Flash+0x108>)
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	041a      	lsls	r2, r3, #16
 8004598:	4b1c      	ldr	r3, [pc, #112]	; (800460c <Config_Write_Flash+0x10c>)
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	b29b      	uxth	r3, r3
 800459e:	441a      	add	r2, r3
 80045a0:	463b      	mov	r3, r7
 80045a2:	619a      	str	r2, [r3, #24]
	data[CAN_ID_5_POS]=(0)+(Can_DLCs[5]<<16)+(Can_IDs[5]&0xFFFF);
 80045a4:	4b18      	ldr	r3, [pc, #96]	; (8004608 <Config_Write_Flash+0x108>)
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	041a      	lsls	r2, r3, #16
 80045aa:	4b18      	ldr	r3, [pc, #96]	; (800460c <Config_Write_Flash+0x10c>)
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	441a      	add	r2, r3
 80045b2:	463b      	mov	r3, r7
 80045b4:	61da      	str	r2, [r3, #28]
	data[CAN_ID_6_POS]=(0)+(Can_DLCs[6]<<16)+(Can_IDs[6]&0xFFFF);
 80045b6:	4b14      	ldr	r3, [pc, #80]	; (8004608 <Config_Write_Flash+0x108>)
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	041a      	lsls	r2, r3, #16
 80045bc:	4b13      	ldr	r3, [pc, #76]	; (800460c <Config_Write_Flash+0x10c>)
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	441a      	add	r2, r3
 80045c4:	463b      	mov	r3, r7
 80045c6:	621a      	str	r2, [r3, #32]
	data[CAN_ID_7_POS]=(0)+(Can_DLCs[7]<<16)+(Can_IDs[7]&0xFFFF);
 80045c8:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <Config_Write_Flash+0x108>)
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	041a      	lsls	r2, r3, #16
 80045ce:	4b0f      	ldr	r3, [pc, #60]	; (800460c <Config_Write_Flash+0x10c>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	441a      	add	r2, r3
 80045d6:	463b      	mov	r3, r7
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24

	Flash_Write(FLASH_PAGE_63, 63, data, 10);
 80045da:	463a      	mov	r2, r7
 80045dc:	230a      	movs	r3, #10
 80045de:	213f      	movs	r1, #63	; 0x3f
 80045e0:	480b      	ldr	r0, [pc, #44]	; (8004610 <Config_Write_Flash+0x110>)
 80045e2:	f000 f895 	bl	8004710 <Flash_Write>
}
 80045e6:	bf00      	nop
 80045e8:	f507 6700 	add.w	r7, r7, #2048	; 0x800
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000288 	.word	0x20000288
 80045f4:	20000088 	.word	0x20000088
 80045f8:	20000070 	.word	0x20000070
 80045fc:	2000006c 	.word	0x2000006c
 8004600:	2000038c 	.word	0x2000038c
 8004604:	20000388 	.word	0x20000388
 8004608:	200002e8 	.word	0x200002e8
 800460c:	200002a8 	.word	0x200002a8
 8004610:	0801f800 	.word	0x0801f800

08004614 <Config_Read_Flash>:

void Config_Read_Flash(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
	Digital_In_EN = (0b00011101&(DIGITAL_IN_0>>0)); //bit for PB4 is 0 to ensure it isn't used as PB4 seemed to have hardware problems
 8004618:	4b31      	ldr	r3, [pc, #196]	; (80046e0 <Config_Read_Flash+0xcc>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 031d 	and.w	r3, r3, #29
 8004620:	4a30      	ldr	r2, [pc, #192]	; (80046e4 <Config_Read_Flash+0xd0>)
 8004622:	6013      	str	r3, [r2, #0]

	Can_IDs[0] = ((CAN_ID_0>>0)&0xFFFF);
 8004624:	4b30      	ldr	r3, [pc, #192]	; (80046e8 <Config_Read_Flash+0xd4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	4a30      	ldr	r2, [pc, #192]	; (80046ec <Config_Read_Flash+0xd8>)
 800462c:	6013      	str	r3, [r2, #0]
	Can_DLCs[0] = ((CAN_ID_0>>16)&0xFF);
 800462e:	4b2e      	ldr	r3, [pc, #184]	; (80046e8 <Config_Read_Flash+0xd4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	0c1b      	lsrs	r3, r3, #16
 8004634:	b2db      	uxtb	r3, r3
 8004636:	4a2e      	ldr	r2, [pc, #184]	; (80046f0 <Config_Read_Flash+0xdc>)
 8004638:	6013      	str	r3, [r2, #0]
	Can_IDs[1] = ((CAN_ID_1>>0)&0xFFFF);
 800463a:	4b2e      	ldr	r3, [pc, #184]	; (80046f4 <Config_Read_Flash+0xe0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	b29b      	uxth	r3, r3
 8004640:	4a2a      	ldr	r2, [pc, #168]	; (80046ec <Config_Read_Flash+0xd8>)
 8004642:	6053      	str	r3, [r2, #4]
	Can_DLCs[1] = ((CAN_ID_1>>16)&0xFF);
 8004644:	4b2b      	ldr	r3, [pc, #172]	; (80046f4 <Config_Read_Flash+0xe0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	0c1b      	lsrs	r3, r3, #16
 800464a:	b2db      	uxtb	r3, r3
 800464c:	4a28      	ldr	r2, [pc, #160]	; (80046f0 <Config_Read_Flash+0xdc>)
 800464e:	6053      	str	r3, [r2, #4]
	Can_IDs[2] = ((CAN_ID_2>>0)&0xFFFF);
 8004650:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <Config_Read_Flash+0xe4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	4a25      	ldr	r2, [pc, #148]	; (80046ec <Config_Read_Flash+0xd8>)
 8004658:	6093      	str	r3, [r2, #8]
	Can_DLCs[2] = ((CAN_ID_2>>16)&0xFF);
 800465a:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <Config_Read_Flash+0xe4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	0c1b      	lsrs	r3, r3, #16
 8004660:	b2db      	uxtb	r3, r3
 8004662:	4a23      	ldr	r2, [pc, #140]	; (80046f0 <Config_Read_Flash+0xdc>)
 8004664:	6093      	str	r3, [r2, #8]
	Can_IDs[3] = ((CAN_ID_3>>0)&0xFFFF);
 8004666:	4b25      	ldr	r3, [pc, #148]	; (80046fc <Config_Read_Flash+0xe8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	4a1f      	ldr	r2, [pc, #124]	; (80046ec <Config_Read_Flash+0xd8>)
 800466e:	60d3      	str	r3, [r2, #12]
	Can_DLCs[3] = ((CAN_ID_3>>16)&0xFF);
 8004670:	4b22      	ldr	r3, [pc, #136]	; (80046fc <Config_Read_Flash+0xe8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	0c1b      	lsrs	r3, r3, #16
 8004676:	b2db      	uxtb	r3, r3
 8004678:	4a1d      	ldr	r2, [pc, #116]	; (80046f0 <Config_Read_Flash+0xdc>)
 800467a:	60d3      	str	r3, [r2, #12]
	Can_IDs[4] = ((CAN_ID_4>>0)&0xFFFF);
 800467c:	4b20      	ldr	r3, [pc, #128]	; (8004700 <Config_Read_Flash+0xec>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	4a1a      	ldr	r2, [pc, #104]	; (80046ec <Config_Read_Flash+0xd8>)
 8004684:	6113      	str	r3, [r2, #16]
	Can_DLCs[4] = ((CAN_ID_4>>16)&0xFF);
 8004686:	4b1e      	ldr	r3, [pc, #120]	; (8004700 <Config_Read_Flash+0xec>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	0c1b      	lsrs	r3, r3, #16
 800468c:	b2db      	uxtb	r3, r3
 800468e:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <Config_Read_Flash+0xdc>)
 8004690:	6113      	str	r3, [r2, #16]
	Can_IDs[5] = ((CAN_ID_5>>0)&0xFFFF);
 8004692:	4b1c      	ldr	r3, [pc, #112]	; (8004704 <Config_Read_Flash+0xf0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	4a14      	ldr	r2, [pc, #80]	; (80046ec <Config_Read_Flash+0xd8>)
 800469a:	6153      	str	r3, [r2, #20]
	Can_DLCs[5] = ((CAN_ID_5>>16)&0xFF);
 800469c:	4b19      	ldr	r3, [pc, #100]	; (8004704 <Config_Read_Flash+0xf0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	0c1b      	lsrs	r3, r3, #16
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	4a12      	ldr	r2, [pc, #72]	; (80046f0 <Config_Read_Flash+0xdc>)
 80046a6:	6153      	str	r3, [r2, #20]
	Can_IDs[6] = ((CAN_ID_6>>0)&0xFFFF);
 80046a8:	4b17      	ldr	r3, [pc, #92]	; (8004708 <Config_Read_Flash+0xf4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	4a0f      	ldr	r2, [pc, #60]	; (80046ec <Config_Read_Flash+0xd8>)
 80046b0:	6193      	str	r3, [r2, #24]
	Can_DLCs[6] = ((CAN_ID_6>>16)&0xFF);
 80046b2:	4b15      	ldr	r3, [pc, #84]	; (8004708 <Config_Read_Flash+0xf4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	0c1b      	lsrs	r3, r3, #16
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	4a0d      	ldr	r2, [pc, #52]	; (80046f0 <Config_Read_Flash+0xdc>)
 80046bc:	6193      	str	r3, [r2, #24]
	Can_IDs[7] = ((CAN_ID_7>>0)&0xFFFF);
 80046be:	4b13      	ldr	r3, [pc, #76]	; (800470c <Config_Read_Flash+0xf8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	4a09      	ldr	r2, [pc, #36]	; (80046ec <Config_Read_Flash+0xd8>)
 80046c6:	61d3      	str	r3, [r2, #28]
	Can_DLCs[7] = ((CAN_ID_7>>16)&0xFF);
 80046c8:	4b10      	ldr	r3, [pc, #64]	; (800470c <Config_Read_Flash+0xf8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	0c1b      	lsrs	r3, r3, #16
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	4a07      	ldr	r2, [pc, #28]	; (80046f0 <Config_Read_Flash+0xdc>)
 80046d2:	61d3      	str	r3, [r2, #28]
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	0801f800 	.word	0x0801f800
 80046e4:	20000088 	.word	0x20000088
 80046e8:	0801f808 	.word	0x0801f808
 80046ec:	200002a8 	.word	0x200002a8
 80046f0:	200002e8 	.word	0x200002e8
 80046f4:	0801f80c 	.word	0x0801f80c
 80046f8:	0801f810 	.word	0x0801f810
 80046fc:	0801f814 	.word	0x0801f814
 8004700:	0801f818 	.word	0x0801f818
 8004704:	0801f81c 	.word	0x0801f81c
 8004708:	0801f820 	.word	0x0801f820
 800470c:	0801f824 	.word	0x0801f824

08004710 <Flash_Write>:


void Flash_Write(uint32_t Flash_Address, uint32_t Page, uint32_t Flash_Data[512], int Data_Words)
{
 8004710:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004714:	b08c      	sub	sp, #48	; 0x30
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	603b      	str	r3, [r7, #0]
	FLASH_EraseInitTypeDef pEraseInit;
	uint32_t pError = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]

	pEraseInit.Page = Page;
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	61fb      	str	r3, [r7, #28]
	pEraseInit.NbPages = 1;
 8004728:	2301      	movs	r3, #1
 800472a:	623b      	str	r3, [r7, #32]
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800472c:	2300      	movs	r3, #0
 800472e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004730:	b672      	cpsid	i

	__disable_irq();
	if(HAL_FLASH_Unlock() != HAL_OK)
 8004732:	f7fe fb09 	bl	8002d48 <HAL_FLASH_Unlock>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <Flash_Write+0x32>
  __ASM volatile ("cpsie i" : : : "memory");
 800473c:	b662      	cpsie	i
	{
		__enable_irq();
		Error_Handler();
 800473e:	f000 fd95 	bl	800526c <Error_Handler>
	}

	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0) { }
 8004742:	bf00      	nop
 8004744:	4b3c      	ldr	r3, [pc, #240]	; (8004838 <Flash_Write+0x128>)
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800474c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004750:	d0f8      	beq.n	8004744 <Flash_Write+0x34>

	if(HAL_FLASHEx_Erase(&pEraseInit, &pError) != HAL_OK)
 8004752:	f107 0210 	add.w	r2, r7, #16
 8004756:	f107 0314 	add.w	r3, r7, #20
 800475a:	4611      	mov	r1, r2
 800475c:	4618      	mov	r0, r3
 800475e:	f7fe fbdb 	bl	8002f18 <HAL_FLASHEx_Erase>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <Flash_Write+0x6c>
 8004768:	b662      	cpsie	i
	{
		__enable_irq();
		while(1)
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 800476a:	2108      	movs	r1, #8
 800476c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004770:	f7fe fe90 	bl	8003494 <HAL_GPIO_TogglePin>
			HAL_Delay(33);
 8004774:	2021      	movs	r0, #33	; 0x21
 8004776:	f7fb fdbf 	bl	80002f8 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 800477a:	e7f6      	b.n	800476a <Flash_Write+0x5a>
		}
	}

	uint64_t data;
	for(int i=0; i<((Data_Words+1)/2); i++) //here we want integer division that rounds up instead of down
 800477c:	2300      	movs	r3, #0
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
 8004780:	e042      	b.n	8004808 <Flash_Write+0xf8>
	{
		data=(uint64_t)Flash_Data[i*2];
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	461a      	mov	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4413      	add	r3, r2
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f04f 0400 	mov.w	r4, #0
 8004792:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		if((i*2)+1<Data_Words)
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	3301      	adds	r3, #1
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	dd17      	ble.n	80047d2 <Flash_Write+0xc2>
		{
			data+=((uint64_t)Flash_Data[i*2+1]<<32);
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	3304      	adds	r3, #4
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	4413      	add	r3, r2
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4619      	mov	r1, r3
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0b00 	mov.w	fp, #0
 80047b8:	f04f 0c00 	mov.w	ip, #0
 80047bc:	468c      	mov	ip, r1
 80047be:	f04f 0b00 	mov.w	fp, #0
 80047c2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80047c6:	eb1b 0301 	adds.w	r3, fp, r1
 80047ca:	eb4c 0402 	adc.w	r4, ip, r2
 80047ce:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		}

			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Flash_Address+i*0x08, data) != HAL_OK)
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	461a      	mov	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	18d1      	adds	r1, r2, r3
 80047dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047e0:	2000      	movs	r0, #0
 80047e2:	f7fe fa5b 	bl	8002c9c <HAL_FLASH_Program>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <Flash_Write+0xe2>
 80047ec:	b662      	cpsie	i
			{
				__enable_irq();
				Error_Handler();
 80047ee:	f000 fd3d 	bl	800526c <Error_Handler>
			}
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0) { }
 80047f2:	bf00      	nop
 80047f4:	4b10      	ldr	r3, [pc, #64]	; (8004838 <Flash_Write+0x128>)
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004800:	d0f8      	beq.n	80047f4 <Flash_Write+0xe4>
	for(int i=0; i<((Data_Words+1)/2); i++) //here we want integer division that rounds up instead of down
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	3301      	adds	r3, #1
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	3301      	adds	r3, #1
 800480c:	0fda      	lsrs	r2, r3, #31
 800480e:	4413      	add	r3, r2
 8004810:	105b      	asrs	r3, r3, #1
 8004812:	461a      	mov	r2, r3
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	4293      	cmp	r3, r2
 8004818:	dbb3      	blt.n	8004782 <Flash_Write+0x72>
	}

	if(HAL_FLASH_Lock() != HAL_OK)
 800481a:	f7fe fab7 	bl	8002d8c <HAL_FLASH_Lock>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <Flash_Write+0x11a>
 8004824:	b662      	cpsie	i
	{
		__enable_irq();
		Error_Handler();
 8004826:	f000 fd21 	bl	800526c <Error_Handler>
 800482a:	b662      	cpsie	i
	}
	__enable_irq();
}
 800482c:	bf00      	nop
 800482e:	3730      	adds	r7, #48	; 0x30
 8004830:	46bd      	mov	sp, r7
 8004832:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004836:	bf00      	nop
 8004838:	40022000 	.word	0x40022000

0800483c <Flash_Read>:

uint32_t Flash_Read(uint32_t Flash_Address)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
	return *(uint32_t*)Flash_Address;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <main>:
uint32_t adc_selection=0;
uint32_t ADCDualConvertedValues[3];


int main(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
	HAL_Init();
 800485a:	f7fb fcdd 	bl	8000218 <HAL_Init>

	SystemClock_Config();
 800485e:	f000 f975 	bl	8004b4c <SystemClock_Config>

	Config_Setup();
 8004862:	f7ff fdf3 	bl	800444c <Config_Setup>


	MX_GPIO_Init();
 8004866:	f000 fbdb 	bl	8005020 <MX_GPIO_Init>
	MX_DMA_Init();
 800486a:	f000 fba7 	bl	8004fbc <MX_DMA_Init>
	MX_ADC1_Init();
 800486e:	f000 f9d3 	bl	8004c18 <MX_ADC1_Init>
	MX_ADC2_Init();
 8004872:	f000 fa77 	bl	8004d64 <MX_ADC2_Init>
	MX_FDCAN_Init();
 8004876:	f000 faf5 	bl	8004e64 <MX_FDCAN_Init>
	while(1)
	{
		//example commands stored here
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)); //reading pins may be wanted with interrupts at some time, and it may be wanted to debounce some digital inputs

		for(int i=0; i<8; i++)
 800487a:	2300      	movs	r3, #0
 800487c:	607b      	str	r3, [r7, #4]
 800487e:	e006      	b.n	800488e <main+0x3a>
			{
			CanSend(i);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f8b2 	bl	80049ec <CanSend>
		for(int i=0; i<8; i++)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3301      	adds	r3, #1
 800488c:	607b      	str	r3, [r7, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b07      	cmp	r3, #7
 8004892:	ddf5      	ble.n	8004880 <main+0x2c>
			}
		HAL_Delay(100);
 8004894:	2064      	movs	r0, #100	; 0x64
 8004896:	f7fb fd2f 	bl	80002f8 <HAL_Delay>

			if (HAL_ADCEx_MultiModeStart_DMA(&hadc1, ADCDualConvertedValues, 3) != HAL_OK)
 800489a:	2203      	movs	r2, #3
 800489c:	4904      	ldr	r1, [pc, #16]	; (80048b0 <main+0x5c>)
 800489e:	4805      	ldr	r0, [pc, #20]	; (80048b4 <main+0x60>)
 80048a0:	f7fc fe6c 	bl	800157c <HAL_ADCEx_MultiModeStart_DMA>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0e7      	beq.n	800487a <main+0x26>
			{
				Error_Handler();
 80048aa:	f000 fcdf 	bl	800526c <Error_Handler>
		for(int i=0; i<8; i++)
 80048ae:	e7e4      	b.n	800487a <main+0x26>
 80048b0:	2000028c 	.word	0x2000028c
 80048b4:	200001bc 	.word	0x200001bc

080048b8 <HAL_ADC_ConvCpltCallback>:
}

uint32_t temp[3];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08a      	sub	sp, #40	; 0x28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048c8:	f040 8084 	bne.w	80049d4 <HAL_ADC_ConvCpltCallback+0x11c>
	{
		uint32_t masterConvertedValue[3];
		uint32_t slaveConvertedValue[3];

		switch(adc_selection)
 80048cc:	4b43      	ldr	r3, [pc, #268]	; (80049dc <HAL_ADC_ConvCpltCallback+0x124>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d850      	bhi.n	8004976 <HAL_ADC_ConvCpltCallback+0xbe>
 80048d4:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <HAL_ADC_ConvCpltCallback+0x24>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	080048ed 	.word	0x080048ed
 80048e0:	08004911 	.word	0x08004911
 80048e4:	08004935 	.word	0x08004935
 80048e8:	08004953 	.word	0x08004953
		{
		case 0:
			HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 1);
 80048ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048f4:	2201      	movs	r2, #1
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe fdb4 	bl	8003464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 80048fc:	4b38      	ldr	r3, [pc, #224]	; (80049e0 <HAL_ADC_ConvCpltCallback+0x128>)
 80048fe:	2101      	movs	r1, #1
 8004900:	2200      	movs	r2, #0
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe fdae 	bl	8003464 <HAL_GPIO_WritePin>
			adc_selection=1;
 8004908:	4b34      	ldr	r3, [pc, #208]	; (80049dc <HAL_ADC_ConvCpltCallback+0x124>)
 800490a:	2201      	movs	r2, #1
 800490c:	601a      	str	r2, [r3, #0]
			break;
 800490e:	e035      	b.n	800497c <HAL_ADC_ConvCpltCallback+0xc4>
		case 1:
			HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 8004910:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004914:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004918:	2200      	movs	r2, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f7fe fda2 	bl	8003464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 1);
 8004920:	4b2f      	ldr	r3, [pc, #188]	; (80049e0 <HAL_ADC_ConvCpltCallback+0x128>)
 8004922:	2101      	movs	r1, #1
 8004924:	2201      	movs	r2, #1
 8004926:	4618      	mov	r0, r3
 8004928:	f7fe fd9c 	bl	8003464 <HAL_GPIO_WritePin>
			adc_selection=2;
 800492c:	4b2b      	ldr	r3, [pc, #172]	; (80049dc <HAL_ADC_ConvCpltCallback+0x124>)
 800492e:	2202      	movs	r2, #2
 8004930:	601a      	str	r2, [r3, #0]
			break;
 8004932:	e023      	b.n	800497c <HAL_ADC_ConvCpltCallback+0xc4>
		case 2:
			HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 1);
 8004934:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004938:	f44f 7100 	mov.w	r1, #512	; 0x200
 800493c:	2201      	movs	r2, #1
 800493e:	4618      	mov	r0, r3
 8004940:	f7fe fd90 	bl	8003464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 1);
 8004944:	4b26      	ldr	r3, [pc, #152]	; (80049e0 <HAL_ADC_ConvCpltCallback+0x128>)
 8004946:	2101      	movs	r1, #1
 8004948:	2201      	movs	r2, #1
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe fd8a 	bl	8003464 <HAL_GPIO_WritePin>
			//adc_selection=3;
			break;
 8004950:	e014      	b.n	800497c <HAL_ADC_ConvCpltCallback+0xc4>
		case 3:
			HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 8004952:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004956:	f44f 7100 	mov.w	r1, #512	; 0x200
 800495a:	2200      	movs	r2, #0
 800495c:	4618      	mov	r0, r3
 800495e:	f7fe fd81 	bl	8003464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 8004962:	4b1f      	ldr	r3, [pc, #124]	; (80049e0 <HAL_ADC_ConvCpltCallback+0x128>)
 8004964:	2101      	movs	r1, #1
 8004966:	2200      	movs	r2, #0
 8004968:	4618      	mov	r0, r3
 800496a:	f7fe fd7b 	bl	8003464 <HAL_GPIO_WritePin>
			adc_selection=0;
 800496e:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <HAL_ADC_ConvCpltCallback+0x124>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
			break;
 8004974:	e002      	b.n	800497c <HAL_ADC_ConvCpltCallback+0xc4>
		default:
			Error_Handler();
 8004976:	f000 fc79 	bl	800526c <Error_Handler>
			break;
 800497a:	bf00      	nop
		}
		//TODO: start timer here

		for(int i=0; i<3; i++)
 800497c:	2300      	movs	r3, #0
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
 8004980:	e025      	b.n	80049ce <HAL_ADC_ConvCpltCallback+0x116>
		{
			masterConvertedValue[i]=ADCDualConvertedValues[i]&0xFFFF;
 8004982:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <HAL_ADC_ConvCpltCallback+0x12c>)
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800498a:	b29a      	uxth	r2, r3
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004994:	440b      	add	r3, r1
 8004996:	f843 2c10 	str.w	r2, [r3, #-16]
			slaveConvertedValue[i]=(ADCDualConvertedValues[i]>>16)&0xFFFF;
 800499a:	4a12      	ldr	r2, [pc, #72]	; (80049e4 <HAL_ADC_ConvCpltCallback+0x12c>)
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a2:	0c1a      	lsrs	r2, r3, #16
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80049ac:	440b      	add	r3, r1
 80049ae:	f843 2c1c 	str.w	r2, [r3, #-28]
			temp[i]=masterConvertedValue[i];
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049ba:	4413      	add	r3, r2
 80049bc:	f853 2c10 	ldr.w	r2, [r3, #-16]
 80049c0:	4909      	ldr	r1, [pc, #36]	; (80049e8 <HAL_ADC_ConvCpltCallback+0x130>)
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0; i<3; i++)
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	3301      	adds	r3, #1
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	ddd6      	ble.n	8004982 <HAL_ADC_ConvCpltCallback+0xca>
		default:
			Error_Handler();
			break;
		}*/
	}
}
 80049d4:	bf00      	nop
 80049d6:	3728      	adds	r7, #40	; 0x28
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20000060 	.word	0x20000060
 80049e0:	48000400 	.word	0x48000400
 80049e4:	2000028c 	.word	0x2000028c
 80049e8:	2000017c 	.word	0x2000017c

080049ec <CanSend>:


uint32_t CanSend(uint32_t message)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08e      	sub	sp, #56	; 0x38
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
	//TODO: maybe have warning states based on these if statements
	if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) < 1)
 80049f4:	4837      	ldr	r0, [pc, #220]	; (8004ad4 <CanSend+0xe8>)
 80049f6:	f7fd fde5 	bl	80025c4 <HAL_FDCAN_GetTxFifoFreeLevel>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d102      	bne.n	8004a06 <CanSend+0x1a>
	{
		return -1;
 8004a00:	f04f 33ff 	mov.w	r3, #4294967295
 8004a04:	e061      	b.n	8004aca <CanSend+0xde>
	}

	if(Can_IDs[message]>2047)
 8004a06:	4a34      	ldr	r2, [pc, #208]	; (8004ad8 <CanSend+0xec>)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a12:	d302      	bcc.n	8004a1a <CanSend+0x2e>
	{
		return -1;
 8004a14:	f04f 33ff 	mov.w	r3, #4294967295
 8004a18:	e057      	b.n	8004aca <CanSend+0xde>
		//TODO: for sure we want warning for trying to send disabled message
	}
	else if(Can_DLCs[message]==0)
 8004a1a:	4a30      	ldr	r2, [pc, #192]	; (8004adc <CanSend+0xf0>)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <CanSend+0x40>
	{
		return -1;
 8004a26:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2a:	e04e      	b.n	8004aca <CanSend+0xde>
		//TODO: set warning for trying to send message with 0 DLC
	}
	else if(Can_DLCs[message]>8)
 8004a2c:	4a2b      	ldr	r2, [pc, #172]	; (8004adc <CanSend+0xf0>)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d902      	bls.n	8004a3e <CanSend+0x52>
	{
		return -1;
 8004a38:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3c:	e045      	b.n	8004aca <CanSend+0xde>
		//TODO: set warning for trying to send too long message
	}

	FDCAN_TxHeaderTypeDef TxHeader;

	TxHeader.Identifier = Can_IDs[message];
 8004a3e:	4a26      	ldr	r2, [pc, #152]	; (8004ad8 <CanSend+0xec>)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a46:	617b      	str	r3, [r7, #20]
	TxHeader.DataLength = (Can_DLCs[message]<<16);
 8004a48:	4a24      	ldr	r2, [pc, #144]	; (8004adc <CanSend+0xf0>)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a50:	041b      	lsls	r3, r3, #16
 8004a52:	623b      	str	r3, [r7, #32]
	uint8_t CANTxData[8] = { temp[0]>>8, temp[0], temp[1]>>8, temp[1], temp[2]>>0, temp[2], 0xFF, 0xFF }; //TODO: tx data based on values from flash somehow
 8004a54:	4b22      	ldr	r3, [pc, #136]	; (8004ae0 <CanSend+0xf4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	0a1b      	lsrs	r3, r3, #8
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	733b      	strb	r3, [r7, #12]
 8004a5e:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <CanSend+0xf4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	737b      	strb	r3, [r7, #13]
 8004a66:	4b1e      	ldr	r3, [pc, #120]	; (8004ae0 <CanSend+0xf4>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	0a1b      	lsrs	r3, r3, #8
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	73bb      	strb	r3, [r7, #14]
 8004a70:	4b1b      	ldr	r3, [pc, #108]	; (8004ae0 <CanSend+0xf4>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	73fb      	strb	r3, [r7, #15]
 8004a78:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <CanSend+0xf4>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	743b      	strb	r3, [r7, #16]
 8004a80:	4b17      	ldr	r3, [pc, #92]	; (8004ae0 <CanSend+0xf4>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	747b      	strb	r3, [r7, #17]
 8004a88:	23ff      	movs	r3, #255	; 0xff
 8004a8a:	74bb      	strb	r3, [r7, #18]
 8004a8c:	23ff      	movs	r3, #255	; 0xff
 8004a8e:	74fb      	strb	r3, [r7, #19]
	//TODO: logic for different can tx data

	TxHeader.IdType = FDCAN_STANDARD_ID;
 8004a90:	2300      	movs	r3, #0
 8004a92:	61bb      	str	r3, [r7, #24]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	633b      	str	r3, [r7, #48]	; 0x30
	TxHeader.MessageMarker = 0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	637b      	str	r3, [r7, #52]	; 0x34

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 8004aac:	f107 020c 	add.w	r2, r7, #12
 8004ab0:	f107 0314 	add.w	r3, r7, #20
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4807      	ldr	r0, [pc, #28]	; (8004ad4 <CanSend+0xe8>)
 8004ab8:	f7fd fc66 	bl	8002388 <HAL_FDCAN_AddMessageToTxFifoQ>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <CanSend+0xdc>
	{
		return -1;
 8004ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac6:	e000      	b.n	8004aca <CanSend+0xde>
		//Error_Handler();
	}

	return 0;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3738      	adds	r7, #56	; 0x38
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000118 	.word	0x20000118
 8004ad8:	200002a8 	.word	0x200002a8
 8004adc:	200002e8 	.word	0x200002e8
 8004ae0:	2000017c 	.word	0x2000017c

08004ae4 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08e      	sub	sp, #56	; 0x38
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t CANRxData[8];

	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d025      	beq.n	8004b44 <HAL_FDCAN_RxFifo0Callback+0x60>
	{
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, CANRxData) != HAL_OK)
 8004af8:	f107 0308 	add.w	r3, r7, #8
 8004afc:	f107 0210 	add.w	r2, r7, #16
 8004b00:	2140      	movs	r1, #64	; 0x40
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fd fc84 	bl	8002410 <HAL_FDCAN_GetRxMessage>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_FDCAN_RxFifo0Callback+0x2e>
		{
			Error_Handler();
 8004b0e:	f000 fbad 	bl	800526c <Error_Handler>
			//TODO: move to error can message
		}

		if (RxHeader.Identifier == CANID_SYNC)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b80      	cmp	r3, #128	; 0x80
 8004b16:	d015      	beq.n	8004b44 <HAL_FDCAN_RxFifo0Callback+0x60>
		{
			//TODO: put logic for sync message here
		}
		else if (RxHeader.Identifier == CANID_CONFIG)
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b1e:	d10d      	bne.n	8004b3c <HAL_FDCAN_RxFifo0Callback+0x58>
		{
			//TODO: put logic here for toggling output pins and pwm frequencies
			//TODO: logic for writing config to flash
			if(CANRxData[0] == ID)
 8004b20:	7a3b      	ldrb	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10d      	bne.n	8004b42 <HAL_FDCAN_RxFifo0Callback+0x5e>
			{
				switch(CANRxData[1])
 8004b26:	7a7b      	ldrb	r3, [r7, #9]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d000      	beq.n	8004b2e <HAL_FDCAN_RxFifo0Callback+0x4a>
				case SWITCH_POWER:
					Switch_Power(CANRxData[2], CANRxData[3]);
					break;
				default:
					//TODO: warning to canbus for undefined configuration command
					break;
 8004b2c:	e00a      	b.n	8004b44 <HAL_FDCAN_RxFifo0Callback+0x60>
					Switch_Power(CANRxData[2], CANRxData[3]);
 8004b2e:	7abb      	ldrb	r3, [r7, #10]
 8004b30:	7afa      	ldrb	r2, [r7, #11]
 8004b32:	4611      	mov	r1, r2
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff fc53 	bl	80043e0 <Switch_Power>
					break;
 8004b3a:	e003      	b.n	8004b44 <HAL_FDCAN_RxFifo0Callback+0x60>
				}
			}
		}
		else
		{
			Error_Handler();
 8004b3c:	f000 fb96 	bl	800526c <Error_Handler>
			//TODO: move to error can message
		}
	}
}
 8004b40:	e000      	b.n	8004b44 <HAL_FDCAN_RxFifo0Callback+0x60>
			}
 8004b42:	bf00      	nop
}
 8004b44:	bf00      	nop
 8004b46:	3738      	adds	r7, #56	; 0x38
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <SystemClock_Config>:



void SystemClock_Config(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b0a4      	sub	sp, #144	; 0x90
 8004b50:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b56:	2238      	movs	r2, #56	; 0x38
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fda2 	bl	80056a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	605a      	str	r2, [r3, #4]
 8004b6a:	609a      	str	r2, [r3, #8]
 8004b6c:	60da      	str	r2, [r3, #12]
 8004b6e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b70:	463b      	mov	r3, r7
 8004b72:	2244      	movs	r2, #68	; 0x44
 8004b74:	2100      	movs	r1, #0
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fd94 	bl	80056a4 <memset>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	f7fe fca3 	bl	80034c8 <HAL_PWREx_ControlVoltageScaling>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004b82:	2301      	movs	r3, #1
 8004b84:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004b86:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004b8a:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004b90:	2303      	movs	r3, #3
 8004b92:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004b94:	2304      	movs	r3, #4
 8004b96:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8004b98:	2355      	movs	r3, #85	; 0x55
 8004b9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004baa:	2302      	movs	r3, #2
 8004bac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fe fd2b 	bl	8003610 <HAL_RCC_OscConfig>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <SystemClock_Config+0x78>
	{
		Error_Handler();
 8004bc0:	f000 fb54 	bl	800526c <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8004bc4:	230f      	movs	r3, #15
 8004bc6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	657b      	str	r3, [r7, #84]	; 0x54

	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8004bd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004bdc:	2108      	movs	r1, #8
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff f82e 	bl	8003c40 <HAL_RCC_ClockConfig>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8004bea:	f000 fb3f 	bl	800526c <Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
 8004bee:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8004bf2:	603b      	str	r3, [r7, #0]
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004bf8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bfe:	463b      	mov	r3, r7
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff f9fd 	bl	8004000 <HAL_RCCEx_PeriphCLKConfig>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8004c0c:	f000 fb2e 	bl	800526c <Error_Handler>
	}
}
 8004c10:	bf00      	nop
 8004c12:	3790      	adds	r7, #144	; 0x90
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08c      	sub	sp, #48	; 0x30
 8004c1c:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode = {0};
 8004c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	605a      	str	r2, [r3, #4]
 8004c28:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8004c2a:	1d3b      	adds	r3, r7, #4
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	2100      	movs	r1, #0
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fd37 	bl	80056a4 <memset>

	hadc1.Instance = ADC1;
 8004c36:	4b47      	ldr	r3, [pc, #284]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004c38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004c3c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004c3e:	4b45      	ldr	r3, [pc, #276]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8004c44:	4b43      	ldr	r3, [pc, #268]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004c46:	2208      	movs	r2, #8
 8004c48:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c4a:	4b42      	ldr	r3, [pc, #264]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8004c50:	4b40      	ldr	r3, [pc, #256]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004c56:	4b3f      	ldr	r3, [pc, #252]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004c5c:	4b3d      	ldr	r3, [pc, #244]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004c5e:	2204      	movs	r2, #4
 8004c60:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8004c62:	4b3c      	ldr	r3, [pc, #240]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8004c68:	4b3a      	ldr	r3, [pc, #232]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 3;
 8004c6e:	4b39      	ldr	r3, [pc, #228]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004c70:	2203      	movs	r2, #3
 8004c72:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004c74:	4b37      	ldr	r3, [pc, #220]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c7c:	4b35      	ldr	r3, [pc, #212]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c82:	4b34      	ldr	r3, [pc, #208]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8004c88:	4b32      	ldr	r3, [pc, #200]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004c90:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004c92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c96:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8004c98:	4b2e      	ldr	r3, [pc, #184]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ca0:	482c      	ldr	r0, [pc, #176]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004ca2:	f7fb fd5b 	bl	800075c <HAL_ADC_Init>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <MX_ADC1_Init+0x98>
	{
		Error_Handler();
 8004cac:	f000 fade 	bl	800526c <Error_Handler>
	}

	multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8004cb0:	2306      	movs	r3, #6
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8004cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cb8:	62bb      	str	r3, [r7, #40]	; 0x28
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_12CYCLES;
 8004cba:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4823      	ldr	r0, [pc, #140]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004cc8:	f7fc fcf6 	bl	80016b8 <HAL_ADCEx_MultiModeConfigChannel>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <MX_ADC1_Init+0xbe>
	{
		Error_Handler();
 8004cd2:	f000 facb 	bl	800526c <Error_Handler>
	}


	sConfig.Channel = ADC_CHANNEL_1;
 8004cd6:	4b20      	ldr	r3, [pc, #128]	; (8004d58 <MX_ADC1_Init+0x140>)
 8004cd8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8004cda:	2312      	movs	r3, #18
 8004cdc:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004ce2:	237f      	movs	r3, #127	; 0x7f
 8004ce4:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004ce6:	2304      	movs	r3, #4
 8004ce8:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004cee:	1d3b      	adds	r3, r7, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4818      	ldr	r0, [pc, #96]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004cf4:	f7fb fece 	bl	8000a94 <HAL_ADC_ConfigChannel>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <MX_ADC1_Init+0xea>
	{
		Error_Handler();
 8004cfe:	f000 fab5 	bl	800526c <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_2;
 8004d02:	4b16      	ldr	r3, [pc, #88]	; (8004d5c <MX_ADC1_Init+0x144>)
 8004d04:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8004d06:	230c      	movs	r3, #12
 8004d08:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d0a:	1d3b      	adds	r3, r7, #4
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4811      	ldr	r0, [pc, #68]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004d10:	f7fb fec0 	bl	8000a94 <HAL_ADC_ConfigChannel>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <MX_ADC1_Init+0x106>
	{
		Error_Handler();
 8004d1a:	f000 faa7 	bl	800526c <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_3;
 8004d1e:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <MX_ADC1_Init+0x148>)
 8004d20:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004d22:	2306      	movs	r3, #6
 8004d24:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d26:	1d3b      	adds	r3, r7, #4
 8004d28:	4619      	mov	r1, r3
 8004d2a:	480a      	ldr	r0, [pc, #40]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004d2c:	f7fb feb2 	bl	8000a94 <HAL_ADC_ConfigChannel>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <MX_ADC1_Init+0x122>
	{
		Error_Handler();
 8004d36:	f000 fa99 	bl	800526c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8004d3a:	217f      	movs	r1, #127	; 0x7f
 8004d3c:	4805      	ldr	r0, [pc, #20]	; (8004d54 <MX_ADC1_Init+0x13c>)
 8004d3e:	f7fc fbbb 	bl	80014b8 <HAL_ADCEx_Calibration_Start>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <MX_ADC1_Init+0x134>
	{
		Error_Handler();
 8004d48:	f000 fa90 	bl	800526c <Error_Handler>
	}
}
 8004d4c:	bf00      	nop
 8004d4e:	3730      	adds	r7, #48	; 0x30
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	200001bc 	.word	0x200001bc
 8004d58:	04300002 	.word	0x04300002
 8004d5c:	08600004 	.word	0x08600004
 8004d60:	0c900008 	.word	0x0c900008

08004d64 <MX_ADC2_Init>:

static void MX_ADC2_Init(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	2100      	movs	r1, #0
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fc97 	bl	80056a4 <memset>

	hadc2.Instance = ADC2;
 8004d76:	4b38      	ldr	r3, [pc, #224]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004d78:	4a38      	ldr	r2, [pc, #224]	; (8004e5c <MX_ADC2_Init+0xf8>)
 8004d7a:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004d7c:	4b36      	ldr	r3, [pc, #216]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8004d82:	4b35      	ldr	r3, [pc, #212]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004d84:	2208      	movs	r2, #8
 8004d86:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004d88:	4b33      	ldr	r3, [pc, #204]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 8004d8e:	4b32      	ldr	r3, [pc, #200]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004d94:	4b30      	ldr	r3, [pc, #192]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004d9a:	4b2f      	ldr	r3, [pc, #188]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004d9c:	2204      	movs	r2, #4
 8004d9e:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8004da0:	4b2d      	ldr	r3, [pc, #180]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8004da6:	4b2c      	ldr	r3, [pc, #176]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 3;
 8004dac:	4b2a      	ldr	r3, [pc, #168]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004dae:	2203      	movs	r2, #3
 8004db0:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004db2:	4b29      	ldr	r3, [pc, #164]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8004dba:	4b27      	ldr	r3, [pc, #156]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004dc2:	4b25      	ldr	r3, [pc, #148]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004dc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004dc8:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 8004dca:	4b23      	ldr	r3, [pc, #140]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004dd2:	4821      	ldr	r0, [pc, #132]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004dd4:	f7fb fcc2 	bl	800075c <HAL_ADC_Init>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <MX_ADC2_Init+0x7e>
	{
		Error_Handler();
 8004dde:	f000 fa45 	bl	800526c <Error_Handler>
	}


	sConfig.Channel = ADC_CHANNEL_10;
 8004de2:	4b1f      	ldr	r3, [pc, #124]	; (8004e60 <MX_ADC2_Init+0xfc>)
 8004de4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004de6:	2306      	movs	r3, #6
 8004de8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8004dea:	2303      	movs	r3, #3
 8004dec:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004dee:	237f      	movs	r3, #127	; 0x7f
 8004df0:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004df2:	2304      	movs	r3, #4
 8004df4:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4816      	ldr	r0, [pc, #88]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004e00:	f7fb fe48 	bl	8000a94 <HAL_ADC_ConfigChannel>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <MX_ADC2_Init+0xaa>
	{
		Error_Handler();
 8004e0a:	f000 fa2f 	bl	800526c <Error_Handler>
	}

	sConfig.Rank = ADC_REGULAR_RANK_2;
 8004e0e:	230c      	movs	r3, #12
 8004e10:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004e12:	463b      	mov	r3, r7
 8004e14:	4619      	mov	r1, r3
 8004e16:	4810      	ldr	r0, [pc, #64]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004e18:	f7fb fe3c 	bl	8000a94 <HAL_ADC_ConfigChannel>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <MX_ADC2_Init+0xc2>
	{
		Error_Handler();
 8004e22:	f000 fa23 	bl	800526c <Error_Handler>
	}

	sConfig.Rank = ADC_REGULAR_RANK_3;
 8004e26:	2312      	movs	r3, #18
 8004e28:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004e2a:	463b      	mov	r3, r7
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	480a      	ldr	r0, [pc, #40]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004e30:	f7fb fe30 	bl	8000a94 <HAL_ADC_ConfigChannel>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <MX_ADC2_Init+0xda>
	{
		Error_Handler();
 8004e3a:	f000 fa17 	bl	800526c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8004e3e:	217f      	movs	r1, #127	; 0x7f
 8004e40:	4805      	ldr	r0, [pc, #20]	; (8004e58 <MX_ADC2_Init+0xf4>)
 8004e42:	f7fc fb39 	bl	80014b8 <HAL_ADCEx_Calibration_Start>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <MX_ADC2_Init+0xec>
	{
		Error_Handler();
 8004e4c:	f000 fa0e 	bl	800526c <Error_Handler>
	}
}
 8004e50:	bf00      	nop
 8004e52:	3720      	adds	r7, #32
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	2000008c 	.word	0x2000008c
 8004e5c:	50000100 	.word	0x50000100
 8004e60:	2a000400 	.word	0x2a000400

08004e64 <MX_FDCAN_Init>:

static void MX_FDCAN_Init(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef	sFilterConfig;

	hfdcan.Instance = FDCAN1;
 8004e6a:	4b52      	ldr	r3, [pc, #328]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004e6c:	4a52      	ldr	r2, [pc, #328]	; (8004fb8 <MX_FDCAN_Init+0x154>)
 8004e6e:	601a      	str	r2, [r3, #0]
	hfdcan.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8004e70:	4b50      	ldr	r3, [pc, #320]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	605a      	str	r2, [r3, #4]
	hfdcan.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004e76:	4b4f      	ldr	r3, [pc, #316]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	609a      	str	r2, [r3, #8]
	hfdcan.Init.Mode = FDCAN_MODE_NORMAL;
 8004e7c:	4b4d      	ldr	r3, [pc, #308]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	60da      	str	r2, [r3, #12]
	hfdcan.Init.AutoRetransmission = DISABLE;
 8004e82:	4b4c      	ldr	r3, [pc, #304]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	741a      	strb	r2, [r3, #16]
	hfdcan.Init.TransmitPause = DISABLE;
 8004e88:	4b4a      	ldr	r3, [pc, #296]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	745a      	strb	r2, [r3, #17]
	hfdcan.Init.ProtocolException = DISABLE;
 8004e8e:	4b49      	ldr	r3, [pc, #292]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	749a      	strb	r2, [r3, #18]
	hfdcan.Init.NominalPrescaler = 1;
 8004e94:	4b47      	ldr	r3, [pc, #284]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004e96:	2201      	movs	r2, #1
 8004e98:	615a      	str	r2, [r3, #20]
	hfdcan.Init.NominalSyncJumpWidth = 1;
 8004e9a:	4b46      	ldr	r3, [pc, #280]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	619a      	str	r2, [r3, #24]
	hfdcan.Init.NominalTimeSeg1 = 13;
 8004ea0:	4b44      	ldr	r3, [pc, #272]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004ea2:	220d      	movs	r2, #13
 8004ea4:	61da      	str	r2, [r3, #28]
	hfdcan.Init.NominalTimeSeg2 = 2;
 8004ea6:	4b43      	ldr	r3, [pc, #268]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	621a      	str	r2, [r3, #32]
	hfdcan.Init.DataPrescaler = 1;
 8004eac:	4b41      	ldr	r3, [pc, #260]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan.Init.DataSyncJumpWidth = 1;
 8004eb2:	4b40      	ldr	r3, [pc, #256]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan.Init.DataTimeSeg1 = 1;
 8004eb8:	4b3e      	ldr	r3, [pc, #248]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan.Init.DataTimeSeg2 = 1;
 8004ebe:	4b3d      	ldr	r3, [pc, #244]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan.Init.StdFiltersNbr = 2;
 8004ec4:	4b3b      	ldr	r3, [pc, #236]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan.Init.ExtFiltersNbr = 0;
 8004eca:	4b3a      	ldr	r3, [pc, #232]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004ed0:	4b38      	ldr	r3, [pc, #224]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_FDCAN_Init(&hfdcan) != HAL_OK)
 8004ed6:	4837      	ldr	r0, [pc, #220]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004ed8:	f7fd f810 	bl	8001efc <HAL_FDCAN_Init>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <MX_FDCAN_Init+0x82>
	{
		Error_Handler();
 8004ee2:	f000 f9c3 	bl	800526c <Error_Handler>
	}

	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	2140      	movs	r1, #64	; 0x40
 8004eea:	4832      	ldr	r0, [pc, #200]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004eec:	f7fd f9eb 	bl	80022c6 <HAL_FDCAN_ConfigRxFifoOverwrite>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <MX_FDCAN_Init+0x96>
	{
		Error_Handler();
 8004ef6:	f000 f9b9 	bl	800526c <Error_Handler>
	}
	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8004efa:	2201      	movs	r2, #1
 8004efc:	2141      	movs	r1, #65	; 0x41
 8004efe:	482d      	ldr	r0, [pc, #180]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004f00:	f7fd f9e1 	bl	80022c6 <HAL_FDCAN_ConfigRxFifoOverwrite>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <MX_FDCAN_Init+0xaa>
	{
		Error_Handler();
 8004f0a:	f000 f9af 	bl	800526c <Error_Handler>
	}

	//only accept config/request can messages and sync can messages
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8004f16:	2302      	movs	r3, #2
 8004f18:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_CONFIG;
 8004f1e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004f22:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8004f24:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004f28:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 8004f2a:	463b      	mov	r3, r7
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4821      	ldr	r0, [pc, #132]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004f30:	f7fd f93e 	bl	80021b0 <HAL_FDCAN_ConfigFilter>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <MX_FDCAN_Init+0xda>
	{
		Error_Handler();
 8004f3a:	f000 f997 	bl	800526c <Error_Handler>
	}

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 1;
 8004f42:	2301      	movs	r3, #1
 8004f44:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8004f46:	2302      	movs	r3, #2
 8004f48:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_SYNC;
 8004f4e:	2380      	movs	r3, #128	; 0x80
 8004f50:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8004f52:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004f56:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 8004f58:	463b      	mov	r3, r7
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4815      	ldr	r0, [pc, #84]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004f5e:	f7fd f927 	bl	80021b0 <HAL_FDCAN_ConfigFilter>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <MX_FDCAN_Init+0x108>
	{
		Error_Handler();
 8004f68:	f000 f980 	bl	800526c <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	2301      	movs	r3, #1
 8004f72:	2202      	movs	r2, #2
 8004f74:	2102      	movs	r1, #2
 8004f76:	480f      	ldr	r0, [pc, #60]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004f78:	f7fd f974 	bl	8002264 <HAL_FDCAN_ConfigGlobalFilter>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <MX_FDCAN_Init+0x122>
	{
		Error_Handler();
 8004f82:	f000 f973 	bl	800526c <Error_Handler>
	}

	if(HAL_FDCAN_Start(&hfdcan) != HAL_OK)
 8004f86:	480b      	ldr	r0, [pc, #44]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004f88:	f7fd f9d6 	bl	8002338 <HAL_FDCAN_Start>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <MX_FDCAN_Init+0x132>
	{
		Error_Handler();
 8004f92:	f000 f96b 	bl	800526c <Error_Handler>
	}
	if(HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8004f96:	2200      	movs	r2, #0
 8004f98:	2101      	movs	r1, #1
 8004f9a:	4806      	ldr	r0, [pc, #24]	; (8004fb4 <MX_FDCAN_Init+0x150>)
 8004f9c:	f7fd fb24 	bl	80025e8 <HAL_FDCAN_ActivateNotification>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <MX_FDCAN_Init+0x146>
	{
		Error_Handler();
 8004fa6:	f000 f961 	bl	800526c <Error_Handler>
	}
}
 8004faa:	bf00      	nop
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000118 	.word	0x20000118
 8004fb8:	40006400 	.word	0x40006400

08004fbc <MX_DMA_Init>:

static void MX_DMA_Init(void) 
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004fc2:	4b16      	ldr	r3, [pc, #88]	; (800501c <MX_DMA_Init+0x60>)
 8004fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc6:	4a15      	ldr	r2, [pc, #84]	; (800501c <MX_DMA_Init+0x60>)
 8004fc8:	f043 0304 	orr.w	r3, r3, #4
 8004fcc:	6493      	str	r3, [r2, #72]	; 0x48
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <MX_DMA_Init+0x60>)
 8004fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	607b      	str	r3, [r7, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004fda:	4b10      	ldr	r3, [pc, #64]	; (800501c <MX_DMA_Init+0x60>)
 8004fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fde:	4a0f      	ldr	r2, [pc, #60]	; (800501c <MX_DMA_Init+0x60>)
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	6493      	str	r3, [r2, #72]	; 0x48
 8004fe6:	4b0d      	ldr	r3, [pc, #52]	; (800501c <MX_DMA_Init+0x60>)
 8004fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	200b      	movs	r0, #11
 8004ff8:	f7fc fcd9 	bl	80019ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004ffc:	200b      	movs	r0, #11
 8004ffe:	f7fc fcf0 	bl	80019e2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8005002:	2200      	movs	r2, #0
 8005004:	2100      	movs	r1, #0
 8005006:	200c      	movs	r0, #12
 8005008:	f7fc fcd1 	bl	80019ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800500c:	200c      	movs	r0, #12
 800500e:	f7fc fce8 	bl	80019e2 <HAL_NVIC_EnableIRQ>
}
 8005012:	bf00      	nop
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40021000 	.word	0x40021000

08005020 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005026:	f107 030c 	add.w	r3, r7, #12
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	605a      	str	r2, [r3, #4]
 8005030:	609a      	str	r2, [r3, #8]
 8005032:	60da      	str	r2, [r3, #12]
 8005034:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005036:	4b8a      	ldr	r3, [pc, #552]	; (8005260 <MX_GPIO_Init+0x240>)
 8005038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503a:	4a89      	ldr	r2, [pc, #548]	; (8005260 <MX_GPIO_Init+0x240>)
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005042:	4b87      	ldr	r3, [pc, #540]	; (8005260 <MX_GPIO_Init+0x240>)
 8005044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800504e:	4b84      	ldr	r3, [pc, #528]	; (8005260 <MX_GPIO_Init+0x240>)
 8005050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005052:	4a83      	ldr	r2, [pc, #524]	; (8005260 <MX_GPIO_Init+0x240>)
 8005054:	f043 0302 	orr.w	r3, r3, #2
 8005058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800505a:	4b81      	ldr	r3, [pc, #516]	; (8005260 <MX_GPIO_Init+0x240>)
 800505c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	607b      	str	r3, [r7, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8005066:	4b7e      	ldr	r3, [pc, #504]	; (8005260 <MX_GPIO_Init+0x240>)
 8005068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506a:	4a7d      	ldr	r2, [pc, #500]	; (8005260 <MX_GPIO_Init+0x240>)
 800506c:	f043 0320 	orr.w	r3, r3, #32
 8005070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005072:	4b7b      	ldr	r3, [pc, #492]	; (8005260 <MX_GPIO_Init+0x240>)
 8005074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	683b      	ldr	r3, [r7, #0]

	//led pin, sel pins, and in pins should always be outputs
	//led pin and sel pins should always start low, in pins should start based on configuration
	//TODO: somewhere else check and set the default for IN pins
	//TODO: in analog reading section use SEL0 and SEL1 for multisense multiplexing
	HAL_GPIO_WritePin(LED.PORT, LED.PIN, 0);
 800507e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005082:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005086:	2200      	movs	r2, #0
 8005088:	4618      	mov	r0, r3
 800508a:	f7fe f9eb 	bl	8003464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 800508e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005096:	2200      	movs	r2, #0
 8005098:	4618      	mov	r0, r3
 800509a:	f7fe f9e3 	bl	8003464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 800509e:	4b71      	ldr	r3, [pc, #452]	; (8005264 <MX_GPIO_Init+0x244>)
 80050a0:	2101      	movs	r1, #1
 80050a2:	2200      	movs	r2, #0
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fe f9dd 	bl	8003464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U5IN0.PORT, U5IN0.PIN, 1);
 80050aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050b2:	2201      	movs	r2, #1
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fe f9d5 	bl	8003464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U5IN1.PORT, U5IN1.PIN, 1);
 80050ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050be:	2180      	movs	r1, #128	; 0x80
 80050c0:	2201      	movs	r2, #1
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fe f9ce 	bl	8003464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U6IN0.PORT, U6IN0.PIN, 1);
 80050c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050cc:	2140      	movs	r1, #64	; 0x40
 80050ce:	2201      	movs	r2, #1
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fe f9c7 	bl	8003464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U6IN1.PORT, U6IN1.PIN, 0);
 80050d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050da:	2120      	movs	r1, #32
 80050dc:	2200      	movs	r2, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fe f9c0 	bl	8003464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U7IN0.PORT, U7IN0.PIN, 0);
 80050e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050e8:	2110      	movs	r1, #16
 80050ea:	2200      	movs	r2, #0
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fe f9b9 	bl	8003464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U7IN1.PORT, U7IN1.PIN, 0);
 80050f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050f6:	2108      	movs	r1, #8
 80050f8:	2200      	movs	r2, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fe f9b2 	bl	8003464 <HAL_GPIO_WritePin>

	//all outputs on portA assigned here
	GPIO_InitStruct.Pin = LED.PIN|SEL0.PIN|U5IN0.PIN|U5IN1.PIN|U6IN0.PIN|U6IN1.PIN|U7IN0.PIN|U7IN1.PIN;
 8005100:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005108:	4313      	orrs	r3, r2
 800510a:	b29b      	uxth	r3, r3
 800510c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005110:	4313      	orrs	r3, r2
 8005112:	b29b      	uxth	r3, r3
 8005114:	2280      	movs	r2, #128	; 0x80
 8005116:	4313      	orrs	r3, r2
 8005118:	b29b      	uxth	r3, r3
 800511a:	2240      	movs	r2, #64	; 0x40
 800511c:	4313      	orrs	r3, r2
 800511e:	b29b      	uxth	r3, r3
 8005120:	2220      	movs	r2, #32
 8005122:	4313      	orrs	r3, r2
 8005124:	b29b      	uxth	r3, r3
 8005126:	2210      	movs	r2, #16
 8005128:	4313      	orrs	r3, r2
 800512a:	b29b      	uxth	r3, r3
 800512c:	2208      	movs	r2, #8
 800512e:	4313      	orrs	r3, r2
 8005130:	b29b      	uxth	r3, r3
 8005132:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005134:	2301      	movs	r3, #1
 8005136:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800513c:	2300      	movs	r3, #0
 800513e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005140:	f107 030c 	add.w	r3, r7, #12
 8005144:	4619      	mov	r1, r3
 8005146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800514a:	f7fe f809 	bl	8003160 <HAL_GPIO_Init>

	//all outputs on portB assigned here
	GPIO_InitStruct.Pin = SEL1.PIN;
 800514e:	2301      	movs	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005152:	2301      	movs	r3, #1
 8005154:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800515a:	2300      	movs	r3, #0
 800515c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800515e:	f107 030c 	add.w	r3, r7, #12
 8005162:	4619      	mov	r1, r3
 8005164:	483f      	ldr	r0, [pc, #252]	; (8005264 <MX_GPIO_Init+0x244>)
 8005166:	f7fd fffb 	bl	8003160 <HAL_GPIO_Init>


	if(Digital_In_EN && (1<<0))
 800516a:	4b3f      	ldr	r3, [pc, #252]	; (8005268 <MX_GPIO_Init+0x248>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d012      	beq.n	8005198 <MX_GPIO_Init+0x178>
	{
		HAL_GPIO_WritePin(DIO3.PORT, DIO3.PIN, GPIO_PIN_RESET);
 8005172:	4b3c      	ldr	r3, [pc, #240]	; (8005264 <MX_GPIO_Init+0x244>)
 8005174:	2108      	movs	r1, #8
 8005176:	2200      	movs	r2, #0
 8005178:	4618      	mov	r0, r3
 800517a:	f7fe f973 	bl	8003464 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO3.PIN;
 800517e:	2308      	movs	r3, #8
 8005180:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005182:	2300      	movs	r3, #0
 8005184:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO3.PORT, &GPIO_InitStruct);
 800518a:	4a36      	ldr	r2, [pc, #216]	; (8005264 <MX_GPIO_Init+0x244>)
 800518c:	f107 030c 	add.w	r3, r7, #12
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f7fd ffe4 	bl	8003160 <HAL_GPIO_Init>
	else if (1)
	{
		//here we configure pins intended for PWM purposes
	}

	if(Digital_In_EN && (1<<1))
 8005198:	4b33      	ldr	r3, [pc, #204]	; (8005268 <MX_GPIO_Init+0x248>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d012      	beq.n	80051c6 <MX_GPIO_Init+0x1a6>
	{
		HAL_GPIO_WritePin(DIO4.PORT, DIO4.PIN, GPIO_PIN_RESET);
 80051a0:	4b30      	ldr	r3, [pc, #192]	; (8005264 <MX_GPIO_Init+0x244>)
 80051a2:	2110      	movs	r1, #16
 80051a4:	2200      	movs	r2, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe f95c 	bl	8003464 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO4.PIN;
 80051ac:	2310      	movs	r3, #16
 80051ae:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051b0:	2300      	movs	r3, #0
 80051b2:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO4.PORT, &GPIO_InitStruct);
 80051b8:	4a2a      	ldr	r2, [pc, #168]	; (8005264 <MX_GPIO_Init+0x244>)
 80051ba:	f107 030c 	add.w	r3, r7, #12
 80051be:	4619      	mov	r1, r3
 80051c0:	4610      	mov	r0, r2
 80051c2:	f7fd ffcd 	bl	8003160 <HAL_GPIO_Init>
	else if (1)
	{
		//here we configure pins intended for PWM purposes
	}

	if(Digital_In_EN && (1<<2))
 80051c6:	4b28      	ldr	r3, [pc, #160]	; (8005268 <MX_GPIO_Init+0x248>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d012      	beq.n	80051f4 <MX_GPIO_Init+0x1d4>
	{
		HAL_GPIO_WritePin(DIO5.PORT, DIO5.PIN, GPIO_PIN_RESET);
 80051ce:	4b25      	ldr	r3, [pc, #148]	; (8005264 <MX_GPIO_Init+0x244>)
 80051d0:	2120      	movs	r1, #32
 80051d2:	2200      	movs	r2, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fe f945 	bl	8003464 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO5.PIN;
 80051da:	2320      	movs	r3, #32
 80051dc:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051de:	2300      	movs	r3, #0
 80051e0:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO5.PORT, &GPIO_InitStruct);
 80051e6:	4a1f      	ldr	r2, [pc, #124]	; (8005264 <MX_GPIO_Init+0x244>)
 80051e8:	f107 030c 	add.w	r3, r7, #12
 80051ec:	4619      	mov	r1, r3
 80051ee:	4610      	mov	r0, r2
 80051f0:	f7fd ffb6 	bl	8003160 <HAL_GPIO_Init>
	else if (1)
	{
		//here we configure pins intended for PWM purposes
	}

	if(Digital_In_EN && (1<<3))
 80051f4:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <MX_GPIO_Init+0x248>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d012      	beq.n	8005222 <MX_GPIO_Init+0x202>
	{
		HAL_GPIO_WritePin(DIO6.PORT, DIO6.PIN, GPIO_PIN_RESET);
 80051fc:	4b19      	ldr	r3, [pc, #100]	; (8005264 <MX_GPIO_Init+0x244>)
 80051fe:	2140      	movs	r1, #64	; 0x40
 8005200:	2200      	movs	r2, #0
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe f92e 	bl	8003464 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO6.PIN;
 8005208:	2340      	movs	r3, #64	; 0x40
 800520a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800520c:	2300      	movs	r3, #0
 800520e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO6.PORT, &GPIO_InitStruct);
 8005214:	4a13      	ldr	r2, [pc, #76]	; (8005264 <MX_GPIO_Init+0x244>)
 8005216:	f107 030c 	add.w	r3, r7, #12
 800521a:	4619      	mov	r1, r3
 800521c:	4610      	mov	r0, r2
 800521e:	f7fd ff9f 	bl	8003160 <HAL_GPIO_Init>
	else if (1)
	{
		//here we configure pins intended for PWM purposes
	}

	if(Digital_In_EN && (1<<4))
 8005222:	4b11      	ldr	r3, [pc, #68]	; (8005268 <MX_GPIO_Init+0x248>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d016      	beq.n	8005258 <MX_GPIO_Init+0x238>
	{
		HAL_GPIO_WritePin(DIO15.PORT, DIO15.PIN, GPIO_PIN_RESET);
 800522a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800522e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005232:	2200      	movs	r2, #0
 8005234:	4618      	mov	r0, r3
 8005236:	f7fe f915 	bl	8003464 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO15.PIN;
 800523a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800523e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005240:	2300      	movs	r3, #0
 8005242:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005244:	2300      	movs	r3, #0
 8005246:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO15.PORT, &GPIO_InitStruct);
 8005248:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800524c:	f107 030c 	add.w	r3, r7, #12
 8005250:	4619      	mov	r1, r3
 8005252:	4610      	mov	r0, r2
 8005254:	f7fd ff84 	bl	8003160 <HAL_GPIO_Init>
	}
	else if (1)
	{
		//here we configure pins intended for PWM purposes
	}
}
 8005258:	bf00      	nop
 800525a:	3720      	adds	r7, #32
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40021000 	.word	0x40021000
 8005264:	48000400 	.word	0x48000400
 8005268:	20000088 	.word	0x20000088

0800526c <Error_Handler>:


void Error_Handler(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(LED.PORT, LED.PIN);
 8005270:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005278:	4611      	mov	r1, r2
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe f90a 	bl	8003494 <HAL_GPIO_TogglePin>
		HAL_Delay(33);
 8005280:	2021      	movs	r0, #33	; 0x21
 8005282:	f7fb f839 	bl	80002f8 <HAL_Delay>
		HAL_GPIO_TogglePin(LED.PORT, LED.PIN);
 8005286:	e7f3      	b.n	8005270 <Error_Handler+0x4>

08005288 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800528c:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	4a04      	ldr	r2, [pc, #16]	; (80052a4 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8005292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005296:	6093      	str	r3, [r2, #8]
}
 8005298:	bf00      	nop
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40007000 	.word	0x40007000

080052a8 <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_adc1;
extern DMA_HandleTypeDef hdma_adc2;


void HAL_MspInit(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ae:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <HAL_MspInit+0x44>)
 80052b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b2:	4a0e      	ldr	r2, [pc, #56]	; (80052ec <HAL_MspInit+0x44>)
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	6613      	str	r3, [r2, #96]	; 0x60
 80052ba:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <HAL_MspInit+0x44>)
 80052bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	607b      	str	r3, [r7, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052c6:	4b09      	ldr	r3, [pc, #36]	; (80052ec <HAL_MspInit+0x44>)
 80052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ca:	4a08      	ldr	r2, [pc, #32]	; (80052ec <HAL_MspInit+0x44>)
 80052cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d0:	6593      	str	r3, [r2, #88]	; 0x58
 80052d2:	4b06      	ldr	r3, [pc, #24]	; (80052ec <HAL_MspInit+0x44>)
 80052d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]

  LL_PWR_DisableDeadBatteryPD();
 80052de:	f7ff ffd3 	bl	8005288 <LL_PWR_DisableDeadBatteryPD>
}
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40021000 	.word	0x40021000

080052f0 <HAL_ADC_MspInit>:

//counter to keep track of how many peripherals require ADC12 clock, so that deinitializing ADC1 allows ADC2 to run
static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08c      	sub	sp, #48	; 0x30
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f8:	f107 031c 	add.w	r3, r7, #28
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	605a      	str	r2, [r3, #4]
 8005302:	609a      	str	r2, [r3, #8]
 8005304:	60da      	str	r2, [r3, #12]
 8005306:	611a      	str	r2, [r3, #16]
	if(hadc->Instance==ADC1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005310:	d15a      	bne.n	80053c8 <HAL_ADC_MspInit+0xd8>
	{
		HAL_RCC_ADC12_CLK_ENABLED++;
 8005312:	4b5e      	ldr	r3, [pc, #376]	; (800548c <HAL_ADC_MspInit+0x19c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3301      	adds	r3, #1
 8005318:	4a5c      	ldr	r2, [pc, #368]	; (800548c <HAL_ADC_MspInit+0x19c>)
 800531a:	6013      	str	r3, [r2, #0]
		if(HAL_RCC_ADC12_CLK_ENABLED==1)
 800531c:	4b5b      	ldr	r3, [pc, #364]	; (800548c <HAL_ADC_MspInit+0x19c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d10b      	bne.n	800533c <HAL_ADC_MspInit+0x4c>
		{
			__HAL_RCC_ADC12_CLK_ENABLE();
 8005324:	4b5a      	ldr	r3, [pc, #360]	; (8005490 <HAL_ADC_MspInit+0x1a0>)
 8005326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005328:	4a59      	ldr	r2, [pc, #356]	; (8005490 <HAL_ADC_MspInit+0x1a0>)
 800532a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800532e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005330:	4b57      	ldr	r3, [pc, #348]	; (8005490 <HAL_ADC_MspInit+0x1a0>)
 8005332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	69bb      	ldr	r3, [r7, #24]
		}
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800533c:	4b54      	ldr	r3, [pc, #336]	; (8005490 <HAL_ADC_MspInit+0x1a0>)
 800533e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005340:	4a53      	ldr	r2, [pc, #332]	; (8005490 <HAL_ADC_MspInit+0x1a0>)
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005348:	4b51      	ldr	r3, [pc, #324]	; (8005490 <HAL_ADC_MspInit+0x1a0>)
 800534a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	697b      	ldr	r3, [r7, #20]

		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005354:	2307      	movs	r3, #7
 8005356:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005358:	2303      	movs	r3, #3
 800535a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800535c:	2300      	movs	r3, #0
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005360:	f107 031c 	add.w	r3, r7, #28
 8005364:	4619      	mov	r1, r3
 8005366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800536a:	f7fd fef9 	bl	8003160 <HAL_GPIO_Init>

		hdma_adc1.Instance = DMA1_Channel1;
 800536e:	4b49      	ldr	r3, [pc, #292]	; (8005494 <HAL_ADC_MspInit+0x1a4>)
 8005370:	4a49      	ldr	r2, [pc, #292]	; (8005498 <HAL_ADC_MspInit+0x1a8>)
 8005372:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005374:	4b47      	ldr	r3, [pc, #284]	; (8005494 <HAL_ADC_MspInit+0x1a4>)
 8005376:	2205      	movs	r2, #5
 8005378:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800537a:	4b46      	ldr	r3, [pc, #280]	; (8005494 <HAL_ADC_MspInit+0x1a4>)
 800537c:	2200      	movs	r2, #0
 800537e:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005380:	4b44      	ldr	r3, [pc, #272]	; (8005494 <HAL_ADC_MspInit+0x1a4>)
 8005382:	2200      	movs	r2, #0
 8005384:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005386:	4b43      	ldr	r3, [pc, #268]	; (8005494 <HAL_ADC_MspInit+0x1a4>)
 8005388:	2280      	movs	r2, #128	; 0x80
 800538a:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800538c:	4b41      	ldr	r3, [pc, #260]	; (8005494 <HAL_ADC_MspInit+0x1a4>)
 800538e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005392:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005394:	4b3f      	ldr	r3, [pc, #252]	; (8005494 <HAL_ADC_MspInit+0x1a4>)
 8005396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800539a:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_NORMAL;
 800539c:	4b3d      	ldr	r3, [pc, #244]	; (8005494 <HAL_ADC_MspInit+0x1a4>)
 800539e:	2200      	movs	r2, #0
 80053a0:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80053a2:	4b3c      	ldr	r3, [pc, #240]	; (8005494 <HAL_ADC_MspInit+0x1a4>)
 80053a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053a8:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80053aa:	483a      	ldr	r0, [pc, #232]	; (8005494 <HAL_ADC_MspInit+0x1a4>)
 80053ac:	f7fc fb34 	bl	8001a18 <HAL_DMA_Init>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_ADC_MspInit+0xca>
		{
			Error_Handler();
 80053b6:	f7ff ff59 	bl	800526c <Error_Handler>
		}

		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a35      	ldr	r2, [pc, #212]	; (8005494 <HAL_ADC_MspInit+0x1a4>)
 80053be:	655a      	str	r2, [r3, #84]	; 0x54
 80053c0:	4a34      	ldr	r2, [pc, #208]	; (8005494 <HAL_ADC_MspInit+0x1a4>)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6293      	str	r3, [r2, #40]	; 0x28
		  Error_Handler();
		}

		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
	}
}
 80053c6:	e05d      	b.n	8005484 <HAL_ADC_MspInit+0x194>
	else if(hadc->Instance==ADC2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a33      	ldr	r2, [pc, #204]	; (800549c <HAL_ADC_MspInit+0x1ac>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d158      	bne.n	8005484 <HAL_ADC_MspInit+0x194>
		HAL_RCC_ADC12_CLK_ENABLED++;
 80053d2:	4b2e      	ldr	r3, [pc, #184]	; (800548c <HAL_ADC_MspInit+0x19c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3301      	adds	r3, #1
 80053d8:	4a2c      	ldr	r2, [pc, #176]	; (800548c <HAL_ADC_MspInit+0x19c>)
 80053da:	6013      	str	r3, [r2, #0]
		if(HAL_RCC_ADC12_CLK_ENABLED==1)
 80053dc:	4b2b      	ldr	r3, [pc, #172]	; (800548c <HAL_ADC_MspInit+0x19c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d10b      	bne.n	80053fc <HAL_ADC_MspInit+0x10c>
		  __HAL_RCC_ADC12_CLK_ENABLE();
 80053e4:	4b2a      	ldr	r3, [pc, #168]	; (8005490 <HAL_ADC_MspInit+0x1a0>)
 80053e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e8:	4a29      	ldr	r2, [pc, #164]	; (8005490 <HAL_ADC_MspInit+0x1a0>)
 80053ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053f0:	4b27      	ldr	r3, [pc, #156]	; (8005490 <HAL_ADC_MspInit+0x1a0>)
 80053f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80053fc:	4b24      	ldr	r3, [pc, #144]	; (8005490 <HAL_ADC_MspInit+0x1a0>)
 80053fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005400:	4a23      	ldr	r2, [pc, #140]	; (8005490 <HAL_ADC_MspInit+0x1a0>)
 8005402:	f043 0320 	orr.w	r3, r3, #32
 8005406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005408:	4b21      	ldr	r3, [pc, #132]	; (8005490 <HAL_ADC_MspInit+0x1a0>)
 800540a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540c:	f003 0320 	and.w	r3, r3, #32
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005414:	2302      	movs	r3, #2
 8005416:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005418:	2303      	movs	r3, #3
 800541a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800541c:	2300      	movs	r3, #0
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005420:	f107 031c 	add.w	r3, r7, #28
 8005424:	4619      	mov	r1, r3
 8005426:	481e      	ldr	r0, [pc, #120]	; (80054a0 <HAL_ADC_MspInit+0x1b0>)
 8005428:	f7fd fe9a 	bl	8003160 <HAL_GPIO_Init>
		hdma_adc2.Instance = DMA1_Channel2;
 800542c:	4b1d      	ldr	r3, [pc, #116]	; (80054a4 <HAL_ADC_MspInit+0x1b4>)
 800542e:	4a1e      	ldr	r2, [pc, #120]	; (80054a8 <HAL_ADC_MspInit+0x1b8>)
 8005430:	601a      	str	r2, [r3, #0]
		hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8005432:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <HAL_ADC_MspInit+0x1b4>)
 8005434:	2224      	movs	r2, #36	; 0x24
 8005436:	605a      	str	r2, [r3, #4]
		hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005438:	4b1a      	ldr	r3, [pc, #104]	; (80054a4 <HAL_ADC_MspInit+0x1b4>)
 800543a:	2200      	movs	r2, #0
 800543c:	609a      	str	r2, [r3, #8]
		hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800543e:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <HAL_ADC_MspInit+0x1b4>)
 8005440:	2200      	movs	r2, #0
 8005442:	60da      	str	r2, [r3, #12]
		hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005444:	4b17      	ldr	r3, [pc, #92]	; (80054a4 <HAL_ADC_MspInit+0x1b4>)
 8005446:	2280      	movs	r2, #128	; 0x80
 8005448:	611a      	str	r2, [r3, #16]
		hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800544a:	4b16      	ldr	r3, [pc, #88]	; (80054a4 <HAL_ADC_MspInit+0x1b4>)
 800544c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005450:	615a      	str	r2, [r3, #20]
		hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005452:	4b14      	ldr	r3, [pc, #80]	; (80054a4 <HAL_ADC_MspInit+0x1b4>)
 8005454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005458:	619a      	str	r2, [r3, #24]
		hdma_adc2.Init.Mode = DMA_NORMAL;
 800545a:	4b12      	ldr	r3, [pc, #72]	; (80054a4 <HAL_ADC_MspInit+0x1b4>)
 800545c:	2200      	movs	r2, #0
 800545e:	61da      	str	r2, [r3, #28]
		hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8005460:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <HAL_ADC_MspInit+0x1b4>)
 8005462:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005466:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005468:	480e      	ldr	r0, [pc, #56]	; (80054a4 <HAL_ADC_MspInit+0x1b4>)
 800546a:	f7fc fad5 	bl	8001a18 <HAL_DMA_Init>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_ADC_MspInit+0x188>
		  Error_Handler();
 8005474:	f7ff fefa 	bl	800526c <Error_Handler>
		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a0a      	ldr	r2, [pc, #40]	; (80054a4 <HAL_ADC_MspInit+0x1b4>)
 800547c:	655a      	str	r2, [r3, #84]	; 0x54
 800547e:	4a09      	ldr	r2, [pc, #36]	; (80054a4 <HAL_ADC_MspInit+0x1b4>)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005484:	bf00      	nop
 8005486:	3730      	adds	r7, #48	; 0x30
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20000064 	.word	0x20000064
 8005490:	40021000 	.word	0x40021000
 8005494:	20000228 	.word	0x20000228
 8005498:	40020008 	.word	0x40020008
 800549c:	50000100 	.word	0x50000100
 80054a0:	48001400 	.word	0x48001400
 80054a4:	20000308 	.word	0x20000308
 80054a8:	4002001c 	.word	0x4002001c

080054ac <HAL_FDCAN_MspInit>:

}


void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	; 0x28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054b4:	f107 0314 	add.w	r3, r7, #20
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	605a      	str	r2, [r3, #4]
 80054be:	609a      	str	r2, [r3, #8]
 80054c0:	60da      	str	r2, [r3, #12]
 80054c2:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1c      	ldr	r2, [pc, #112]	; (800553c <HAL_FDCAN_MspInit+0x90>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d131      	bne.n	8005532 <HAL_FDCAN_MspInit+0x86>
  {
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80054ce:	4b1c      	ldr	r3, [pc, #112]	; (8005540 <HAL_FDCAN_MspInit+0x94>)
 80054d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d2:	4a1b      	ldr	r2, [pc, #108]	; (8005540 <HAL_FDCAN_MspInit+0x94>)
 80054d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054d8:	6593      	str	r3, [r2, #88]	; 0x58
 80054da:	4b19      	ldr	r3, [pc, #100]	; (8005540 <HAL_FDCAN_MspInit+0x94>)
 80054dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054e6:	4b16      	ldr	r3, [pc, #88]	; (8005540 <HAL_FDCAN_MspInit+0x94>)
 80054e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ea:	4a15      	ldr	r2, [pc, #84]	; (8005540 <HAL_FDCAN_MspInit+0x94>)
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054f2:	4b13      	ldr	r3, [pc, #76]	; (8005540 <HAL_FDCAN_MspInit+0x94>)
 80054f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80054fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005504:	2302      	movs	r3, #2
 8005506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005508:	2300      	movs	r3, #0
 800550a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800550c:	2300      	movs	r3, #0
 800550e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005510:	2309      	movs	r3, #9
 8005512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005514:	f107 0314 	add.w	r3, r7, #20
 8005518:	4619      	mov	r1, r3
 800551a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800551e:	f7fd fe1f 	bl	8003160 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8005522:	2200      	movs	r2, #0
 8005524:	2100      	movs	r1, #0
 8005526:	2015      	movs	r0, #21
 8005528:	f7fc fa41 	bl	80019ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800552c:	2015      	movs	r0, #21
 800552e:	f7fc fa58 	bl	80019e2 <HAL_NVIC_EnableIRQ>
  }
}
 8005532:	bf00      	nop
 8005534:	3728      	adds	r7, #40	; 0x28
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40006400 	.word	0x40006400
 8005540:	40021000 	.word	0x40021000

08005544 <NMI_Handler>:
extern FDCAN_HandleTypeDef hfdcan;
extern DMA_HandleTypeDef hdma_adc1;
extern DMA_HandleTypeDef hdma_adc2;

void NMI_Handler(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0

}
 8005548:	bf00      	nop
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8005552:	b480      	push	{r7}
 8005554:	af00      	add	r7, sp, #0
  while (1)
 8005556:	e7fe      	b.n	8005556 <HardFault_Handler+0x4>

08005558 <MemManage_Handler>:

  }
}

void MemManage_Handler(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  while (1)
 800555c:	e7fe      	b.n	800555c <MemManage_Handler+0x4>

0800555e <BusFault_Handler>:

  }
}

void BusFault_Handler(void)
{
 800555e:	b480      	push	{r7}
 8005560:	af00      	add	r7, sp, #0
  while (1)
 8005562:	e7fe      	b.n	8005562 <BusFault_Handler+0x4>

08005564 <UsageFault_Handler>:

  }
}

void UsageFault_Handler(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  while (1)
 8005568:	e7fe      	b.n	8005568 <UsageFault_Handler+0x4>

0800556a <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 800556a:	b480      	push	{r7}
 800556c:	af00      	add	r7, sp, #0

}
 800556e:	bf00      	nop
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8005578:	b480      	push	{r7}
 800557a:	af00      	add	r7, sp, #0

}
 800557c:	bf00      	nop
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8005586:	b480      	push	{r7}
 8005588:	af00      	add	r7, sp, #0

}
 800558a:	bf00      	nop
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8005598:	f7fa fe90 	bl	80002bc <HAL_IncTick>
}
 800559c:	bf00      	nop
 800559e:	bd80      	pop	{r7, pc}

080055a0 <DMA1_Channel1_IRQHandler>:


void DMA1_Channel1_IRQHandler(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 80055a4:	4802      	ldr	r0, [pc, #8]	; (80055b0 <DMA1_Channel1_IRQHandler+0x10>)
 80055a6:	f7fc fb5a 	bl	8001c5e <HAL_DMA_IRQHandler>
}
 80055aa:	bf00      	nop
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000228 	.word	0x20000228

080055b4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 80055b8:	4802      	ldr	r0, [pc, #8]	; (80055c4 <DMA1_Channel2_IRQHandler+0x10>)
 80055ba:	f7fc fb50 	bl	8001c5e <HAL_DMA_IRQHandler>
}
 80055be:	bf00      	nop
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20000308 	.word	0x20000308

080055c8 <FDCAN1_IT0_IRQHandler>:


void FDCAN1_IT0_IRQHandler(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(&hfdcan);
 80055cc:	4802      	ldr	r0, [pc, #8]	; (80055d8 <FDCAN1_IT0_IRQHandler+0x10>)
 80055ce:	f7fd f8f1 	bl	80027b4 <HAL_FDCAN_IRQHandler>
}
 80055d2:	bf00      	nop
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000118 	.word	0x20000118

080055dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80055e0:	4b08      	ldr	r3, [pc, #32]	; (8005604 <SystemInit+0x28>)
 80055e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e6:	4a07      	ldr	r2, [pc, #28]	; (8005604 <SystemInit+0x28>)
 80055e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80055f0:	4b04      	ldr	r3, [pc, #16]	; (8005604 <SystemInit+0x28>)
 80055f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055f6:	609a      	str	r2, [r3, #8]
#endif
}
 80055f8:	bf00      	nop
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	e000ed00 	.word	0xe000ed00

08005608 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005608:	480d      	ldr	r0, [pc, #52]	; (8005640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800560a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800560c:	480d      	ldr	r0, [pc, #52]	; (8005644 <LoopForever+0x6>)
  ldr r1, =_edata
 800560e:	490e      	ldr	r1, [pc, #56]	; (8005648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005610:	4a0e      	ldr	r2, [pc, #56]	; (800564c <LoopForever+0xe>)
  movs r3, #0
 8005612:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005614:	e002      	b.n	800561c <LoopCopyDataInit>

08005616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800561a:	3304      	adds	r3, #4

0800561c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800561c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800561e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005620:	d3f9      	bcc.n	8005616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005622:	4a0b      	ldr	r2, [pc, #44]	; (8005650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005624:	4c0b      	ldr	r4, [pc, #44]	; (8005654 <LoopForever+0x16>)
  movs r3, #0
 8005626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005628:	e001      	b.n	800562e <LoopFillZerobss>

0800562a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800562a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800562c:	3204      	adds	r2, #4

0800562e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800562e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005630:	d3fb      	bcc.n	800562a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005632:	f7ff ffd3 	bl	80055dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005636:	f000 f811 	bl	800565c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800563a:	f7ff f90b 	bl	8004854 <main>

0800563e <LoopForever>:

LoopForever:
    b LoopForever
 800563e:	e7fe      	b.n	800563e <LoopForever>
  ldr   r0, =_estack
 8005640:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005648:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 800564c:	08005724 	.word	0x08005724
  ldr r2, =_sbss
 8005650:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8005654:	200003a0 	.word	0x200003a0

08005658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005658:	e7fe      	b.n	8005658 <ADC1_2_IRQHandler>
	...

0800565c <__libc_init_array>:
 800565c:	b570      	push	{r4, r5, r6, lr}
 800565e:	4e0d      	ldr	r6, [pc, #52]	; (8005694 <__libc_init_array+0x38>)
 8005660:	4c0d      	ldr	r4, [pc, #52]	; (8005698 <__libc_init_array+0x3c>)
 8005662:	1ba4      	subs	r4, r4, r6
 8005664:	10a4      	asrs	r4, r4, #2
 8005666:	2500      	movs	r5, #0
 8005668:	42a5      	cmp	r5, r4
 800566a:	d109      	bne.n	8005680 <__libc_init_array+0x24>
 800566c:	4e0b      	ldr	r6, [pc, #44]	; (800569c <__libc_init_array+0x40>)
 800566e:	4c0c      	ldr	r4, [pc, #48]	; (80056a0 <__libc_init_array+0x44>)
 8005670:	f000 f820 	bl	80056b4 <_init>
 8005674:	1ba4      	subs	r4, r4, r6
 8005676:	10a4      	asrs	r4, r4, #2
 8005678:	2500      	movs	r5, #0
 800567a:	42a5      	cmp	r5, r4
 800567c:	d105      	bne.n	800568a <__libc_init_array+0x2e>
 800567e:	bd70      	pop	{r4, r5, r6, pc}
 8005680:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005684:	4798      	blx	r3
 8005686:	3501      	adds	r5, #1
 8005688:	e7ee      	b.n	8005668 <__libc_init_array+0xc>
 800568a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800568e:	4798      	blx	r3
 8005690:	3501      	adds	r5, #1
 8005692:	e7f2      	b.n	800567a <__libc_init_array+0x1e>
 8005694:	0800571c 	.word	0x0800571c
 8005698:	0800571c 	.word	0x0800571c
 800569c:	0800571c 	.word	0x0800571c
 80056a0:	08005720 	.word	0x08005720

080056a4 <memset>:
 80056a4:	4402      	add	r2, r0
 80056a6:	4603      	mov	r3, r0
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d100      	bne.n	80056ae <memset+0xa>
 80056ac:	4770      	bx	lr
 80056ae:	f803 1b01 	strb.w	r1, [r3], #1
 80056b2:	e7f9      	b.n	80056a8 <memset+0x4>

080056b4 <_init>:
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	bf00      	nop
 80056b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ba:	bc08      	pop	{r3}
 80056bc:	469e      	mov	lr, r3
 80056be:	4770      	bx	lr

080056c0 <_fini>:
 80056c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c2:	bf00      	nop
 80056c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c6:	bc08      	pop	{r3}
 80056c8:	469e      	mov	lr, r3
 80056ca:	4770      	bx	lr
