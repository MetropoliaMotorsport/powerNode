
motorsport_PowerNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a550  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800a728  0800a728  0001a728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a840  0800a840  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800a840  0800a840  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a840  0800a840  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a840  0800a840  0001a840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a844  0800a844  0001a844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800a848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a20  20000064  0800a8ac  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a84  0800a8ac  00020a84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019afa  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e07  00000000  00000000  00039b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016a0  00000000  00000000  0003c998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001538  00000000  00000000  0003e038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020d13  00000000  00000000  0003f570  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010550  00000000  00000000  00060283  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9f49  00000000  00000000  000707d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a71c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006084  00000000  00000000  0014a798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000064 	.word	0x20000064
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a710 	.word	0x0800a710

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000068 	.word	0x20000068
 8000214:	0800a710 	.word	0x0800a710

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f001 fd4a 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f009 fd6f 	bl	8009d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f001 fd56 	bl	8001d22 <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f001 fd22 	bl	8001cd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	20000060 	.word	0x20000060
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	20000088 	.word	0x20000088
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000088 	.word	0x20000088

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	431a      	orrs	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	609a      	str	r2, [r3, #8]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	431a      	orrs	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	609a      	str	r2, [r3, #8]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000398:	4618      	mov	r0, r3
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80003a4:	b490      	push	{r4, r7}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	3360      	adds	r3, #96	; 0x60
 80003b6:	461a      	mov	r2, r3
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	4413      	add	r3, r2
 80003be:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80003c0:	6822      	ldr	r2, [r4, #0]
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <LL_ADC_SetOffset+0x40>)
 80003c4:	4013      	ands	r3, r2
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	430a      	orrs	r2, r1
 80003d0:	4313      	orrs	r3, r2
 80003d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003d6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc90      	pop	{r4, r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	03fff000 	.word	0x03fff000

080003e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80003e8:	b490      	push	{r4, r7}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3360      	adds	r3, #96	; 0x60
 80003f6:	461a      	mov	r2, r3
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000400:	6823      	ldr	r3, [r4, #0]
 8000402:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bc90      	pop	{r4, r7}
 800040e:	4770      	bx	lr

08000410 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000410:	b490      	push	{r4, r7}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	3360      	adds	r3, #96	; 0x60
 8000420:	461a      	mov	r2, r3
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800042a:	6823      	ldr	r3, [r4, #0]
 800042c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4313      	orrs	r3, r2
 8000434:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bc90      	pop	{r4, r7}
 800043e:	4770      	bx	lr

08000440 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000440:	b490      	push	{r4, r7}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3360      	adds	r3, #96	; 0x60
 8000450:	461a      	mov	r2, r3
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800045a:	6823      	ldr	r3, [r4, #0]
 800045c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4313      	orrs	r3, r2
 8000464:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bc90      	pop	{r4, r7}
 800046e:	4770      	bx	lr

08000470 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000470:	b490      	push	{r4, r7}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3360      	adds	r3, #96	; 0x60
 8000480:	461a      	mov	r2, r3
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4413      	add	r3, r2
 8000488:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800048a:	6823      	ldr	r3, [r4, #0]
 800048c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bc90      	pop	{r4, r7}
 800049e:	4770      	bx	lr

080004a0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	615a      	str	r2, [r3, #20]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d101      	bne.n	80004de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80004da:	2301      	movs	r3, #1
 80004dc:	e000      	b.n	80004e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80004de:	2300      	movs	r3, #0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004ec:	b490      	push	{r4, r7}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3330      	adds	r3, #48	; 0x30
 80004fc:	461a      	mov	r2, r3
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	0a1b      	lsrs	r3, r3, #8
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	f003 030c 	and.w	r3, r3, #12
 8000508:	4413      	add	r3, r2
 800050a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800050c:	6822      	ldr	r2, [r4, #0]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	f003 031f 	and.w	r3, r3, #31
 8000514:	211f      	movs	r1, #31
 8000516:	fa01 f303 	lsl.w	r3, r1, r3
 800051a:	43db      	mvns	r3, r3
 800051c:	401a      	ands	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	0e9b      	lsrs	r3, r3, #26
 8000522:	f003 011f 	and.w	r1, r3, #31
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	f003 031f 	and.w	r3, r3, #31
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	4313      	orrs	r3, r2
 8000532:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bc90      	pop	{r4, r7}
 800053c:	4770      	bx	lr

0800053e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800053e:	b490      	push	{r4, r7}
 8000540:	b084      	sub	sp, #16
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	3314      	adds	r3, #20
 800054e:	461a      	mov	r2, r3
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	0e5b      	lsrs	r3, r3, #25
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	4413      	add	r3, r2
 800055c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800055e:	6822      	ldr	r2, [r4, #0]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	0d1b      	lsrs	r3, r3, #20
 8000564:	f003 031f 	and.w	r3, r3, #31
 8000568:	2107      	movs	r1, #7
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	43db      	mvns	r3, r3
 8000570:	401a      	ands	r2, r3
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	0d1b      	lsrs	r3, r3, #20
 8000576:	f003 031f 	and.w	r3, r3, #31
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	4313      	orrs	r3, r2
 8000582:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bc90      	pop	{r4, r7}
 800058c:	4770      	bx	lr
	...

08000590 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005a8:	43db      	mvns	r3, r3
 80005aa:	401a      	ands	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f003 0318 	and.w	r3, r3, #24
 80005b2:	4908      	ldr	r1, [pc, #32]	; (80005d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80005b4:	40d9      	lsrs	r1, r3
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	400b      	ands	r3, r1
 80005ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005be:	431a      	orrs	r2, r3
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	0007ffff 	.word	0x0007ffff

080005d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80005e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	6093      	str	r3, [r2, #8]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800060c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000610:	d101      	bne.n	8000616 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000612:	2301      	movs	r3, #1
 8000614:	e000      	b.n	8000618 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000634:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000638:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000660:	d101      	bne.n	8000666 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000662:	2301      	movs	r3, #1
 8000664:	e000      	b.n	8000668 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000684:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000688:	f043 0201 	orr.w	r2, r3, #1
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80006ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006b0:	f043 0202 	orr.w	r2, r3, #2
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d101      	bne.n	80006dc <LL_ADC_IsEnabled+0x18>
 80006d8:	2301      	movs	r3, #1
 80006da:	e000      	b.n	80006de <LL_ADC_IsEnabled+0x1a>
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d101      	bne.n	8000702 <LL_ADC_IsDisableOngoing+0x18>
 80006fe:	2301      	movs	r3, #1
 8000700:	e000      	b.n	8000704 <LL_ADC_IsDisableOngoing+0x1a>
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000720:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000724:	f043 0210 	orr.w	r2, r3, #16
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f003 0304 	and.w	r3, r3, #4
 8000748:	2b04      	cmp	r3, #4
 800074a:	d101      	bne.n	8000750 <LL_ADC_REG_IsConversionOngoing+0x18>
 800074c:	2301      	movs	r3, #1
 800074e:	e000      	b.n	8000752 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800076e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000772:	f043 0220 	orr.w	r2, r3, #32
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	2b08      	cmp	r3, #8
 8000798:	d101      	bne.n	800079e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800079a:	2301      	movs	r3, #1
 800079c:	e000      	b.n	80007a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007b4:	2300      	movs	r3, #0
 80007b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e16b      	b.n	8000a9e <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d109      	bne.n	80007e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f009 fac5 	bl	8009d64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff05 	bl	80005fc <LL_ADC_IsDeepPowerDownEnabled>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d004      	beq.n	8000802 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff feeb 	bl	80005d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff20 	bl	800064c <LL_ADC_IsInternalRegulatorEnabled>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d113      	bne.n	800083a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff04 	bl	8000624 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800081c:	4ba2      	ldr	r3, [pc, #648]	; (8000aa8 <HAL_ADC_Init+0x2fc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	099b      	lsrs	r3, r3, #6
 8000822:	4aa2      	ldr	r2, [pc, #648]	; (8000aac <HAL_ADC_Init+0x300>)
 8000824:	fba2 2303 	umull	r2, r3, r2, r3
 8000828:	099b      	lsrs	r3, r3, #6
 800082a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800082c:	e002      	b.n	8000834 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	3b01      	subs	r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1f9      	bne.n	800082e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff04 	bl	800064c <LL_ADC_IsInternalRegulatorEnabled>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10d      	bne.n	8000866 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800084e:	f043 0210 	orr.w	r2, r3, #16
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085a:	f043 0201 	orr.w	r2, r3, #1
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff64 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 8000870:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	2b00      	cmp	r3, #0
 800087c:	f040 8106 	bne.w	8000a8c <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	2b00      	cmp	r3, #0
 8000884:	f040 8102 	bne.w	8000a8c <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800088c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000890:	f043 0202 	orr.w	r2, r3, #2
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff11 	bl	80006c4 <LL_ADC_IsEnabled>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d111      	bne.n	80008cc <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80008a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80008ac:	f7ff ff0a 	bl	80006c4 <LL_ADC_IsEnabled>
 80008b0:	4604      	mov	r4, r0
 80008b2:	487f      	ldr	r0, [pc, #508]	; (8000ab0 <HAL_ADC_Init+0x304>)
 80008b4:	f7ff ff06 	bl	80006c4 <LL_ADC_IsEnabled>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4323      	orrs	r3, r4
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d105      	bne.n	80008cc <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	4619      	mov	r1, r3
 80008c6:	487b      	ldr	r0, [pc, #492]	; (8000ab4 <HAL_ADC_Init+0x308>)
 80008c8:	f7ff fd38 	bl	800033c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	7f5b      	ldrb	r3, [r3, #29]
 80008d0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80008d6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80008dc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80008e2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008ea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80008ec:	4313      	orrs	r3, r2
 80008ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d106      	bne.n	8000908 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fe:	3b01      	subs	r3, #1
 8000900:	045b      	lsls	r3, r3, #17
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	4313      	orrs	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090c:	2b00      	cmp	r3, #0
 800090e:	d009      	beq.n	8000924 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	4b63      	ldr	r3, [pc, #396]	; (8000ab8 <HAL_ADC_Init+0x30c>)
 800092c:	4013      	ands	r3, r2
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	6812      	ldr	r2, [r2, #0]
 8000932:	69b9      	ldr	r1, [r7, #24]
 8000934:	430b      	orrs	r3, r1
 8000936:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	691b      	ldr	r3, [r3, #16]
 800093e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	430a      	orrs	r2, r1
 800094c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fef0 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 8000958:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff11 	bl	8000786 <LL_ADC_INJ_IsConversionOngoing>
 8000964:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d16d      	bne.n	8000a48 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d16a      	bne.n	8000a48 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000976:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800097e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000980:	4313      	orrs	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68db      	ldr	r3, [r3, #12]
 800098a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800098e:	f023 0302 	bic.w	r3, r3, #2
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	6812      	ldr	r2, [r2, #0]
 8000996:	69b9      	ldr	r1, [r7, #24]
 8000998:	430b      	orrs	r3, r1
 800099a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	691b      	ldr	r3, [r3, #16]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d017      	beq.n	80009d4 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	691a      	ldr	r2, [r3, #16]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80009b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80009bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	6911      	ldr	r1, [r2, #16]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	6812      	ldr	r2, [r2, #0]
 80009cc:	430b      	orrs	r3, r1
 80009ce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80009d2:	e013      	b.n	80009fc <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	691a      	ldr	r2, [r3, #16]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	6812      	ldr	r2, [r2, #0]
 80009f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009f8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d118      	bne.n	8000a38 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000a10:	f023 0304 	bic.w	r3, r3, #4
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000a1c:	4311      	orrs	r1, r2
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000a22:	4311      	orrs	r1, r2
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f042 0201 	orr.w	r2, r2, #1
 8000a34:	611a      	str	r2, [r3, #16]
 8000a36:	e007      	b.n	8000a48 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	691a      	ldr	r2, [r3, #16]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f022 0201 	bic.w	r2, r2, #1
 8000a46:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d10c      	bne.n	8000a6a <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f023 010f 	bic.w	r1, r3, #15
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6a1b      	ldr	r3, [r3, #32]
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	430a      	orrs	r2, r1
 8000a66:	631a      	str	r2, [r3, #48]	; 0x30
 8000a68:	e007      	b.n	8000a7a <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f022 020f 	bic.w	r2, r2, #15
 8000a78:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a7e:	f023 0303 	bic.w	r3, r3, #3
 8000a82:	f043 0201 	orr.w	r2, r3, #1
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	65da      	str	r2, [r3, #92]	; 0x5c
 8000a8a:	e007      	b.n	8000a9c <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a90:	f043 0210 	orr.w	r2, r3, #16
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000a9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	; 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd90      	pop	{r4, r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000060 	.word	0x20000060
 8000aac:	053e2d63 	.word	0x053e2d63
 8000ab0:	50000100 	.word	0x50000100
 8000ab4:	50000300 	.word	0x50000300
 8000ab8:	fff04007 	.word	0xfff04007

08000abc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b0a6      	sub	sp, #152	; 0x98
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d101      	bne.n	8000b06 <HAL_ADC_ConfigChannel+0x22>
 8000b02:	2302      	movs	r3, #2
 8000b04:	e348      	b.n	8001198 <HAL_ADC_ConfigChannel+0x6b4>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fe10 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f040 832d 	bne.w	800117a <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	6859      	ldr	r1, [r3, #4]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	f7ff fcdd 	bl	80004ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fdfe 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 8000b3c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fe1e 	bl	8000786 <LL_ADC_INJ_IsConversionOngoing>
 8000b4a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f040 817b 	bne.w	8000e4e <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	f040 8176 	bne.w	8000e4e <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b6a:	d10f      	bne.n	8000b8c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	f7ff fce1 	bl	800053e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fc8b 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>
 8000b8a:	e00e      	b.n	8000baa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	6819      	ldr	r1, [r3, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	f7ff fcd0 	bl	800053e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fc7b 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	695a      	ldr	r2, [r3, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	08db      	lsrs	r3, r3, #3
 8000bb6:	f003 0303 	and.w	r3, r3, #3
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	d022      	beq.n	8000c12 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	6919      	ldr	r1, [r3, #16]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000bdc:	f7ff fbe2 	bl	80003a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	6919      	ldr	r1, [r3, #16]
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	461a      	mov	r2, r3
 8000bee:	f7ff fc27 	bl	8000440 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	6919      	ldr	r1, [r3, #16]
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	7f1b      	ldrb	r3, [r3, #28]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d102      	bne.n	8000c08 <HAL_ADC_ConfigChannel+0x124>
 8000c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c06:	e000      	b.n	8000c0a <HAL_ADC_ConfigChannel+0x126>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	f7ff fc30 	bl	8000470 <LL_ADC_SetOffsetSaturation>
 8000c10:	e11d      	b.n	8000e4e <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fbe5 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10a      	bne.n	8000c3e <HAL_ADC_ConfigChannel+0x15a>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fbda 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	0e9b      	lsrs	r3, r3, #26
 8000c38:	f003 021f 	and.w	r2, r3, #31
 8000c3c:	e012      	b.n	8000c64 <HAL_ADC_ConfigChannel+0x180>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fbcf 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c54:	fa93 f3a3 	rbit	r3, r3
 8000c58:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c5c:	fab3 f383 	clz	r3, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d105      	bne.n	8000c7c <HAL_ADC_ConfigChannel+0x198>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	0e9b      	lsrs	r3, r3, #26
 8000c76:	f003 031f 	and.w	r3, r3, #31
 8000c7a:	e00a      	b.n	8000c92 <HAL_ADC_ConfigChannel+0x1ae>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c84:	fa93 f3a3 	rbit	r3, r3
 8000c88:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c8c:	fab3 f383 	clz	r3, r3
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d106      	bne.n	8000ca4 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fbb6 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2101      	movs	r1, #1
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fb9c 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10a      	bne.n	8000cd0 <HAL_ADC_ConfigChannel+0x1ec>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fb91 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	0e9b      	lsrs	r3, r3, #26
 8000cca:	f003 021f 	and.w	r2, r3, #31
 8000cce:	e010      	b.n	8000cf2 <HAL_ADC_ConfigChannel+0x20e>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fb86 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ce2:	fa93 f3a3 	rbit	r3, r3
 8000ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cea:	fab3 f383 	clz	r3, r3
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d105      	bne.n	8000d0a <HAL_ADC_ConfigChannel+0x226>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	0e9b      	lsrs	r3, r3, #26
 8000d04:	f003 031f 	and.w	r3, r3, #31
 8000d08:	e00a      	b.n	8000d20 <HAL_ADC_ConfigChannel+0x23c>
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d12:	fa93 f3a3 	rbit	r3, r3
 8000d16:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d1a:	fab3 f383 	clz	r3, r3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d106      	bne.n	8000d32 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fb6f 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2102      	movs	r1, #2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fb55 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10a      	bne.n	8000d5e <HAL_ADC_ConfigChannel+0x27a>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fb4a 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d54:	4603      	mov	r3, r0
 8000d56:	0e9b      	lsrs	r3, r3, #26
 8000d58:	f003 021f 	and.w	r2, r3, #31
 8000d5c:	e010      	b.n	8000d80 <HAL_ADC_ConfigChannel+0x29c>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2102      	movs	r1, #2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fb3f 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d70:	fa93 f3a3 	rbit	r3, r3
 8000d74:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d78:	fab3 f383 	clz	r3, r3
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	461a      	mov	r2, r3
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d105      	bne.n	8000d98 <HAL_ADC_ConfigChannel+0x2b4>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	0e9b      	lsrs	r3, r3, #26
 8000d92:	f003 031f 	and.w	r3, r3, #31
 8000d96:	e00a      	b.n	8000dae <HAL_ADC_ConfigChannel+0x2ca>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000da0:	fa93 f3a3 	rbit	r3, r3
 8000da4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000da8:	fab3 f383 	clz	r3, r3
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d106      	bne.n	8000dc0 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2200      	movs	r2, #0
 8000db8:	2102      	movs	r1, #2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fb28 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2103      	movs	r1, #3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fb0e 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10a      	bne.n	8000dec <HAL_ADC_ConfigChannel+0x308>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2103      	movs	r1, #3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fb03 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	0e9b      	lsrs	r3, r3, #26
 8000de6:	f003 021f 	and.w	r2, r3, #31
 8000dea:	e010      	b.n	8000e0e <HAL_ADC_ConfigChannel+0x32a>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2103      	movs	r1, #3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff faf8 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dfe:	fa93 f3a3 	rbit	r3, r3
 8000e02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e06:	fab3 f383 	clz	r3, r3
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d105      	bne.n	8000e26 <HAL_ADC_ConfigChannel+0x342>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	0e9b      	lsrs	r3, r3, #26
 8000e20:	f003 031f 	and.w	r3, r3, #31
 8000e24:	e00a      	b.n	8000e3c <HAL_ADC_ConfigChannel+0x358>
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e2e:	fa93 f3a3 	rbit	r3, r3
 8000e32:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e36:	fab3 f383 	clz	r3, r3
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d106      	bne.n	8000e4e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2200      	movs	r2, #0
 8000e46:	2103      	movs	r1, #3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fae1 	bl	8000410 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fc36 	bl	80006c4 <LL_ADC_IsEnabled>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f040 810c 	bne.w	8001078 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6818      	ldr	r0, [r3, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	6819      	ldr	r1, [r3, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	f7ff fb8f 	bl	8000590 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	4aab      	ldr	r2, [pc, #684]	; (8001124 <HAL_ADC_ConfigChannel+0x640>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	f040 80fd 	bne.w	8001078 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10b      	bne.n	8000ea6 <HAL_ADC_ConfigChannel+0x3c2>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	0e9b      	lsrs	r3, r3, #26
 8000e94:	3301      	adds	r3, #1
 8000e96:	f003 031f 	and.w	r3, r3, #31
 8000e9a:	2b09      	cmp	r3, #9
 8000e9c:	bf94      	ite	ls
 8000e9e:	2301      	movls	r3, #1
 8000ea0:	2300      	movhi	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	e012      	b.n	8000ecc <HAL_ADC_ConfigChannel+0x3e8>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eae:	fa93 f3a3 	rbit	r3, r3
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eb6:	fab3 f383 	clz	r3, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	f003 031f 	and.w	r3, r3, #31
 8000ec2:	2b09      	cmp	r3, #9
 8000ec4:	bf94      	ite	ls
 8000ec6:	2301      	movls	r3, #1
 8000ec8:	2300      	movhi	r3, #0
 8000eca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d064      	beq.n	8000f9a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d107      	bne.n	8000eec <HAL_ADC_ConfigChannel+0x408>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	0e9b      	lsrs	r3, r3, #26
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	069b      	lsls	r3, r3, #26
 8000ee6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000eea:	e00e      	b.n	8000f0a <HAL_ADC_ConfigChannel+0x426>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ef4:	fa93 f3a3 	rbit	r3, r3
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efc:	fab3 f383 	clz	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	3301      	adds	r3, #1
 8000f04:	069b      	lsls	r3, r3, #26
 8000f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d109      	bne.n	8000f2a <HAL_ADC_ConfigChannel+0x446>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	0e9b      	lsrs	r3, r3, #26
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f003 031f 	and.w	r3, r3, #31
 8000f22:	2101      	movs	r1, #1
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	e010      	b.n	8000f4c <HAL_ADC_ConfigChannel+0x468>
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8000f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3a:	fab3 f383 	clz	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	f003 031f 	and.w	r3, r3, #31
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	ea42 0103 	orr.w	r1, r2, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d10a      	bne.n	8000f72 <HAL_ADC_ConfigChannel+0x48e>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	0e9b      	lsrs	r3, r3, #26
 8000f62:	3301      	adds	r3, #1
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	051b      	lsls	r3, r3, #20
 8000f70:	e011      	b.n	8000f96 <HAL_ADC_ConfigChannel+0x4b2>
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7a:	fa93 f3a3 	rbit	r3, r3
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	fab3 f383 	clz	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	3301      	adds	r3, #1
 8000f8a:	f003 021f 	and.w	r2, r3, #31
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f96:	430b      	orrs	r3, r1
 8000f98:	e069      	b.n	800106e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d107      	bne.n	8000fb6 <HAL_ADC_ConfigChannel+0x4d2>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	0e9b      	lsrs	r3, r3, #26
 8000fac:	3301      	adds	r3, #1
 8000fae:	069b      	lsls	r3, r3, #26
 8000fb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fb4:	e00e      	b.n	8000fd4 <HAL_ADC_ConfigChannel+0x4f0>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	61fb      	str	r3, [r7, #28]
  return result;
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	fab3 f383 	clz	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	069b      	lsls	r3, r3, #26
 8000fd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d109      	bne.n	8000ff4 <HAL_ADC_ConfigChannel+0x510>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	0e9b      	lsrs	r3, r3, #26
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f003 031f 	and.w	r3, r3, #31
 8000fec:	2101      	movs	r1, #1
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	e010      	b.n	8001016 <HAL_ADC_ConfigChannel+0x532>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	617b      	str	r3, [r7, #20]
  return result;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	3301      	adds	r3, #1
 800100c:	f003 031f 	and.w	r3, r3, #31
 8001010:	2101      	movs	r1, #1
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	ea42 0103 	orr.w	r1, r2, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10d      	bne.n	8001042 <HAL_ADC_ConfigChannel+0x55e>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	0e9b      	lsrs	r3, r3, #26
 800102c:	3301      	adds	r3, #1
 800102e:	f003 021f 	and.w	r2, r3, #31
 8001032:	4613      	mov	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4413      	add	r3, r2
 8001038:	3b1e      	subs	r3, #30
 800103a:	051b      	lsls	r3, r3, #20
 800103c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001040:	e014      	b.n	800106c <HAL_ADC_ConfigChannel+0x588>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	60fb      	str	r3, [r7, #12]
  return result;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	fab3 f383 	clz	r3, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	3301      	adds	r3, #1
 800105a:	f003 021f 	and.w	r2, r3, #31
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	3b1e      	subs	r3, #30
 8001066:	051b      	lsls	r3, r3, #20
 8001068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800106c:	430b      	orrs	r3, r1
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	6892      	ldr	r2, [r2, #8]
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fa63 	bl	800053e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <HAL_ADC_ConfigChannel+0x644>)
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 8083 	beq.w	800118c <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001086:	4829      	ldr	r0, [pc, #164]	; (800112c <HAL_ADC_ConfigChannel+0x648>)
 8001088:	f7ff f97e 	bl	8000388 <LL_ADC_GetCommonPathInternalCh>
 800108c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a26      	ldr	r2, [pc, #152]	; (8001130 <HAL_ADC_ConfigChannel+0x64c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d004      	beq.n	80010a4 <HAL_ADC_ConfigChannel+0x5c0>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a25      	ldr	r2, [pc, #148]	; (8001134 <HAL_ADC_ConfigChannel+0x650>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d126      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80010a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d120      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010b8:	d168      	bne.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010c2:	4619      	mov	r1, r3
 80010c4:	4819      	ldr	r0, [pc, #100]	; (800112c <HAL_ADC_ConfigChannel+0x648>)
 80010c6:	f7ff f94c 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_ADC_ConfigChannel+0x654>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	099b      	lsrs	r3, r3, #6
 80010d0:	4a1a      	ldr	r2, [pc, #104]	; (800113c <HAL_ADC_ConfigChannel+0x658>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	099a      	lsrs	r2, r3, #6
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80010e2:	e002      	b.n	80010ea <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f9      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80010f0:	e04c      	b.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <HAL_ADC_ConfigChannel+0x65c>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d125      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x664>
 80010fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d11f      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <HAL_ADC_ConfigChannel+0x660>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d03c      	beq.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001112:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800111a:	4619      	mov	r1, r3
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <HAL_ADC_ConfigChannel+0x648>)
 800111e:	f7ff f920 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001122:	e033      	b.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
 8001124:	407f0000 	.word	0x407f0000
 8001128:	80080000 	.word	0x80080000
 800112c:	50000300 	.word	0x50000300
 8001130:	c3210000 	.word	0xc3210000
 8001134:	90c00010 	.word	0x90c00010
 8001138:	20000060 	.word	0x20000060
 800113c:	053e2d63 	.word	0x053e2d63
 8001140:	c7520000 	.word	0xc7520000
 8001144:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <HAL_ADC_ConfigChannel+0x6bc>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d11c      	bne.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d116      	bne.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_ADC_ConfigChannel+0x6c0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d011      	beq.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800116c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001170:	4619      	mov	r1, r3
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <HAL_ADC_ConfigChannel+0x6c4>)
 8001174:	f7ff f8f5 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
 8001178:	e008      	b.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117e:	f043 0220 	orr.w	r2, r3, #32
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001194:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001198:	4618      	mov	r0, r3
 800119a:	3798      	adds	r7, #152	; 0x98
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	cb840000 	.word	0xcb840000
 80011a4:	50000100 	.word	0x50000100
 80011a8:	50000300 	.word	0x50000300

080011ac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fab8 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 80011c8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fad9 	bl	8000786 <LL_ADC_INJ_IsConversionOngoing>
 80011d4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d103      	bne.n	80011e4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 8090 	beq.w	8001304 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d02a      	beq.n	8001248 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7f5b      	ldrb	r3, [r3, #29]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d126      	bne.n	8001248 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7f1b      	ldrb	r3, [r3, #28]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d122      	bne.n	8001248 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001202:	2301      	movs	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001206:	e014      	b.n	8001232 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	4a41      	ldr	r2, [pc, #260]	; (8001310 <ADC_ConversionStop+0x164>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d90d      	bls.n	800122c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	f043 0210 	orr.w	r2, r3, #16
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e06c      	b.n	8001306 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	3301      	adds	r3, #1
 8001230:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123c:	2b40      	cmp	r3, #64	; 0x40
 800123e:	d1e3      	bne.n	8001208 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2240      	movs	r2, #64	; 0x40
 8001246:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d014      	beq.n	8001278 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fa70 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00c      	beq.n	8001278 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fa41 	bl	80006ea <LL_ADC_IsDisableOngoing>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d104      	bne.n	8001278 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fa4c 	bl	8000710 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d014      	beq.n	80012a8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fa7f 	bl	8000786 <LL_ADC_INJ_IsConversionOngoing>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00c      	beq.n	80012a8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fa29 	bl	80006ea <LL_ADC_IsDisableOngoing>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d104      	bne.n	80012a8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fa5b 	bl	800075e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d004      	beq.n	80012b8 <ADC_ConversionStop+0x10c>
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d105      	bne.n	80012be <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80012b2:	230c      	movs	r3, #12
 80012b4:	617b      	str	r3, [r7, #20]
        break;
 80012b6:	e005      	b.n	80012c4 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80012b8:	2308      	movs	r3, #8
 80012ba:	617b      	str	r3, [r7, #20]
        break;
 80012bc:	e002      	b.n	80012c4 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80012be:	2304      	movs	r3, #4
 80012c0:	617b      	str	r3, [r7, #20]
        break;
 80012c2:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80012c4:	f7ff f80c 	bl	80002e0 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80012ca:	e014      	b.n	80012f6 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80012cc:	f7ff f808 	bl	80002e0 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d90d      	bls.n	80012f6 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012de:	f043 0210 	orr.w	r2, r3, #16
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ea:	f043 0201 	orr.w	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e007      	b.n	8001306 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	4013      	ands	r3, r2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1e3      	bne.n	80012cc <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	a33fffff 	.word	0xa33fffff

08001314 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f9cf 	bl	80006c4 <LL_ADC_IsEnabled>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d146      	bne.n	80013ba <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <ADC_Enable+0xb0>)
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00d      	beq.n	8001356 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133e:	f043 0210 	orr.w	r2, r3, #16
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134a:	f043 0201 	orr.w	r2, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e032      	b.n	80013bc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f98a 	bl	8000674 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001360:	f7fe ffbe 	bl	80002e0 <HAL_GetTick>
 8001364:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001366:	e021      	b.n	80013ac <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f9a9 	bl	80006c4 <LL_ADC_IsEnabled>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d104      	bne.n	8001382 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f979 	bl	8000674 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001382:	f7fe ffad 	bl	80002e0 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d90d      	bls.n	80013ac <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001394:	f043 0210 	orr.w	r2, r3, #16
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a0:	f043 0201 	orr.w	r2, r3, #1
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e007      	b.n	80013bc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d1d6      	bne.n	8001368 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	8000003f 	.word	0x8000003f

080013c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f988 	bl	80006ea <LL_ADC_IsDisableOngoing>
 80013da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f96f 	bl	80006c4 <LL_ADC_IsEnabled>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d040      	beq.n	800146e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d13d      	bne.n	800146e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 030d 	and.w	r3, r3, #13
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d10c      	bne.n	800141a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f949 	bl	800069c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2203      	movs	r2, #3
 8001410:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001412:	f7fe ff65 	bl	80002e0 <HAL_GetTick>
 8001416:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001418:	e022      	b.n	8001460 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141e:	f043 0210 	orr.w	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	f043 0201 	orr.w	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e01c      	b.n	8001470 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001436:	f7fe ff53 	bl	80002e0 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d90d      	bls.n	8001460 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001448:	f043 0210 	orr.w	r2, r3, #16
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001454:	f043 0201 	orr.w	r2, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e007      	b.n	8001470 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1e3      	bne.n	8001436 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800148e:	2b00      	cmp	r3, #0
 8001490:	d14b      	bne.n	800152a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001496:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d021      	beq.n	80014f0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f808 	bl	80004c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d032      	beq.n	8001522 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d12b      	bne.n	8001522 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d11f      	bne.n	8001522 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e6:	f043 0201 	orr.w	r2, r3, #1
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80014ee:	e018      	b.n	8001522 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d111      	bne.n	8001522 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d105      	bne.n	8001522 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151a:	f043 0201 	orr.w	r2, r3, #1
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f006 fad6 	bl	8007ad4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001528:	e00e      	b.n	8001548 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f7ff faca 	bl	8000ad0 <HAL_ADC_ErrorCallback>
}
 800153c:	e004      	b.n	8001548 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	4798      	blx	r3
}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7ff faac 	bl	8000abc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158a:	f043 0204 	orr.w	r2, r3, #4
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7ff fa9c 	bl	8000ad0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <LL_ADC_IsEnabled>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <LL_ADC_IsEnabled+0x18>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <LL_ADC_IsEnabled+0x1a>
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_ADC_StartCalibration>:
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80015e2:	4313      	orrs	r3, r2
 80015e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	609a      	str	r2, [r3, #8]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_IsCalibrationOnGoing>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800160c:	d101      	bne.n	8001612 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <LL_ADC_REG_StartConversion>:
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001630:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001634:	f043 0204 	orr.w	r2, r3, #4
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	609a      	str	r2, [r3, #8]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_ADC_REG_IsConversionOngoing>:
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b04      	cmp	r3, #4
 800165a:	d101      	bne.n	8001660 <LL_ADC_REG_IsConversionOngoing+0x18>
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <HAL_ADCEx_Calibration_Start+0x1c>
 8001688:	2302      	movs	r3, #2
 800168a:	e04d      	b.n	8001728 <HAL_ADCEx_Calibration_Start+0xb8>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fe97 	bl	80013c8 <ADC_Disable>
 800169a:	4603      	mov	r3, r0
 800169c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d136      	bne.n	8001712 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016ac:	f023 0302 	bic.w	r3, r3, #2
 80016b0:	f043 0202 	orr.w	r2, r3, #2
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6839      	ldr	r1, [r7, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff81 	bl	80015c6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80016c4:	e014      	b.n	80016f0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	3301      	adds	r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4a18      	ldr	r2, [pc, #96]	; (8001730 <HAL_ADCEx_Calibration_Start+0xc0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d90d      	bls.n	80016f0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	f023 0312 	bic.w	r3, r3, #18
 80016dc:	f043 0210 	orr.w	r2, r3, #16
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e01b      	b.n	8001728 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff7f 	bl	80015f8 <LL_ADC_IsCalibrationOnGoing>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1e2      	bne.n	80016c6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	f023 0303 	bic.w	r3, r3, #3
 8001708:	f043 0201 	orr.w	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001710:	e005      	b.n	800171e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001716:	f043 0210 	orr.w	r2, r3, #16
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	0004de01 	.word	0x0004de01

08001734 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b0a2      	sub	sp, #136	; 0x88
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff7f 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8001750:	2302      	movs	r3, #2
 8001752:	e07e      	b.n	8001852 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800175e:	2302      	movs	r3, #2
 8001760:	e077      	b.n	8001852 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001772:	d102      	bne.n	800177a <HAL_ADCEx_MultiModeStart_DMA+0x46>
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <HAL_ADCEx_MultiModeStart_DMA+0x128>)
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e001      	b.n	800177e <HAL_ADCEx_MultiModeStart_DMA+0x4a>
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10b      	bne.n	800179c <HAL_ADCEx_MultiModeStart_DMA+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	f043 0220 	orr.w	r2, r3, #32
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e05a      	b.n	8001852 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f7ff fdb9 	bl	8001314 <ADC_Enable>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 80017a8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d107      	bne.n	80017c0 <HAL_ADCEx_MultiModeStart_DMA+0x8c>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fdad 	bl	8001314 <ADC_Enable>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80017c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d13e      	bne.n	8001846 <HAL_ADCEx_MultiModeStart_DMA+0x112>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e6:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <HAL_ADCEx_MultiModeStart_DMA+0x12c>)
 80017e8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ee:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 80017f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f6:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 80017f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 80017fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	221c      	movs	r2, #28
 8001806:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0210 	orr.w	r2, r2, #16
 800181e:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001824:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001828:	330c      	adds	r3, #12
 800182a:	4619      	mov	r1, r3
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f000 fb2c 	bl	8001e8c <HAL_DMA_Start_IT>
 8001834:	4603      	mov	r3, r0
 8001836:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff feee 	bl	8001620 <LL_ADC_REG_StartConversion>
 8001844:	e003      	b.n	800184e <HAL_ADCEx_MultiModeStart_DMA+0x11a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800184e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 8001852:	4618      	mov	r0, r3
 8001854:	3788      	adds	r7, #136	; 0x88
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	50000100 	.word	0x50000100
 8001860:	08001479 	.word	0x08001479
 8001864:	08001551 	.word	0x08001551
 8001868:	0800156d 	.word	0x0800156d
 800186c:	50000300 	.word	0x50000300

08001870 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b0a2      	sub	sp, #136	; 0x88
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HAL_ADCEx_MultiModeStop_DMA+0x16>
 8001882:	2302      	movs	r3, #2
 8001884:	e0a3      	b.n	80019ce <HAL_ADCEx_MultiModeStop_DMA+0x15e>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800188e:	2103      	movs	r1, #3
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fc8b 	bl	80011ac <ADC_ConversionStop>
 8001896:	4603      	mov	r3, r0
 8001898:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800189c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f040 808e 	bne.w	80019c2 <HAL_ADCEx_MultiModeStop_DMA+0x152>
  {
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ae:	d102      	bne.n	80018b6 <HAL_ADCEx_MultiModeStop_DMA+0x46>
 80018b0:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <HAL_ADCEx_MultiModeStop_DMA+0x168>)
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e001      	b.n	80018ba <HAL_ADCEx_MultiModeStop_DMA+0x4a>
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]

    if (tmphadcSlave.Instance == NULL)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10b      	bne.n	80018d8 <HAL_ADCEx_MultiModeStop_DMA+0x68>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	f043 0220 	orr.w	r2, r3, #32
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e07a      	b.n	80019ce <HAL_ADCEx_MultiModeStop_DMA+0x15e>

    /* Procedure to disable the ADC peripheral: wait for conversions          */
    /* effectively stopped (ADC master and ADC slave), then disable ADC       */

    /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
    tickstart = HAL_GetTick();
 80018d8:	f7fe fd02 	bl	80002e0 <HAL_GetTick>
 80018dc:	67f8      	str	r0, [r7, #124]	; 0x7c

    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff feb1 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 80018e6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 80018ea:	e018      	b.n	800191e <HAL_ADCEx_MultiModeStop_DMA+0xae>
           || (tmphadcSlave_conversion_on_going == 1UL)
          )
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80018ec:	f7fe fcf8 	bl	80002e0 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	d90b      	bls.n	8001912 <HAL_ADCEx_MultiModeStop_DMA+0xa2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fe:	f043 0210 	orr.w	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e05d      	b.n	80019ce <HAL_ADCEx_MultiModeStop_DMA+0x15e>
      }

      tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fe97 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 800191a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fe90 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 8001928:	4603      	mov	r3, r0
 800192a:	2b01      	cmp	r3, #1
 800192c:	d0de      	beq.n	80018ec <HAL_ADCEx_MultiModeStop_DMA+0x7c>
           || (tmphadcSlave_conversion_on_going == 1UL)
 800192e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001932:	2b01      	cmp	r3, #1
 8001934:	d0da      	beq.n	80018ec <HAL_ADCEx_MultiModeStop_DMA+0x7c>

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    /* Note: DMA channel of ADC slave should be stopped after this function   */
    /*       with HAL_ADC_Stop_DMA() API.                                     */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fb21 	bl	8001f82 <HAL_DMA_Abort>
 8001940:	4603      	mov	r3, r0
 8001942:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_ERROR)
 8001946:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800194a:	2b01      	cmp	r3, #1
 800194c:	d105      	bne.n	800195a <HAL_ADCEx_MultiModeStop_DMA+0xea>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001952:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0210 	bic.w	r2, r2, #16
 8001968:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripherals: master and slave */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
    /* memory a potential failing status.                                     */
    if (tmp_hal_status == HAL_OK)
 800196a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800196e:	2b00      	cmp	r3, #0
 8001970:	d115      	bne.n	800199e <HAL_ADCEx_MultiModeStop_DMA+0x12e>
    {
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fd26 	bl	80013c8 <ADC_Disable>
 800197c:	4603      	mov	r3, r0
 800197e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fd20 	bl	80013c8 <ADC_Disable>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10f      	bne.n	80019ae <HAL_ADCEx_MultiModeStop_DMA+0x13e>
 800198e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10b      	bne.n	80019ae <HAL_ADCEx_MultiModeStop_DMA+0x13e>
          (tmphadcSlave_disable_status == HAL_OK))
      {
        tmp_hal_status = HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800199c:	e007      	b.n	80019ae <HAL_ADCEx_MultiModeStop_DMA+0x13e>
      }
    }
    else
    {
      /* In case of error, attempt to disable ADC master and slave without status assert */
      (void) ADC_Disable(hadc);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fd12 	bl	80013c8 <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fd0d 	bl	80013c8 <ADC_Disable>
    }

    /* Set ADC state (ADC master) */
    ADC_STATE_CLR_SET(hadc->State,
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	f043 0201 	orr.w	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80019ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3788      	adds	r7, #136	; 0x88
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	50000100 	.word	0x50000100

080019dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b0a1      	sub	sp, #132	; 0x84
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e087      	b.n	8001b0a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a0a:	d102      	bne.n	8001a12 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001a0c:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	e001      	b.n	8001a16 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10b      	bne.n	8001a34 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	f043 0220 	orr.w	r2, r3, #32
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e06a      	b.n	8001b0a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fe06 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 8001a3c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fe00 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d14c      	bne.n	8001ae8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d149      	bne.n	8001ae8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001a54:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001a56:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d028      	beq.n	8001ab2 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a72:	035b      	lsls	r3, r3, #13
 8001a74:	430b      	orrs	r3, r1
 8001a76:	431a      	orrs	r2, r3
 8001a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a80:	f7ff fd8e 	bl	80015a0 <LL_ADC_IsEnabled>
 8001a84:	4604      	mov	r4, r0
 8001a86:	4823      	ldr	r0, [pc, #140]	; (8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001a88:	f7ff fd8a 	bl	80015a0 <LL_ADC_IsEnabled>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4323      	orrs	r3, r4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d133      	bne.n	8001afc <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a9c:	f023 030f 	bic.w	r3, r3, #15
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	6811      	ldr	r1, [r2, #0]
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	6892      	ldr	r2, [r2, #8]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ab0:	e024      	b.n	8001afc <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001abc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001abe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ac2:	f7ff fd6d 	bl	80015a0 <LL_ADC_IsEnabled>
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	4812      	ldr	r0, [pc, #72]	; (8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001aca:	f7ff fd69 	bl	80015a0 <LL_ADC_IsEnabled>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4323      	orrs	r3, r4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d112      	bne.n	8001afc <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ade:	f023 030f 	bic.w	r3, r3, #15
 8001ae2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ae4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ae6:	e009      	b.n	8001afc <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aec:	f043 0220 	orr.w	r2, r3, #32
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001afa:	e000      	b.n	8001afe <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001afc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001b06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3784      	adds	r7, #132	; 0x84
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd90      	pop	{r4, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	50000100 	.word	0x50000100
 8001b18:	50000300 	.word	0x50000300

08001b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	60d3      	str	r3, [r2, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__NVIC_GetPriorityGrouping+0x18>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db0b      	blt.n	8001baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	4907      	ldr	r1, [pc, #28]	; (8001bb8 <__NVIC_EnableIRQ+0x38>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000e100 	.word	0xe000e100

08001bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db0a      	blt.n	8001be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	490c      	ldr	r1, [pc, #48]	; (8001c08 <__NVIC_SetPriority+0x4c>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	440b      	add	r3, r1
 8001be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be4:	e00a      	b.n	8001bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4908      	ldr	r1, [pc, #32]	; (8001c0c <__NVIC_SetPriority+0x50>)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	3b04      	subs	r3, #4
 8001bf4:	0112      	lsls	r2, r2, #4
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	761a      	strb	r2, [r3, #24]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000e100 	.word	0xe000e100
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f1c3 0307 	rsb	r3, r3, #7
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	bf28      	it	cs
 8001c2e:	2304      	movcs	r3, #4
 8001c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3304      	adds	r3, #4
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d902      	bls.n	8001c40 <NVIC_EncodePriority+0x30>
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3b03      	subs	r3, #3
 8001c3e:	e000      	b.n	8001c42 <NVIC_EncodePriority+0x32>
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	401a      	ands	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	43d9      	mvns	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	4313      	orrs	r3, r2
         );
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c88:	d301      	bcc.n	8001c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00f      	b.n	8001cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <SysTick_Config+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f7ff ff8e 	bl	8001bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff29 	bl	8001b1c <__NVIC_SetPriorityGrouping>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff40 	bl	8001b64 <__NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff90 	bl	8001c10 <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff5f 	bl	8001bbc <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff33 	bl	8001b80 <__NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffa4 	bl	8001c78 <SysTick_Config>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e08d      	b.n	8001e6a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b47      	ldr	r3, [pc, #284]	; (8001e74 <HAL_DMA_Init+0x138>)
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d80f      	bhi.n	8001d7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b45      	ldr	r3, [pc, #276]	; (8001e78 <HAL_DMA_Init+0x13c>)
 8001d62:	4413      	add	r3, r2
 8001d64:	4a45      	ldr	r2, [pc, #276]	; (8001e7c <HAL_DMA_Init+0x140>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	009a      	lsls	r2, r3, #2
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a42      	ldr	r2, [pc, #264]	; (8001e80 <HAL_DMA_Init+0x144>)
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
 8001d78:	e00e      	b.n	8001d98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b40      	ldr	r3, [pc, #256]	; (8001e84 <HAL_DMA_Init+0x148>)
 8001d82:	4413      	add	r3, r2
 8001d84:	4a3d      	ldr	r2, [pc, #244]	; (8001e7c <HAL_DMA_Init+0x140>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	009a      	lsls	r2, r3, #2
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a3c      	ldr	r2, [pc, #240]	; (8001e88 <HAL_DMA_Init+0x14c>)
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001db2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fa10 	bl	8002210 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df8:	d102      	bne.n	8001e00 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e14:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d010      	beq.n	8001e40 <HAL_DMA_Init+0x104>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d80c      	bhi.n	8001e40 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fa30 	bl	800228c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	e008      	b.n	8001e52 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40020407 	.word	0x40020407
 8001e78:	bffdfff8 	.word	0xbffdfff8
 8001e7c:	cccccccd 	.word	0xcccccccd
 8001e80:	40020000 	.word	0x40020000
 8001e84:	bffdfbf8 	.word	0xbffdfbf8
 8001e88:	40020400 	.word	0x40020400

08001e8c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_DMA_Start_IT+0x20>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e066      	b.n	8001f7a <HAL_DMA_Start_IT+0xee>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d155      	bne.n	8001f6c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	68b9      	ldr	r1, [r7, #8]
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 f954 	bl	8002192 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 020e 	orr.w	r2, r2, #14
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	e00f      	b.n	8001f24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0204 	bic.w	r2, r2, #4
 8001f12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 020a 	orr.w	r2, r2, #10
 8001f22:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f40:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f58:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0201 	orr.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e005      	b.n	8001f78 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f74:	2302      	movs	r3, #2
 8001f76:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d005      	beq.n	8001fa6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e037      	b.n	8002016 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 020e 	bic.w	r2, r2, #14
 8001fb4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fc4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0201 	bic.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f003 021f 	and.w	r2, r3, #31
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ff2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00c      	beq.n	8002016 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800200a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002014:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	2204      	movs	r2, #4
 8002056:	409a      	lsls	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d026      	beq.n	80020ae <HAL_DMA_IRQHandler+0x7a>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b00      	cmp	r3, #0
 8002068:	d021      	beq.n	80020ae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0320 	and.w	r3, r3, #32
 8002074:	2b00      	cmp	r3, #0
 8002076:	d107      	bne.n	8002088 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0204 	bic.w	r2, r2, #4
 8002086:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208c:	f003 021f 	and.w	r2, r3, #31
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	2104      	movs	r1, #4
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d071      	beq.n	8002188 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80020ac:	e06c      	b.n	8002188 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	2202      	movs	r2, #2
 80020b8:	409a      	lsls	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d02e      	beq.n	8002120 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d029      	beq.n	8002120 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10b      	bne.n	80020f2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 020a 	bic.w	r2, r2, #10
 80020e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f003 021f 	and.w	r2, r3, #31
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	2102      	movs	r1, #2
 8002100:	fa01 f202 	lsl.w	r2, r1, r2
 8002104:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d038      	beq.n	8002188 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800211e:	e033      	b.n	8002188 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	2208      	movs	r2, #8
 800212a:	409a      	lsls	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d02a      	beq.n	800218a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d025      	beq.n	800218a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 020e 	bic.w	r2, r2, #14
 800214c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f003 021f 	and.w	r2, r3, #31
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f202 	lsl.w	r2, r1, r2
 8002160:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002188:	bf00      	nop
 800218a:	bf00      	nop
}
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021a8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80021ba:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2101      	movs	r1, #1
 80021ca:	fa01 f202 	lsl.w	r2, r1, r2
 80021ce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b10      	cmp	r3, #16
 80021de:	d108      	bne.n	80021f2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021f0:	e007      	b.n	8002202 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	60da      	str	r2, [r3, #12]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002220:	429a      	cmp	r2, r3
 8002222:	d802      	bhi.n	800222a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	e001      	b.n	800222e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800222c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	3b08      	subs	r3, #8
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	009a      	lsls	r2, r3, #2
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	461a      	mov	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800225a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	2201      	movs	r2, #1
 8002264:	409a      	lsls	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	651a      	str	r2, [r3, #80]	; 0x50
}
 800226a:	bf00      	nop
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40020407 	.word	0x40020407
 800227c:	40020800 	.word	0x40020800
 8002280:	40020820 	.word	0x40020820
 8002284:	cccccccd 	.word	0xcccccccd
 8002288:	40020880 	.word	0x40020880

0800228c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	461a      	mov	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80022ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	2201      	movs	r2, #1
 80022ba:	409a      	lsls	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	1000823f 	.word	0x1000823f
 80022d0:	40020940 	.word	0x40020940

080022d4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e147      	b.n	8002576 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f007 fe10 	bl	8009f20 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0210 	bic.w	r2, r2, #16
 800230e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002310:	f7fd ffe6 	bl	80002e0 <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002316:	e012      	b.n	800233e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002318:	f7fd ffe2 	bl	80002e0 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b0a      	cmp	r3, #10
 8002324:	d90b      	bls.n	800233e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232a:	f043 0201 	orr.w	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2203      	movs	r2, #3
 8002336:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e11b      	b.n	8002576 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b08      	cmp	r3, #8
 800234a:	d0e5      	beq.n	8002318 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800235c:	f7fd ffc0 	bl	80002e0 <HAL_GetTick>
 8002360:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002362:	e012      	b.n	800238a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002364:	f7fd ffbc 	bl	80002e0 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b0a      	cmp	r3, #10
 8002370:	d90b      	bls.n	800238a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2203      	movs	r2, #3
 8002382:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e0f5      	b.n	8002576 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0e5      	beq.n	8002364 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0202 	orr.w	r2, r2, #2
 80023a6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a74      	ldr	r2, [pc, #464]	; (8002580 <HAL_FDCAN_Init+0x2ac>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d103      	bne.n	80023ba <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80023b2:	4a74      	ldr	r2, [pc, #464]	; (8002584 <HAL_FDCAN_Init+0x2b0>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7c1b      	ldrb	r3, [r3, #16]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d108      	bne.n	80023d4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699a      	ldr	r2, [r3, #24]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d0:	619a      	str	r2, [r3, #24]
 80023d2:	e007      	b.n	80023e4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7c5b      	ldrb	r3, [r3, #17]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d108      	bne.n	80023fe <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023fa:	619a      	str	r2, [r3, #24]
 80023fc:	e007      	b.n	800240e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699a      	ldr	r2, [r3, #24]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800240c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7c9b      	ldrb	r3, [r3, #18]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d108      	bne.n	8002428 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002424:	619a      	str	r2, [r3, #24]
 8002426:	e007      	b.n	8002438 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002436:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699a      	ldr	r2, [r3, #24]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800245c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0210 	bic.w	r2, r2, #16
 800246c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d108      	bne.n	8002488 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699a      	ldr	r2, [r3, #24]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0204 	orr.w	r2, r2, #4
 8002484:	619a      	str	r2, [r3, #24]
 8002486:	e02c      	b.n	80024e2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d028      	beq.n	80024e2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d01c      	beq.n	80024d2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024a6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691a      	ldr	r2, [r3, #16]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0210 	orr.w	r2, r2, #16
 80024b6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d110      	bne.n	80024e2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0220 	orr.w	r2, r2, #32
 80024ce:	619a      	str	r2, [r3, #24]
 80024d0:	e007      	b.n	80024e2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699a      	ldr	r2, [r3, #24]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0220 	orr.w	r2, r2, #32
 80024e0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024f2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80024fa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	3b01      	subs	r3, #1
 8002504:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800250a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800250c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002516:	d115      	bne.n	8002544 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	3b01      	subs	r3, #1
 8002524:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002526:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	3b01      	subs	r3, #1
 800252e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002530:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	3b01      	subs	r3, #1
 800253a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002540:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002542:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fcb8 	bl	8002ed0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40006400 	.word	0x40006400
 8002584:	40006500 	.word	0x40006500

08002588 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002598:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800259a:	7dfb      	ldrb	r3, [r7, #23]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d002      	beq.n	80025a6 <HAL_FDCAN_ConfigFilter+0x1e>
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d13d      	bne.n	8002622 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d119      	bne.n	80025e2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80025ba:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80025c2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e01d      	b.n	800261e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	075a      	lsls	r2, r3, #29
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	079a      	lsls	r2, r3, #30
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3304      	adds	r3, #4
 8002616:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	e006      	b.n	8002630 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002626:	f043 0202 	orr.w	r2, r3, #2
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
  }
}
 8002630:	4618      	mov	r0, r3
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d116      	bne.n	8002684 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800265e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	011a      	lsls	r2, r3, #4
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	431a      	orrs	r2, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	431a      	orrs	r2, r3
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                         (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                                         (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                                         (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e006      	b.n	8002692 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002688:	f043 0204 	orr.w	r2, r3, #4
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 800269e:	b480      	push	{r7}
 80026a0:	b085      	sub	sp, #20
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d11f      	bne.n	80026f6 <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b40      	cmp	r3, #64	; 0x40
 80026ba:	d10d      	bne.n	80026d8 <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c4:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	025a      	lsls	r2, r3, #9
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80026d6:	e00c      	b.n	80026f2 <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026e0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	021a      	lsls	r2, r3, #8
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Return function status */
    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e006      	b.n	8002704 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fa:	f043 0204 	orr.w	r2, r3, #4
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
  }
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d110      	bne.n	8002746 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	e006      	b.n	8002754 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274a:	f043 0204 	orr.w	r2, r3, #4
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
  }
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d12c      	bne.n	80027d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e023      	b.n	80027e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80027a0:	0c1b      	lsrs	r3, r3, #16
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fbe4 	bl	8002f7c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2101      	movs	r1, #1
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	fa01 f202 	lsl.w	r2, r1, r2
 80027c0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80027c4:	2201      	movs	r2, #1
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	409a      	lsls	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	e006      	b.n	80027e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d6:	f043 0208 	orr.w	r2, r3, #8
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
  }
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b08b      	sub	sp, #44	; 0x2c
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027fc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80027fe:	7efb      	ldrb	r3, [r7, #27]
 8002800:	2b02      	cmp	r3, #2
 8002802:	f040 80bc 	bne.w	800297e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b40      	cmp	r3, #64	; 0x40
 800280a:	d121      	bne.n	8002850 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	2b00      	cmp	r3, #0
 800281a:	d107      	bne.n	800282c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002820:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0af      	b.n	800298c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
 800284e:	e020      	b.n	8002892 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002864:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e08d      	b.n	800298c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	4613      	mov	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	440b      	add	r3, r1
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	0c9b      	lsrs	r3, r3, #18
 80028ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	e005      	b.n	80028c2 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	3304      	adds	r3, #4
 80028de:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	0e1b      	lsrs	r3, r3, #24
 8002914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	0fda      	lsrs	r2, r3, #31
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	3304      	adds	r3, #4
 800292a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002930:	2300      	movs	r3, #0
 8002932:	623b      	str	r3, [r7, #32]
 8002934:	e00a      	b.n	800294c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	441a      	add	r2, r3
 800293c:	6839      	ldr	r1, [r7, #0]
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	440b      	add	r3, r1
 8002942:	7812      	ldrb	r2, [r2, #0]
 8002944:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	3301      	adds	r3, #1
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	4a11      	ldr	r2, [pc, #68]	; (8002998 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	461a      	mov	r2, r3
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	4293      	cmp	r3, r2
 800295c:	d3eb      	bcc.n	8002936 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b40      	cmp	r3, #64	; 0x40
 8002962:	d105      	bne.n	8002970 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800296e:	e004      	b.n	800297a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e006      	b.n	800298c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002982:	f043 0208 	orr.w	r2, r3, #8
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
  }
}
 800298c:	4618      	mov	r0, r3
 800298e:	372c      	adds	r7, #44	; 0x2c
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	0800a7c8 	.word	0x0800a7c8

0800299c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029d2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d003      	beq.n	80029e2 <HAL_FDCAN_ActivateNotification+0x22>
 80029da:	7dfb      	ldrb	r3, [r7, #23]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	f040 80c8 	bne.w	8002b72 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <HAL_FDCAN_ActivateNotification+0x3e>
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d03b      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d004      	beq.n	8002a12 <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d031      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d004      	beq.n	8002a26 <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d027      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d004      	beq.n	8002a3a <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01d      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d013      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d004      	beq.n	8002a62 <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00c      	beq.n	8002a86 <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d107      	bne.n	8002a86 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d004      	beq.n	8002a9a <HAL_FDCAN_ActivateNotification+0xda>
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d13b      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d004      	beq.n	8002aae <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d131      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d127      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d11d      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d113      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d004      	beq.n	8002afe <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00c      	beq.n	8002b22 <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0202 	orr.w	r2, r2, #2
 8002b20:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d009      	beq.n	8002b40 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e006      	b.n	8002b80 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	f043 0202 	orr.w	r2, r3, #2
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
  }
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba8:	4013      	ands	r3, r2
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	6a3a      	ldr	r2, [r7, #32]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bce:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be2:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8002be6:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002bfe:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d006      	beq.n	8002c36 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2240      	movs	r2, #64	; 0x40
 8002c2e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f92e 	bl	8002e92 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01b      	beq.n	8002c7c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d014      	beq.n	8002c7c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c5a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c72:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002c74:	6939      	ldr	r1, [r7, #16]
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f8ec 	bl	8002e54 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c88:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002c8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f8b6 	bl	8002dfe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d007      	beq.n	8002ca8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6a3a      	ldr	r2, [r7, #32]
 8002c9e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002ca0:	6a39      	ldr	r1, [r7, #32]
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f005 fc34 	bl	8008510 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002cb6:	69f9      	ldr	r1, [r7, #28]
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f8ab 	bl	8002e14 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00e      	beq.n	8002cea <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f8a0 	bl	8002e2a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01a      	beq.n	8002d2e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d013      	beq.n	8002d2e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002d0e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002d26:	68f9      	ldr	r1, [r7, #12]
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f888 	bl	8002e3e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00e      	beq.n	8002d5a <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d52:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f888 	bl	8002e6a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00e      	beq.n	8002d86 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d7e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f87c 	bl	8002e7e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d011      	beq.n	8002db8 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002daa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002dc6:	6979      	ldr	r1, [r7, #20]
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f876 	bl	8002eba <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d009      	beq.n	8002de8 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f858 	bl	8002ea6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002df6:	bf00      	nop
 8002df8:	3728      	adds	r7, #40	; 0x28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002ed8:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002eda:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eea:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef2:	041a      	lsls	r2, r3, #16
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f10:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	061a      	lsls	r2, r3, #24
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e005      	b.n	8002f5e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d3f3      	bcc.n	8002f52 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	4000a400 	.word	0x4000a400

08002f7c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002f9a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	e00a      	b.n	8002fbe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002fb0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002fb6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fbc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002fc8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002fce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002fd4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	3304      	adds	r3, #4
 8003006:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	e020      	b.n	8003050 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	3303      	adds	r3, #3
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	3302      	adds	r3, #2
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	440b      	add	r3, r1
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003026:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	3301      	adds	r3, #1
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	440b      	add	r3, r1
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003034:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	440a      	add	r2, r1
 800303c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800303e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	3304      	adds	r3, #4
 8003048:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	3304      	adds	r3, #4
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	4a06      	ldr	r2, [pc, #24]	; (8003070 <FDCAN_CopyMessageToRAM+0xf4>)
 8003058:	5cd3      	ldrb	r3, [r2, r3]
 800305a:	461a      	mov	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	4293      	cmp	r3, r2
 8003060:	d3d5      	bcc.n	800300e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8003062:	bf00      	nop
 8003064:	3724      	adds	r7, #36	; 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	0800a7c8 	.word	0x0800a7c8

08003074 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003086:	4b24      	ldr	r3, [pc, #144]	; (8003118 <HAL_FLASH_Program+0xa4>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_FLASH_Program+0x1e>
 800308e:	2302      	movs	r3, #2
 8003090:	e03e      	b.n	8003110 <HAL_FLASH_Program+0x9c>
 8003092:	4b21      	ldr	r3, [pc, #132]	; (8003118 <HAL_FLASH_Program+0xa4>)
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800309c:	f000 f87c 	bl	8003198 <FLASH_WaitForLastOperation>
 80030a0:	4603      	mov	r3, r0
 80030a2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d12e      	bne.n	8003108 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030aa:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_FLASH_Program+0xa4>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d107      	bne.n	80030c6 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80030b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030ba:	68b8      	ldr	r0, [r7, #8]
 80030bc:	f000 f8c0 	bl	8003240 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80030c0:	2301      	movs	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e010      	b.n	80030e8 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d002      	beq.n	80030d2 <HAL_FLASH_Program+0x5e>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d10a      	bne.n	80030e8 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	4619      	mov	r1, r3
 80030d6:	68b8      	ldr	r0, [r7, #8]
 80030d8:	f000 f8d6 	bl	8003288 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d102      	bne.n	80030e8 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80030e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030e6:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80030e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030ec:	f000 f854 	bl	8003198 <FLASH_WaitForLastOperation>
 80030f0:	4603      	mov	r3, r0
 80030f2:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <HAL_FLASH_Program+0xa8>)
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	43db      	mvns	r3, r3
 8003102:	4906      	ldr	r1, [pc, #24]	; (800311c <HAL_FLASH_Program+0xa8>)
 8003104:	4013      	ands	r3, r2
 8003106:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <HAL_FLASH_Program+0xa4>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800310e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000008 	.word	0x20000008
 800311c:	40022000 	.word	0x40022000

08003120 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_FLASH_Unlock+0x38>)
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	2b00      	cmp	r3, #0
 8003130:	da0b      	bge.n	800314a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003132:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_FLASH_Unlock+0x38>)
 8003134:	4a09      	ldr	r2, [pc, #36]	; (800315c <HAL_FLASH_Unlock+0x3c>)
 8003136:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003138:	4b07      	ldr	r3, [pc, #28]	; (8003158 <HAL_FLASH_Unlock+0x38>)
 800313a:	4a09      	ldr	r2, [pc, #36]	; (8003160 <HAL_FLASH_Unlock+0x40>)
 800313c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_FLASH_Unlock+0x38>)
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	da01      	bge.n	800314a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800314a:	79fb      	ldrb	r3, [r7, #7]
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	40022000 	.word	0x40022000
 800315c:	45670123 	.word	0x45670123
 8003160:	cdef89ab 	.word	0xcdef89ab

08003164 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_FLASH_Lock+0x30>)
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	4a08      	ldr	r2, [pc, #32]	; (8003194 <HAL_FLASH_Lock+0x30>)
 8003174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003178:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_FLASH_Lock+0x30>)
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	da01      	bge.n	8003186 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8003186:	79fb      	ldrb	r3, [r7, #7]
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40022000 	.word	0x40022000

08003198 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7fd f89e 	bl	80002e0 <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80031a6:	e009      	b.n	80031bc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80031a8:	f7fd f89a 	bl	80002e0 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d201      	bcs.n	80031bc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e038      	b.n	800322e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80031bc:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c8:	d0ee      	beq.n	80031a8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80031ca:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80031d2:	4013      	ands	r3, r2
 80031d4:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01e      	beq.n	800321a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80031dc:	4b17      	ldr	r3, [pc, #92]	; (800323c <FLASH_WaitForLastOperation+0xa4>)
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	4a15      	ldr	r2, [pc, #84]	; (800323c <FLASH_WaitForLastOperation+0xa4>)
 80031e6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <FLASH_WaitForLastOperation+0x6a>
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80031fc:	490e      	ldr	r1, [pc, #56]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	618b      	str	r3, [r1, #24]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d004      	beq.n	8003216 <FLASH_WaitForLastOperation+0x7e>
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003214:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e009      	b.n	800322e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d102      	bne.n	800322c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003226:	4b04      	ldr	r3, [pc, #16]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 8003228:	2201      	movs	r2, #1
 800322a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40022000 	.word	0x40022000
 800323c:	20000008 	.word	0x20000008

08003240 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003240:	b490      	push	{r4, r7}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800324c:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <FLASH_Program_DoubleWord+0x44>)
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	4a0c      	ldr	r2, [pc, #48]	; (8003284 <FLASH_Program_DoubleWord+0x44>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800325e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003262:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	f04f 0400 	mov.w	r4, #0
 800326e:	0013      	movs	r3, r2
 8003270:	2400      	movs	r4, #0
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	3204      	adds	r2, #4
 8003276:	6013      	str	r3, [r2, #0]
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bc90      	pop	{r4, r7}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40022000 	.word	0x40022000

08003288 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003288:	b480      	push	{r7}
 800328a:	b089      	sub	sp, #36	; 0x24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003292:	2340      	movs	r3, #64	; 0x40
 8003294:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800329e:	4b13      	ldr	r3, [pc, #76]	; (80032ec <FLASH_Program_Fast+0x64>)
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	4a12      	ldr	r2, [pc, #72]	; (80032ec <FLASH_Program_Fast+0x64>)
 80032a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032aa:	f3ef 8310 	mrs	r3, PRIMASK
 80032ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80032b0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80032b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80032b4:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	3304      	adds	r3, #4
 80032c2:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	3304      	adds	r3, #4
 80032c8:	617b      	str	r3, [r7, #20]
    row_index--;
 80032ca:	7ffb      	ldrb	r3, [r7, #31]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80032d0:	7ffb      	ldrb	r3, [r7, #31]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1ef      	bne.n	80032b6 <FLASH_Program_Fast+0x2e>
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80032e0:	bf00      	nop
 80032e2:	3724      	adds	r7, #36	; 0x24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40022000 	.word	0x40022000

080032f0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80032fa:	4b4a      	ldr	r3, [pc, #296]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_FLASHEx_Erase+0x16>
 8003302:	2302      	movs	r3, #2
 8003304:	e089      	b.n	800341a <HAL_FLASHEx_Erase+0x12a>
 8003306:	4b47      	ldr	r3, [pc, #284]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800330c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003310:	f7ff ff42 	bl	8003198 <FLASH_WaitForLastOperation>
 8003314:	4603      	mov	r3, r0
 8003316:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d179      	bne.n	8003412 <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800331e:	4b41      	ldr	r3, [pc, #260]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 8003320:	2200      	movs	r2, #0
 8003322:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003324:	4b40      	ldr	r3, [pc, #256]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332c:	2b00      	cmp	r3, #0
 800332e:	d019      	beq.n	8003364 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003330:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a3c      	ldr	r2, [pc, #240]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003336:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800333a:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800333c:	4b3a      	ldr	r3, [pc, #232]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003344:	2b00      	cmp	r3, #0
 8003346:	d009      	beq.n	800335c <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003348:	4b37      	ldr	r3, [pc, #220]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a36      	ldr	r2, [pc, #216]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 800334e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003352:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003354:	4b33      	ldr	r3, [pc, #204]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 8003356:	2203      	movs	r2, #3
 8003358:	771a      	strb	r2, [r3, #28]
 800335a:	e016      	b.n	800338a <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800335c:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 800335e:	2201      	movs	r2, #1
 8003360:	771a      	strb	r2, [r3, #28]
 8003362:	e012      	b.n	800338a <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003364:	4b30      	ldr	r3, [pc, #192]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d009      	beq.n	8003384 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003370:	4b2d      	ldr	r3, [pc, #180]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a2c      	ldr	r2, [pc, #176]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800337a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800337c:	4b29      	ldr	r3, [pc, #164]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 800337e:	2202      	movs	r2, #2
 8003380:	771a      	strb	r2, [r3, #28]
 8003382:	e002      	b.n	800338a <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003384:	4b27      	ldr	r3, [pc, #156]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 8003386:	2200      	movs	r2, #0
 8003388:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d111      	bne.n	80033b6 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f848 	bl	800342c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800339c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033a0:	f7ff fefa 	bl	8003198 <FLASH_WaitForLastOperation>
 80033a4:	4603      	mov	r3, r0
 80033a6:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80033a8:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	4a1e      	ldr	r2, [pc, #120]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 80033ae:	f023 0304 	bic.w	r3, r3, #4
 80033b2:	6153      	str	r3, [r2, #20]
 80033b4:	e02b      	b.n	800340e <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f04f 32ff 	mov.w	r2, #4294967295
 80033bc:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	e01b      	b.n	80033fe <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	4619      	mov	r1, r3
 80033cc:	68b8      	ldr	r0, [r7, #8]
 80033ce:	f000 f84b 	bl	8003468 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033d6:	f7ff fedf 	bl	8003198 <FLASH_WaitForLastOperation>
 80033da:	4603      	mov	r3, r0
 80033dc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80033de:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	4a11      	ldr	r2, [pc, #68]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 80033e4:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80033e8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	601a      	str	r2, [r3, #0]
          break;
 80033f6:	e00a      	b.n	800340e <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	3301      	adds	r3, #1
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	4413      	add	r3, r2
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	429a      	cmp	r2, r3
 800340c:	d3db      	bcc.n	80033c6 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800340e:	f000 f84f 	bl	80034b0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003412:	4b04      	ldr	r3, [pc, #16]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]

  return status;
 8003418:	7bfb      	ldrb	r3, [r7, #15]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000008 	.word	0x20000008
 8003428:	40022000 	.word	0x40022000

0800342c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800343e:	4b09      	ldr	r3, [pc, #36]	; (8003464 <FLASH_MassErase+0x38>)
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	4a08      	ldr	r2, [pc, #32]	; (8003464 <FLASH_MassErase+0x38>)
 8003444:	f043 0304 	orr.w	r3, r3, #4
 8003448:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <FLASH_MassErase+0x38>)
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4a05      	ldr	r2, [pc, #20]	; (8003464 <FLASH_MassErase+0x38>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003454:	6153      	str	r3, [r2, #20]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40022000 	.word	0x40022000

08003468 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <FLASH_PageErase+0x44>)
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8003482:	490a      	ldr	r1, [pc, #40]	; (80034ac <FLASH_PageErase+0x44>)
 8003484:	4313      	orrs	r3, r2
 8003486:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003488:	4b08      	ldr	r3, [pc, #32]	; (80034ac <FLASH_PageErase+0x44>)
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	4a07      	ldr	r2, [pc, #28]	; (80034ac <FLASH_PageErase+0x44>)
 800348e:	f043 0302 	orr.w	r3, r3, #2
 8003492:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <FLASH_PageErase+0x44>)
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <FLASH_PageErase+0x44>)
 800349a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349e:	6153      	str	r3, [r2, #20]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	40022000 	.word	0x40022000

080034b0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80034b6:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <FLASH_FlushCaches+0x80>)
 80034b8:	7f1b      	ldrb	r3, [r3, #28]
 80034ba:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d002      	beq.n	80034c8 <FLASH_FlushCaches+0x18>
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d111      	bne.n	80034ec <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a19      	ldr	r2, [pc, #100]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b17      	ldr	r3, [pc, #92]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a16      	ldr	r2, [pc, #88]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034de:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034e0:	4b14      	ldr	r3, [pc, #80]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a13      	ldr	r2, [pc, #76]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d002      	beq.n	80034f8 <FLASH_FlushCaches+0x48>
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d111      	bne.n	800351c <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80034f8:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0d      	ldr	r2, [pc, #52]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <FLASH_FlushCaches+0x84>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <FLASH_FlushCaches+0x84>)
 800350a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800350e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003510:	4b08      	ldr	r3, [pc, #32]	; (8003534 <FLASH_FlushCaches+0x84>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a07      	ldr	r2, [pc, #28]	; (8003534 <FLASH_FlushCaches+0x84>)
 8003516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800351a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <FLASH_FlushCaches+0x80>)
 800351e:	2200      	movs	r2, #0
 8003520:	771a      	strb	r2, [r3, #28]
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	20000008 	.word	0x20000008
 8003534:	40022000 	.word	0x40022000

08003538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003546:	e15a      	b.n	80037fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2101      	movs	r1, #1
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	4013      	ands	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 814c 	beq.w	80037f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x38>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b12      	cmp	r3, #18
 800356e:	d123      	bne.n	80035b8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	08da      	lsrs	r2, r3, #3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3208      	adds	r2, #8
 8003578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	220f      	movs	r2, #15
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4013      	ands	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	08da      	lsrs	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3208      	adds	r2, #8
 80035b2:	6939      	ldr	r1, [r7, #16]
 80035b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4013      	ands	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0203 	and.w	r2, r3, #3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d00b      	beq.n	800360c <HAL_GPIO_Init+0xd4>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d007      	beq.n	800360c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003600:	2b11      	cmp	r3, #17
 8003602:	d003      	beq.n	800360c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b12      	cmp	r3, #18
 800360a:	d130      	bne.n	800366e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	2203      	movs	r2, #3
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003642:	2201      	movs	r2, #1
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f003 0201 	and.w	r2, r3, #1
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	2203      	movs	r2, #3
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43db      	mvns	r3, r3
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4013      	ands	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80a6 	beq.w	80037f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ac:	4b5b      	ldr	r3, [pc, #364]	; (800381c <HAL_GPIO_Init+0x2e4>)
 80036ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b0:	4a5a      	ldr	r2, [pc, #360]	; (800381c <HAL_GPIO_Init+0x2e4>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6613      	str	r3, [r2, #96]	; 0x60
 80036b8:	4b58      	ldr	r3, [pc, #352]	; (800381c <HAL_GPIO_Init+0x2e4>)
 80036ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036c4:	4a56      	ldr	r2, [pc, #344]	; (8003820 <HAL_GPIO_Init+0x2e8>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	3302      	adds	r3, #2
 80036cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	220f      	movs	r2, #15
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036ee:	d01f      	beq.n	8003730 <HAL_GPIO_Init+0x1f8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a4c      	ldr	r2, [pc, #304]	; (8003824 <HAL_GPIO_Init+0x2ec>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d019      	beq.n	800372c <HAL_GPIO_Init+0x1f4>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a4b      	ldr	r2, [pc, #300]	; (8003828 <HAL_GPIO_Init+0x2f0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d013      	beq.n	8003728 <HAL_GPIO_Init+0x1f0>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a4a      	ldr	r2, [pc, #296]	; (800382c <HAL_GPIO_Init+0x2f4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00d      	beq.n	8003724 <HAL_GPIO_Init+0x1ec>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a49      	ldr	r2, [pc, #292]	; (8003830 <HAL_GPIO_Init+0x2f8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d007      	beq.n	8003720 <HAL_GPIO_Init+0x1e8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a48      	ldr	r2, [pc, #288]	; (8003834 <HAL_GPIO_Init+0x2fc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d101      	bne.n	800371c <HAL_GPIO_Init+0x1e4>
 8003718:	2305      	movs	r3, #5
 800371a:	e00a      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 800371c:	2306      	movs	r3, #6
 800371e:	e008      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003720:	2304      	movs	r3, #4
 8003722:	e006      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003724:	2303      	movs	r3, #3
 8003726:	e004      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003728:	2302      	movs	r3, #2
 800372a:	e002      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003730:	2300      	movs	r3, #0
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	f002 0203 	and.w	r2, r2, #3
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	4093      	lsls	r3, r2
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003742:	4937      	ldr	r1, [pc, #220]	; (8003820 <HAL_GPIO_Init+0x2e8>)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3302      	adds	r3, #2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003750:	4b39      	ldr	r3, [pc, #228]	; (8003838 <HAL_GPIO_Init+0x300>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003774:	4a30      	ldr	r2, [pc, #192]	; (8003838 <HAL_GPIO_Init+0x300>)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800377a:	4b2f      	ldr	r3, [pc, #188]	; (8003838 <HAL_GPIO_Init+0x300>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43db      	mvns	r3, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800379e:	4a26      	ldr	r2, [pc, #152]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037a4:	4b24      	ldr	r3, [pc, #144]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037ce:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037f2:	4a11      	ldr	r2, [pc, #68]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3301      	adds	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	f47f ae9d 	bne.w	8003548 <HAL_GPIO_Init+0x10>
  }
}
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000
 8003820:	40010000 	.word	0x40010000
 8003824:	48000400 	.word	0x48000400
 8003828:	48000800 	.word	0x48000800
 800382c:	48000c00 	.word	0x48000c00
 8003830:	48001000 	.word	0x48001000
 8003834:	48001400 	.word	0x48001400
 8003838:	40010400 	.word	0x40010400

0800383c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	887b      	ldrh	r3, [r7, #2]
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	e001      	b.n	800385e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800385e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
 8003878:	4613      	mov	r3, r2
 800387a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800387c:	787b      	ldrb	r3, [r7, #1]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003882:	887a      	ldrh	r2, [r7, #2]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003888:	e002      	b.n	8003890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695a      	ldr	r2, [r3, #20]
 80038ac:	887b      	ldrh	r3, [r7, #2]
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038b4:	887a      	ldrh	r2, [r7, #2]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80038ba:	e002      	b.n	80038c2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038bc:	887a      	ldrh	r2, [r7, #2]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	619a      	str	r2, [r3, #24]
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d141      	bne.n	8003962 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038de:	4b4b      	ldr	r3, [pc, #300]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ea:	d131      	bne.n	8003950 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038ec:	4b47      	ldr	r3, [pc, #284]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038f2:	4a46      	ldr	r2, [pc, #280]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038fc:	4b43      	ldr	r3, [pc, #268]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003904:	4a41      	ldr	r2, [pc, #260]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800390a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800390c:	4b40      	ldr	r3, [pc, #256]	; (8003a10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2232      	movs	r2, #50	; 0x32
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	4a3f      	ldr	r2, [pc, #252]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003918:	fba2 2303 	umull	r2, r3, r2, r3
 800391c:	0c9b      	lsrs	r3, r3, #18
 800391e:	3301      	adds	r3, #1
 8003920:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003922:	e002      	b.n	800392a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	3b01      	subs	r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800392a:	4b38      	ldr	r3, [pc, #224]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003936:	d102      	bne.n	800393e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f2      	bne.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800393e:	4b33      	ldr	r3, [pc, #204]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394a:	d158      	bne.n	80039fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e057      	b.n	8003a00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003950:	4b2e      	ldr	r3, [pc, #184]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003956:	4a2d      	ldr	r2, [pc, #180]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800395c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003960:	e04d      	b.n	80039fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003968:	d141      	bne.n	80039ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800396a:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003976:	d131      	bne.n	80039dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003978:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800397a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800397e:	4a23      	ldr	r2, [pc, #140]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003984:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003988:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003990:	4a1e      	ldr	r2, [pc, #120]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003996:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003998:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2232      	movs	r2, #50	; 0x32
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	0c9b      	lsrs	r3, r3, #18
 80039aa:	3301      	adds	r3, #1
 80039ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ae:	e002      	b.n	80039b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039b6:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c2:	d102      	bne.n	80039ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f2      	bne.n	80039b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039ca:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d6:	d112      	bne.n	80039fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e011      	b.n	8003a00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039e2:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039ec:	e007      	b.n	80039fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039ee:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039f6:	4a05      	ldr	r2, [pc, #20]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	40007000 	.word	0x40007000
 8003a10:	20000060 	.word	0x20000060
 8003a14:	431bde83 	.word	0x431bde83

08003a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e308      	b.n	800403c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d075      	beq.n	8003b22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a36:	4ba3      	ldr	r3, [pc, #652]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a40:	4ba0      	ldr	r3, [pc, #640]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b0c      	cmp	r3, #12
 8003a4e:	d102      	bne.n	8003a56 <HAL_RCC_OscConfig+0x3e>
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d002      	beq.n	8003a5c <HAL_RCC_OscConfig+0x44>
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d10b      	bne.n	8003a74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	4b99      	ldr	r3, [pc, #612]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d05b      	beq.n	8003b20 <HAL_RCC_OscConfig+0x108>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d157      	bne.n	8003b20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e2e3      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7c:	d106      	bne.n	8003a8c <HAL_RCC_OscConfig+0x74>
 8003a7e:	4b91      	ldr	r3, [pc, #580]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a90      	ldr	r2, [pc, #576]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	e01d      	b.n	8003ac8 <HAL_RCC_OscConfig+0xb0>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x98>
 8003a96:	4b8b      	ldr	r3, [pc, #556]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a8a      	ldr	r2, [pc, #552]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	4b88      	ldr	r3, [pc, #544]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a87      	ldr	r2, [pc, #540]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e00b      	b.n	8003ac8 <HAL_RCC_OscConfig+0xb0>
 8003ab0:	4b84      	ldr	r3, [pc, #528]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a83      	ldr	r2, [pc, #524]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b81      	ldr	r3, [pc, #516]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a80      	ldr	r2, [pc, #512]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d013      	beq.n	8003af8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fc fc06 	bl	80002e0 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fc fc02 	bl	80002e0 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e2a8      	b.n	800403c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aea:	4b76      	ldr	r3, [pc, #472]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xc0>
 8003af6:	e014      	b.n	8003b22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af8:	f7fc fbf2 	bl	80002e0 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b00:	f7fc fbee 	bl	80002e0 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e294      	b.n	800403c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b12:	4b6c      	ldr	r3, [pc, #432]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0xe8>
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d075      	beq.n	8003c1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b2e:	4b65      	ldr	r3, [pc, #404]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b38:	4b62      	ldr	r3, [pc, #392]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b0c      	cmp	r3, #12
 8003b46:	d102      	bne.n	8003b4e <HAL_RCC_OscConfig+0x136>
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d002      	beq.n	8003b54 <HAL_RCC_OscConfig+0x13c>
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d11f      	bne.n	8003b94 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b54:	4b5b      	ldr	r3, [pc, #364]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_OscConfig+0x154>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e267      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6c:	4b55      	ldr	r3, [pc, #340]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	061b      	lsls	r3, r3, #24
 8003b7a:	4952      	ldr	r1, [pc, #328]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b80:	4b51      	ldr	r3, [pc, #324]	; (8003cc8 <HAL_RCC_OscConfig+0x2b0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fc fb5f 	bl	8000248 <HAL_InitTick>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d043      	beq.n	8003c18 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e253      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d023      	beq.n	8003be4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b9c:	4b49      	ldr	r3, [pc, #292]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a48      	ldr	r2, [pc, #288]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba8:	f7fc fb9a 	bl	80002e0 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb0:	f7fc fb96 	bl	80002e0 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e23c      	b.n	800403c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc2:	4b40      	ldr	r3, [pc, #256]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bce:	4b3d      	ldr	r3, [pc, #244]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	061b      	lsls	r3, r3, #24
 8003bdc:	4939      	ldr	r1, [pc, #228]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	604b      	str	r3, [r1, #4]
 8003be2:	e01a      	b.n	8003c1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003be4:	4b37      	ldr	r3, [pc, #220]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a36      	ldr	r2, [pc, #216]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fc fb76 	bl	80002e0 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf8:	f7fc fb72 	bl	80002e0 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e218      	b.n	800403c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c0a:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x1e0>
 8003c16:	e000      	b.n	8003c1a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d03c      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01c      	beq.n	8003c68 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c2e:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c34:	4a23      	ldr	r2, [pc, #140]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3e:	f7fc fb4f 	bl	80002e0 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c46:	f7fc fb4b 	bl	80002e0 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e1f1      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c58:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0ef      	beq.n	8003c46 <HAL_RCC_OscConfig+0x22e>
 8003c66:	e01b      	b.n	8003ca0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c68:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c6e:	4a15      	ldr	r2, [pc, #84]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fc fb32 	bl	80002e0 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c80:	f7fc fb2e 	bl	80002e0 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e1d4      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1ef      	bne.n	8003c80 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80ab 	beq.w	8003e04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cb2:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_RCC_OscConfig+0x2b4>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e005      	b.n	8003cce <HAL_RCC_OscConfig+0x2b6>
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	20000000 	.word	0x20000000
 8003ccc:	2300      	movs	r3, #0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00d      	beq.n	8003cee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd2:	4baf      	ldr	r3, [pc, #700]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	4aae      	ldr	r2, [pc, #696]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8003cde:	4bac      	ldr	r3, [pc, #688]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cea:	2301      	movs	r3, #1
 8003cec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cee:	4ba9      	ldr	r3, [pc, #676]	; (8003f94 <HAL_RCC_OscConfig+0x57c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d118      	bne.n	8003d2c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cfa:	4ba6      	ldr	r3, [pc, #664]	; (8003f94 <HAL_RCC_OscConfig+0x57c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4aa5      	ldr	r2, [pc, #660]	; (8003f94 <HAL_RCC_OscConfig+0x57c>)
 8003d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d06:	f7fc faeb 	bl	80002e0 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0e:	f7fc fae7 	bl	80002e0 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e18d      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d20:	4b9c      	ldr	r3, [pc, #624]	; (8003f94 <HAL_RCC_OscConfig+0x57c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d108      	bne.n	8003d46 <HAL_RCC_OscConfig+0x32e>
 8003d34:	4b96      	ldr	r3, [pc, #600]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	4a95      	ldr	r2, [pc, #596]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d44:	e024      	b.n	8003d90 <HAL_RCC_OscConfig+0x378>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b05      	cmp	r3, #5
 8003d4c:	d110      	bne.n	8003d70 <HAL_RCC_OscConfig+0x358>
 8003d4e:	4b90      	ldr	r3, [pc, #576]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d54:	4a8e      	ldr	r2, [pc, #568]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d56:	f043 0304 	orr.w	r3, r3, #4
 8003d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d5e:	4b8c      	ldr	r3, [pc, #560]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	4a8a      	ldr	r2, [pc, #552]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d6e:	e00f      	b.n	8003d90 <HAL_RCC_OscConfig+0x378>
 8003d70:	4b87      	ldr	r3, [pc, #540]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	4a86      	ldr	r2, [pc, #536]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d80:	4b83      	ldr	r3, [pc, #524]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	4a82      	ldr	r2, [pc, #520]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d88:	f023 0304 	bic.w	r3, r3, #4
 8003d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d016      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d98:	f7fc faa2 	bl	80002e0 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d9e:	e00a      	b.n	8003db6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da0:	f7fc fa9e 	bl	80002e0 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e142      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db6:	4b76      	ldr	r3, [pc, #472]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0ed      	beq.n	8003da0 <HAL_RCC_OscConfig+0x388>
 8003dc4:	e015      	b.n	8003df2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc6:	f7fc fa8b 	bl	80002e0 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fc fa87 	bl	80002e0 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e12b      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003de4:	4b6a      	ldr	r3, [pc, #424]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1ed      	bne.n	8003dce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003df2:	7ffb      	ldrb	r3, [r7, #31]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df8:	4b65      	ldr	r3, [pc, #404]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	4a64      	ldr	r2, [pc, #400]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d03c      	beq.n	8003e8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01c      	beq.n	8003e52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e18:	4b5d      	ldr	r3, [pc, #372]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e1e:	4a5c      	ldr	r2, [pc, #368]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fc fa5a 	bl	80002e0 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e30:	f7fc fa56 	bl	80002e0 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e0fc      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e42:	4b53      	ldr	r3, [pc, #332]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ef      	beq.n	8003e30 <HAL_RCC_OscConfig+0x418>
 8003e50:	e01b      	b.n	8003e8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e52:	4b4f      	ldr	r3, [pc, #316]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e58:	4a4d      	ldr	r2, [pc, #308]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003e5a:	f023 0301 	bic.w	r3, r3, #1
 8003e5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e62:	f7fc fa3d 	bl	80002e0 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e6a:	f7fc fa39 	bl	80002e0 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e0df      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e7c:	4b44      	ldr	r3, [pc, #272]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1ef      	bne.n	8003e6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 80d3 	beq.w	800403a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e94:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	f000 808d 	beq.w	8003fbc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d15a      	bne.n	8003f60 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eaa:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a38      	ldr	r2, [pc, #224]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003eb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fc fa13 	bl	80002e0 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebe:	f7fc fa0f 	bl	80002e0 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e0b5      	b.n	800403c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed0:	4b2f      	ldr	r3, [pc, #188]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f0      	bne.n	8003ebe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003edc:	4b2c      	ldr	r3, [pc, #176]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	4b2d      	ldr	r3, [pc, #180]	; (8003f98 <HAL_RCC_OscConfig+0x580>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6a11      	ldr	r1, [r2, #32]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eec:	3a01      	subs	r2, #1
 8003eee:	0112      	lsls	r2, r2, #4
 8003ef0:	4311      	orrs	r1, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ef6:	0212      	lsls	r2, r2, #8
 8003ef8:	4311      	orrs	r1, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003efe:	0852      	lsrs	r2, r2, #1
 8003f00:	3a01      	subs	r2, #1
 8003f02:	0552      	lsls	r2, r2, #21
 8003f04:	4311      	orrs	r1, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f0a:	0852      	lsrs	r2, r2, #1
 8003f0c:	3a01      	subs	r2, #1
 8003f0e:	0652      	lsls	r2, r2, #25
 8003f10:	4311      	orrs	r1, r2
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f16:	06d2      	lsls	r2, r2, #27
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	491d      	ldr	r1, [pc, #116]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1a      	ldr	r2, [pc, #104]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f2a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f2c:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4a17      	ldr	r2, [pc, #92]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fc f9d2 	bl	80002e0 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fc f9ce 	bl	80002e0 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e074      	b.n	800403c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f52:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0x528>
 8003f5e:	e06c      	b.n	800403a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f6c:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a07      	ldr	r2, [pc, #28]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f72:	f023 0303 	bic.w	r3, r3, #3
 8003f76:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f7e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fc f9aa 	bl	80002e0 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8e:	e00e      	b.n	8003fae <HAL_RCC_OscConfig+0x596>
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40007000 	.word	0x40007000
 8003f98:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fc f9a0 	bl	80002e0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e046      	b.n	800403c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fae:	4b25      	ldr	r3, [pc, #148]	; (8004044 <HAL_RCC_OscConfig+0x62c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x584>
 8003fba:	e03e      	b.n	800403a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e039      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <HAL_RCC_OscConfig+0x62c>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f003 0203 	and.w	r2, r3, #3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d12c      	bne.n	8004036 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d123      	bne.n	8004036 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d11b      	bne.n	8004036 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d113      	bne.n	8004036 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	3b01      	subs	r3, #1
 800401c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800401e:	429a      	cmp	r2, r3
 8004020:	d109      	bne.n	8004036 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402c:	085b      	lsrs	r3, r3, #1
 800402e:	3b01      	subs	r3, #1
 8004030:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d001      	beq.n	800403a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000

08004048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e11e      	b.n	800429e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004060:	4b91      	ldr	r3, [pc, #580]	; (80042a8 <HAL_RCC_ClockConfig+0x260>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 030f 	and.w	r3, r3, #15
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d910      	bls.n	8004090 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	4b8e      	ldr	r3, [pc, #568]	; (80042a8 <HAL_RCC_ClockConfig+0x260>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 020f 	bic.w	r2, r3, #15
 8004076:	498c      	ldr	r1, [pc, #560]	; (80042a8 <HAL_RCC_ClockConfig+0x260>)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407e:	4b8a      	ldr	r3, [pc, #552]	; (80042a8 <HAL_RCC_ClockConfig+0x260>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d001      	beq.n	8004090 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e106      	b.n	800429e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d073      	beq.n	8004184 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d129      	bne.n	80040f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a4:	4b81      	ldr	r3, [pc, #516]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0f4      	b.n	800429e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80040b4:	f000 f970 	bl	8004398 <RCC_GetSysClockFreqFromPLLSource>
 80040b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4a7c      	ldr	r2, [pc, #496]	; (80042b0 <HAL_RCC_ClockConfig+0x268>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d93f      	bls.n	8004142 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040c2:	4b7a      	ldr	r3, [pc, #488]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d009      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d033      	beq.n	8004142 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d12f      	bne.n	8004142 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040e2:	4b72      	ldr	r3, [pc, #456]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ea:	4a70      	ldr	r2, [pc, #448]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80040ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80040f2:	2380      	movs	r3, #128	; 0x80
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	e024      	b.n	8004142 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d107      	bne.n	8004110 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004100:	4b6a      	ldr	r3, [pc, #424]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d109      	bne.n	8004120 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0c6      	b.n	800429e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004110:	4b66      	ldr	r3, [pc, #408]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0be      	b.n	800429e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004120:	f000 f8ce 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 8004124:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4a61      	ldr	r2, [pc, #388]	; (80042b0 <HAL_RCC_ClockConfig+0x268>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d909      	bls.n	8004142 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800412e:	4b5f      	ldr	r3, [pc, #380]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004136:	4a5d      	ldr	r2, [pc, #372]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800413c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004142:	4b5a      	ldr	r3, [pc, #360]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4957      	ldr	r1, [pc, #348]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004150:	4313      	orrs	r3, r2
 8004152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004154:	f7fc f8c4 	bl	80002e0 <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	e00a      	b.n	8004172 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415c:	f7fc f8c0 	bl	80002e0 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e095      	b.n	800429e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	4b4e      	ldr	r3, [pc, #312]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 020c 	and.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	429a      	cmp	r2, r3
 8004182:	d1eb      	bne.n	800415c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d023      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800419c:	4b43      	ldr	r3, [pc, #268]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4a42      	ldr	r2, [pc, #264]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80041a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80041b4:	4b3d      	ldr	r3, [pc, #244]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80041bc:	4a3b      	ldr	r2, [pc, #236]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80041be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c4:	4b39      	ldr	r3, [pc, #228]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	4936      	ldr	r1, [pc, #216]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
 80041d6:	e008      	b.n	80041ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2b80      	cmp	r3, #128	; 0x80
 80041dc:	d105      	bne.n	80041ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80041de:	4b33      	ldr	r3, [pc, #204]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	4a32      	ldr	r2, [pc, #200]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80041e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041ea:	4b2f      	ldr	r3, [pc, #188]	; (80042a8 <HAL_RCC_ClockConfig+0x260>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d21d      	bcs.n	8004234 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f8:	4b2b      	ldr	r3, [pc, #172]	; (80042a8 <HAL_RCC_ClockConfig+0x260>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f023 020f 	bic.w	r2, r3, #15
 8004200:	4929      	ldr	r1, [pc, #164]	; (80042a8 <HAL_RCC_ClockConfig+0x260>)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	4313      	orrs	r3, r2
 8004206:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004208:	f7fc f86a 	bl	80002e0 <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	e00a      	b.n	8004226 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004210:	f7fc f866 	bl	80002e0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	; 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e03b      	b.n	800429e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	4b20      	ldr	r3, [pc, #128]	; (80042a8 <HAL_RCC_ClockConfig+0x260>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d1ed      	bne.n	8004210 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004240:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4917      	ldr	r1, [pc, #92]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800425e:	4b13      	ldr	r3, [pc, #76]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	490f      	ldr	r1, [pc, #60]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004272:	f000 f825 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 8004276:	4601      	mov	r1, r0
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	4a0c      	ldr	r2, [pc, #48]	; (80042b4 <HAL_RCC_ClockConfig+0x26c>)
 8004284:	5cd3      	ldrb	r3, [r2, r3]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	fa21 f303 	lsr.w	r3, r1, r3
 800428e:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <HAL_RCC_ClockConfig+0x270>)
 8004290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <HAL_RCC_ClockConfig+0x274>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fb ffd6 	bl	8000248 <HAL_InitTick>
 800429c:	4603      	mov	r3, r0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40022000 	.word	0x40022000
 80042ac:	40021000 	.word	0x40021000
 80042b0:	04c4b400 	.word	0x04c4b400
 80042b4:	0800a830 	.word	0x0800a830
 80042b8:	20000060 	.word	0x20000060
 80042bc:	20000000 	.word	0x20000000

080042c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80042c6:	4b2c      	ldr	r3, [pc, #176]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d102      	bne.n	80042d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042d2:	4b2a      	ldr	r3, [pc, #168]	; (800437c <HAL_RCC_GetSysClockFreq+0xbc>)
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	e047      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80042d8:	4b27      	ldr	r3, [pc, #156]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 030c 	and.w	r3, r3, #12
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d102      	bne.n	80042ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042e4:	4b25      	ldr	r3, [pc, #148]	; (800437c <HAL_RCC_GetSysClockFreq+0xbc>)
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	e03e      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80042ea:	4b23      	ldr	r3, [pc, #140]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b0c      	cmp	r3, #12
 80042f4:	d136      	bne.n	8004364 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042f6:	4b20      	ldr	r3, [pc, #128]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004300:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	3301      	adds	r3, #1
 800430c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d10c      	bne.n	800432e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004314:	4a19      	ldr	r2, [pc, #100]	; (800437c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	fbb2 f3f3 	udiv	r3, r2, r3
 800431c:	4a16      	ldr	r2, [pc, #88]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800431e:	68d2      	ldr	r2, [r2, #12]
 8004320:	0a12      	lsrs	r2, r2, #8
 8004322:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	617b      	str	r3, [r7, #20]
      break;
 800432c:	e00c      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800432e:	4a13      	ldr	r2, [pc, #76]	; (800437c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	4a10      	ldr	r2, [pc, #64]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004338:	68d2      	ldr	r2, [r2, #12]
 800433a:	0a12      	lsrs	r2, r2, #8
 800433c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004340:	fb02 f303 	mul.w	r3, r2, r3
 8004344:	617b      	str	r3, [r7, #20]
      break;
 8004346:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	0e5b      	lsrs	r3, r3, #25
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	3301      	adds	r3, #1
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	e001      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004368:	693b      	ldr	r3, [r7, #16]
}
 800436a:	4618      	mov	r0, r3
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000
 800437c:	00f42400 	.word	0x00f42400

08004380 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004384:	4b03      	ldr	r3, [pc, #12]	; (8004394 <HAL_RCC_GetHCLKFreq+0x14>)
 8004386:	681b      	ldr	r3, [r3, #0]
}
 8004388:	4618      	mov	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	20000060 	.word	0x20000060

08004398 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800439e:	4b1e      	ldr	r3, [pc, #120]	; (8004418 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043a8:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	091b      	lsrs	r3, r3, #4
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	3301      	adds	r3, #1
 80043b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d10c      	bne.n	80043d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043bc:	4a17      	ldr	r2, [pc, #92]	; (800441c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c4:	4a14      	ldr	r2, [pc, #80]	; (8004418 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043c6:	68d2      	ldr	r2, [r2, #12]
 80043c8:	0a12      	lsrs	r2, r2, #8
 80043ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	617b      	str	r3, [r7, #20]
    break;
 80043d4:	e00c      	b.n	80043f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043d6:	4a11      	ldr	r2, [pc, #68]	; (800441c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	fbb2 f3f3 	udiv	r3, r2, r3
 80043de:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043e0:	68d2      	ldr	r2, [r2, #12]
 80043e2:	0a12      	lsrs	r2, r2, #8
 80043e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043e8:	fb02 f303 	mul.w	r3, r2, r3
 80043ec:	617b      	str	r3, [r7, #20]
    break;
 80043ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	0e5b      	lsrs	r3, r3, #25
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	3301      	adds	r3, #1
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	fbb2 f3f3 	udiv	r3, r2, r3
 8004408:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800440a:	687b      	ldr	r3, [r7, #4]
}
 800440c:	4618      	mov	r0, r3
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	40021000 	.word	0x40021000
 800441c:	00f42400 	.word	0x00f42400

08004420 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004428:	2300      	movs	r3, #0
 800442a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800442c:	2300      	movs	r3, #0
 800442e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8098 	beq.w	800456e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800443e:	2300      	movs	r3, #0
 8004440:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004442:	4b43      	ldr	r3, [pc, #268]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10d      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800444e:	4b40      	ldr	r3, [pc, #256]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	4a3f      	ldr	r2, [pc, #252]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004458:	6593      	str	r3, [r2, #88]	; 0x58
 800445a:	4b3d      	ldr	r3, [pc, #244]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	60bb      	str	r3, [r7, #8]
 8004464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004466:	2301      	movs	r3, #1
 8004468:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800446a:	4b3a      	ldr	r3, [pc, #232]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a39      	ldr	r2, [pc, #228]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004474:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004476:	f7fb ff33 	bl	80002e0 <HAL_GetTick>
 800447a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800447c:	e009      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447e:	f7fb ff2f 	bl	80002e0 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d902      	bls.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	74fb      	strb	r3, [r7, #19]
        break;
 8004490:	e005      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004492:	4b30      	ldr	r3, [pc, #192]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0ef      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800449e:	7cfb      	ldrb	r3, [r7, #19]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d159      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044a4:	4b2a      	ldr	r3, [pc, #168]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01e      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d019      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044c0:	4b23      	ldr	r3, [pc, #140]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044cc:	4b20      	ldr	r3, [pc, #128]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	4a1f      	ldr	r2, [pc, #124]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044dc:	4b1c      	ldr	r3, [pc, #112]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	4a1b      	ldr	r2, [pc, #108]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044ec:	4a18      	ldr	r2, [pc, #96]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d016      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7fb feef 	bl	80002e0 <HAL_GetTick>
 8004502:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004504:	e00b      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004506:	f7fb feeb 	bl	80002e0 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f241 3288 	movw	r2, #5000	; 0x1388
 8004514:	4293      	cmp	r3, r2
 8004516:	d902      	bls.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	74fb      	strb	r3, [r7, #19]
            break;
 800451c:	e006      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451e:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0ec      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800452c:	7cfb      	ldrb	r3, [r7, #19]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10b      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004532:	4b07      	ldr	r3, [pc, #28]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	4903      	ldr	r1, [pc, #12]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004548:	e008      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800454a:	7cfb      	ldrb	r3, [r7, #19]
 800454c:	74bb      	strb	r3, [r7, #18]
 800454e:	e005      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004550:	40021000 	.word	0x40021000
 8004554:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004558:	7cfb      	ldrb	r3, [r7, #19]
 800455a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800455c:	7c7b      	ldrb	r3, [r7, #17]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d105      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004562:	4ba6      	ldr	r3, [pc, #664]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	4aa5      	ldr	r2, [pc, #660]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800456c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800457a:	4ba0      	ldr	r3, [pc, #640]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f023 0203 	bic.w	r2, r3, #3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	499c      	ldr	r1, [pc, #624]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800459c:	4b97      	ldr	r3, [pc, #604]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	f023 020c 	bic.w	r2, r3, #12
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	4994      	ldr	r1, [pc, #592]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045be:	4b8f      	ldr	r3, [pc, #572]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	498b      	ldr	r1, [pc, #556]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045e0:	4b86      	ldr	r3, [pc, #536]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	4983      	ldr	r1, [pc, #524]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004602:	4b7e      	ldr	r3, [pc, #504]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	497a      	ldr	r1, [pc, #488]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004624:	4b75      	ldr	r3, [pc, #468]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	4972      	ldr	r1, [pc, #456]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004646:	4b6d      	ldr	r3, [pc, #436]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	4969      	ldr	r1, [pc, #420]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004668:	4b64      	ldr	r3, [pc, #400]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	4961      	ldr	r1, [pc, #388]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800468a:	4b5c      	ldr	r3, [pc, #368]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	4958      	ldr	r1, [pc, #352]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d015      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046ac:	4b53      	ldr	r3, [pc, #332]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	4950      	ldr	r1, [pc, #320]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ca:	d105      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046cc:	4b4b      	ldr	r3, [pc, #300]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4a4a      	ldr	r2, [pc, #296]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d015      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046e4:	4b45      	ldr	r3, [pc, #276]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	4942      	ldr	r1, [pc, #264]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004702:	d105      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004704:	4b3d      	ldr	r3, [pc, #244]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4a3c      	ldr	r2, [pc, #240]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800470a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800470e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d015      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800471c:	4b37      	ldr	r3, [pc, #220]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	4934      	ldr	r1, [pc, #208]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800473a:	d105      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800473c:	4b2f      	ldr	r3, [pc, #188]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4a2e      	ldr	r2, [pc, #184]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004746:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d015      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004754:	4b29      	ldr	r3, [pc, #164]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	4926      	ldr	r1, [pc, #152]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004772:	d105      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004774:	4b21      	ldr	r3, [pc, #132]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4a20      	ldr	r2, [pc, #128]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800477a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800477e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d015      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800478c:	4b1b      	ldr	r3, [pc, #108]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	4918      	ldr	r1, [pc, #96]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047aa:	d105      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ac:	4b13      	ldr	r3, [pc, #76]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4a12      	ldr	r2, [pc, #72]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d015      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047c4:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d2:	490a      	ldr	r1, [pc, #40]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047e2:	d105      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4a04      	ldr	r2, [pc, #16]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80047f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40021000 	.word	0x40021000

08004800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e01d      	b.n	800484e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f005 fbc6 	bl	8009fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3304      	adds	r3, #4
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f000 fd5c 	bl	80052fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <HAL_TIM_Base_Start_IT+0x50>)
 8004878:	4013      	ands	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b06      	cmp	r3, #6
 8004880:	d00b      	beq.n	800489a <HAL_TIM_Base_Start_IT+0x42>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004888:	d007      	beq.n	800489a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0201 	orr.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	00010007 	.word	0x00010007

080048ac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0201 	bic.w	r2, r2, #1
 80048c2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6a1a      	ldr	r2, [r3, #32]
 80048ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10f      	bne.n	80048f4 <HAL_TIM_Base_Stop_IT+0x48>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6a1a      	ldr	r2, [r3, #32]
 80048da:	f244 4344 	movw	r3, #17476	; 0x4444
 80048de:	4013      	ands	r3, r2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d107      	bne.n	80048f4 <HAL_TIM_Base_Stop_IT+0x48>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0201 	bic.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e01d      	b.n	8004950 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f005 fcd9 	bl	800a2e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3304      	adds	r3, #4
 800493e:	4619      	mov	r1, r3
 8004940:	4610      	mov	r0, r2
 8004942:	f000 fcdb 	bl	80052fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2201      	movs	r2, #1
 8004968:	6839      	ldr	r1, [r7, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f001 fa99 	bl	8005ea2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1e      	ldr	r2, [pc, #120]	; (80049f0 <HAL_TIM_PWM_Start+0x98>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <HAL_TIM_PWM_Start+0x4a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1d      	ldr	r2, [pc, #116]	; (80049f4 <HAL_TIM_PWM_Start+0x9c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <HAL_TIM_PWM_Start+0x4a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1b      	ldr	r2, [pc, #108]	; (80049f8 <HAL_TIM_PWM_Start+0xa0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_TIM_PWM_Start+0x4a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1a      	ldr	r2, [pc, #104]	; (80049fc <HAL_TIM_PWM_Start+0xa4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_TIM_PWM_Start+0x4a>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a18      	ldr	r2, [pc, #96]	; (8004a00 <HAL_TIM_PWM_Start+0xa8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d101      	bne.n	80049a6 <HAL_TIM_PWM_Start+0x4e>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <HAL_TIM_PWM_Start+0x50>
 80049a6:	2300      	movs	r3, #0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d007      	beq.n	80049bc <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <HAL_TIM_PWM_Start+0xac>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b06      	cmp	r3, #6
 80049cc:	d00b      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x8e>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d4:	d007      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0201 	orr.w	r2, r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40013400 	.word	0x40013400
 80049f8:	40014000 	.word	0x40014000
 80049fc:	40014400 	.word	0x40014400
 8004a00:	40014800 	.word	0x40014800
 8004a04:	00010007 	.word	0x00010007

08004a08 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2200      	movs	r2, #0
 8004a18:	6839      	ldr	r1, [r7, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f001 fa41 	bl	8005ea2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a2a      	ldr	r2, [pc, #168]	; (8004ad0 <HAL_TIM_PWM_Stop+0xc8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d013      	beq.n	8004a52 <HAL_TIM_PWM_Stop+0x4a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a29      	ldr	r2, [pc, #164]	; (8004ad4 <HAL_TIM_PWM_Stop+0xcc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00e      	beq.n	8004a52 <HAL_TIM_PWM_Stop+0x4a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a27      	ldr	r2, [pc, #156]	; (8004ad8 <HAL_TIM_PWM_Stop+0xd0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d009      	beq.n	8004a52 <HAL_TIM_PWM_Stop+0x4a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a26      	ldr	r2, [pc, #152]	; (8004adc <HAL_TIM_PWM_Stop+0xd4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d004      	beq.n	8004a52 <HAL_TIM_PWM_Stop+0x4a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a24      	ldr	r2, [pc, #144]	; (8004ae0 <HAL_TIM_PWM_Stop+0xd8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d101      	bne.n	8004a56 <HAL_TIM_PWM_Stop+0x4e>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <HAL_TIM_PWM_Stop+0x50>
 8004a56:	2300      	movs	r3, #0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d017      	beq.n	8004a8c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6a1a      	ldr	r2, [r3, #32]
 8004a62:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a66:	4013      	ands	r3, r2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10f      	bne.n	8004a8c <HAL_TIM_PWM_Stop+0x84>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6a1a      	ldr	r2, [r3, #32]
 8004a72:	f244 4344 	movw	r3, #17476	; 0x4444
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d107      	bne.n	8004a8c <HAL_TIM_PWM_Stop+0x84>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6a1a      	ldr	r2, [r3, #32]
 8004a92:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10f      	bne.n	8004abc <HAL_TIM_PWM_Stop+0xb4>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6a1a      	ldr	r2, [r3, #32]
 8004aa2:	f244 4344 	movw	r3, #17476	; 0x4444
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d107      	bne.n	8004abc <HAL_TIM_PWM_Stop+0xb4>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40012c00 	.word	0x40012c00
 8004ad4:	40013400 	.word	0x40013400
 8004ad8:	40014000 	.word	0x40014000
 8004adc:	40014400 	.word	0x40014400
 8004ae0:	40014800 	.word	0x40014800

08004ae4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e01d      	b.n	8004b32 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f005 fc42 	bl	800a394 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4619      	mov	r1, r3
 8004b22:	4610      	mov	r0, r2
 8004b24:	f000 fbea 	bl	80052fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d122      	bne.n	8004b96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d11b      	bne.n	8004b96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f06f 0202 	mvn.w	r2, #2
 8004b66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fb9f 	bl	80052c0 <HAL_TIM_IC_CaptureCallback>
 8004b82:	e005      	b.n	8004b90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fb91 	bl	80052ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fba2 	bl	80052d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d122      	bne.n	8004bea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d11b      	bne.n	8004bea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f06f 0204 	mvn.w	r2, #4
 8004bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fb75 	bl	80052c0 <HAL_TIM_IC_CaptureCallback>
 8004bd6:	e005      	b.n	8004be4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fb67 	bl	80052ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fb78 	bl	80052d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d122      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d11b      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f06f 0208 	mvn.w	r2, #8
 8004c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2204      	movs	r2, #4
 8004c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fb4b 	bl	80052c0 <HAL_TIM_IC_CaptureCallback>
 8004c2a:	e005      	b.n	8004c38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fb3d 	bl	80052ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fb4e 	bl	80052d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d122      	bne.n	8004c92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	d11b      	bne.n	8004c92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f06f 0210 	mvn.w	r2, #16
 8004c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2208      	movs	r2, #8
 8004c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fb21 	bl	80052c0 <HAL_TIM_IC_CaptureCallback>
 8004c7e:	e005      	b.n	8004c8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fb13 	bl	80052ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fb24 	bl	80052d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d10e      	bne.n	8004cbe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d107      	bne.n	8004cbe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f06f 0201 	mvn.w	r2, #1
 8004cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f002 fe8f 	bl	80079dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc8:	2b80      	cmp	r3, #128	; 0x80
 8004cca:	d10e      	bne.n	8004cea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd6:	2b80      	cmp	r3, #128	; 0x80
 8004cd8:	d107      	bne.n	8004cea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f001 fa09 	bl	80060fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf8:	d10e      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d107      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f001 f9fc 	bl	8006110 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d10e      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d107      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fad2 	bl	80052e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	d10e      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d107      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0220 	mvn.w	r2, #32
 8004d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f001 f9bc 	bl	80060e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d7e:	d10f      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d8e:	d107      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f001 f9c2 	bl	8006124 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004daa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dae:	d10f      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dbe:	d107      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f001 f9b4 	bl	8006138 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dde:	d10f      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dee:	d107      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f001 f9a6 	bl	800614c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e0e:	d10f      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e1e:	d107      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f001 f998 	bl	8006160 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e08a      	b.n	8004f68 <HAL_TIM_IC_ConfigChannel+0x130>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d11b      	bne.n	8004ea0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	6819      	ldr	r1, [r3, #0]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f000 fe76 	bl	8005b68 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 020c 	bic.w	r2, r2, #12
 8004e8a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6999      	ldr	r1, [r3, #24]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	619a      	str	r2, [r3, #24]
 8004e9e:	e05a      	b.n	8004f56 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d11c      	bne.n	8004ee0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	6819      	ldr	r1, [r3, #0]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f000 feee 	bl	8005c96 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ec8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6999      	ldr	r1, [r3, #24]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	021a      	lsls	r2, r3, #8
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	619a      	str	r2, [r3, #24]
 8004ede:	e03a      	b.n	8004f56 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	d11b      	bne.n	8004f1e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	6819      	ldr	r1, [r3, #0]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f000 ff3b 	bl	8005d70 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69da      	ldr	r2, [r3, #28]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 020c 	bic.w	r2, r2, #12
 8004f08:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69d9      	ldr	r1, [r3, #28]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	61da      	str	r2, [r3, #28]
 8004f1c:	e01b      	b.n	8004f56 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6818      	ldr	r0, [r3, #0]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	6819      	ldr	r1, [r3, #0]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f000 ff5b 	bl	8005de8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f40:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69d9      	ldr	r1, [r3, #28]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	021a      	lsls	r2, r3, #8
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d101      	bne.n	8004f8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e105      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2202      	movs	r2, #2
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b14      	cmp	r3, #20
 8004f9e:	f200 80f0 	bhi.w	8005182 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004fa2:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa8:	08004ffd 	.word	0x08004ffd
 8004fac:	08005183 	.word	0x08005183
 8004fb0:	08005183 	.word	0x08005183
 8004fb4:	08005183 	.word	0x08005183
 8004fb8:	0800503d 	.word	0x0800503d
 8004fbc:	08005183 	.word	0x08005183
 8004fc0:	08005183 	.word	0x08005183
 8004fc4:	08005183 	.word	0x08005183
 8004fc8:	0800507f 	.word	0x0800507f
 8004fcc:	08005183 	.word	0x08005183
 8004fd0:	08005183 	.word	0x08005183
 8004fd4:	08005183 	.word	0x08005183
 8004fd8:	080050bf 	.word	0x080050bf
 8004fdc:	08005183 	.word	0x08005183
 8004fe0:	08005183 	.word	0x08005183
 8004fe4:	08005183 	.word	0x08005183
 8004fe8:	08005101 	.word	0x08005101
 8004fec:	08005183 	.word	0x08005183
 8004ff0:	08005183 	.word	0x08005183
 8004ff4:	08005183 	.word	0x08005183
 8004ff8:	08005141 	.word	0x08005141
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fa0a 	bl	800541c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0208 	orr.w	r2, r2, #8
 8005016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699a      	ldr	r2, [r3, #24]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0204 	bic.w	r2, r2, #4
 8005026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6999      	ldr	r1, [r3, #24]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	619a      	str	r2, [r3, #24]
      break;
 800503a:	e0a3      	b.n	8005184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fa7a 	bl	800553c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6999      	ldr	r1, [r3, #24]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	021a      	lsls	r2, r3, #8
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	619a      	str	r2, [r3, #24]
      break;
 800507c:	e082      	b.n	8005184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fae3 	bl	8005650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69da      	ldr	r2, [r3, #28]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0208 	orr.w	r2, r2, #8
 8005098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69da      	ldr	r2, [r3, #28]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0204 	bic.w	r2, r2, #4
 80050a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69d9      	ldr	r1, [r3, #28]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	61da      	str	r2, [r3, #28]
      break;
 80050bc:	e062      	b.n	8005184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fb4b 	bl	8005760 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69d9      	ldr	r1, [r3, #28]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	021a      	lsls	r2, r3, #8
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	61da      	str	r2, [r3, #28]
      break;
 80050fe:	e041      	b.n	8005184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fbb4 	bl	8005874 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0208 	orr.w	r2, r2, #8
 800511a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0204 	bic.w	r2, r2, #4
 800512a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800513e:	e021      	b.n	8005184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fbf8 	bl	800593c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800515a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	021a      	lsls	r2, r3, #8
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005180:	e000      	b.n	8005184 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005182:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop

080051a0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e031      	b.n	800521c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80051c8:	6839      	ldr	r1, [r7, #0]
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fc1c 	bl	8005a08 <TIM_SlaveTimer_SetConfig>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e018      	b.n	800521c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005208:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b0c      	cmp	r3, #12
 8005236:	d831      	bhi.n	800529c <HAL_TIM_ReadCapturedValue+0x78>
 8005238:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <HAL_TIM_ReadCapturedValue+0x1c>)
 800523a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523e:	bf00      	nop
 8005240:	08005275 	.word	0x08005275
 8005244:	0800529d 	.word	0x0800529d
 8005248:	0800529d 	.word	0x0800529d
 800524c:	0800529d 	.word	0x0800529d
 8005250:	0800527f 	.word	0x0800527f
 8005254:	0800529d 	.word	0x0800529d
 8005258:	0800529d 	.word	0x0800529d
 800525c:	0800529d 	.word	0x0800529d
 8005260:	08005289 	.word	0x08005289
 8005264:	0800529d 	.word	0x0800529d
 8005268:	0800529d 	.word	0x0800529d
 800526c:	0800529d 	.word	0x0800529d
 8005270:	08005293 	.word	0x08005293
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527a:	60fb      	str	r3, [r7, #12]

      break;
 800527c:	e00f      	b.n	800529e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	60fb      	str	r3, [r7, #12]

      break;
 8005286:	e00a      	b.n	800529e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	60fb      	str	r3, [r7, #12]

      break;
 8005290:	e005      	b.n	800529e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	60fb      	str	r3, [r7, #12]

      break;
 800529a:	e000      	b.n	800529e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800529c:	bf00      	nop
  }

  return tmpreg;
 800529e:	68fb      	ldr	r3, [r7, #12]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a3c      	ldr	r2, [pc, #240]	; (8005400 <TIM_Base_SetConfig+0x104>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00f      	beq.n	8005334 <TIM_Base_SetConfig+0x38>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531a:	d00b      	beq.n	8005334 <TIM_Base_SetConfig+0x38>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a39      	ldr	r2, [pc, #228]	; (8005404 <TIM_Base_SetConfig+0x108>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d007      	beq.n	8005334 <TIM_Base_SetConfig+0x38>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a38      	ldr	r2, [pc, #224]	; (8005408 <TIM_Base_SetConfig+0x10c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d003      	beq.n	8005334 <TIM_Base_SetConfig+0x38>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a37      	ldr	r2, [pc, #220]	; (800540c <TIM_Base_SetConfig+0x110>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d108      	bne.n	8005346 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a2d      	ldr	r2, [pc, #180]	; (8005400 <TIM_Base_SetConfig+0x104>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d01b      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005354:	d017      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a2a      	ldr	r2, [pc, #168]	; (8005404 <TIM_Base_SetConfig+0x108>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a29      	ldr	r2, [pc, #164]	; (8005408 <TIM_Base_SetConfig+0x10c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00f      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a28      	ldr	r2, [pc, #160]	; (800540c <TIM_Base_SetConfig+0x110>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00b      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a27      	ldr	r2, [pc, #156]	; (8005410 <TIM_Base_SetConfig+0x114>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d007      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a26      	ldr	r2, [pc, #152]	; (8005414 <TIM_Base_SetConfig+0x118>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a25      	ldr	r2, [pc, #148]	; (8005418 <TIM_Base_SetConfig+0x11c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d108      	bne.n	8005398 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a10      	ldr	r2, [pc, #64]	; (8005400 <TIM_Base_SetConfig+0x104>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00f      	beq.n	80053e4 <TIM_Base_SetConfig+0xe8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a11      	ldr	r2, [pc, #68]	; (800540c <TIM_Base_SetConfig+0x110>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00b      	beq.n	80053e4 <TIM_Base_SetConfig+0xe8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a10      	ldr	r2, [pc, #64]	; (8005410 <TIM_Base_SetConfig+0x114>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d007      	beq.n	80053e4 <TIM_Base_SetConfig+0xe8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a0f      	ldr	r2, [pc, #60]	; (8005414 <TIM_Base_SetConfig+0x118>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_Base_SetConfig+0xe8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a0e      	ldr	r2, [pc, #56]	; (8005418 <TIM_Base_SetConfig+0x11c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d103      	bne.n	80053ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	615a      	str	r2, [r3, #20]
}
 80053f2:	bf00      	nop
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800
 800540c:	40013400 	.word	0x40013400
 8005410:	40014000 	.word	0x40014000
 8005414:	40014400 	.word	0x40014400
 8005418:	40014800 	.word	0x40014800

0800541c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f023 0201 	bic.w	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800544a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0303 	bic.w	r3, r3, #3
 8005456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f023 0302 	bic.w	r3, r3, #2
 8005468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a2c      	ldr	r2, [pc, #176]	; (8005528 <TIM_OC1_SetConfig+0x10c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00f      	beq.n	800549c <TIM_OC1_SetConfig+0x80>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a2b      	ldr	r2, [pc, #172]	; (800552c <TIM_OC1_SetConfig+0x110>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00b      	beq.n	800549c <TIM_OC1_SetConfig+0x80>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a2a      	ldr	r2, [pc, #168]	; (8005530 <TIM_OC1_SetConfig+0x114>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d007      	beq.n	800549c <TIM_OC1_SetConfig+0x80>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a29      	ldr	r2, [pc, #164]	; (8005534 <TIM_OC1_SetConfig+0x118>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d003      	beq.n	800549c <TIM_OC1_SetConfig+0x80>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a28      	ldr	r2, [pc, #160]	; (8005538 <TIM_OC1_SetConfig+0x11c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d10c      	bne.n	80054b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f023 0308 	bic.w	r3, r3, #8
 80054a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f023 0304 	bic.w	r3, r3, #4
 80054b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a1b      	ldr	r2, [pc, #108]	; (8005528 <TIM_OC1_SetConfig+0x10c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00f      	beq.n	80054de <TIM_OC1_SetConfig+0xc2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a1a      	ldr	r2, [pc, #104]	; (800552c <TIM_OC1_SetConfig+0x110>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00b      	beq.n	80054de <TIM_OC1_SetConfig+0xc2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a19      	ldr	r2, [pc, #100]	; (8005530 <TIM_OC1_SetConfig+0x114>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d007      	beq.n	80054de <TIM_OC1_SetConfig+0xc2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a18      	ldr	r2, [pc, #96]	; (8005534 <TIM_OC1_SetConfig+0x118>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d003      	beq.n	80054de <TIM_OC1_SetConfig+0xc2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a17      	ldr	r2, [pc, #92]	; (8005538 <TIM_OC1_SetConfig+0x11c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d111      	bne.n	8005502 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	621a      	str	r2, [r3, #32]
}
 800551c:	bf00      	nop
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	40012c00 	.word	0x40012c00
 800552c:	40013400 	.word	0x40013400
 8005530:	40014000 	.word	0x40014000
 8005534:	40014400 	.word	0x40014400
 8005538:	40014800 	.word	0x40014800

0800553c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f023 0210 	bic.w	r2, r3, #16
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800556a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f023 0320 	bic.w	r3, r3, #32
 800558a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a28      	ldr	r2, [pc, #160]	; (800563c <TIM_OC2_SetConfig+0x100>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d003      	beq.n	80055a8 <TIM_OC2_SetConfig+0x6c>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a27      	ldr	r2, [pc, #156]	; (8005640 <TIM_OC2_SetConfig+0x104>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d10d      	bne.n	80055c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a1d      	ldr	r2, [pc, #116]	; (800563c <TIM_OC2_SetConfig+0x100>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00f      	beq.n	80055ec <TIM_OC2_SetConfig+0xb0>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a1c      	ldr	r2, [pc, #112]	; (8005640 <TIM_OC2_SetConfig+0x104>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00b      	beq.n	80055ec <TIM_OC2_SetConfig+0xb0>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a1b      	ldr	r2, [pc, #108]	; (8005644 <TIM_OC2_SetConfig+0x108>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d007      	beq.n	80055ec <TIM_OC2_SetConfig+0xb0>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a1a      	ldr	r2, [pc, #104]	; (8005648 <TIM_OC2_SetConfig+0x10c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d003      	beq.n	80055ec <TIM_OC2_SetConfig+0xb0>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a19      	ldr	r2, [pc, #100]	; (800564c <TIM_OC2_SetConfig+0x110>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d113      	bne.n	8005614 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	bf00      	nop
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40012c00 	.word	0x40012c00
 8005640:	40013400 	.word	0x40013400
 8005644:	40014000 	.word	0x40014000
 8005648:	40014400 	.word	0x40014400
 800564c:	40014800 	.word	0x40014800

08005650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800567e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0303 	bic.w	r3, r3, #3
 800568a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800569c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a27      	ldr	r2, [pc, #156]	; (800574c <TIM_OC3_SetConfig+0xfc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_OC3_SetConfig+0x6a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a26      	ldr	r2, [pc, #152]	; (8005750 <TIM_OC3_SetConfig+0x100>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d10d      	bne.n	80056d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a1c      	ldr	r2, [pc, #112]	; (800574c <TIM_OC3_SetConfig+0xfc>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00f      	beq.n	80056fe <TIM_OC3_SetConfig+0xae>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a1b      	ldr	r2, [pc, #108]	; (8005750 <TIM_OC3_SetConfig+0x100>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00b      	beq.n	80056fe <TIM_OC3_SetConfig+0xae>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a1a      	ldr	r2, [pc, #104]	; (8005754 <TIM_OC3_SetConfig+0x104>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d007      	beq.n	80056fe <TIM_OC3_SetConfig+0xae>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a19      	ldr	r2, [pc, #100]	; (8005758 <TIM_OC3_SetConfig+0x108>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d003      	beq.n	80056fe <TIM_OC3_SetConfig+0xae>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a18      	ldr	r2, [pc, #96]	; (800575c <TIM_OC3_SetConfig+0x10c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d113      	bne.n	8005726 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800570c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	621a      	str	r2, [r3, #32]
}
 8005740:	bf00      	nop
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	40012c00 	.word	0x40012c00
 8005750:	40013400 	.word	0x40013400
 8005754:	40014000 	.word	0x40014000
 8005758:	40014400 	.word	0x40014400
 800575c:	40014800 	.word	0x40014800

08005760 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800578e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800579a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	021b      	lsls	r3, r3, #8
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	031b      	lsls	r3, r3, #12
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a28      	ldr	r2, [pc, #160]	; (8005860 <TIM_OC4_SetConfig+0x100>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d003      	beq.n	80057cc <TIM_OC4_SetConfig+0x6c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a27      	ldr	r2, [pc, #156]	; (8005864 <TIM_OC4_SetConfig+0x104>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d10d      	bne.n	80057e8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	031b      	lsls	r3, r3, #12
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a1d      	ldr	r2, [pc, #116]	; (8005860 <TIM_OC4_SetConfig+0x100>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00f      	beq.n	8005810 <TIM_OC4_SetConfig+0xb0>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a1c      	ldr	r2, [pc, #112]	; (8005864 <TIM_OC4_SetConfig+0x104>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00b      	beq.n	8005810 <TIM_OC4_SetConfig+0xb0>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a1b      	ldr	r2, [pc, #108]	; (8005868 <TIM_OC4_SetConfig+0x108>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d007      	beq.n	8005810 <TIM_OC4_SetConfig+0xb0>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a1a      	ldr	r2, [pc, #104]	; (800586c <TIM_OC4_SetConfig+0x10c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d003      	beq.n	8005810 <TIM_OC4_SetConfig+0xb0>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a19      	ldr	r2, [pc, #100]	; (8005870 <TIM_OC4_SetConfig+0x110>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d113      	bne.n	8005838 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005816:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800581e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	019b      	lsls	r3, r3, #6
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	019b      	lsls	r3, r3, #6
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40012c00 	.word	0x40012c00
 8005864:	40013400 	.word	0x40013400
 8005868:	40014000 	.word	0x40014000
 800586c:	40014400 	.word	0x40014400
 8005870:	40014800 	.word	0x40014800

08005874 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	041b      	lsls	r3, r3, #16
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a17      	ldr	r2, [pc, #92]	; (8005928 <TIM_OC5_SetConfig+0xb4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00f      	beq.n	80058ee <TIM_OC5_SetConfig+0x7a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a16      	ldr	r2, [pc, #88]	; (800592c <TIM_OC5_SetConfig+0xb8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00b      	beq.n	80058ee <TIM_OC5_SetConfig+0x7a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a15      	ldr	r2, [pc, #84]	; (8005930 <TIM_OC5_SetConfig+0xbc>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d007      	beq.n	80058ee <TIM_OC5_SetConfig+0x7a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a14      	ldr	r2, [pc, #80]	; (8005934 <TIM_OC5_SetConfig+0xc0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d003      	beq.n	80058ee <TIM_OC5_SetConfig+0x7a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a13      	ldr	r2, [pc, #76]	; (8005938 <TIM_OC5_SetConfig+0xc4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d109      	bne.n	8005902 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	621a      	str	r2, [r3, #32]
}
 800591c:	bf00      	nop
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	40012c00 	.word	0x40012c00
 800592c:	40013400 	.word	0x40013400
 8005930:	40014000 	.word	0x40014000
 8005934:	40014400 	.word	0x40014400
 8005938:	40014800 	.word	0x40014800

0800593c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800596a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800596e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	021b      	lsls	r3, r3, #8
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	051b      	lsls	r3, r3, #20
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4313      	orrs	r3, r2
 800598e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a18      	ldr	r2, [pc, #96]	; (80059f4 <TIM_OC6_SetConfig+0xb8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00f      	beq.n	80059b8 <TIM_OC6_SetConfig+0x7c>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a17      	ldr	r2, [pc, #92]	; (80059f8 <TIM_OC6_SetConfig+0xbc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00b      	beq.n	80059b8 <TIM_OC6_SetConfig+0x7c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a16      	ldr	r2, [pc, #88]	; (80059fc <TIM_OC6_SetConfig+0xc0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d007      	beq.n	80059b8 <TIM_OC6_SetConfig+0x7c>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a15      	ldr	r2, [pc, #84]	; (8005a00 <TIM_OC6_SetConfig+0xc4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_OC6_SetConfig+0x7c>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a14      	ldr	r2, [pc, #80]	; (8005a04 <TIM_OC6_SetConfig+0xc8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d109      	bne.n	80059cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	029b      	lsls	r3, r3, #10
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40012c00 	.word	0x40012c00
 80059f8:	40013400 	.word	0x40013400
 80059fc:	40014000 	.word	0x40014000
 8005a00:	40014400 	.word	0x40014400
 8005a04:	40014800 	.word	0x40014800

08005a08 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a24:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a36:	f023 0307 	bic.w	r3, r3, #7
 8005a3a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b60      	cmp	r3, #96	; 0x60
 8005a54:	d06d      	beq.n	8005b32 <TIM_SlaveTimer_SetConfig+0x12a>
 8005a56:	2b60      	cmp	r3, #96	; 0x60
 8005a58:	d80f      	bhi.n	8005a7a <TIM_SlaveTimer_SetConfig+0x72>
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d073      	beq.n	8005b46 <TIM_SlaveTimer_SetConfig+0x13e>
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d804      	bhi.n	8005a6c <TIM_SlaveTimer_SetConfig+0x64>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d06f      	beq.n	8005b46 <TIM_SlaveTimer_SetConfig+0x13e>
 8005a66:	2b10      	cmp	r3, #16
 8005a68:	d06d      	beq.n	8005b46 <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8005a6a:	e06d      	b.n	8005b48 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8005a6c:	2b40      	cmp	r3, #64	; 0x40
 8005a6e:	d028      	beq.n	8005ac2 <TIM_SlaveTimer_SetConfig+0xba>
 8005a70:	2b50      	cmp	r3, #80	; 0x50
 8005a72:	d054      	beq.n	8005b1e <TIM_SlaveTimer_SetConfig+0x116>
 8005a74:	2b30      	cmp	r3, #48	; 0x30
 8005a76:	d066      	beq.n	8005b46 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8005a78:	e066      	b.n	8005b48 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8005a7a:	4a36      	ldr	r2, [pc, #216]	; (8005b54 <TIM_SlaveTimer_SetConfig+0x14c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d062      	beq.n	8005b46 <TIM_SlaveTimer_SetConfig+0x13e>
 8005a80:	4a34      	ldr	r2, [pc, #208]	; (8005b54 <TIM_SlaveTimer_SetConfig+0x14c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d808      	bhi.n	8005a98 <TIM_SlaveTimer_SetConfig+0x90>
 8005a86:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a8a:	d05c      	beq.n	8005b46 <TIM_SlaveTimer_SetConfig+0x13e>
 8005a8c:	4a32      	ldr	r2, [pc, #200]	; (8005b58 <TIM_SlaveTimer_SetConfig+0x150>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d059      	beq.n	8005b46 <TIM_SlaveTimer_SetConfig+0x13e>
 8005a92:	2b70      	cmp	r3, #112	; 0x70
 8005a94:	d00a      	beq.n	8005aac <TIM_SlaveTimer_SetConfig+0xa4>
      break;
 8005a96:	e057      	b.n	8005b48 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8005a98:	4a30      	ldr	r2, [pc, #192]	; (8005b5c <TIM_SlaveTimer_SetConfig+0x154>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d053      	beq.n	8005b46 <TIM_SlaveTimer_SetConfig+0x13e>
 8005a9e:	4a30      	ldr	r2, [pc, #192]	; (8005b60 <TIM_SlaveTimer_SetConfig+0x158>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d050      	beq.n	8005b46 <TIM_SlaveTimer_SetConfig+0x13e>
 8005aa4:	4a2f      	ldr	r2, [pc, #188]	; (8005b64 <TIM_SlaveTimer_SetConfig+0x15c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d04d      	beq.n	8005b46 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8005aaa:	e04d      	b.n	8005b48 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_ETR_SetConfig(htim->Instance,
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6818      	ldr	r0, [r3, #0]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	68d9      	ldr	r1, [r3, #12]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f000 f9d1 	bl	8005e62 <TIM_ETR_SetConfig>
      break;
 8005ac0:	e042      	b.n	8005b48 <TIM_SlaveTimer_SetConfig+0x140>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b05      	cmp	r3, #5
 8005ac8:	d004      	beq.n	8005ad4 <TIM_SlaveTimer_SetConfig+0xcc>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8005ad2:	d101      	bne.n	8005ad8 <TIM_SlaveTimer_SetConfig+0xd0>
        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e038      	b.n	8005b4a <TIM_SlaveTimer_SetConfig+0x142>
      tmpccer = htim->Instance->CCER;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6a1a      	ldr	r2, [r3, #32]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005afe:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	621a      	str	r2, [r3, #32]
      break;
 8005b1c:	e014      	b.n	8005b48 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	6899      	ldr	r1, [r3, #8]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f000 f884 	bl	8005c38 <TIM_TI1_ConfigInputStage>
      break;
 8005b30:	e00a      	b.n	8005b48 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6899      	ldr	r1, [r3, #8]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f000 f8e6 	bl	8005d10 <TIM_TI2_ConfigInputStage>
      break;
 8005b44:	e000      	b.n	8005b48 <TIM_SlaveTimer_SetConfig+0x140>
      break;
 8005b46:	bf00      	nop
  }
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	00100030 	.word	0x00100030
 8005b58:	00100020 	.word	0x00100020
 8005b5c:	00100060 	.word	0x00100060
 8005b60:	00100070 	.word	0x00100070
 8005b64:	00100040 	.word	0x00100040

08005b68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f023 0201 	bic.w	r2, r3, #1
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4a24      	ldr	r2, [pc, #144]	; (8005c24 <TIM_TI1_SetConfig+0xbc>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d013      	beq.n	8005bbe <TIM_TI1_SetConfig+0x56>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9c:	d00f      	beq.n	8005bbe <TIM_TI1_SetConfig+0x56>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <TIM_TI1_SetConfig+0xc0>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00b      	beq.n	8005bbe <TIM_TI1_SetConfig+0x56>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a20      	ldr	r2, [pc, #128]	; (8005c2c <TIM_TI1_SetConfig+0xc4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d007      	beq.n	8005bbe <TIM_TI1_SetConfig+0x56>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4a1f      	ldr	r2, [pc, #124]	; (8005c30 <TIM_TI1_SetConfig+0xc8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_TI1_SetConfig+0x56>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4a1e      	ldr	r2, [pc, #120]	; (8005c34 <TIM_TI1_SetConfig+0xcc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d101      	bne.n	8005bc2 <TIM_TI1_SetConfig+0x5a>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <TIM_TI1_SetConfig+0x5c>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f023 0303 	bic.w	r3, r3, #3
 8005bce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	e003      	b.n	8005be2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f043 0301 	orr.w	r3, r3, #1
 8005be0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005be8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f023 030a 	bic.w	r3, r3, #10
 8005bfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f003 030a 	and.w	r3, r3, #10
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	bf00      	nop
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40012c00 	.word	0x40012c00
 8005c28:	40000400 	.word	0x40000400
 8005c2c:	40000800 	.word	0x40000800
 8005c30:	40013400 	.word	0x40013400
 8005c34:	40014000 	.word	0x40014000

08005c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f023 0201 	bic.w	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f023 030a 	bic.w	r3, r3, #10
 8005c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b087      	sub	sp, #28
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607a      	str	r2, [r7, #4]
 8005ca2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	f023 0210 	bic.w	r2, r3, #16
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	031b      	lsls	r3, r3, #12
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ce8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	621a      	str	r2, [r3, #32]
}
 8005d04:	bf00      	nop
 8005d06:	371c      	adds	r7, #28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	f023 0210 	bic.w	r2, r3, #16
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	031b      	lsls	r3, r3, #12
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	621a      	str	r2, [r3, #32]
}
 8005d64:	bf00      	nop
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f023 0303 	bic.w	r3, r3, #3
 8005d9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005dc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	621a      	str	r2, [r3, #32]
}
 8005ddc:	bf00      	nop
 8005dde:	371c      	adds	r7, #28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	031b      	lsls	r3, r3, #12
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005e3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	031b      	lsls	r3, r3, #12
 8005e40:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	621a      	str	r2, [r3, #32]
}
 8005e56:	bf00      	nop
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b087      	sub	sp, #28
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	021a      	lsls	r2, r3, #8
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	431a      	orrs	r2, r3
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	609a      	str	r2, [r3, #8]
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b087      	sub	sp, #28
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f003 031f 	and.w	r3, r3, #31
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eba:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a1a      	ldr	r2, [r3, #32]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	43db      	mvns	r3, r3
 8005ec4:	401a      	ands	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a1a      	ldr	r2, [r3, #32]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eda:	431a      	orrs	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	621a      	str	r2, [r3, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e047      	b.n	8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1d      	ldr	r2, [pc, #116]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d004      	beq.n	8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a1c      	ldr	r2, [pc, #112]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d108      	bne.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f66:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	40012c00 	.word	0x40012c00
 8005fa4:	40013400 	.word	0x40013400

08005fa8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e087      	b.n	80060d4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	041b      	lsls	r3, r3, #16
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a27      	ldr	r2, [pc, #156]	; (80060e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d004      	beq.n	8006052 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a25      	ldr	r2, [pc, #148]	; (80060e4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d106      	bne.n	8006060 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1e      	ldr	r2, [pc, #120]	; (80060e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d004      	beq.n	8006074 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1d      	ldr	r2, [pc, #116]	; (80060e4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d126      	bne.n	80060c2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	051b      	lsls	r3, r3, #20
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a0e      	ldr	r2, [pc, #56]	; (80060e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a0d      	ldr	r2, [pc, #52]	; (80060e4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d106      	bne.n	80060c2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	40012c00 	.word	0x40012c00
 80060e4:	40013400 	.word	0x40013400

080060e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <Set_Can_Bytes>:
#include "main.h"
#include "canconfig.h"


void Set_Can_Bytes(uint32_t *pos, uint32_t message)
{
 8006174:	b590      	push	{r4, r7, lr}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
	//Can_Config_Bytes[message][*pos];

	uint32_t transmit=0;
 800617e:	2300      	movs	r3, #0
 8006180:	617b      	str	r3, [r7, #20]

	switch(Can_Config_Datas[message][*pos])
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	49a0      	ldr	r1, [pc, #640]	; (8006408 <Set_Can_Bytes+0x294>)
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	00d2      	lsls	r2, r2, #3
 800618c:	440a      	add	r2, r1
 800618e:	4413      	add	r3, r2
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	3b01      	subs	r3, #1
 8006194:	2b12      	cmp	r3, #18
 8006196:	f200 8100 	bhi.w	800639a <Set_Can_Bytes+0x226>
 800619a:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <Set_Can_Bytes+0x2c>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061ed 	.word	0x080061ed
 80061a4:	080061f5 	.word	0x080061f5
 80061a8:	080061fd 	.word	0x080061fd
 80061ac:	08006205 	.word	0x08006205
 80061b0:	0800620d 	.word	0x0800620d
 80061b4:	08006215 	.word	0x08006215
 80061b8:	080063a3 	.word	0x080063a3
 80061bc:	080063a3 	.word	0x080063a3
 80061c0:	080063a3 	.word	0x080063a3
 80061c4:	0800621d 	.word	0x0800621d
 80061c8:	08006259 	.word	0x08006259
 80061cc:	08006295 	.word	0x08006295
 80061d0:	080062d1 	.word	0x080062d1
 80061d4:	0800635f 	.word	0x0800635f
 80061d8:	08006369 	.word	0x08006369
 80061dc:	08006373 	.word	0x08006373
 80061e0:	0800637d 	.word	0x0800637d
 80061e4:	08006387 	.word	0x08006387
 80061e8:	08006391 	.word	0x08006391
	{
	case MESS_U5I0:
		transmit=1000;
 80061ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061f0:	617b      	str	r3, [r7, #20]
		break;
 80061f2:	e0d7      	b.n	80063a4 <Set_Can_Bytes+0x230>

	case MESS_U5I1:
		transmit=1000;
 80061f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061f8:	617b      	str	r3, [r7, #20]
		break;
 80061fa:	e0d3      	b.n	80063a4 <Set_Can_Bytes+0x230>

	case MESS_U6I0:
		transmit=1000;
 80061fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006200:	617b      	str	r3, [r7, #20]
		break;
 8006202:	e0cf      	b.n	80063a4 <Set_Can_Bytes+0x230>

	case MESS_U6I1:
		transmit=1000;
 8006204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006208:	617b      	str	r3, [r7, #20]
		break;
 800620a:	e0cb      	b.n	80063a4 <Set_Can_Bytes+0x230>

	case MESS_U7I0:
		transmit=1000;
 800620c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006210:	617b      	str	r3, [r7, #20]
		break;
 8006212:	e0c7      	b.n	80063a4 <Set_Can_Bytes+0x230>

	case MESS_U7I1:
		transmit=1000;
 8006214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006218:	617b      	str	r3, [r7, #20]
		break;
 800621a:	e0c3      	b.n	80063a4 <Set_Can_Bytes+0x230>
	case MESS_U7T:

		break;

	case MESS_U5V:
		switch(Can_Config_Bytes[message][*pos])
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	497a      	ldr	r1, [pc, #488]	; (800640c <Set_Can_Bytes+0x298>)
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	00d2      	lsls	r2, r2, #3
 8006226:	440a      	add	r2, r1
 8006228:	4413      	add	r3, r2
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d002      	beq.n	8006236 <Set_Can_Bytes+0xc2>
 8006230:	2b02      	cmp	r3, #2
 8006232:	d008      	beq.n	8006246 <Set_Can_Bytes+0xd2>
 8006234:	e00b      	b.n	800624e <Set_Can_Bytes+0xda>
		{
		case 1:
			transmit=(U5V_real/1000); //transmit number in V
 8006236:	4b76      	ldr	r3, [pc, #472]	; (8006410 <Set_Can_Bytes+0x29c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a76      	ldr	r2, [pc, #472]	; (8006414 <Set_Can_Bytes+0x2a0>)
 800623c:	fba2 2303 	umull	r2, r3, r2, r3
 8006240:	099b      	lsrs	r3, r3, #6
 8006242:	617b      	str	r3, [r7, #20]
			break;
 8006244:	e007      	b.n	8006256 <Set_Can_Bytes+0xe2>
		case 2:
			transmit=U5V_real; //transmit number in mV
 8006246:	4b72      	ldr	r3, [pc, #456]	; (8006410 <Set_Can_Bytes+0x29c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	617b      	str	r3, [r7, #20]
			break;
 800624c:	e003      	b.n	8006256 <Set_Can_Bytes+0xe2>
		default:
			Set_Error(ERR_MESS_INVALID_BYTES);
 800624e:	2061      	movs	r0, #97	; 0x61
 8006250:	f002 fb04 	bl	800885c <Set_Error>
			break;
 8006254:	bf00      	nop
		}
		break;
 8006256:	e0a5      	b.n	80063a4 <Set_Can_Bytes+0x230>

	case MESS_U6V:
		switch(Can_Config_Bytes[message][*pos])
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	496b      	ldr	r1, [pc, #428]	; (800640c <Set_Can_Bytes+0x298>)
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	00d2      	lsls	r2, r2, #3
 8006262:	440a      	add	r2, r1
 8006264:	4413      	add	r3, r2
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d002      	beq.n	8006272 <Set_Can_Bytes+0xfe>
 800626c:	2b02      	cmp	r3, #2
 800626e:	d008      	beq.n	8006282 <Set_Can_Bytes+0x10e>
 8006270:	e00b      	b.n	800628a <Set_Can_Bytes+0x116>
		{
		case 1:
			transmit=(U6V_real/1000); //transmit number in V
 8006272:	4b69      	ldr	r3, [pc, #420]	; (8006418 <Set_Can_Bytes+0x2a4>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a67      	ldr	r2, [pc, #412]	; (8006414 <Set_Can_Bytes+0x2a0>)
 8006278:	fba2 2303 	umull	r2, r3, r2, r3
 800627c:	099b      	lsrs	r3, r3, #6
 800627e:	617b      	str	r3, [r7, #20]
			break;
 8006280:	e007      	b.n	8006292 <Set_Can_Bytes+0x11e>
		case 2:
			transmit=U6V_real; //transmit number in mV
 8006282:	4b65      	ldr	r3, [pc, #404]	; (8006418 <Set_Can_Bytes+0x2a4>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	617b      	str	r3, [r7, #20]
			break;
 8006288:	e003      	b.n	8006292 <Set_Can_Bytes+0x11e>
		default:
			Set_Error(ERR_MESS_INVALID_BYTES);
 800628a:	2061      	movs	r0, #97	; 0x61
 800628c:	f002 fae6 	bl	800885c <Set_Error>
			break;
 8006290:	bf00      	nop
		}
		break;
 8006292:	e087      	b.n	80063a4 <Set_Can_Bytes+0x230>

	case MESS_U7V:
		switch(Can_Config_Bytes[message][*pos])
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	495c      	ldr	r1, [pc, #368]	; (800640c <Set_Can_Bytes+0x298>)
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	00d2      	lsls	r2, r2, #3
 800629e:	440a      	add	r2, r1
 80062a0:	4413      	add	r3, r2
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d002      	beq.n	80062ae <Set_Can_Bytes+0x13a>
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d008      	beq.n	80062be <Set_Can_Bytes+0x14a>
 80062ac:	e00b      	b.n	80062c6 <Set_Can_Bytes+0x152>
		{
		case 1:
			transmit=(U7V_real/1000); //transmit number in V
 80062ae:	4b5b      	ldr	r3, [pc, #364]	; (800641c <Set_Can_Bytes+0x2a8>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a58      	ldr	r2, [pc, #352]	; (8006414 <Set_Can_Bytes+0x2a0>)
 80062b4:	fba2 2303 	umull	r2, r3, r2, r3
 80062b8:	099b      	lsrs	r3, r3, #6
 80062ba:	617b      	str	r3, [r7, #20]
			break;
 80062bc:	e007      	b.n	80062ce <Set_Can_Bytes+0x15a>
		case 2:
			transmit=U7V_real; //transmit number in mV
 80062be:	4b57      	ldr	r3, [pc, #348]	; (800641c <Set_Can_Bytes+0x2a8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	617b      	str	r3, [r7, #20]
			break;
 80062c4:	e003      	b.n	80062ce <Set_Can_Bytes+0x15a>
		default:
			Set_Error(ERR_MESS_INVALID_BYTES);
 80062c6:	2061      	movs	r0, #97	; 0x61
 80062c8:	f002 fac8 	bl	800885c <Set_Error>
			break;
 80062cc:	bf00      	nop
		}
		break;
 80062ce:	e069      	b.n	80063a4 <Set_Can_Bytes+0x230>

	case MESS_DI:
		switch(Can_Config_Bytes[message][*pos])
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	494d      	ldr	r1, [pc, #308]	; (800640c <Set_Can_Bytes+0x298>)
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	00d2      	lsls	r2, r2, #3
 80062da:	440a      	add	r2, r1
 80062dc:	4413      	add	r3, r2
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d137      	bne.n	8006354 <Set_Can_Bytes+0x1e0>
		{
		case 1:
			//DIO4 still not working, but we send whatever it says anyway
			transmit=(HAL_GPIO_ReadPin(DIO3.PORT, DIO3.PIN)<<0)|(HAL_GPIO_ReadPin(DIO4.PORT, DIO4.PIN)<<1)|(HAL_GPIO_ReadPin(DIO5.PORT, DIO5.PIN)<<2)|(HAL_GPIO_ReadPin(DIO6.PORT, DIO6.PIN)<<3)|(HAL_GPIO_ReadPin(DIO15.PORT, DIO15.PIN)<<4);
 80062e4:	4b4e      	ldr	r3, [pc, #312]	; (8006420 <Set_Can_Bytes+0x2ac>)
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	4b4d      	ldr	r3, [pc, #308]	; (8006420 <Set_Can_Bytes+0x2ac>)
 80062ea:	889b      	ldrh	r3, [r3, #4]
 80062ec:	4619      	mov	r1, r3
 80062ee:	4610      	mov	r0, r2
 80062f0:	f7fd faa4 	bl	800383c <HAL_GPIO_ReadPin>
 80062f4:	4603      	mov	r3, r0
 80062f6:	461c      	mov	r4, r3
 80062f8:	4b4a      	ldr	r3, [pc, #296]	; (8006424 <Set_Can_Bytes+0x2b0>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	4b49      	ldr	r3, [pc, #292]	; (8006424 <Set_Can_Bytes+0x2b0>)
 80062fe:	889b      	ldrh	r3, [r3, #4]
 8006300:	4619      	mov	r1, r3
 8006302:	4610      	mov	r0, r2
 8006304:	f7fd fa9a 	bl	800383c <HAL_GPIO_ReadPin>
 8006308:	4603      	mov	r3, r0
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	431c      	orrs	r4, r3
 800630e:	4b46      	ldr	r3, [pc, #280]	; (8006428 <Set_Can_Bytes+0x2b4>)
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4b45      	ldr	r3, [pc, #276]	; (8006428 <Set_Can_Bytes+0x2b4>)
 8006314:	889b      	ldrh	r3, [r3, #4]
 8006316:	4619      	mov	r1, r3
 8006318:	4610      	mov	r0, r2
 800631a:	f7fd fa8f 	bl	800383c <HAL_GPIO_ReadPin>
 800631e:	4603      	mov	r3, r0
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	431c      	orrs	r4, r3
 8006324:	4b41      	ldr	r3, [pc, #260]	; (800642c <Set_Can_Bytes+0x2b8>)
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	4b40      	ldr	r3, [pc, #256]	; (800642c <Set_Can_Bytes+0x2b8>)
 800632a:	889b      	ldrh	r3, [r3, #4]
 800632c:	4619      	mov	r1, r3
 800632e:	4610      	mov	r0, r2
 8006330:	f7fd fa84 	bl	800383c <HAL_GPIO_ReadPin>
 8006334:	4603      	mov	r3, r0
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	431c      	orrs	r4, r3
 800633a:	4b3d      	ldr	r3, [pc, #244]	; (8006430 <Set_Can_Bytes+0x2bc>)
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	4b3c      	ldr	r3, [pc, #240]	; (8006430 <Set_Can_Bytes+0x2bc>)
 8006340:	889b      	ldrh	r3, [r3, #4]
 8006342:	4619      	mov	r1, r3
 8006344:	4610      	mov	r0, r2
 8006346:	f7fd fa79 	bl	800383c <HAL_GPIO_ReadPin>
 800634a:	4603      	mov	r3, r0
 800634c:	011b      	lsls	r3, r3, #4
 800634e:	4323      	orrs	r3, r4
 8006350:	617b      	str	r3, [r7, #20]
			break;
 8006352:	e003      	b.n	800635c <Set_Can_Bytes+0x1e8>
		default:
			Set_Error(ERR_MESS_INVALID_BYTES);
 8006354:	2061      	movs	r0, #97	; 0x61
 8006356:	f002 fa81 	bl	800885c <Set_Error>
			break;
 800635a:	bf00      	nop
		}
		break;
 800635c:	e022      	b.n	80063a4 <Set_Can_Bytes+0x230>

	//for these we have the same transmit regardless of how many bytes it will use; this means it is easy to overflow if one byte is used, but we want to send smaller frequencies (up to 255Hz) on one byte
	//this also means there is no warning for wrong number of bytes though
	case MESS_PWM0_Freq:
		transmit=Calculate_PWM_Freq(0);
 800635e:	2000      	movs	r0, #0
 8006360:	f003 fc7c 	bl	8009c5c <Calculate_PWM_Freq>
 8006364:	6178      	str	r0, [r7, #20]
		break;
 8006366:	e01d      	b.n	80063a4 <Set_Can_Bytes+0x230>
	case MESS_PWM0_DC:
		transmit=Calculate_PWM_DC(0);
 8006368:	2000      	movs	r0, #0
 800636a:	f003 fc23 	bl	8009bb4 <Calculate_PWM_DC>
 800636e:	6178      	str	r0, [r7, #20]
		break;
 8006370:	e018      	b.n	80063a4 <Set_Can_Bytes+0x230>
	case MESS_PWM3_Freq:
		transmit=Calculate_PWM_Freq(3);
 8006372:	2003      	movs	r0, #3
 8006374:	f003 fc72 	bl	8009c5c <Calculate_PWM_Freq>
 8006378:	6178      	str	r0, [r7, #20]
		break;
 800637a:	e013      	b.n	80063a4 <Set_Can_Bytes+0x230>
	case MESS_PWM3_DC:
		transmit=Calculate_PWM_DC(3);
 800637c:	2003      	movs	r0, #3
 800637e:	f003 fc19 	bl	8009bb4 <Calculate_PWM_DC>
 8006382:	6178      	str	r0, [r7, #20]
		break;
 8006384:	e00e      	b.n	80063a4 <Set_Can_Bytes+0x230>
	case MESS_PWM4_Freq:
		transmit=Calculate_PWM_Freq(4);
 8006386:	2004      	movs	r0, #4
 8006388:	f003 fc68 	bl	8009c5c <Calculate_PWM_Freq>
 800638c:	6178      	str	r0, [r7, #20]
		break;
 800638e:	e009      	b.n	80063a4 <Set_Can_Bytes+0x230>
	case MESS_PWM4_DC:
		transmit=Calculate_PWM_DC(4);
 8006390:	2004      	movs	r0, #4
 8006392:	f003 fc0f 	bl	8009bb4 <Calculate_PWM_DC>
 8006396:	6178      	str	r0, [r7, #20]
		break;
 8006398:	e004      	b.n	80063a4 <Set_Can_Bytes+0x230>

	default:
		Set_Error(ERR_MESS_UNDEFINED);
 800639a:	2062      	movs	r0, #98	; 0x62
 800639c:	f002 fa5e 	bl	800885c <Set_Error>
		break;
 80063a0:	e000      	b.n	80063a4 <Set_Can_Bytes+0x230>
		break;
 80063a2:	bf00      	nop
	}

	uint32_t temp_pos = *pos;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<Can_Config_Bytes[message][temp_pos]; i++)
 80063aa:	2300      	movs	r3, #0
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	e01c      	b.n	80063ea <Set_Can_Bytes+0x276>
	{
		//fill the least significant byte first
		CANTxData[temp_pos+(Can_Config_Bytes[message][temp_pos]-i-1)] = transmit>>(i*8) & 0xFF;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	fa22 f103 	lsr.w	r1, r2, r3
 80063ba:	4a14      	ldr	r2, [pc, #80]	; (800640c <Set_Can_Bytes+0x298>)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	441a      	add	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad2      	subs	r2, r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b2c9      	uxtb	r1, r1
 80063d6:	4a17      	ldr	r2, [pc, #92]	; (8006434 <Set_Can_Bytes+0x2c0>)
 80063d8:	54d1      	strb	r1, [r2, r3]
		//TODO: seems sometimes transmit value is corrrupted when writing to flash, after I have sending without errors check if that is a thing still

		*pos+=1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	601a      	str	r2, [r3, #0]
	for(uint32_t i=0; i<Can_Config_Bytes[message][temp_pos]; i++)
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	3301      	adds	r3, #1
 80063e8:	613b      	str	r3, [r7, #16]
 80063ea:	4a08      	ldr	r2, [pc, #32]	; (800640c <Set_Can_Bytes+0x298>)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	441a      	add	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4413      	add	r3, r2
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	461a      	mov	r2, r3
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d3d7      	bcc.n	80063b0 <Set_Can_Bytes+0x23c>
	}

}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	bd90      	pop	{r4, r7, pc}
 8006408:	20000168 	.word	0x20000168
 800640c:	200002c0 	.word	0x200002c0
 8006410:	20000a40 	.word	0x20000a40
 8006414:	10624dd3 	.word	0x10624dd3
 8006418:	2000086c 	.word	0x2000086c
 800641c:	2000068c 	.word	0x2000068c
 8006420:	0800a7d8 	.word	0x0800a7d8
 8006424:	0800a7e0 	.word	0x0800a7e0
 8006428:	0800a7e8 	.word	0x0800a7e8
 800642c:	0800a7f0 	.word	0x0800a7f0
 8006430:	0800a7f8 	.word	0x0800a7f8
 8006434:	20000854 	.word	0x20000854

08006438 <Acknowledge>:


uint32_t ack_k=0;

void Acknowledge(uint8_t cmd)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08c      	sub	sp, #48	; 0x30
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	71fb      	strb	r3, [r7, #7]
	FDCAN_TxHeaderTypeDef TxHeader;

	TxHeader.Identifier = CANID_ACK;
 8006442:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8006446:	60fb      	str	r3, [r7, #12]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8006448:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800644c:	61bb      	str	r3, [r7, #24]

	CANTxData[0]=ID;
 800644e:	4b2a      	ldr	r3, [pc, #168]	; (80064f8 <Acknowledge+0xc0>)
 8006450:	2200      	movs	r2, #0
 8006452:	701a      	strb	r2, [r3, #0]
	CANTxData[1]=cmd;
 8006454:	4a28      	ldr	r2, [pc, #160]	; (80064f8 <Acknowledge+0xc0>)
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	7053      	strb	r3, [r2, #1]
	CANTxData[2]=(ack_k>>24)*0xFF;
 800645a:	4b28      	ldr	r3, [pc, #160]	; (80064fc <Acknowledge+0xc4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	0e1b      	lsrs	r3, r3, #24
 8006460:	b2db      	uxtb	r3, r3
 8006462:	425b      	negs	r3, r3
 8006464:	b2da      	uxtb	r2, r3
 8006466:	4b24      	ldr	r3, [pc, #144]	; (80064f8 <Acknowledge+0xc0>)
 8006468:	709a      	strb	r2, [r3, #2]
	CANTxData[3]=(ack_k>>16)*0xFF;
 800646a:	4b24      	ldr	r3, [pc, #144]	; (80064fc <Acknowledge+0xc4>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	0c1b      	lsrs	r3, r3, #16
 8006470:	b2db      	uxtb	r3, r3
 8006472:	425b      	negs	r3, r3
 8006474:	b2da      	uxtb	r2, r3
 8006476:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <Acknowledge+0xc0>)
 8006478:	70da      	strb	r2, [r3, #3]
	CANTxData[4]=(ack_k>>8)*0xFF;
 800647a:	4b20      	ldr	r3, [pc, #128]	; (80064fc <Acknowledge+0xc4>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	0a1b      	lsrs	r3, r3, #8
 8006480:	b2db      	uxtb	r3, r3
 8006482:	425b      	negs	r3, r3
 8006484:	b2da      	uxtb	r2, r3
 8006486:	4b1c      	ldr	r3, [pc, #112]	; (80064f8 <Acknowledge+0xc0>)
 8006488:	711a      	strb	r2, [r3, #4]
	CANTxData[5]=ack_k&0xFF;
 800648a:	4b1c      	ldr	r3, [pc, #112]	; (80064fc <Acknowledge+0xc4>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	4b19      	ldr	r3, [pc, #100]	; (80064f8 <Acknowledge+0xc0>)
 8006492:	715a      	strb	r2, [r3, #5]
	CANTxData[6]=cmd;
 8006494:	4a18      	ldr	r2, [pc, #96]	; (80064f8 <Acknowledge+0xc0>)
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	7193      	strb	r3, [r2, #6]
	CANTxData[7]=0xFF;
 800649a:	4b17      	ldr	r3, [pc, #92]	; (80064f8 <Acknowledge+0xc0>)
 800649c:	22ff      	movs	r2, #255	; 0xff
 800649e:	71da      	strb	r2, [r3, #7]

	TxHeader.IdType = FDCAN_STANDARD_ID;
 80064a0:	2300      	movs	r3, #0
 80064a2:	613b      	str	r3, [r7, #16]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80064a4:	2300      	movs	r3, #0
 80064a6:	617b      	str	r3, [r7, #20]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61fb      	str	r3, [r7, #28]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80064ac:	2300      	movs	r3, #0
 80064ae:	623b      	str	r3, [r7, #32]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80064b0:	2300      	movs	r3, #0
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80064b4:	2300      	movs	r3, #0
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.MessageMarker = 0;
 80064b8:	2300      	movs	r3, #0
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c

	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) < 1)
 80064bc:	bf00      	nop
 80064be:	4810      	ldr	r0, [pc, #64]	; (8006500 <Acknowledge+0xc8>)
 80064c0:	f7fc fa6c 	bl	800299c <HAL_FDCAN_GetTxFifoFreeLevel>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0f9      	beq.n	80064be <Acknowledge+0x86>
		//TODO: think if this is the best way to handle this
		//Error_Handler();
		//return;
	}

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 80064ca:	f107 030c 	add.w	r3, r7, #12
 80064ce:	4a0a      	ldr	r2, [pc, #40]	; (80064f8 <Acknowledge+0xc0>)
 80064d0:	4619      	mov	r1, r3
 80064d2:	480b      	ldr	r0, [pc, #44]	; (8006500 <Acknowledge+0xc8>)
 80064d4:	f7fc f944 	bl	8002760 <HAL_FDCAN_AddMessageToTxFifoQ>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <Acknowledge+0xae>
	{
		Set_Error(ERR_SEND_FAILED);
 80064de:	2006      	movs	r0, #6
 80064e0:	f002 f9bc 	bl	800885c <Set_Error>
 80064e4:	e004      	b.n	80064f0 <Acknowledge+0xb8>
		return;
	}

	ack_k++;
 80064e6:	4b05      	ldr	r3, [pc, #20]	; (80064fc <Acknowledge+0xc4>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3301      	adds	r3, #1
 80064ec:	4a03      	ldr	r2, [pc, #12]	; (80064fc <Acknowledge+0xc4>)
 80064ee:	6013      	str	r3, [r2, #0]
}
 80064f0:	3730      	adds	r7, #48	; 0x30
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000854 	.word	0x20000854
 80064fc:	20000080 	.word	0x20000080
 8006500:	20000410 	.word	0x20000410

08006504 <Save_Config>:

extern TIM_HandleTypeDef htim15;

void Save_Config()
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
	Config_Write_Flash();
 8006508:	f000 fbfa 	bl	8006d00 <Config_Write_Flash>

	Config_Read_Flash();
 800650c:	f000 fe6c 	bl	80071e8 <Config_Read_Flash>

	Acknowledge(SAVE_CONFIGS);
 8006510:	2080      	movs	r0, #128	; 0x80
 8006512:	f7ff ff91 	bl	8006438 <Acknowledge>
}
 8006516:	bf00      	nop
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <Switch_Power>:


const pinPort *switches[] = {&U5IN0, &U5IN1, &U6IN0, &U6IN1, &U7IN0, &U7IN1};

void Switch_Power(uint8_t enableSwitching, uint8_t newState)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	4603      	mov	r3, r0
 8006524:	460a      	mov	r2, r1
 8006526:	71fb      	strb	r3, [r7, #7]
 8006528:	4613      	mov	r3, r2
 800652a:	71bb      	strb	r3, [r7, #6]
	for(uint32_t i=0; i<5; i++)
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e020      	b.n	8006574 <Switch_Power+0x58>
	{
		if ((1<<i) & enableSwitching)
 8006532:	79fa      	ldrb	r2, [r7, #7]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	fa42 f303 	asr.w	r3, r2, r3
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d015      	beq.n	800656e <Switch_Power+0x52>
		{
			HAL_GPIO_WritePin(switches[i]->PORT, switches[i]->PIN, ((1<<i)&newState)>>i);
 8006542:	4a11      	ldr	r2, [pc, #68]	; (8006588 <Switch_Power+0x6c>)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800654a:	6818      	ldr	r0, [r3, #0]
 800654c:	4a0e      	ldr	r2, [pc, #56]	; (8006588 <Switch_Power+0x6c>)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006554:	8899      	ldrh	r1, [r3, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	409a      	lsls	r2, r3
 800655c:	79bb      	ldrb	r3, [r7, #6]
 800655e:	401a      	ands	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	fa42 f303 	asr.w	r3, r2, r3
 8006566:	b2db      	uxtb	r3, r3
 8006568:	461a      	mov	r2, r3
 800656a:	f7fd f97f 	bl	800386c <HAL_GPIO_WritePin>
	for(uint32_t i=0; i<5; i++)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3301      	adds	r3, #1
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b04      	cmp	r3, #4
 8006578:	d9db      	bls.n	8006532 <Switch_Power+0x16>
		}
	}

	Acknowledge(SWITCH_POWER);
 800657a:	2001      	movs	r0, #1
 800657c:	f7ff ff5c 	bl	8006438 <Acknowledge>
}
 8006580:	bf00      	nop
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20000028 	.word	0x20000028

0800658c <Switch_DC>:

void Switch_DC(uint8_t channelEN, uint8_t newDC[8])
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	6039      	str	r1, [r7, #0]
 8006596:	71fb      	strb	r3, [r7, #7]
	uint32_t pos=3; //start at pos 3 and use a length 8 array so that we can just pass rx data
 8006598:	2303      	movs	r3, #3
 800659a:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 800659c:	2300      	movs	r3, #0
 800659e:	60bb      	str	r3, [r7, #8]
 80065a0:	e016      	b.n	80065d0 <Switch_DC+0x44>
	{
		if ((1<<i) & channelEN)
 80065a2:	79fa      	ldrb	r2, [r7, #7]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	fa42 f303 	asr.w	r3, r2, r3
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00b      	beq.n	80065ca <Switch_DC+0x3e>
		{
			Write_PWM(i, newDC[pos]);
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	4619      	mov	r1, r3
 80065be:	68b8      	ldr	r0, [r7, #8]
 80065c0:	f002 f9fa 	bl	80089b8 <Write_PWM>
			pos++;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3301      	adds	r3, #1
 80065c8:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	3301      	adds	r3, #1
 80065ce:	60bb      	str	r3, [r7, #8]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d9e5      	bls.n	80065a2 <Switch_DC+0x16>
		}
	}

	Acknowledge(CHANGE_DC);
 80065d6:	2002      	movs	r0, #2
 80065d8:	f7ff ff2e 	bl	8006438 <Acknowledge>
}
 80065dc:	bf00      	nop
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <Config_Message>:


void Config_Message(uint8_t message, uint8_t change, uint16_t data)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	71fb      	strb	r3, [r7, #7]
 80065ee:	460b      	mov	r3, r1
 80065f0:	71bb      	strb	r3, [r7, #6]
 80065f2:	4613      	mov	r3, r2
 80065f4:	80bb      	strh	r3, [r7, #4]
	if(message>7)
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	2b07      	cmp	r3, #7
 80065fa:	d903      	bls.n	8006604 <Config_Message+0x20>
	{
		Set_Error(ERR_MODIFY_INVALID_MESSAGE);
 80065fc:	2021      	movs	r0, #33	; 0x21
 80065fe:	f002 f92d 	bl	800885c <Set_Error>
		return;
 8006602:	e035      	b.n	8006670 <Config_Message+0x8c>
	}

	if(change<8)
 8006604:	79bb      	ldrb	r3, [r7, #6]
 8006606:	2b07      	cmp	r3, #7
 8006608:	d80a      	bhi.n	8006620 <Config_Message+0x3c>
	{
		Can_Config_Bytes[message][change]=data;
 800660a:	79fa      	ldrb	r2, [r7, #7]
 800660c:	79bb      	ldrb	r3, [r7, #6]
 800660e:	88b9      	ldrh	r1, [r7, #4]
 8006610:	b2c8      	uxtb	r0, r1
 8006612:	4919      	ldr	r1, [pc, #100]	; (8006678 <Config_Message+0x94>)
 8006614:	00d2      	lsls	r2, r2, #3
 8006616:	440a      	add	r2, r1
 8006618:	4413      	add	r3, r2
 800661a:	4602      	mov	r2, r0
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	e024      	b.n	800666a <Config_Message+0x86>
	}
	else if(change<16)
 8006620:	79bb      	ldrb	r3, [r7, #6]
 8006622:	2b0f      	cmp	r3, #15
 8006624:	d80b      	bhi.n	800663e <Config_Message+0x5a>
	{
		Can_Config_Datas[message][change-8]=data;
 8006626:	79fa      	ldrb	r2, [r7, #7]
 8006628:	79bb      	ldrb	r3, [r7, #6]
 800662a:	3b08      	subs	r3, #8
 800662c:	88b9      	ldrh	r1, [r7, #4]
 800662e:	b2c8      	uxtb	r0, r1
 8006630:	4912      	ldr	r1, [pc, #72]	; (800667c <Config_Message+0x98>)
 8006632:	00d2      	lsls	r2, r2, #3
 8006634:	440a      	add	r2, r1
 8006636:	4413      	add	r3, r2
 8006638:	4602      	mov	r2, r0
 800663a:	701a      	strb	r2, [r3, #0]
 800663c:	e015      	b.n	800666a <Config_Message+0x86>
	}
	else if(change==16)
 800663e:	79bb      	ldrb	r3, [r7, #6]
 8006640:	2b10      	cmp	r3, #16
 8006642:	d105      	bne.n	8006650 <Config_Message+0x6c>
	{
		Can_IDs[message]=data;
 8006644:	79fb      	ldrb	r3, [r7, #7]
 8006646:	490e      	ldr	r1, [pc, #56]	; (8006680 <Config_Message+0x9c>)
 8006648:	88ba      	ldrh	r2, [r7, #4]
 800664a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800664e:	e00c      	b.n	800666a <Config_Message+0x86>
	}
	else if(change==17)
 8006650:	79bb      	ldrb	r3, [r7, #6]
 8006652:	2b11      	cmp	r3, #17
 8006654:	d105      	bne.n	8006662 <Config_Message+0x7e>
	{
		Can_DLCs[message]=data;
 8006656:	79fb      	ldrb	r3, [r7, #7]
 8006658:	88ba      	ldrh	r2, [r7, #4]
 800665a:	b2d1      	uxtb	r1, r2
 800665c:	4a09      	ldr	r2, [pc, #36]	; (8006684 <Config_Message+0xa0>)
 800665e:	54d1      	strb	r1, [r2, r3]
 8006660:	e003      	b.n	800666a <Config_Message+0x86>
	}
	else
	{
		Set_Error(ERR_MODIFY_INVALID_THING);
 8006662:	2022      	movs	r0, #34	; 0x22
 8006664:	f002 f8fa 	bl	800885c <Set_Error>
		return;
 8006668:	e002      	b.n	8006670 <Config_Message+0x8c>
	}

	Acknowledge(CONFIG_MESSAGE);
 800666a:	2081      	movs	r0, #129	; 0x81
 800666c:	f7ff fee4 	bl	8006438 <Acknowledge>
}
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	200002c0 	.word	0x200002c0
 800667c:	20000168 	.word	0x20000168
 8006680:	200007c0 	.word	0x200007c0
 8006684:	20000860 	.word	0x20000860

08006688 <Config_Switch_Defaults>:

void Config_Switch_Defaults(uint8_t enableChanges, uint8_t newState)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	4603      	mov	r3, r0
 8006690:	460a      	mov	r2, r1
 8006692:	71fb      	strb	r3, [r7, #7]
 8006694:	4613      	mov	r3, r2
 8006696:	71bb      	strb	r3, [r7, #6]
	for(uint32_t i=0; i<6; i++)
 8006698:	2300      	movs	r3, #0
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	e02f      	b.n	80066fe <Config_Switch_Defaults+0x76>
	{
		if (((enableChanges>>i)&0b1))
 800669e:	79fa      	ldrb	r2, [r7, #7]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	fa42 f303 	asr.w	r3, r2, r3
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d024      	beq.n	80066f8 <Config_Switch_Defaults+0x70>
		{
			if(((newState>>i)&0b1))
 80066ae:	79ba      	ldrb	r2, [r7, #6]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	fa42 f303 	asr.w	r3, r2, r3
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00d      	beq.n	80066da <Config_Switch_Defaults+0x52>
			{
				Default_Switch_State|=(1<<i);
 80066be:	2201      	movs	r2, #1
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	fa02 f303 	lsl.w	r3, r2, r3
 80066c6:	b25a      	sxtb	r2, r3
 80066c8:	4b12      	ldr	r3, [pc, #72]	; (8006714 <Config_Switch_Defaults+0x8c>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	b25b      	sxtb	r3, r3
 80066ce:	4313      	orrs	r3, r2
 80066d0:	b25b      	sxtb	r3, r3
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	4b0f      	ldr	r3, [pc, #60]	; (8006714 <Config_Switch_Defaults+0x8c>)
 80066d6:	701a      	strb	r2, [r3, #0]
 80066d8:	e00e      	b.n	80066f8 <Config_Switch_Defaults+0x70>
			}
			else
			{
				Default_Switch_State&=~(1<<i);
 80066da:	2201      	movs	r2, #1
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	fa02 f303 	lsl.w	r3, r2, r3
 80066e2:	b25b      	sxtb	r3, r3
 80066e4:	43db      	mvns	r3, r3
 80066e6:	b25a      	sxtb	r2, r3
 80066e8:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <Config_Switch_Defaults+0x8c>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	b25b      	sxtb	r3, r3
 80066ee:	4013      	ands	r3, r2
 80066f0:	b25b      	sxtb	r3, r3
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	4b07      	ldr	r3, [pc, #28]	; (8006714 <Config_Switch_Defaults+0x8c>)
 80066f6:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<6; i++)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3301      	adds	r3, #1
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b05      	cmp	r3, #5
 8006702:	d9cc      	bls.n	800669e <Config_Switch_Defaults+0x16>
			}
		}
	}

	Acknowledge(CONFIG_SWITCHES_DEFAULT);
 8006704:	2082      	movs	r0, #130	; 0x82
 8006706:	f7ff fe97 	bl	8006438 <Acknowledge>
}
 800670a:	bf00      	nop
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20000477 	.word	0x20000477

08006718 <Config_Can_Sync>:

void Config_Can_Sync(uint8_t enableChanges, uint8_t newState)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	460a      	mov	r2, r1
 8006722:	71fb      	strb	r3, [r7, #7]
 8006724:	4613      	mov	r3, r2
 8006726:	71bb      	strb	r3, [r7, #6]
	for(uint32_t i=0; i<8; i++)
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	e02f      	b.n	800678e <Config_Can_Sync+0x76>
	{
		if (((enableChanges>>i)&0b1))
 800672e:	79fa      	ldrb	r2, [r7, #7]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	fa42 f303 	asr.w	r3, r2, r3
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d024      	beq.n	8006788 <Config_Can_Sync+0x70>
		{
			if(((newState>>i)&0b1))
 800673e:	79ba      	ldrb	r2, [r7, #6]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	fa42 f303 	asr.w	r3, r2, r3
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00d      	beq.n	800676a <Config_Can_Sync+0x52>
			{
				Can_Sync_Enable|=(1<<i);
 800674e:	2201      	movs	r2, #1
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	fa02 f303 	lsl.w	r3, r2, r3
 8006756:	b25a      	sxtb	r2, r3
 8006758:	4b12      	ldr	r3, [pc, #72]	; (80067a4 <Config_Can_Sync+0x8c>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	b25b      	sxtb	r3, r3
 800675e:	4313      	orrs	r3, r2
 8006760:	b25b      	sxtb	r3, r3
 8006762:	b2da      	uxtb	r2, r3
 8006764:	4b0f      	ldr	r3, [pc, #60]	; (80067a4 <Config_Can_Sync+0x8c>)
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	e00e      	b.n	8006788 <Config_Can_Sync+0x70>
			}
			else
			{
				Can_Sync_Enable&=~(1<<i);
 800676a:	2201      	movs	r2, #1
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	b25b      	sxtb	r3, r3
 8006774:	43db      	mvns	r3, r3
 8006776:	b25a      	sxtb	r2, r3
 8006778:	4b0a      	ldr	r3, [pc, #40]	; (80067a4 <Config_Can_Sync+0x8c>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	b25b      	sxtb	r3, r3
 800677e:	4013      	ands	r3, r2
 8006780:	b25b      	sxtb	r3, r3
 8006782:	b2da      	uxtb	r2, r3
 8006784:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <Config_Can_Sync+0x8c>)
 8006786:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3301      	adds	r3, #1
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b07      	cmp	r3, #7
 8006792:	d9cc      	bls.n	800672e <Config_Can_Sync+0x16>
			}
		}
	}

	Acknowledge(CONFIG_CAN_SYNC);
 8006794:	2083      	movs	r0, #131	; 0x83
 8006796:	f7ff fe4f 	bl	8006438 <Acknowledge>
}
 800679a:	bf00      	nop
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	200004c0 	.word	0x200004c0

080067a8 <Config_Can_Timed>:

void Config_Can_Timed(uint8_t enableChanges, uint8_t newState)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	4603      	mov	r3, r0
 80067b0:	460a      	mov	r2, r1
 80067b2:	71fb      	strb	r3, [r7, #7]
 80067b4:	4613      	mov	r3, r2
 80067b6:	71bb      	strb	r3, [r7, #6]
	for(uint32_t i=0; i<8; i++)
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	e02f      	b.n	800681e <Config_Can_Timed+0x76>
	{
		if (((enableChanges>>i)&0b1))
 80067be:	79fa      	ldrb	r2, [r7, #7]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	fa42 f303 	asr.w	r3, r2, r3
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d024      	beq.n	8006818 <Config_Can_Timed+0x70>
		{
			if(((newState>>i)&0b1))
 80067ce:	79ba      	ldrb	r2, [r7, #6]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	fa42 f303 	asr.w	r3, r2, r3
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00d      	beq.n	80067fa <Config_Can_Timed+0x52>
			{
				Can_Timed_Enable|=(1<<i);
 80067de:	2201      	movs	r2, #1
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	b25a      	sxtb	r2, r3
 80067e8:	4b12      	ldr	r3, [pc, #72]	; (8006834 <Config_Can_Timed+0x8c>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	b25b      	sxtb	r3, r3
 80067ee:	4313      	orrs	r3, r2
 80067f0:	b25b      	sxtb	r3, r3
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <Config_Can_Timed+0x8c>)
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	e00e      	b.n	8006818 <Config_Can_Timed+0x70>
			}
			else
			{
				Can_Timed_Enable&=~(1<<i);
 80067fa:	2201      	movs	r2, #1
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006802:	b25b      	sxtb	r3, r3
 8006804:	43db      	mvns	r3, r3
 8006806:	b25a      	sxtb	r2, r3
 8006808:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <Config_Can_Timed+0x8c>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	b25b      	sxtb	r3, r3
 800680e:	4013      	ands	r3, r2
 8006810:	b25b      	sxtb	r3, r3
 8006812:	b2da      	uxtb	r2, r3
 8006814:	4b07      	ldr	r3, [pc, #28]	; (8006834 <Config_Can_Timed+0x8c>)
 8006816:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b07      	cmp	r3, #7
 8006822:	d9cc      	bls.n	80067be <Config_Can_Timed+0x16>
			}
		}
	}

	Acknowledge(CONFIG_CAN_TIMED);
 8006824:	2084      	movs	r0, #132	; 0x84
 8006826:	f7ff fe07 	bl	8006438 <Acknowledge>
}
 800682a:	bf00      	nop
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	200000e1 	.word	0x200000e1

08006838 <Config_Can_Interval>:

void Config_Can_Interval(uint16_t newInterval)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	4603      	mov	r3, r0
 8006840:	80fb      	strh	r3, [r7, #6]
	Can_Interval=newInterval;
 8006842:	4a05      	ldr	r2, [pc, #20]	; (8006858 <Config_Can_Interval+0x20>)
 8006844:	88fb      	ldrh	r3, [r7, #6]
 8006846:	8013      	strh	r3, [r2, #0]

	Acknowledge(CONFIG_CAN_INTERVAL);
 8006848:	2085      	movs	r0, #133	; 0x85
 800684a:	f7ff fdf5 	bl	8006438 <Acknowledge>
}
 800684e:	bf00      	nop
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	200000e4 	.word	0x200000e4

0800685c <Config_Can_Sync_Delay>:

void Config_Can_Sync_Delay(uint16_t newDelay)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	80fb      	strh	r3, [r7, #6]
	Can_Sync_Delay=newDelay;
 8006866:	4a05      	ldr	r2, [pc, #20]	; (800687c <Config_Can_Sync_Delay+0x20>)
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	8013      	strh	r3, [r2, #0]

	Acknowledge(CONFIG_CAN_SYNC_DELAY);
 800686c:	2086      	movs	r0, #134	; 0x86
 800686e:	f7ff fde3 	bl	8006438 <Acknowledge>
}
 8006872:	bf00      	nop
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	2000040c 	.word	0x2000040c

08006880 <Config_Temperature_Voltage_Reading>:

void Config_Temperature_Voltage_Reading(uint16_t interval, uint8_t tempBurst, uint8_t voltBurst)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	4603      	mov	r3, r0
 8006888:	80fb      	strh	r3, [r7, #6]
 800688a:	460b      	mov	r3, r1
 800688c:	717b      	strb	r3, [r7, #5]
 800688e:	4613      	mov	r3, r2
 8006890:	713b      	strb	r3, [r7, #4]
	if(tempBurst==255)
 8006892:	797b      	ldrb	r3, [r7, #5]
 8006894:	2bff      	cmp	r3, #255	; 0xff
 8006896:	d106      	bne.n	80068a6 <Config_Temperature_Voltage_Reading+0x26>
	{
		sample_temperature=255;
 8006898:	4b13      	ldr	r3, [pc, #76]	; (80068e8 <Config_Temperature_Voltage_Reading+0x68>)
 800689a:	22ff      	movs	r2, #255	; 0xff
 800689c:	601a      	str	r2, [r3, #0]
		SampleTemperatureBurst=0;
 800689e:	4b13      	ldr	r3, [pc, #76]	; (80068ec <Config_Temperature_Voltage_Reading+0x6c>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	e005      	b.n	80068b2 <Config_Temperature_Voltage_Reading+0x32>
	}
	else
	{
		sample_temperature=0;
 80068a6:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <Config_Temperature_Voltage_Reading+0x68>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]
		SampleTemperatureBurst=tempBurst;
 80068ac:	4a0f      	ldr	r2, [pc, #60]	; (80068ec <Config_Temperature_Voltage_Reading+0x6c>)
 80068ae:	797b      	ldrb	r3, [r7, #5]
 80068b0:	7013      	strb	r3, [r2, #0]
	}

	if(voltBurst==255)
 80068b2:	793b      	ldrb	r3, [r7, #4]
 80068b4:	2bff      	cmp	r3, #255	; 0xff
 80068b6:	d106      	bne.n	80068c6 <Config_Temperature_Voltage_Reading+0x46>
	{
		sample_voltage=255;
 80068b8:	4b0d      	ldr	r3, [pc, #52]	; (80068f0 <Config_Temperature_Voltage_Reading+0x70>)
 80068ba:	22ff      	movs	r2, #255	; 0xff
 80068bc:	601a      	str	r2, [r3, #0]
		SampleVoltageBurst=0;
 80068be:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <Config_Temperature_Voltage_Reading+0x74>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	e005      	b.n	80068d2 <Config_Temperature_Voltage_Reading+0x52>
	}
	else
	{
		sample_voltage=0;
 80068c6:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <Config_Temperature_Voltage_Reading+0x70>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]
		SampleVoltageBurst=voltBurst;
 80068cc:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <Config_Temperature_Voltage_Reading+0x74>)
 80068ce:	793b      	ldrb	r3, [r7, #4]
 80068d0:	7013      	strb	r3, [r2, #0]
	}

	SampleTemperatureVoltagePeriod=interval;
 80068d2:	4a09      	ldr	r2, [pc, #36]	; (80068f8 <Config_Temperature_Voltage_Reading+0x78>)
 80068d4:	88fb      	ldrh	r3, [r7, #6]
 80068d6:	8013      	strh	r3, [r2, #0]

	Acknowledge(CONFIG_CAN_TV_READING);
 80068d8:	2087      	movs	r0, #135	; 0x87
 80068da:	f7ff fdad 	bl	8006438 <Acknowledge>
}
 80068de:	bf00      	nop
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	2000047c 	.word	0x2000047c
 80068ec:	20000852 	.word	0x20000852
 80068f0:	20000090 	.word	0x20000090
 80068f4:	200001a9 	.word	0x200001a9
 80068f8:	200008bc 	.word	0x200008bc

080068fc <Config_Default_DC>:

void Config_Default_DC(uint8_t channelEN, uint8_t newDC[8])
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	4603      	mov	r3, r0
 8006904:	6039      	str	r1, [r7, #0]
 8006906:	71fb      	strb	r3, [r7, #7]
	uint32_t pos=3; //start at pos 3 and use a length 8 array so that we can just pass rx data
 8006908:	2303      	movs	r3, #3
 800690a:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 800690c:	2300      	movs	r3, #0
 800690e:	60bb      	str	r3, [r7, #8]
 8006910:	e016      	b.n	8006940 <Config_Default_DC+0x44>
	{
		if ((1<<i) & channelEN)
 8006912:	79fa      	ldrb	r2, [r7, #7]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	fa42 f303 	asr.w	r3, r2, r3
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00b      	beq.n	800693a <Config_Default_DC+0x3e>
		{
			PWM_Pulses[i]=newDC[pos];
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	b299      	uxth	r1, r3
 800692c:	4a09      	ldr	r2, [pc, #36]	; (8006954 <Config_Default_DC+0x58>)
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pos++;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3301      	adds	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	3301      	adds	r3, #1
 800693e:	60bb      	str	r3, [r7, #8]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b04      	cmp	r3, #4
 8006944:	d9e5      	bls.n	8006912 <Config_Default_DC+0x16>
		}
	}

	Acknowledge(CONFIG_DEFAULT_DC);
 8006946:	2088      	movs	r0, #136	; 0x88
 8006948:	f7ff fd76 	bl	8006438 <Acknowledge>
}
 800694c:	bf00      	nop
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	2000076c 	.word	0x2000076c

08006958 <Config_PWM_Prescalers>:

void Config_PWM_Prescalers(uint8_t channelEN, uint8_t newPrescalers[8])
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	4603      	mov	r3, r0
 8006960:	6039      	str	r1, [r7, #0]
 8006962:	71fb      	strb	r3, [r7, #7]
	uint32_t pos=3; //start at pos 3 and use a length 8 array so that we can just pass rx data
 8006964:	2303      	movs	r3, #3
 8006966:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 8006968:	2300      	movs	r3, #0
 800696a:	60bb      	str	r3, [r7, #8]
 800696c:	e016      	b.n	800699c <Config_PWM_Prescalers+0x44>
	{
		if ((1<<i) & channelEN)
 800696e:	79fa      	ldrb	r2, [r7, #7]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	fa42 f303 	asr.w	r3, r2, r3
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00b      	beq.n	8006996 <Config_PWM_Prescalers+0x3e>
		{
			PWM_Prescalers[i]=newPrescalers[pos];
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4413      	add	r3, r2
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	b299      	uxth	r1, r3
 8006988:	4a09      	ldr	r2, [pc, #36]	; (80069b0 <Config_PWM_Prescalers+0x58>)
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pos++;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3301      	adds	r3, #1
 8006994:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	3301      	adds	r3, #1
 800699a:	60bb      	str	r3, [r7, #8]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d9e5      	bls.n	800696e <Config_PWM_Prescalers+0x16>
		}
	}

	Acknowledge(CONFIG_PWM_PRESCALERS);
 80069a2:	2089      	movs	r0, #137	; 0x89
 80069a4:	f7ff fd48 	bl	8006438 <Acknowledge>
}
 80069a8:	bf00      	nop
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	20000554 	.word	0x20000554

080069b4 <Config_Setup>:

#define TEST_PWM_NOT_INPUT	1


void Config_Setup(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
	if(Flash_Read(FLASH_PAGE_63)==0xFFFFFFFF) //initialize the flash to avoid errors
 80069b8:	4807      	ldr	r0, [pc, #28]	; (80069d8 <Config_Setup+0x24>)
 80069ba:	f000 feff 	bl	80077bc <Flash_Read>
 80069be:	4603      	mov	r3, r0
 80069c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c4:	d104      	bne.n	80069d0 <Config_Setup+0x1c>

		Config_1();

#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_0();
 80069c6:	f000 f809 	bl	80069dc <Config_0>

#endif

		Config_Write_Flash();
 80069ca:	f000 f999 	bl	8006d00 <Config_Write_Flash>
	}
	else //if flash is not blank read in values from flash
	{
		Config_Read_Flash();
	}
}
 80069ce:	e001      	b.n	80069d4 <Config_Setup+0x20>
		Config_Read_Flash();
 80069d0:	f000 fc0a 	bl	80071e8 <Config_Read_Flash>
}
 80069d4:	bf00      	nop
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	0801f800 	.word	0x0801f800

080069dc <Config_0>:


void Config_0(void)
{
 80069dc:	b4b0      	push	{r4, r5, r7}
 80069de:	b0a3      	sub	sp, #140	; 0x8c
 80069e0:	af00      	add	r7, sp, #0
	//TODO: check that these work properly
	warn_undervoltage_U5=18000;
 80069e2:	4b9a      	ldr	r3, [pc, #616]	; (8006c4c <Config_0+0x270>)
 80069e4:	f244 6250 	movw	r2, #18000	; 0x4650
 80069e8:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U5=28000;
 80069ea:	4b99      	ldr	r3, [pc, #612]	; (8006c50 <Config_0+0x274>)
 80069ec:	f646 5260 	movw	r2, #28000	; 0x6d60
 80069f0:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U5=0;
 80069f2:	4b98      	ldr	r3, [pc, #608]	; (8006c54 <Config_0+0x278>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U5=1023;
 80069f8:	4b97      	ldr	r3, [pc, #604]	; (8006c58 <Config_0+0x27c>)
 80069fa:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80069fe:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U5I0=0;
 8006a00:	4b96      	ldr	r3, [pc, #600]	; (8006c5c <Config_0+0x280>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U5I0=1000;
 8006a06:	4b96      	ldr	r3, [pc, #600]	; (8006c60 <Config_0+0x284>)
 8006a08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a0c:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U5I1=0;
 8006a0e:	4b95      	ldr	r3, [pc, #596]	; (8006c64 <Config_0+0x288>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U5I1=1000;
 8006a14:	4b94      	ldr	r3, [pc, #592]	; (8006c68 <Config_0+0x28c>)
 8006a16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a1a:	801a      	strh	r2, [r3, #0]
	warn_undervoltage_U6=18000;
 8006a1c:	4b93      	ldr	r3, [pc, #588]	; (8006c6c <Config_0+0x290>)
 8006a1e:	f244 6250 	movw	r2, #18000	; 0x4650
 8006a22:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U6=28000;
 8006a24:	4b92      	ldr	r3, [pc, #584]	; (8006c70 <Config_0+0x294>)
 8006a26:	f646 5260 	movw	r2, #28000	; 0x6d60
 8006a2a:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U6=0;
 8006a2c:	4b91      	ldr	r3, [pc, #580]	; (8006c74 <Config_0+0x298>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U6=1023;
 8006a32:	4b91      	ldr	r3, [pc, #580]	; (8006c78 <Config_0+0x29c>)
 8006a34:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006a38:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U6I0=0;
 8006a3a:	4b90      	ldr	r3, [pc, #576]	; (8006c7c <Config_0+0x2a0>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U6I0=1000;
 8006a40:	4b8f      	ldr	r3, [pc, #572]	; (8006c80 <Config_0+0x2a4>)
 8006a42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a46:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U6I1=0;
 8006a48:	4b8e      	ldr	r3, [pc, #568]	; (8006c84 <Config_0+0x2a8>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U6I1=1000;
 8006a4e:	4b8e      	ldr	r3, [pc, #568]	; (8006c88 <Config_0+0x2ac>)
 8006a50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a54:	801a      	strh	r2, [r3, #0]
	warn_undervoltage_U7=18000;
 8006a56:	4b8d      	ldr	r3, [pc, #564]	; (8006c8c <Config_0+0x2b0>)
 8006a58:	f244 6250 	movw	r2, #18000	; 0x4650
 8006a5c:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U7=28000;
 8006a5e:	4b8c      	ldr	r3, [pc, #560]	; (8006c90 <Config_0+0x2b4>)
 8006a60:	f646 5260 	movw	r2, #28000	; 0x6d60
 8006a64:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U7=0;
 8006a66:	4b8b      	ldr	r3, [pc, #556]	; (8006c94 <Config_0+0x2b8>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U7=1023;
 8006a6c:	4b8a      	ldr	r3, [pc, #552]	; (8006c98 <Config_0+0x2bc>)
 8006a6e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006a72:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U7I0=0;
 8006a74:	4b89      	ldr	r3, [pc, #548]	; (8006c9c <Config_0+0x2c0>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U7I0=1000;
 8006a7a:	4b89      	ldr	r3, [pc, #548]	; (8006ca0 <Config_0+0x2c4>)
 8006a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a80:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U7I1=0;
 8006a82:	4b88      	ldr	r3, [pc, #544]	; (8006ca4 <Config_0+0x2c8>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U7I1=1000;
 8006a88:	4b87      	ldr	r3, [pc, #540]	; (8006ca8 <Config_0+0x2cc>)
 8006a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a8e:	801a      	strh	r2, [r3, #0]


#if TEST_PWM_INPUT

	Digital_In_EN = 0b00000000;
 8006a90:	4b86      	ldr	r3, [pc, #536]	; (8006cac <Config_0+0x2d0>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	701a      	strb	r2, [r3, #0]
	PWM_Out_EN = 0b00000000;
 8006a96:	4b86      	ldr	r3, [pc, #536]	; (8006cb0 <Config_0+0x2d4>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	701a      	strb	r2, [r3, #0]
	PWM_Prescalers[0] = 999; PWM_Prescalers[1] = 0; PWM_Prescalers[2] = 0; PWM_Prescalers[3] = 999; PWM_Prescalers[4] = 999;
 8006a9c:	4b85      	ldr	r3, [pc, #532]	; (8006cb4 <Config_0+0x2d8>)
 8006a9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006aa2:	801a      	strh	r2, [r3, #0]
 8006aa4:	4b83      	ldr	r3, [pc, #524]	; (8006cb4 <Config_0+0x2d8>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	805a      	strh	r2, [r3, #2]
 8006aaa:	4b82      	ldr	r3, [pc, #520]	; (8006cb4 <Config_0+0x2d8>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	809a      	strh	r2, [r3, #4]
 8006ab0:	4b80      	ldr	r3, [pc, #512]	; (8006cb4 <Config_0+0x2d8>)
 8006ab2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006ab6:	80da      	strh	r2, [r3, #6]
 8006ab8:	4b7e      	ldr	r3, [pc, #504]	; (8006cb4 <Config_0+0x2d8>)
 8006aba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006abe:	811a      	strh	r2, [r3, #8]
	PWM_Pulses[0] = 0; PWM_Pulses[1] = 0; PWM_Pulses[2] = 0; PWM_Pulses[3] = 0; PWM_Pulses[4] = 0;
 8006ac0:	4b7d      	ldr	r3, [pc, #500]	; (8006cb8 <Config_0+0x2dc>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	801a      	strh	r2, [r3, #0]
 8006ac6:	4b7c      	ldr	r3, [pc, #496]	; (8006cb8 <Config_0+0x2dc>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	805a      	strh	r2, [r3, #2]
 8006acc:	4b7a      	ldr	r3, [pc, #488]	; (8006cb8 <Config_0+0x2dc>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	809a      	strh	r2, [r3, #4]
 8006ad2:	4b79      	ldr	r3, [pc, #484]	; (8006cb8 <Config_0+0x2dc>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	80da      	strh	r2, [r3, #6]
 8006ad8:	4b77      	ldr	r3, [pc, #476]	; (8006cb8 <Config_0+0x2dc>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	811a      	strh	r2, [r3, #8]
	PWM_In_EN = 0b00011001; //not even going to try PB4 as PWM input, PB6 doesn't have option as PWM input
 8006ade:	4b77      	ldr	r3, [pc, #476]	; (8006cbc <Config_0+0x2e0>)
 8006ae0:	2219      	movs	r2, #25
 8006ae2:	701a      	strb	r2, [r3, #0]
	PWM_In_EN = 0b00000000;

#endif


	Default_Switch_State = 0b00000000;
 8006ae4:	4b76      	ldr	r3, [pc, #472]	; (8006cc0 <Config_0+0x2e4>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	701a      	strb	r2, [r3, #0]

	Can_IDs[0] = 0x0F; Can_IDs[1] = 0x10; Can_IDs[2] = 0x11; Can_IDs[3] = 0x12; Can_IDs[4] = 0x13; Can_IDs[5] = 0x14; Can_IDs[6] = 0x15; Can_IDs[7] = 0x16;
 8006aea:	4b76      	ldr	r3, [pc, #472]	; (8006cc4 <Config_0+0x2e8>)
 8006aec:	220f      	movs	r2, #15
 8006aee:	801a      	strh	r2, [r3, #0]
 8006af0:	4b74      	ldr	r3, [pc, #464]	; (8006cc4 <Config_0+0x2e8>)
 8006af2:	2210      	movs	r2, #16
 8006af4:	805a      	strh	r2, [r3, #2]
 8006af6:	4b73      	ldr	r3, [pc, #460]	; (8006cc4 <Config_0+0x2e8>)
 8006af8:	2211      	movs	r2, #17
 8006afa:	809a      	strh	r2, [r3, #4]
 8006afc:	4b71      	ldr	r3, [pc, #452]	; (8006cc4 <Config_0+0x2e8>)
 8006afe:	2212      	movs	r2, #18
 8006b00:	80da      	strh	r2, [r3, #6]
 8006b02:	4b70      	ldr	r3, [pc, #448]	; (8006cc4 <Config_0+0x2e8>)
 8006b04:	2213      	movs	r2, #19
 8006b06:	811a      	strh	r2, [r3, #8]
 8006b08:	4b6e      	ldr	r3, [pc, #440]	; (8006cc4 <Config_0+0x2e8>)
 8006b0a:	2214      	movs	r2, #20
 8006b0c:	815a      	strh	r2, [r3, #10]
 8006b0e:	4b6d      	ldr	r3, [pc, #436]	; (8006cc4 <Config_0+0x2e8>)
 8006b10:	2215      	movs	r2, #21
 8006b12:	819a      	strh	r2, [r3, #12]
 8006b14:	4b6b      	ldr	r3, [pc, #428]	; (8006cc4 <Config_0+0x2e8>)
 8006b16:	2216      	movs	r2, #22
 8006b18:	81da      	strh	r2, [r3, #14]
	Can_DLCs[0] = 8; Can_DLCs[1] = 8; Can_DLCs[2] = 7; Can_DLCs[3] = 3; Can_DLCs[4] = 2; Can_DLCs[5] = 8; Can_DLCs[6] = 3; Can_DLCs[7] = 1;
 8006b1a:	4b6b      	ldr	r3, [pc, #428]	; (8006cc8 <Config_0+0x2ec>)
 8006b1c:	2208      	movs	r2, #8
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	4b69      	ldr	r3, [pc, #420]	; (8006cc8 <Config_0+0x2ec>)
 8006b22:	2208      	movs	r2, #8
 8006b24:	705a      	strb	r2, [r3, #1]
 8006b26:	4b68      	ldr	r3, [pc, #416]	; (8006cc8 <Config_0+0x2ec>)
 8006b28:	2207      	movs	r2, #7
 8006b2a:	709a      	strb	r2, [r3, #2]
 8006b2c:	4b66      	ldr	r3, [pc, #408]	; (8006cc8 <Config_0+0x2ec>)
 8006b2e:	2203      	movs	r2, #3
 8006b30:	70da      	strb	r2, [r3, #3]
 8006b32:	4b65      	ldr	r3, [pc, #404]	; (8006cc8 <Config_0+0x2ec>)
 8006b34:	2202      	movs	r2, #2
 8006b36:	711a      	strb	r2, [r3, #4]
 8006b38:	4b63      	ldr	r3, [pc, #396]	; (8006cc8 <Config_0+0x2ec>)
 8006b3a:	2208      	movs	r2, #8
 8006b3c:	715a      	strb	r2, [r3, #5]
 8006b3e:	4b62      	ldr	r3, [pc, #392]	; (8006cc8 <Config_0+0x2ec>)
 8006b40:	2203      	movs	r2, #3
 8006b42:	719a      	strb	r2, [r3, #6]
 8006b44:	4b60      	ldr	r3, [pc, #384]	; (8006cc8 <Config_0+0x2ec>)
 8006b46:	2201      	movs	r2, #1
 8006b48:	71da      	strb	r2, [r3, #7]

	uint8_t temp_Can_Config_Bytes[8][8]={	{ 1, 1, 1, 1, 1, 1, 1, 1 },
 8006b4a:	4b60      	ldr	r3, [pc, #384]	; (8006ccc <Config_0+0x2f0>)
 8006b4c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8006b50:	461d      	mov	r5, r3
 8006b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006b62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
											{ 1, 1, 1, 0, 0, 0, 0, 0 },
											{ 2, 0, 0, 0, 0, 0, 0, 0 },
											{ 2, 0, 1, 1, 1, 2, 0, 1 },
											{ 0, 0, 0, 0, 0, 0, 0, 0 },
											{ 1, 0, 0, 0, 0, 0, 0, 0 }	};
	uint8_t temp_Can_Config_Datas[8][8]={	{ 1, 1, 1, 1, 1, 1, 1, 1 },
 8006b66:	4b5a      	ldr	r3, [pc, #360]	; (8006cd0 <Config_0+0x2f4>)
 8006b68:	463c      	mov	r4, r7
 8006b6a:	461d      	mov	r5, r3
 8006b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
											{ MESS_U5V, MESS_U6V, MESS_U7V, 0, 0, 0, 0, 0 },
											{ MESS_U5V, 0, 0, 0, 0, 0, 0, 0 },
											{ MESS_PWM0_Freq, 0, MESS_PWM0_DC, MESS_PWM3_Freq, MESS_PWM3_DC, MESS_PWM4_Freq, 0, MESS_PWM4_DC },
											{ 0, 0, 0, 0, 0, 0, 0, 0 },
											{ MESS_DI, 0, 0, 0, 0, 0, 0, 0 }	};
	for(uint32_t i=0; i<8; i++)
 8006b80:	2300      	movs	r3, #0
 8006b82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b86:	e03b      	b.n	8006c00 <Config_0+0x224>
	{
		for(uint32_t j=0; j<8; j++)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b8e:	e02e      	b.n	8006bee <Config_0+0x212>
		{
			Can_Config_Bytes[i][j]=temp_Can_Config_Bytes[i][j];
 8006b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006b9a:	441a      	add	r2, r3
 8006b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ba0:	4413      	add	r3, r2
 8006ba2:	3b48      	subs	r3, #72	; 0x48
 8006ba4:	7819      	ldrb	r1, [r3, #0]
 8006ba6:	4a4b      	ldr	r2, [pc, #300]	; (8006cd4 <Config_0+0x2f8>)
 8006ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	441a      	add	r2, r3
 8006bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bb4:	4413      	add	r3, r2
 8006bb6:	460a      	mov	r2, r1
 8006bb8:	701a      	strb	r2, [r3, #0]
			Can_Config_Datas[i][j]=temp_Can_Config_Datas[i][j];
 8006bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006bc4:	441a      	add	r2, r3
 8006bc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bca:	4413      	add	r3, r2
 8006bcc:	3b88      	subs	r3, #136	; 0x88
 8006bce:	7819      	ldrb	r1, [r3, #0]
 8006bd0:	4a41      	ldr	r2, [pc, #260]	; (8006cd8 <Config_0+0x2fc>)
 8006bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bd6:	00db      	lsls	r3, r3, #3
 8006bd8:	441a      	add	r2, r3
 8006bda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bde:	4413      	add	r3, r2
 8006be0:	460a      	mov	r2, r1
 8006be2:	701a      	strb	r2, [r3, #0]
		for(uint32_t j=0; j<8; j++)
 8006be4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006be8:	3301      	adds	r3, #1
 8006bea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bf2:	2b07      	cmp	r3, #7
 8006bf4:	d9cc      	bls.n	8006b90 <Config_0+0x1b4>
	for(uint32_t i=0; i<8; i++)
 8006bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c04:	2b07      	cmp	r3, #7
 8006c06:	d9bf      	bls.n	8006b88 <Config_0+0x1ac>
		}
	}
	Can_Sync_Enable = 0b00100000;
 8006c08:	4b34      	ldr	r3, [pc, #208]	; (8006cdc <Config_0+0x300>)
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	701a      	strb	r2, [r3, #0]
	Can_Timed_Enable = 0b10000000;
 8006c0e:	4b34      	ldr	r3, [pc, #208]	; (8006ce0 <Config_0+0x304>)
 8006c10:	2280      	movs	r2, #128	; 0x80
 8006c12:	701a      	strb	r2, [r3, #0]
	Can_Interval=1000;
 8006c14:	4b33      	ldr	r3, [pc, #204]	; (8006ce4 <Config_0+0x308>)
 8006c16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c1a:	801a      	strh	r2, [r3, #0]
	Can_Sync_Delay=0; //500 corresponds to 5ms delay
 8006c1c:	4b32      	ldr	r3, [pc, #200]	; (8006ce8 <Config_0+0x30c>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	801a      	strh	r2, [r3, #0]

	sample_temperature=0; //these are only saved to allow configuration of continous temperature/voltage reading
 8006c22:	4b32      	ldr	r3, [pc, #200]	; (8006cec <Config_0+0x310>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]
	sample_voltage=0;
 8006c28:	4b31      	ldr	r3, [pc, #196]	; (8006cf0 <Config_0+0x314>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
	SampleTemperatureVoltagePeriod=10; //1ms is a good compromise for now with temperature and whatnot, can test higher numbers if too hot
 8006c2e:	4b31      	ldr	r3, [pc, #196]	; (8006cf4 <Config_0+0x318>)
 8006c30:	220a      	movs	r2, #10
 8006c32:	801a      	strh	r2, [r3, #0]
	SampleTemperatureBurst=1;
 8006c34:	4b30      	ldr	r3, [pc, #192]	; (8006cf8 <Config_0+0x31c>)
 8006c36:	2201      	movs	r2, #1
 8006c38:	701a      	strb	r2, [r3, #0]
	SampleVoltageBurst=1;
 8006c3a:	4b30      	ldr	r3, [pc, #192]	; (8006cfc <Config_0+0x320>)
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	701a      	strb	r2, [r3, #0]
}
 8006c40:	bf00      	nop
 8006c42:	378c      	adds	r7, #140	; 0x8c
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bcb0      	pop	{r4, r5, r7}
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	2000085c 	.word	0x2000085c
 8006c50:	200008c0 	.word	0x200008c0
 8006c54:	20000878 	.word	0x20000878
 8006c58:	20000690 	.word	0x20000690
 8006c5c:	200001ec 	.word	0x200001ec
 8006c60:	200005a4 	.word	0x200005a4
 8006c64:	200008be 	.word	0x200008be
 8006c68:	200009b0 	.word	0x200009b0
 8006c6c:	2000054e 	.word	0x2000054e
 8006c70:	20000926 	.word	0x20000926
 8006c74:	200008c2 	.word	0x200008c2
 8006c78:	20000544 	.word	0x20000544
 8006c7c:	20000a34 	.word	0x20000a34
 8006c80:	20000210 	.word	0x20000210
 8006c84:	20000850 	.word	0x20000850
 8006c88:	200007b8 	.word	0x200007b8
 8006c8c:	200000de 	.word	0x200000de
 8006c90:	2000054c 	.word	0x2000054c
 8006c94:	20000614 	.word	0x20000614
 8006c98:	20000212 	.word	0x20000212
 8006c9c:	20000870 	.word	0x20000870
 8006ca0:	20000616 	.word	0x20000616
 8006ca4:	200000e2 	.word	0x200000e2
 8006ca8:	20000474 	.word	0x20000474
 8006cac:	200000e0 	.word	0x200000e0
 8006cb0:	20000924 	.word	0x20000924
 8006cb4:	20000554 	.word	0x20000554
 8006cb8:	2000076c 	.word	0x2000076c
 8006cbc:	20000476 	.word	0x20000476
 8006cc0:	20000477 	.word	0x20000477
 8006cc4:	200007c0 	.word	0x200007c0
 8006cc8:	20000860 	.word	0x20000860
 8006ccc:	0800a728 	.word	0x0800a728
 8006cd0:	0800a768 	.word	0x0800a768
 8006cd4:	200002c0 	.word	0x200002c0
 8006cd8:	20000168 	.word	0x20000168
 8006cdc:	200004c0 	.word	0x200004c0
 8006ce0:	200000e1 	.word	0x200000e1
 8006ce4:	200000e4 	.word	0x200000e4
 8006ce8:	2000040c 	.word	0x2000040c
 8006cec:	2000047c 	.word	0x2000047c
 8006cf0:	20000090 	.word	0x20000090
 8006cf4:	200008bc 	.word	0x200008bc
 8006cf8:	20000852 	.word	0x20000852
 8006cfc:	200001a9 	.word	0x200001a9

08006d00 <Config_Write_Flash>:
	//TODO: setup code for each node that will be in the car
}


void Config_Write_Flash(void)
{
 8006d00:	b5b0      	push	{r4, r5, r7, lr}
 8006d02:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 8006d06:	af00      	add	r7, sp, #0
	uint32_t data[512] = {0};
 8006d08:	f107 0320 	add.w	r3, r7, #32
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d12:	461a      	mov	r2, r3
 8006d14:	2100      	movs	r1, #0
 8006d16:	f003 fcf3 	bl	800a700 <memset>

	//bytes: [underlimit high], [underlimit low], [overlimit high], [overlimit low]
	data[U5_VOLTAGE_WARNING_LIMIT_POS]=((warn_undervoltage_U5<<0)&0xFFFF)+((warn_overvoltage_U5<<16)&0xFFFF0000);
 8006d1a:	4b8e      	ldr	r3, [pc, #568]	; (8006f54 <Config_Write_Flash+0x254>)
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	4b8d      	ldr	r3, [pc, #564]	; (8006f58 <Config_Write_Flash+0x258>)
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	041b      	lsls	r3, r3, #16
 8006d26:	441a      	add	r2, r3
 8006d28:	f107 0320 	add.w	r3, r7, #32
 8006d2c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	data[U5_TEMPERATURE_WARNING_LIMIT_POS]=((warn_undertemperature_U5<<0)&0xFFFF)+((warn_overtemperature_U5<<16)&0xFFFF0000);
 8006d30:	4b8a      	ldr	r3, [pc, #552]	; (8006f5c <Config_Write_Flash+0x25c>)
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	4b8a      	ldr	r3, [pc, #552]	; (8006f60 <Config_Write_Flash+0x260>)
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	041b      	lsls	r3, r3, #16
 8006d3c:	441a      	add	r2, r3
 8006d3e:	f107 0320 	add.w	r3, r7, #32
 8006d42:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	data[U5_CURRENT_WARNING_LIMIT_I0_POS]=((warn_undercurrent_U5I0<<0)&0xFFFF)+((warn_overcurrent_U5I0<<16)&0xFFFF0000);
 8006d46:	4b87      	ldr	r3, [pc, #540]	; (8006f64 <Config_Write_Flash+0x264>)
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	4b86      	ldr	r3, [pc, #536]	; (8006f68 <Config_Write_Flash+0x268>)
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	041b      	lsls	r3, r3, #16
 8006d52:	441a      	add	r2, r3
 8006d54:	f107 0320 	add.w	r3, r7, #32
 8006d58:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	data[U5_CURRENT_WARNING_LIMIT_I1_POS]=((warn_undercurrent_U5I1<<0)&0xFFFF)+((warn_overcurrent_U5I1<<16)&0xFFFF0000);
 8006d5c:	4b83      	ldr	r3, [pc, #524]	; (8006f6c <Config_Write_Flash+0x26c>)
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	461a      	mov	r2, r3
 8006d62:	4b83      	ldr	r3, [pc, #524]	; (8006f70 <Config_Write_Flash+0x270>)
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	041b      	lsls	r3, r3, #16
 8006d68:	441a      	add	r2, r3
 8006d6a:	f107 0320 	add.w	r3, r7, #32
 8006d6e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	data[U6_VOLTAGE_WARNING_LIMIT_POS]=((warn_undervoltage_U6<<0)&0xFFFF)+((warn_overvoltage_U6<<16)&0xFFFF0000);
 8006d72:	4b80      	ldr	r3, [pc, #512]	; (8006f74 <Config_Write_Flash+0x274>)
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	4b7f      	ldr	r3, [pc, #508]	; (8006f78 <Config_Write_Flash+0x278>)
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	041b      	lsls	r3, r3, #16
 8006d7e:	441a      	add	r2, r3
 8006d80:	f107 0320 	add.w	r3, r7, #32
 8006d84:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	data[U6_TEMPERATURE_WARNING_LIMIT_POS]=((warn_undertemperature_U6<<0)&0xFFFF)+((warn_overtemperature_U6<<16)&0xFFFF0000);
 8006d88:	4b7c      	ldr	r3, [pc, #496]	; (8006f7c <Config_Write_Flash+0x27c>)
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	4b7c      	ldr	r3, [pc, #496]	; (8006f80 <Config_Write_Flash+0x280>)
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	041b      	lsls	r3, r3, #16
 8006d94:	441a      	add	r2, r3
 8006d96:	f107 0320 	add.w	r3, r7, #32
 8006d9a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	data[U6_CURRENT_WARNING_LIMIT_I0_POS]=((warn_undercurrent_U6I0<<0)&0xFFFF)+((warn_overcurrent_U6I0<<16)&0xFFFF0000);
 8006d9e:	4b79      	ldr	r3, [pc, #484]	; (8006f84 <Config_Write_Flash+0x284>)
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	4b78      	ldr	r3, [pc, #480]	; (8006f88 <Config_Write_Flash+0x288>)
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	041b      	lsls	r3, r3, #16
 8006daa:	441a      	add	r2, r3
 8006dac:	f107 0320 	add.w	r3, r7, #32
 8006db0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	data[U6_CURRENT_WARNING_LIMIT_I1_POS]=((warn_undercurrent_U6I1<<0)&0xFFFF)+((warn_overcurrent_U6I1<<16)&0xFFFF0000);
 8006db4:	4b75      	ldr	r3, [pc, #468]	; (8006f8c <Config_Write_Flash+0x28c>)
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	461a      	mov	r2, r3
 8006dba:	4b75      	ldr	r3, [pc, #468]	; (8006f90 <Config_Write_Flash+0x290>)
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	041b      	lsls	r3, r3, #16
 8006dc0:	441a      	add	r2, r3
 8006dc2:	f107 0320 	add.w	r3, r7, #32
 8006dc6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	data[U7_VOLTAGE_WARNING_LIMIT_POS]=((warn_undervoltage_U7<<0)&0xFFFF)+((warn_overvoltage_U7<<16)&0xFFFF0000);
 8006dca:	4b72      	ldr	r3, [pc, #456]	; (8006f94 <Config_Write_Flash+0x294>)
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	4b71      	ldr	r3, [pc, #452]	; (8006f98 <Config_Write_Flash+0x298>)
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	041b      	lsls	r3, r3, #16
 8006dd6:	441a      	add	r2, r3
 8006dd8:	f107 0320 	add.w	r3, r7, #32
 8006ddc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	data[U7_TEMPERATURE_WARNING_LIMIT_POS]=((warn_undertemperature_U7<<0)&0xFFFF)+((warn_overtemperature_U7<<16)&0xFFFF0000);
 8006de0:	4b6e      	ldr	r3, [pc, #440]	; (8006f9c <Config_Write_Flash+0x29c>)
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	461a      	mov	r2, r3
 8006de6:	4b6e      	ldr	r3, [pc, #440]	; (8006fa0 <Config_Write_Flash+0x2a0>)
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	041b      	lsls	r3, r3, #16
 8006dec:	441a      	add	r2, r3
 8006dee:	f107 0320 	add.w	r3, r7, #32
 8006df2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	data[U7_CURRENT_WARNING_LIMIT_I0_POS]=((warn_undercurrent_U7I0<<0)&0xFFFF)+((warn_overcurrent_U7I0<<16)&0xFFFF0000);
 8006df6:	4b6b      	ldr	r3, [pc, #428]	; (8006fa4 <Config_Write_Flash+0x2a4>)
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	4b6a      	ldr	r3, [pc, #424]	; (8006fa8 <Config_Write_Flash+0x2a8>)
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	041b      	lsls	r3, r3, #16
 8006e02:	441a      	add	r2, r3
 8006e04:	f107 0320 	add.w	r3, r7, #32
 8006e08:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	data[U7_CURRENT_WARNING_LIMIT_I1_POS]=((warn_undercurrent_U7I1<<0)&0xFFFF)+((warn_overcurrent_U7I1<<16)&0xFFFF0000);
 8006e0c:	4b67      	ldr	r3, [pc, #412]	; (8006fac <Config_Write_Flash+0x2ac>)
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	4b67      	ldr	r3, [pc, #412]	; (8006fb0 <Config_Write_Flash+0x2b0>)
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	041b      	lsls	r3, r3, #16
 8006e18:	441a      	add	r2, r3
 8006e1a:	f107 0320 	add.w	r3, r7, #32
 8006e1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	//bytes: [enable falling edge to can], [enable rising edge to can], [digital in interrupt enable], [digital in enable]
	data[DIGITAL_IN_0_POS]=(Digital_In_EN&0xFF)+((Digital_In_Interrupt_EN&0xFF)<<8)+((Digital_In_Interrupt_Can_Rising&0xFF)<<16)+((Digital_In_Interrupt_Can_Falling&0xFF)<<24); //TODO: set this to be the things it should be for digital_in
 8006e22:	4b64      	ldr	r3, [pc, #400]	; (8006fb4 <Config_Write_Flash+0x2b4>)
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	4b63      	ldr	r3, [pc, #396]	; (8006fb8 <Config_Write_Flash+0x2b8>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	441a      	add	r2, r3
 8006e30:	4b62      	ldr	r3, [pc, #392]	; (8006fbc <Config_Write_Flash+0x2bc>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	041b      	lsls	r3, r3, #16
 8006e36:	441a      	add	r2, r3
 8006e38:	4b61      	ldr	r3, [pc, #388]	; (8006fc0 <Config_Write_Flash+0x2c0>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	061b      	lsls	r3, r3, #24
 8006e3e:	4413      	add	r3, r2
 8006e40:	461a      	mov	r2, r3
 8006e42:	f107 0320 	add.w	r3, r7, #32
 8006e46:	601a      	str	r2, [r3, #0]
	//bytes: [x], [x], [enable rising edge switch power], [enable falling edge switch power]
	data[DIGITAL_IN_1_POS]=(0)+(0)+((Digital_In_Interrupt_Power_Rising&0xFF)<<16)+((Digital_In_Interrupt_Power_Falling&0xFF)<<24);
 8006e48:	4b5e      	ldr	r3, [pc, #376]	; (8006fc4 <Config_Write_Flash+0x2c4>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	041a      	lsls	r2, r3, #16
 8006e4e:	4b5e      	ldr	r3, [pc, #376]	; (8006fc8 <Config_Write_Flash+0x2c8>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	061b      	lsls	r3, r3, #24
 8006e54:	4413      	add	r3, r2
 8006e56:	461a      	mov	r2, r3
 8006e58:	f107 0320 	add.w	r3, r7, #32
 8006e5c:	605a      	str	r2, [r3, #4]
	//TODO: read other stuff from digital in back to flash, make it work in general
	//bytes: [x], [x], [x], [x x U7/1 U7/0 U6/1 U6/0 U5/1 U5/0]
	data[DEFAULT_SWITCH_STATE_POS]=Default_Switch_State&0xFF;
 8006e5e:	4b5b      	ldr	r3, [pc, #364]	; (8006fcc <Config_Write_Flash+0x2cc>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	f107 0320 	add.w	r3, r7, #32
 8006e68:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	//bytes: [x], [x], [pwm input enable], [pwm output enable]
	data[PWM_EN_POS]=(PWM_Out_EN&0xFF)+((PWM_In_EN&0xFF)<<8);
 8006e6c:	4b58      	ldr	r3, [pc, #352]	; (8006fd0 <Config_Write_Flash+0x2d0>)
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	4b58      	ldr	r3, [pc, #352]	; (8006fd4 <Config_Write_Flash+0x2d4>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	021b      	lsls	r3, r3, #8
 8006e78:	4413      	add	r3, r2
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f107 0320 	add.w	r3, r7, #32
 8006e80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	//bytes: [pwm prescaler high], [pwm prescaler low], [pwm DC high], [pwm DC low]; note that prescaler=32 is ~20kHz, so probably will never be more than one byte; also DC is currently set up so 255 = 100% and 0 = 0%; so is only one byte
	data[PWM_0_POS]=((PWM_Prescalers[0]&0xFFFF)<<16)+((PWM_Pulses[0]&0xFFFF)<<0);
 8006e84:	4b54      	ldr	r3, [pc, #336]	; (8006fd8 <Config_Write_Flash+0x2d8>)
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	041b      	lsls	r3, r3, #16
 8006e8a:	4a54      	ldr	r2, [pc, #336]	; (8006fdc <Config_Write_Flash+0x2dc>)
 8006e8c:	8812      	ldrh	r2, [r2, #0]
 8006e8e:	4413      	add	r3, r2
 8006e90:	461a      	mov	r2, r3
 8006e92:	f107 0320 	add.w	r3, r7, #32
 8006e96:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	data[PWM_1_POS]=((PWM_Prescalers[1]&0xFFFF)<<16)+((PWM_Pulses[1]&0xFFFF)<<0);
 8006e9a:	4b4f      	ldr	r3, [pc, #316]	; (8006fd8 <Config_Write_Flash+0x2d8>)
 8006e9c:	885b      	ldrh	r3, [r3, #2]
 8006e9e:	041b      	lsls	r3, r3, #16
 8006ea0:	4a4e      	ldr	r2, [pc, #312]	; (8006fdc <Config_Write_Flash+0x2dc>)
 8006ea2:	8852      	ldrh	r2, [r2, #2]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f107 0320 	add.w	r3, r7, #32
 8006eac:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	data[PWM_2_POS]=((PWM_Prescalers[2]&0xFFFF)<<16)+((PWM_Pulses[2]&0xFFFF)<<0);
 8006eb0:	4b49      	ldr	r3, [pc, #292]	; (8006fd8 <Config_Write_Flash+0x2d8>)
 8006eb2:	889b      	ldrh	r3, [r3, #4]
 8006eb4:	041b      	lsls	r3, r3, #16
 8006eb6:	4a49      	ldr	r2, [pc, #292]	; (8006fdc <Config_Write_Flash+0x2dc>)
 8006eb8:	8892      	ldrh	r2, [r2, #4]
 8006eba:	4413      	add	r3, r2
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	f107 0320 	add.w	r3, r7, #32
 8006ec2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	data[PWM_3_POS]=((PWM_Prescalers[3]&0xFFFF)<<16)+((PWM_Pulses[3]&0xFFFF)<<0);
 8006ec6:	4b44      	ldr	r3, [pc, #272]	; (8006fd8 <Config_Write_Flash+0x2d8>)
 8006ec8:	88db      	ldrh	r3, [r3, #6]
 8006eca:	041b      	lsls	r3, r3, #16
 8006ecc:	4a43      	ldr	r2, [pc, #268]	; (8006fdc <Config_Write_Flash+0x2dc>)
 8006ece:	88d2      	ldrh	r2, [r2, #6]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f107 0320 	add.w	r3, r7, #32
 8006ed8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	data[PWM_4_POS]=((PWM_Prescalers[4]&0xFFFF)<<16)+((PWM_Pulses[4]&0xFFFF)<<0);
 8006edc:	4b3e      	ldr	r3, [pc, #248]	; (8006fd8 <Config_Write_Flash+0x2d8>)
 8006ede:	891b      	ldrh	r3, [r3, #8]
 8006ee0:	041b      	lsls	r3, r3, #16
 8006ee2:	4a3e      	ldr	r2, [pc, #248]	; (8006fdc <Config_Write_Flash+0x2dc>)
 8006ee4:	8912      	ldrh	r2, [r2, #8]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	461a      	mov	r2, r3
 8006eea:	f107 0320 	add.w	r3, r7, #32
 8006eee:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	uint32_t CanPos[8] = {CAN_ID_0_POS, CAN_ID_1_POS, CAN_ID_2_POS, CAN_ID_3_POS, CAN_ID_4_POS, CAN_ID_5_POS, CAN_ID_6_POS, CAN_ID_7_POS};
 8006ef2:	463b      	mov	r3, r7
 8006ef4:	4a3a      	ldr	r2, [pc, #232]	; (8006fe0 <Config_Write_Flash+0x2e0>)
 8006ef6:	461c      	mov	r4, r3
 8006ef8:	4615      	mov	r5, r2
 8006efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006efe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006f02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(uint32_t i=0; i<8; i++)
 8006f06:	2300      	movs	r3, #0
 8006f08:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8006f0c:	e019      	b.n	8006f42 <Config_Write_Flash+0x242>
	{
		//bytes: [unused], [can dlc], [can id high], [can id low] x8 //any can id outside the valid range of 0 to 2047 should be treated as disabled
		data[CanPos[i]]=(0)+((Can_DLCs[i]&0xFF)<<16)+(Can_IDs[i]&0xFFFF);
 8006f0e:	4a35      	ldr	r2, [pc, #212]	; (8006fe4 <Config_Write_Flash+0x2e4>)
 8006f10:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8006f14:	4413      	add	r3, r2
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	041b      	lsls	r3, r3, #16
 8006f1a:	4933      	ldr	r1, [pc, #204]	; (8006fe8 <Config_Write_Flash+0x2e8>)
 8006f1c:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8006f20:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006f24:	1899      	adds	r1, r3, r2
 8006f26:	463b      	mov	r3, r7
 8006f28:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8006f2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f30:	f107 0320 	add.w	r3, r7, #32
 8006f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint32_t i=0; i<8; i++)
 8006f38:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8006f42:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8006f46:	2b07      	cmp	r3, #7
 8006f48:	d9e1      	bls.n	8006f0e <Config_Write_Flash+0x20e>
	data[CAN_ID_4_POS]=(0)+(Can_DLCs[4]<<16)+(Can_IDs[4]&0xFFFF);
	data[CAN_ID_5_POS]=(0)+(Can_DLCs[5]<<16)+(Can_IDs[5]&0xFFFF);
	data[CAN_ID_6_POS]=(0)+(Can_DLCs[6]<<16)+(Can_IDs[6]&0xFFFF);
	data[CAN_ID_7_POS]=(0)+(Can_DLCs[7]<<16)+(Can_IDs[7]&0xFFFF);*/

	for(uint32_t i=0; i<8; i++)
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 8006f50:	e0ed      	b.n	800712e <Config_Write_Flash+0x42e>
 8006f52:	bf00      	nop
 8006f54:	2000085c 	.word	0x2000085c
 8006f58:	200008c0 	.word	0x200008c0
 8006f5c:	20000878 	.word	0x20000878
 8006f60:	20000690 	.word	0x20000690
 8006f64:	200001ec 	.word	0x200001ec
 8006f68:	200005a4 	.word	0x200005a4
 8006f6c:	200008be 	.word	0x200008be
 8006f70:	200009b0 	.word	0x200009b0
 8006f74:	2000054e 	.word	0x2000054e
 8006f78:	20000926 	.word	0x20000926
 8006f7c:	200008c2 	.word	0x200008c2
 8006f80:	20000544 	.word	0x20000544
 8006f84:	20000a34 	.word	0x20000a34
 8006f88:	20000210 	.word	0x20000210
 8006f8c:	20000850 	.word	0x20000850
 8006f90:	200007b8 	.word	0x200007b8
 8006f94:	200000de 	.word	0x200000de
 8006f98:	2000054c 	.word	0x2000054c
 8006f9c:	20000614 	.word	0x20000614
 8006fa0:	20000212 	.word	0x20000212
 8006fa4:	20000870 	.word	0x20000870
 8006fa8:	20000616 	.word	0x20000616
 8006fac:	200000e2 	.word	0x200000e2
 8006fb0:	20000474 	.word	0x20000474
 8006fb4:	200000e0 	.word	0x200000e0
 8006fb8:	20000688 	.word	0x20000688
 8006fbc:	20000094 	.word	0x20000094
 8006fc0:	2000008c 	.word	0x2000008c
 8006fc4:	20000a3c 	.word	0x20000a3c
 8006fc8:	20000a36 	.word	0x20000a36
 8006fcc:	20000477 	.word	0x20000477
 8006fd0:	20000924 	.word	0x20000924
 8006fd4:	20000476 	.word	0x20000476
 8006fd8:	20000554 	.word	0x20000554
 8006fdc:	2000076c 	.word	0x2000076c
 8006fe0:	0800a7a8 	.word	0x0800a7a8
 8006fe4:	20000860 	.word	0x20000860
 8006fe8:	200007c0 	.word	0x200007c0
	{
		//byte: [bytes of specific data]
		data[CAN_BYTES_1ST_POS+i*2]=Can_Config_Bytes[i][0]+(Can_Config_Bytes[i][1]<<8)+(Can_Config_Bytes[i][2]<<16)+(Can_Config_Bytes[i][3]<<24);
 8006fec:	4a72      	ldr	r2, [pc, #456]	; (80071b8 <Config_Write_Flash+0x4b8>)
 8006fee:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8006ff2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	4a6f      	ldr	r2, [pc, #444]	; (80071b8 <Config_Write_Flash+0x4b8>)
 8006ffa:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	4413      	add	r3, r2
 8007002:	785b      	ldrb	r3, [r3, #1]
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	18ca      	adds	r2, r1, r3
 8007008:	496b      	ldr	r1, [pc, #428]	; (80071b8 <Config_Write_Flash+0x4b8>)
 800700a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	440b      	add	r3, r1
 8007012:	789b      	ldrb	r3, [r3, #2]
 8007014:	041b      	lsls	r3, r3, #16
 8007016:	441a      	add	r2, r3
 8007018:	4967      	ldr	r1, [pc, #412]	; (80071b8 <Config_Write_Flash+0x4b8>)
 800701a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	440b      	add	r3, r1
 8007022:	78db      	ldrb	r3, [r3, #3]
 8007024:	061b      	lsls	r3, r3, #24
 8007026:	18d1      	adds	r1, r2, r3
 8007028:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800702c:	3305      	adds	r3, #5
 800702e:	005a      	lsls	r2, r3, #1
 8007030:	f107 0320 	add.w	r3, r7, #32
 8007034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		data[CAN_BYTES_1ST_POS+i*2+1]=Can_Config_Bytes[i][4]+(Can_Config_Bytes[i][5]<<8)+(Can_Config_Bytes[i][6]<<16)+(Can_Config_Bytes[i][7]<<24);
 8007038:	4a5f      	ldr	r2, [pc, #380]	; (80071b8 <Config_Write_Flash+0x4b8>)
 800703a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	4413      	add	r3, r2
 8007042:	791b      	ldrb	r3, [r3, #4]
 8007044:	4619      	mov	r1, r3
 8007046:	4a5c      	ldr	r2, [pc, #368]	; (80071b8 <Config_Write_Flash+0x4b8>)
 8007048:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	4413      	add	r3, r2
 8007050:	795b      	ldrb	r3, [r3, #5]
 8007052:	021b      	lsls	r3, r3, #8
 8007054:	18ca      	adds	r2, r1, r3
 8007056:	4958      	ldr	r1, [pc, #352]	; (80071b8 <Config_Write_Flash+0x4b8>)
 8007058:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800705c:	00db      	lsls	r3, r3, #3
 800705e:	440b      	add	r3, r1
 8007060:	799b      	ldrb	r3, [r3, #6]
 8007062:	041b      	lsls	r3, r3, #16
 8007064:	441a      	add	r2, r3
 8007066:	4954      	ldr	r1, [pc, #336]	; (80071b8 <Config_Write_Flash+0x4b8>)
 8007068:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800706c:	00db      	lsls	r3, r3, #3
 800706e:	440b      	add	r3, r1
 8007070:	79db      	ldrb	r3, [r3, #7]
 8007072:	061b      	lsls	r3, r3, #24
 8007074:	18d1      	adds	r1, r2, r3
 8007076:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800707a:	3305      	adds	r3, #5
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	f107 0320 	add.w	r3, r7, #32
 8007084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		//byte: [id of data to send]
		data[CAN_DATAS_1ST_POS+i*2]=Can_Config_Datas[i][0]+(Can_Config_Datas[i][1]<<8)+(Can_Config_Datas[i][2]<<16)+(Can_Config_Datas[i][3]<<24);
 8007088:	4a4c      	ldr	r2, [pc, #304]	; (80071bc <Config_Write_Flash+0x4bc>)
 800708a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800708e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8007092:	4619      	mov	r1, r3
 8007094:	4a49      	ldr	r2, [pc, #292]	; (80071bc <Config_Write_Flash+0x4bc>)
 8007096:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	4413      	add	r3, r2
 800709e:	785b      	ldrb	r3, [r3, #1]
 80070a0:	021b      	lsls	r3, r3, #8
 80070a2:	18ca      	adds	r2, r1, r3
 80070a4:	4945      	ldr	r1, [pc, #276]	; (80071bc <Config_Write_Flash+0x4bc>)
 80070a6:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 80070aa:	00db      	lsls	r3, r3, #3
 80070ac:	440b      	add	r3, r1
 80070ae:	789b      	ldrb	r3, [r3, #2]
 80070b0:	041b      	lsls	r3, r3, #16
 80070b2:	441a      	add	r2, r3
 80070b4:	4941      	ldr	r1, [pc, #260]	; (80071bc <Config_Write_Flash+0x4bc>)
 80070b6:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	440b      	add	r3, r1
 80070be:	78db      	ldrb	r3, [r3, #3]
 80070c0:	061b      	lsls	r3, r3, #24
 80070c2:	18d1      	adds	r1, r2, r3
 80070c4:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 80070c8:	330d      	adds	r3, #13
 80070ca:	005a      	lsls	r2, r3, #1
 80070cc:	f107 0320 	add.w	r3, r7, #32
 80070d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		data[CAN_DATAS_1ST_POS+i*2+1]=Can_Config_Datas[i][4]+(Can_Config_Datas[i][5]<<8)+(Can_Config_Datas[i][6]<<16)+(Can_Config_Datas[i][7]<<24);
 80070d4:	4a39      	ldr	r2, [pc, #228]	; (80071bc <Config_Write_Flash+0x4bc>)
 80070d6:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	4413      	add	r3, r2
 80070de:	791b      	ldrb	r3, [r3, #4]
 80070e0:	4619      	mov	r1, r3
 80070e2:	4a36      	ldr	r2, [pc, #216]	; (80071bc <Config_Write_Flash+0x4bc>)
 80070e4:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 80070e8:	00db      	lsls	r3, r3, #3
 80070ea:	4413      	add	r3, r2
 80070ec:	795b      	ldrb	r3, [r3, #5]
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	18ca      	adds	r2, r1, r3
 80070f2:	4932      	ldr	r1, [pc, #200]	; (80071bc <Config_Write_Flash+0x4bc>)
 80070f4:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	440b      	add	r3, r1
 80070fc:	799b      	ldrb	r3, [r3, #6]
 80070fe:	041b      	lsls	r3, r3, #16
 8007100:	441a      	add	r2, r3
 8007102:	492e      	ldr	r1, [pc, #184]	; (80071bc <Config_Write_Flash+0x4bc>)
 8007104:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007108:	00db      	lsls	r3, r3, #3
 800710a:	440b      	add	r3, r1
 800710c:	79db      	ldrb	r3, [r3, #7]
 800710e:	061b      	lsls	r3, r3, #24
 8007110:	18d1      	adds	r1, r2, r3
 8007112:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007116:	330d      	adds	r3, #13
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	f107 0320 	add.w	r3, r7, #32
 8007120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint32_t i=0; i<8; i++)
 8007124:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007128:	3301      	adds	r3, #1
 800712a:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 800712e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007132:	2b07      	cmp	r3, #7
 8007134:	f67f af5a 	bls.w	8006fec <Config_Write_Flash+0x2ec>
	}
	//note that only two messages may be sent on sync, or 3 if absolutely no other messages are being sent (including errors)
	//bytes: [can interval (.1 ms) high], [can interval (.1 ms) low], [send can message on timer], [send can messages on sync]
	data[CAN_SEND_EN_POS]=((Can_Sync_Enable&0xFF)<<0)+((Can_Timed_Enable&0xFF)<<8)+((Can_Interval&0xFFFF)<<16);
 8007138:	4b21      	ldr	r3, [pc, #132]	; (80071c0 <Config_Write_Flash+0x4c0>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	461a      	mov	r2, r3
 800713e:	4b21      	ldr	r3, [pc, #132]	; (80071c4 <Config_Write_Flash+0x4c4>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	441a      	add	r2, r3
 8007146:	4b20      	ldr	r3, [pc, #128]	; (80071c8 <Config_Write_Flash+0x4c8>)
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	041b      	lsls	r3, r3, #16
 800714c:	4413      	add	r3, r2
 800714e:	461a      	mov	r2, r3
 8007150:	f107 0320 	add.w	r3, r7, #32
 8007154:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	//bytes: [can sync delay (10 us) high], [can sync delay (10 us) low], [x], [x]
	data[CAN_SYNC_DELAY_POS]=((Can_Sync_Delay&0xFFFF)<<16);
 8007158:	4b1c      	ldr	r3, [pc, #112]	; (80071cc <Config_Write_Flash+0x4cc>)
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	041b      	lsls	r3, r3, #16
 800715e:	461a      	mov	r2, r3
 8007160:	f107 0320 	add.w	r3, r7, #32
 8007164:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	//bytes: [temperature samples to take / continuous sampling], [voltage samples to take / continuous sampling], [temperature samples to take per interval], [voltage samples to take per inteval]
	data[TV_BURST_POS]=((sample_temperature&0xFF)<<0)+((sample_voltage&0xFF)<<8)+((SampleTemperatureBurst&0xFF)<<16)+((SampleVoltageBurst&0xFF)<<24);
 8007168:	4b19      	ldr	r3, [pc, #100]	; (80071d0 <Config_Write_Flash+0x4d0>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	b2da      	uxtb	r2, r3
 800716e:	4b19      	ldr	r3, [pc, #100]	; (80071d4 <Config_Write_Flash+0x4d4>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	021b      	lsls	r3, r3, #8
 8007174:	b29b      	uxth	r3, r3
 8007176:	4413      	add	r3, r2
 8007178:	4a17      	ldr	r2, [pc, #92]	; (80071d8 <Config_Write_Flash+0x4d8>)
 800717a:	7812      	ldrb	r2, [r2, #0]
 800717c:	0412      	lsls	r2, r2, #16
 800717e:	4413      	add	r3, r2
 8007180:	4a16      	ldr	r2, [pc, #88]	; (80071dc <Config_Write_Flash+0x4dc>)
 8007182:	7812      	ldrb	r2, [r2, #0]
 8007184:	0612      	lsls	r2, r2, #24
 8007186:	441a      	add	r2, r3
 8007188:	f107 0320 	add.w	r3, r7, #32
 800718c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//bytes: [x], [x], [temperature/voltage sampling interval (.1 ms) high], [temperature/voltage sampling interval (.1 ms) low]
	data[TV_BURST_TIMING_POS]=((SampleTemperatureVoltagePeriod&0xFFFF)<<0);
 8007190:	4b13      	ldr	r3, [pc, #76]	; (80071e0 <Config_Write_Flash+0x4e0>)
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	461a      	mov	r2, r3
 8007196:	f107 0320 	add.w	r3, r7, #32
 800719a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	Flash_Write(FLASH_PAGE_63, 63, data, 512);
 800719e:	f107 0220 	add.w	r2, r7, #32
 80071a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071a6:	213f      	movs	r1, #63	; 0x3f
 80071a8:	480e      	ldr	r0, [pc, #56]	; (80071e4 <Config_Write_Flash+0x4e4>)
 80071aa:	f000 fa71 	bl	8007690 <Flash_Write>
}
 80071ae:	bf00      	nop
 80071b0:	f607 0728 	addw	r7, r7, #2088	; 0x828
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bdb0      	pop	{r4, r5, r7, pc}
 80071b8:	200002c0 	.word	0x200002c0
 80071bc:	20000168 	.word	0x20000168
 80071c0:	200004c0 	.word	0x200004c0
 80071c4:	200000e1 	.word	0x200000e1
 80071c8:	200000e4 	.word	0x200000e4
 80071cc:	2000040c 	.word	0x2000040c
 80071d0:	2000047c 	.word	0x2000047c
 80071d4:	20000090 	.word	0x20000090
 80071d8:	20000852 	.word	0x20000852
 80071dc:	200001a9 	.word	0x200001a9
 80071e0:	200008bc 	.word	0x200008bc
 80071e4:	0801f800 	.word	0x0801f800

080071e8 <Config_Read_Flash>:

void Config_Read_Flash(void)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b091      	sub	sp, #68	; 0x44
 80071ec:	af00      	add	r7, sp, #0
	warn_undervoltage_U5=((U5_VOLTAGE_WARNING_LIMIT>>0)&0xFFFF);
 80071ee:	4b7b      	ldr	r3, [pc, #492]	; (80073dc <Config_Read_Flash+0x1f4>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	4b7a      	ldr	r3, [pc, #488]	; (80073e0 <Config_Read_Flash+0x1f8>)
 80071f6:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U5=((U5_VOLTAGE_WARNING_LIMIT>>16)&0xFFFF);
 80071f8:	4b78      	ldr	r3, [pc, #480]	; (80073dc <Config_Read_Flash+0x1f4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	0c1b      	lsrs	r3, r3, #16
 80071fe:	b29a      	uxth	r2, r3
 8007200:	4b78      	ldr	r3, [pc, #480]	; (80073e4 <Config_Read_Flash+0x1fc>)
 8007202:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U5=((U5_TEMPERATURE_WARNING_LIMIT>>0)&0xFFFF);
 8007204:	4b78      	ldr	r3, [pc, #480]	; (80073e8 <Config_Read_Flash+0x200>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	b29a      	uxth	r2, r3
 800720a:	4b78      	ldr	r3, [pc, #480]	; (80073ec <Config_Read_Flash+0x204>)
 800720c:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U5=((U5_TEMPERATURE_WARNING_LIMIT>>16)&0xFFFF);
 800720e:	4b76      	ldr	r3, [pc, #472]	; (80073e8 <Config_Read_Flash+0x200>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	0c1b      	lsrs	r3, r3, #16
 8007214:	b29a      	uxth	r2, r3
 8007216:	4b76      	ldr	r3, [pc, #472]	; (80073f0 <Config_Read_Flash+0x208>)
 8007218:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U5I0=((U5_CURRENT_WARNING_LIMIT_I0>>0)&0xFFFF);
 800721a:	4b76      	ldr	r3, [pc, #472]	; (80073f4 <Config_Read_Flash+0x20c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	b29a      	uxth	r2, r3
 8007220:	4b75      	ldr	r3, [pc, #468]	; (80073f8 <Config_Read_Flash+0x210>)
 8007222:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U5I0=((U5_CURRENT_WARNING_LIMIT_I0>>16)&0xFFFF);
 8007224:	4b73      	ldr	r3, [pc, #460]	; (80073f4 <Config_Read_Flash+0x20c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	0c1b      	lsrs	r3, r3, #16
 800722a:	b29a      	uxth	r2, r3
 800722c:	4b73      	ldr	r3, [pc, #460]	; (80073fc <Config_Read_Flash+0x214>)
 800722e:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U5I1=((U5_CURRENT_WARNING_LIMIT_I1>>0)&0xFFFF);
 8007230:	4b73      	ldr	r3, [pc, #460]	; (8007400 <Config_Read_Flash+0x218>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	b29a      	uxth	r2, r3
 8007236:	4b73      	ldr	r3, [pc, #460]	; (8007404 <Config_Read_Flash+0x21c>)
 8007238:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U5I1=((U5_CURRENT_WARNING_LIMIT_I1>>16)&0xFFFF);
 800723a:	4b71      	ldr	r3, [pc, #452]	; (8007400 <Config_Read_Flash+0x218>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	0c1b      	lsrs	r3, r3, #16
 8007240:	b29a      	uxth	r2, r3
 8007242:	4b71      	ldr	r3, [pc, #452]	; (8007408 <Config_Read_Flash+0x220>)
 8007244:	801a      	strh	r2, [r3, #0]
	warn_undervoltage_U6=((U6_VOLTAGE_WARNING_LIMIT>>0)&0xFFFF);
 8007246:	4b71      	ldr	r3, [pc, #452]	; (800740c <Config_Read_Flash+0x224>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	b29a      	uxth	r2, r3
 800724c:	4b70      	ldr	r3, [pc, #448]	; (8007410 <Config_Read_Flash+0x228>)
 800724e:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U6=((U6_VOLTAGE_WARNING_LIMIT>>16)&0xFFFF);
 8007250:	4b6e      	ldr	r3, [pc, #440]	; (800740c <Config_Read_Flash+0x224>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	0c1b      	lsrs	r3, r3, #16
 8007256:	b29a      	uxth	r2, r3
 8007258:	4b6e      	ldr	r3, [pc, #440]	; (8007414 <Config_Read_Flash+0x22c>)
 800725a:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U6=((U6_TEMPERATURE_WARNING_LIMIT>>0)&0xFFFF);
 800725c:	4b6e      	ldr	r3, [pc, #440]	; (8007418 <Config_Read_Flash+0x230>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	b29a      	uxth	r2, r3
 8007262:	4b6e      	ldr	r3, [pc, #440]	; (800741c <Config_Read_Flash+0x234>)
 8007264:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U6=((U6_TEMPERATURE_WARNING_LIMIT>>16)&0xFFFF);
 8007266:	4b6c      	ldr	r3, [pc, #432]	; (8007418 <Config_Read_Flash+0x230>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	0c1b      	lsrs	r3, r3, #16
 800726c:	b29a      	uxth	r2, r3
 800726e:	4b6c      	ldr	r3, [pc, #432]	; (8007420 <Config_Read_Flash+0x238>)
 8007270:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U6I0=((U6_CURRENT_WARNING_LIMIT_I0>>0)&0xFFFF);
 8007272:	4b6c      	ldr	r3, [pc, #432]	; (8007424 <Config_Read_Flash+0x23c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	b29a      	uxth	r2, r3
 8007278:	4b6b      	ldr	r3, [pc, #428]	; (8007428 <Config_Read_Flash+0x240>)
 800727a:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U6I0=((U6_CURRENT_WARNING_LIMIT_I0>>16)&0xFFFF);
 800727c:	4b69      	ldr	r3, [pc, #420]	; (8007424 <Config_Read_Flash+0x23c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	0c1b      	lsrs	r3, r3, #16
 8007282:	b29a      	uxth	r2, r3
 8007284:	4b69      	ldr	r3, [pc, #420]	; (800742c <Config_Read_Flash+0x244>)
 8007286:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U6I1=((U6_CURRENT_WARNING_LIMIT_I1>>0)&0xFFFF);
 8007288:	4b69      	ldr	r3, [pc, #420]	; (8007430 <Config_Read_Flash+0x248>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	b29a      	uxth	r2, r3
 800728e:	4b69      	ldr	r3, [pc, #420]	; (8007434 <Config_Read_Flash+0x24c>)
 8007290:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U6I1=((U6_CURRENT_WARNING_LIMIT_I1>>16)&0xFFFF);
 8007292:	4b67      	ldr	r3, [pc, #412]	; (8007430 <Config_Read_Flash+0x248>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	0c1b      	lsrs	r3, r3, #16
 8007298:	b29a      	uxth	r2, r3
 800729a:	4b67      	ldr	r3, [pc, #412]	; (8007438 <Config_Read_Flash+0x250>)
 800729c:	801a      	strh	r2, [r3, #0]
	warn_undervoltage_U7=((U7_VOLTAGE_WARNING_LIMIT>>0)&0xFFFF);
 800729e:	4b67      	ldr	r3, [pc, #412]	; (800743c <Config_Read_Flash+0x254>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	4b66      	ldr	r3, [pc, #408]	; (8007440 <Config_Read_Flash+0x258>)
 80072a6:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U7=((U7_VOLTAGE_WARNING_LIMIT>>16)&0xFFFF);
 80072a8:	4b64      	ldr	r3, [pc, #400]	; (800743c <Config_Read_Flash+0x254>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	0c1b      	lsrs	r3, r3, #16
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	4b64      	ldr	r3, [pc, #400]	; (8007444 <Config_Read_Flash+0x25c>)
 80072b2:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U7=((U7_TEMPERATURE_WARNING_LIMIT>>0)&0xFFFF);
 80072b4:	4b64      	ldr	r3, [pc, #400]	; (8007448 <Config_Read_Flash+0x260>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	4b64      	ldr	r3, [pc, #400]	; (800744c <Config_Read_Flash+0x264>)
 80072bc:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U7=((U7_TEMPERATURE_WARNING_LIMIT>>16)&0xFFFF);
 80072be:	4b62      	ldr	r3, [pc, #392]	; (8007448 <Config_Read_Flash+0x260>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	0c1b      	lsrs	r3, r3, #16
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	4b62      	ldr	r3, [pc, #392]	; (8007450 <Config_Read_Flash+0x268>)
 80072c8:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U7I0=((U7_CURRENT_WARNING_LIMIT_I0>>0)&0xFFFF);
 80072ca:	4b62      	ldr	r3, [pc, #392]	; (8007454 <Config_Read_Flash+0x26c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	4b61      	ldr	r3, [pc, #388]	; (8007458 <Config_Read_Flash+0x270>)
 80072d2:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U7I0=((U7_CURRENT_WARNING_LIMIT_I0>>16)&0xFFFF);
 80072d4:	4b5f      	ldr	r3, [pc, #380]	; (8007454 <Config_Read_Flash+0x26c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	0c1b      	lsrs	r3, r3, #16
 80072da:	b29a      	uxth	r2, r3
 80072dc:	4b5f      	ldr	r3, [pc, #380]	; (800745c <Config_Read_Flash+0x274>)
 80072de:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U7I1=((U7_CURRENT_WARNING_LIMIT_I1>>0)&0xFFFF);
 80072e0:	4b5f      	ldr	r3, [pc, #380]	; (8007460 <Config_Read_Flash+0x278>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	4b5f      	ldr	r3, [pc, #380]	; (8007464 <Config_Read_Flash+0x27c>)
 80072e8:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U7I1=((U7_CURRENT_WARNING_LIMIT_I1>>16)&0xFFFF); //TODO: something here stops can sending, not sure why
 80072ea:	4b5d      	ldr	r3, [pc, #372]	; (8007460 <Config_Read_Flash+0x278>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	0c1b      	lsrs	r3, r3, #16
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	4b5d      	ldr	r3, [pc, #372]	; (8007468 <Config_Read_Flash+0x280>)
 80072f4:	801a      	strh	r2, [r3, #0]

	Digital_In_EN = ((DIGITAL_IN_0>>0)&0b00011101); //bit for PB4 is 0 to ensure it isn't used as PB4 seemed to have hardware problems
 80072f6:	4b5d      	ldr	r3, [pc, #372]	; (800746c <Config_Read_Flash+0x284>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	f003 031d 	and.w	r3, r3, #29
 8007300:	b2da      	uxtb	r2, r3
 8007302:	4b5b      	ldr	r3, [pc, #364]	; (8007470 <Config_Read_Flash+0x288>)
 8007304:	701a      	strb	r2, [r3, #0]
	Default_Switch_State=((DEFAULT_SWITCH_STATE>>0)&0b00111111);
 8007306:	4b5b      	ldr	r3, [pc, #364]	; (8007474 <Config_Read_Flash+0x28c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007310:	b2da      	uxtb	r2, r3
 8007312:	4b59      	ldr	r3, [pc, #356]	; (8007478 <Config_Read_Flash+0x290>)
 8007314:	701a      	strb	r2, [r3, #0]

	PWM_Out_EN = ((PWM_EN>>0)&0b00011111);
 8007316:	4b59      	ldr	r3, [pc, #356]	; (800747c <Config_Read_Flash+0x294>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	b2da      	uxtb	r2, r3
 8007322:	4b57      	ldr	r3, [pc, #348]	; (8007480 <Config_Read_Flash+0x298>)
 8007324:	701a      	strb	r2, [r3, #0]
	PWM_Pulses[0] = ((PWM_0>>0)&0xFFFF);
 8007326:	4b57      	ldr	r3, [pc, #348]	; (8007484 <Config_Read_Flash+0x29c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	b29a      	uxth	r2, r3
 800732c:	4b56      	ldr	r3, [pc, #344]	; (8007488 <Config_Read_Flash+0x2a0>)
 800732e:	801a      	strh	r2, [r3, #0]
	PWM_Prescalers[0] = ((PWM_0>>16)&0xFFFF);
 8007330:	4b54      	ldr	r3, [pc, #336]	; (8007484 <Config_Read_Flash+0x29c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	0c1b      	lsrs	r3, r3, #16
 8007336:	b29a      	uxth	r2, r3
 8007338:	4b54      	ldr	r3, [pc, #336]	; (800748c <Config_Read_Flash+0x2a4>)
 800733a:	801a      	strh	r2, [r3, #0]
	PWM_Pulses[1] = ((PWM_1>>0)&0xFFFF);
 800733c:	4b54      	ldr	r3, [pc, #336]	; (8007490 <Config_Read_Flash+0x2a8>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	b29a      	uxth	r2, r3
 8007342:	4b51      	ldr	r3, [pc, #324]	; (8007488 <Config_Read_Flash+0x2a0>)
 8007344:	805a      	strh	r2, [r3, #2]
	PWM_Prescalers[1] = ((PWM_1>>16)&0xFFFF);
 8007346:	4b52      	ldr	r3, [pc, #328]	; (8007490 <Config_Read_Flash+0x2a8>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	0c1b      	lsrs	r3, r3, #16
 800734c:	b29a      	uxth	r2, r3
 800734e:	4b4f      	ldr	r3, [pc, #316]	; (800748c <Config_Read_Flash+0x2a4>)
 8007350:	805a      	strh	r2, [r3, #2]
	PWM_Pulses[2] = ((PWM_2>>0)&0xFFFF);
 8007352:	4b50      	ldr	r3, [pc, #320]	; (8007494 <Config_Read_Flash+0x2ac>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	b29a      	uxth	r2, r3
 8007358:	4b4b      	ldr	r3, [pc, #300]	; (8007488 <Config_Read_Flash+0x2a0>)
 800735a:	809a      	strh	r2, [r3, #4]
	PWM_Prescalers[2] = ((PWM_2>>16)&0xFFFF);
 800735c:	4b4d      	ldr	r3, [pc, #308]	; (8007494 <Config_Read_Flash+0x2ac>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	0c1b      	lsrs	r3, r3, #16
 8007362:	b29a      	uxth	r2, r3
 8007364:	4b49      	ldr	r3, [pc, #292]	; (800748c <Config_Read_Flash+0x2a4>)
 8007366:	809a      	strh	r2, [r3, #4]
	PWM_Pulses[3] = ((PWM_3>>0)&0xFFFF);
 8007368:	4b4b      	ldr	r3, [pc, #300]	; (8007498 <Config_Read_Flash+0x2b0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	b29a      	uxth	r2, r3
 800736e:	4b46      	ldr	r3, [pc, #280]	; (8007488 <Config_Read_Flash+0x2a0>)
 8007370:	80da      	strh	r2, [r3, #6]
	PWM_Prescalers[3] = ((PWM_3>>16)&0xFFFF);
 8007372:	4b49      	ldr	r3, [pc, #292]	; (8007498 <Config_Read_Flash+0x2b0>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	0c1b      	lsrs	r3, r3, #16
 8007378:	b29a      	uxth	r2, r3
 800737a:	4b44      	ldr	r3, [pc, #272]	; (800748c <Config_Read_Flash+0x2a4>)
 800737c:	80da      	strh	r2, [r3, #6]
	PWM_Pulses[4] = ((PWM_4>>0)&0xFFFF);
 800737e:	4b47      	ldr	r3, [pc, #284]	; (800749c <Config_Read_Flash+0x2b4>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	b29a      	uxth	r2, r3
 8007384:	4b40      	ldr	r3, [pc, #256]	; (8007488 <Config_Read_Flash+0x2a0>)
 8007386:	811a      	strh	r2, [r3, #8]
	PWM_Prescalers[4] = ((PWM_4>>16)&0xFFFF);
 8007388:	4b44      	ldr	r3, [pc, #272]	; (800749c <Config_Read_Flash+0x2b4>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	0c1b      	lsrs	r3, r3, #16
 800738e:	b29a      	uxth	r2, r3
 8007390:	4b3e      	ldr	r3, [pc, #248]	; (800748c <Config_Read_Flash+0x2a4>)
 8007392:	811a      	strh	r2, [r3, #8]

	PWM_In_EN = ((PWM_EN>>8)&0b00011001); //ignore PB4 and PB5
 8007394:	4b39      	ldr	r3, [pc, #228]	; (800747c <Config_Read_Flash+0x294>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	0a1b      	lsrs	r3, r3, #8
 800739a:	b2db      	uxtb	r3, r3
 800739c:	f003 0319 	and.w	r3, r3, #25
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	4b3f      	ldr	r3, [pc, #252]	; (80074a0 <Config_Read_Flash+0x2b8>)
 80073a4:	701a      	strb	r2, [r3, #0]

	uint32_t CanId[8] = {CAN_ID_0, CAN_ID_1, CAN_ID_2, CAN_ID_3, CAN_ID_4, CAN_ID_5, CAN_ID_6, CAN_ID_7};
 80073a6:	4b3f      	ldr	r3, [pc, #252]	; (80074a4 <Config_Read_Flash+0x2bc>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	607b      	str	r3, [r7, #4]
 80073ac:	4b3e      	ldr	r3, [pc, #248]	; (80074a8 <Config_Read_Flash+0x2c0>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	60bb      	str	r3, [r7, #8]
 80073b2:	4b3e      	ldr	r3, [pc, #248]	; (80074ac <Config_Read_Flash+0x2c4>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	4b3d      	ldr	r3, [pc, #244]	; (80074b0 <Config_Read_Flash+0x2c8>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	613b      	str	r3, [r7, #16]
 80073be:	4b3d      	ldr	r3, [pc, #244]	; (80074b4 <Config_Read_Flash+0x2cc>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	4b3c      	ldr	r3, [pc, #240]	; (80074b8 <Config_Read_Flash+0x2d0>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	61bb      	str	r3, [r7, #24]
 80073ca:	4b3c      	ldr	r3, [pc, #240]	; (80074bc <Config_Read_Flash+0x2d4>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	61fb      	str	r3, [r7, #28]
 80073d0:	4b3b      	ldr	r3, [pc, #236]	; (80074c0 <Config_Read_Flash+0x2d8>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	623b      	str	r3, [r7, #32]
	for(uint32_t i=0; i<8; i++)
 80073d6:	2300      	movs	r3, #0
 80073d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073da:	e090      	b.n	80074fe <Config_Read_Flash+0x316>
 80073dc:	0801f8b4 	.word	0x0801f8b4
 80073e0:	2000085c 	.word	0x2000085c
 80073e4:	200008c0 	.word	0x200008c0
 80073e8:	0801f8b8 	.word	0x0801f8b8
 80073ec:	20000878 	.word	0x20000878
 80073f0:	20000690 	.word	0x20000690
 80073f4:	0801f8bc 	.word	0x0801f8bc
 80073f8:	200001ec 	.word	0x200001ec
 80073fc:	200005a4 	.word	0x200005a4
 8007400:	0801f8c0 	.word	0x0801f8c0
 8007404:	200008be 	.word	0x200008be
 8007408:	200009b0 	.word	0x200009b0
 800740c:	0801f8c4 	.word	0x0801f8c4
 8007410:	2000054e 	.word	0x2000054e
 8007414:	20000926 	.word	0x20000926
 8007418:	0801f8c8 	.word	0x0801f8c8
 800741c:	200008c2 	.word	0x200008c2
 8007420:	20000544 	.word	0x20000544
 8007424:	0801f8cc 	.word	0x0801f8cc
 8007428:	20000a34 	.word	0x20000a34
 800742c:	20000210 	.word	0x20000210
 8007430:	0801f8d0 	.word	0x0801f8d0
 8007434:	20000850 	.word	0x20000850
 8007438:	200007b8 	.word	0x200007b8
 800743c:	0801f8d4 	.word	0x0801f8d4
 8007440:	200000de 	.word	0x200000de
 8007444:	2000054c 	.word	0x2000054c
 8007448:	0801f8d8 	.word	0x0801f8d8
 800744c:	20000614 	.word	0x20000614
 8007450:	20000212 	.word	0x20000212
 8007454:	0801f8dc 	.word	0x0801f8dc
 8007458:	20000870 	.word	0x20000870
 800745c:	20000616 	.word	0x20000616
 8007460:	0801f8e0 	.word	0x0801f8e0
 8007464:	200000e2 	.word	0x200000e2
 8007468:	20000474 	.word	0x20000474
 800746c:	0801f800 	.word	0x0801f800
 8007470:	200000e0 	.word	0x200000e0
 8007474:	0801f8a8 	.word	0x0801f8a8
 8007478:	20000477 	.word	0x20000477
 800747c:	0801f900 	.word	0x0801f900
 8007480:	20000924 	.word	0x20000924
 8007484:	0801f8ec 	.word	0x0801f8ec
 8007488:	2000076c 	.word	0x2000076c
 800748c:	20000554 	.word	0x20000554
 8007490:	0801f8f0 	.word	0x0801f8f0
 8007494:	0801f8f4 	.word	0x0801f8f4
 8007498:	0801f8f8 	.word	0x0801f8f8
 800749c:	0801f8fc 	.word	0x0801f8fc
 80074a0:	20000476 	.word	0x20000476
 80074a4:	0801f808 	.word	0x0801f808
 80074a8:	0801f80c 	.word	0x0801f80c
 80074ac:	0801f810 	.word	0x0801f810
 80074b0:	0801f814 	.word	0x0801f814
 80074b4:	0801f818 	.word	0x0801f818
 80074b8:	0801f81c 	.word	0x0801f81c
 80074bc:	0801f820 	.word	0x0801f820
 80074c0:	0801f824 	.word	0x0801f824
	{
		Can_IDs[i]=((CanId[i]>>0)&0xFFFF);
 80074c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80074cc:	4413      	add	r3, r2
 80074ce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80074d2:	b299      	uxth	r1, r3
 80074d4:	4a5b      	ldr	r2, [pc, #364]	; (8007644 <Config_Read_Flash+0x45c>)
 80074d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Can_DLCs[i]=((CanId[i]>>16)&0xFF);
 80074dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80074e4:	4413      	add	r3, r2
 80074e6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80074ea:	0c1b      	lsrs	r3, r3, #16
 80074ec:	b2d9      	uxtb	r1, r3
 80074ee:	4a56      	ldr	r2, [pc, #344]	; (8007648 <Config_Read_Flash+0x460>)
 80074f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f2:	4413      	add	r3, r2
 80074f4:	460a      	mov	r2, r1
 80074f6:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 80074f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074fa:	3301      	adds	r3, #1
 80074fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007500:	2b07      	cmp	r3, #7
 8007502:	d9df      	bls.n	80074c4 <Config_Read_Flash+0x2dc>
	}

	for(uint32_t i=0; i<8; i++)
 8007504:	2300      	movs	r3, #0
 8007506:	63bb      	str	r3, [r7, #56]	; 0x38
 8007508:	e05d      	b.n	80075c6 <Config_Read_Flash+0x3de>
	{
		uint32_t temp_can_bytes_0=*(&CAN_BYTES_1ST+i*2);
 800750a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750c:	00da      	lsls	r2, r3, #3
 800750e:	4b4f      	ldr	r3, [pc, #316]	; (800764c <Config_Read_Flash+0x464>)
 8007510:	4413      	add	r3, r2
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t temp_can_bytes_1=*(&CAN_BYTES_1ST+i*2+1);
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	1d1a      	adds	r2, r3, #4
 800751c:	4b4b      	ldr	r3, [pc, #300]	; (800764c <Config_Read_Flash+0x464>)
 800751e:	4413      	add	r3, r2
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t temp_can_datas_0=*(&CAN_DATAS_1ST+i*2);
 8007524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007526:	00da      	lsls	r2, r3, #3
 8007528:	4b49      	ldr	r3, [pc, #292]	; (8007650 <Config_Read_Flash+0x468>)
 800752a:	4413      	add	r3, r2
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t temp_can_datas_1=*(&CAN_DATAS_1ST+i*2+1);
 8007530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	1d1a      	adds	r2, r3, #4
 8007536:	4b46      	ldr	r3, [pc, #280]	; (8007650 <Config_Read_Flash+0x468>)
 8007538:	4413      	add	r3, r2
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	627b      	str	r3, [r7, #36]	; 0x24
		for(uint32_t j=0; j<4; j++)
 800753e:	2300      	movs	r3, #0
 8007540:	637b      	str	r3, [r7, #52]	; 0x34
 8007542:	e03a      	b.n	80075ba <Config_Read_Flash+0x3d2>
		{
			Can_Config_Bytes[i][j]=(temp_can_bytes_0>>(8*j)) & 0xFF;
 8007544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800754a:	fa22 f303 	lsr.w	r3, r2, r3
 800754e:	b2d9      	uxtb	r1, r3
 8007550:	4a40      	ldr	r2, [pc, #256]	; (8007654 <Config_Read_Flash+0x46c>)
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	00db      	lsls	r3, r3, #3
 8007556:	441a      	add	r2, r3
 8007558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755a:	4413      	add	r3, r2
 800755c:	460a      	mov	r2, r1
 800755e:	701a      	strb	r2, [r3, #0]
			Can_Config_Bytes[i][j+4]=(temp_can_bytes_1>>(8*j)) & 0xFF;
 8007560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007566:	40da      	lsrs	r2, r3
 8007568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756a:	3304      	adds	r3, #4
 800756c:	b2d0      	uxtb	r0, r2
 800756e:	4939      	ldr	r1, [pc, #228]	; (8007654 <Config_Read_Flash+0x46c>)
 8007570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007572:	00d2      	lsls	r2, r2, #3
 8007574:	440a      	add	r2, r1
 8007576:	4413      	add	r3, r2
 8007578:	4602      	mov	r2, r0
 800757a:	701a      	strb	r2, [r3, #0]
			Can_Config_Datas[i][j]=(temp_can_datas_0>>(8*j)) & 0xFF;
 800757c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007582:	fa22 f303 	lsr.w	r3, r2, r3
 8007586:	b2d9      	uxtb	r1, r3
 8007588:	4a33      	ldr	r2, [pc, #204]	; (8007658 <Config_Read_Flash+0x470>)
 800758a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758c:	00db      	lsls	r3, r3, #3
 800758e:	441a      	add	r2, r3
 8007590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007592:	4413      	add	r3, r2
 8007594:	460a      	mov	r2, r1
 8007596:	701a      	strb	r2, [r3, #0]
			Can_Config_Datas[i][j+4]=(temp_can_datas_1>>(8*j)) & 0xFF;
 8007598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800759e:	40da      	lsrs	r2, r3
 80075a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a2:	3304      	adds	r3, #4
 80075a4:	b2d0      	uxtb	r0, r2
 80075a6:	492c      	ldr	r1, [pc, #176]	; (8007658 <Config_Read_Flash+0x470>)
 80075a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075aa:	00d2      	lsls	r2, r2, #3
 80075ac:	440a      	add	r2, r1
 80075ae:	4413      	add	r3, r2
 80075b0:	4602      	mov	r2, r0
 80075b2:	701a      	strb	r2, [r3, #0]
		for(uint32_t j=0; j<4; j++)
 80075b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b6:	3301      	adds	r3, #1
 80075b8:	637b      	str	r3, [r7, #52]	; 0x34
 80075ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d9c1      	bls.n	8007544 <Config_Read_Flash+0x35c>
	for(uint32_t i=0; i<8; i++)
 80075c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c2:	3301      	adds	r3, #1
 80075c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	2b07      	cmp	r3, #7
 80075ca:	d99e      	bls.n	800750a <Config_Read_Flash+0x322>
		}
	}
	Can_Sync_Enable=(CAN_SEND_EN>>0)&0b11111111;
 80075cc:	4b23      	ldr	r3, [pc, #140]	; (800765c <Config_Read_Flash+0x474>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	4b23      	ldr	r3, [pc, #140]	; (8007660 <Config_Read_Flash+0x478>)
 80075d4:	701a      	strb	r2, [r3, #0]
	Can_Timed_Enable=(CAN_SEND_EN>>8)&0b11111111;
 80075d6:	4b21      	ldr	r3, [pc, #132]	; (800765c <Config_Read_Flash+0x474>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	0a1b      	lsrs	r3, r3, #8
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	4b21      	ldr	r3, [pc, #132]	; (8007664 <Config_Read_Flash+0x47c>)
 80075e0:	701a      	strb	r2, [r3, #0]
	Can_Interval=(CAN_SEND_EN>>16)&0xFFFF;
 80075e2:	4b1e      	ldr	r3, [pc, #120]	; (800765c <Config_Read_Flash+0x474>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	0c1b      	lsrs	r3, r3, #16
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	4b1f      	ldr	r3, [pc, #124]	; (8007668 <Config_Read_Flash+0x480>)
 80075ec:	801a      	strh	r2, [r3, #0]
	Can_Sync_Delay=(CAN_SYNC_DELAY>>16)*0xFFFF;
 80075ee:	4b1f      	ldr	r3, [pc, #124]	; (800766c <Config_Read_Flash+0x484>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	0c1b      	lsrs	r3, r3, #16
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	425b      	negs	r3, r3
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	4b1d      	ldr	r3, [pc, #116]	; (8007670 <Config_Read_Flash+0x488>)
 80075fc:	801a      	strh	r2, [r3, #0]

	sample_temperature = (TV_BURST>>0)&0xFF;
 80075fe:	4b1d      	ldr	r3, [pc, #116]	; (8007674 <Config_Read_Flash+0x48c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	4a1c      	ldr	r2, [pc, #112]	; (8007678 <Config_Read_Flash+0x490>)
 8007606:	6013      	str	r3, [r2, #0]
	sample_voltage = (TV_BURST>>8)&0xFF;
 8007608:	4b1a      	ldr	r3, [pc, #104]	; (8007674 <Config_Read_Flash+0x48c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	0a1b      	lsrs	r3, r3, #8
 800760e:	b2db      	uxtb	r3, r3
 8007610:	4a1a      	ldr	r2, [pc, #104]	; (800767c <Config_Read_Flash+0x494>)
 8007612:	6013      	str	r3, [r2, #0]
	SampleTemperatureBurst = (TV_BURST>>16)&0xFF;
 8007614:	4b17      	ldr	r3, [pc, #92]	; (8007674 <Config_Read_Flash+0x48c>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	0c1b      	lsrs	r3, r3, #16
 800761a:	b2da      	uxtb	r2, r3
 800761c:	4b18      	ldr	r3, [pc, #96]	; (8007680 <Config_Read_Flash+0x498>)
 800761e:	701a      	strb	r2, [r3, #0]
	SampleVoltageBurst = (TV_BURST>>24)&0xFF;
 8007620:	4b14      	ldr	r3, [pc, #80]	; (8007674 <Config_Read_Flash+0x48c>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	0e1b      	lsrs	r3, r3, #24
 8007626:	b2da      	uxtb	r2, r3
 8007628:	4b16      	ldr	r3, [pc, #88]	; (8007684 <Config_Read_Flash+0x49c>)
 800762a:	701a      	strb	r2, [r3, #0]
	SampleTemperatureVoltagePeriod= (TV_BURST_TIMING>>0)&0xFFFF;
 800762c:	4b16      	ldr	r3, [pc, #88]	; (8007688 <Config_Read_Flash+0x4a0>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	b29a      	uxth	r2, r3
 8007632:	4b16      	ldr	r3, [pc, #88]	; (800768c <Config_Read_Flash+0x4a4>)
 8007634:	801a      	strh	r2, [r3, #0]
}
 8007636:	bf00      	nop
 8007638:	3744      	adds	r7, #68	; 0x44
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	200007c0 	.word	0x200007c0
 8007648:	20000860 	.word	0x20000860
 800764c:	0801f828 	.word	0x0801f828
 8007650:	0801f868 	.word	0x0801f868
 8007654:	200002c0 	.word	0x200002c0
 8007658:	20000168 	.word	0x20000168
 800765c:	0801f8ac 	.word	0x0801f8ac
 8007660:	200004c0 	.word	0x200004c0
 8007664:	200000e1 	.word	0x200000e1
 8007668:	200000e4 	.word	0x200000e4
 800766c:	0801f8b0 	.word	0x0801f8b0
 8007670:	2000040c 	.word	0x2000040c
 8007674:	0801f8e4 	.word	0x0801f8e4
 8007678:	2000047c 	.word	0x2000047c
 800767c:	20000090 	.word	0x20000090
 8007680:	20000852 	.word	0x20000852
 8007684:	200001a9 	.word	0x200001a9
 8007688:	0801f8e8 	.word	0x0801f8e8
 800768c:	200008bc 	.word	0x200008bc

08007690 <Flash_Write>:


void Flash_Write(uint32_t Flash_Address, uint32_t Page, uint32_t Flash_Data[512], int Data_Words)
{
 8007690:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007694:	b08c      	sub	sp, #48	; 0x30
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	607a      	str	r2, [r7, #4]
 800769e:	603b      	str	r3, [r7, #0]
	FLASH_EraseInitTypeDef pEraseInit;
	uint32_t pError = 0;
 80076a0:	2300      	movs	r3, #0
 80076a2:	613b      	str	r3, [r7, #16]

	pEraseInit.Page = Page;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	61fb      	str	r3, [r7, #28]
	pEraseInit.NbPages = 1;
 80076a8:	2301      	movs	r3, #1
 80076aa:	623b      	str	r3, [r7, #32]
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80076ac:	2300      	movs	r3, #0
 80076ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80076b0:	b672      	cpsid	i

	__disable_irq();
	if(HAL_FLASH_Unlock() != HAL_OK)
 80076b2:	f7fb fd35 	bl	8003120 <HAL_FLASH_Unlock>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <Flash_Write+0x32>
  __ASM volatile ("cpsie i" : : : "memory");
 80076bc:	b662      	cpsie	i
	{
		__enable_irq();
		Error_Handler();
 80076be:	f002 fa33 	bl	8009b28 <Error_Handler>
	}

	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0) { }
 80076c2:	bf00      	nop
 80076c4:	4b3c      	ldr	r3, [pc, #240]	; (80077b8 <Flash_Write+0x128>)
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d0:	d0f8      	beq.n	80076c4 <Flash_Write+0x34>

	if(HAL_FLASHEx_Erase(&pEraseInit, &pError) != HAL_OK)
 80076d2:	f107 0210 	add.w	r2, r7, #16
 80076d6:	f107 0314 	add.w	r3, r7, #20
 80076da:	4611      	mov	r1, r2
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fb fe07 	bl	80032f0 <HAL_FLASHEx_Erase>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d009      	beq.n	80076fc <Flash_Write+0x6c>
 80076e8:	b662      	cpsie	i
	{
		__enable_irq();
		while(1)
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80076ea:	2108      	movs	r1, #8
 80076ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076f0:	f7fc f8d4 	bl	800389c <HAL_GPIO_TogglePin>
			HAL_Delay(33);
 80076f4:	2021      	movs	r0, #33	; 0x21
 80076f6:	f7f8 fdff 	bl	80002f8 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80076fa:	e7f6      	b.n	80076ea <Flash_Write+0x5a>
		}
	}

	uint64_t data;
	for(int i=0; i<((Data_Words+1)/2); i++) //here we want integer division that rounds up instead of down
 80076fc:	2300      	movs	r3, #0
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007700:	e042      	b.n	8007788 <Flash_Write+0xf8>
	{
		data=(uint64_t)Flash_Data[i*2];
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	00db      	lsls	r3, r3, #3
 8007706:	461a      	mov	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4413      	add	r3, r2
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f04f 0400 	mov.w	r4, #0
 8007712:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		if((i*2)+1<Data_Words)
 8007716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	3301      	adds	r3, #1
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	429a      	cmp	r2, r3
 8007720:	dd17      	ble.n	8007752 <Flash_Write+0xc2>
		{
			data+=((uint64_t)Flash_Data[i*2+1]<<32);
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	00db      	lsls	r3, r3, #3
 8007726:	3304      	adds	r3, #4
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	4413      	add	r3, r2
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4619      	mov	r1, r3
 8007730:	f04f 0200 	mov.w	r2, #0
 8007734:	f04f 0b00 	mov.w	fp, #0
 8007738:	f04f 0c00 	mov.w	ip, #0
 800773c:	468c      	mov	ip, r1
 800773e:	f04f 0b00 	mov.w	fp, #0
 8007742:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007746:	eb1b 0301 	adds.w	r3, fp, r1
 800774a:	eb4c 0402 	adc.w	r4, ip, r2
 800774e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		}

			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Flash_Address+i*0x08, data) != HAL_OK)
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	461a      	mov	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	18d1      	adds	r1, r2, r3
 800775c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007760:	2000      	movs	r0, #0
 8007762:	f7fb fc87 	bl	8003074 <HAL_FLASH_Program>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <Flash_Write+0xe2>
 800776c:	b662      	cpsie	i
			{
				__enable_irq();
				Error_Handler();
 800776e:	f002 f9db 	bl	8009b28 <Error_Handler>
			}
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0) { }
 8007772:	bf00      	nop
 8007774:	4b10      	ldr	r3, [pc, #64]	; (80077b8 <Flash_Write+0x128>)
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800777c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007780:	d0f8      	beq.n	8007774 <Flash_Write+0xe4>
	for(int i=0; i<((Data_Words+1)/2); i++) //here we want integer division that rounds up instead of down
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	3301      	adds	r3, #1
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	3301      	adds	r3, #1
 800778c:	0fda      	lsrs	r2, r3, #31
 800778e:	4413      	add	r3, r2
 8007790:	105b      	asrs	r3, r3, #1
 8007792:	461a      	mov	r2, r3
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	4293      	cmp	r3, r2
 8007798:	dbb3      	blt.n	8007702 <Flash_Write+0x72>
	}

	if(HAL_FLASH_Lock() != HAL_OK)
 800779a:	f7fb fce3 	bl	8003164 <HAL_FLASH_Lock>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <Flash_Write+0x11a>
 80077a4:	b662      	cpsie	i
	{
		__enable_irq();
		Error_Handler();
 80077a6:	f002 f9bf 	bl	8009b28 <Error_Handler>
 80077aa:	b662      	cpsie	i
	}
	__enable_irq();
}
 80077ac:	bf00      	nop
 80077ae:	3730      	adds	r7, #48	; 0x30
 80077b0:	46bd      	mov	sp, r7
 80077b2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80077b6:	bf00      	nop
 80077b8:	40022000 	.word	0x40022000

080077bc <Flash_Read>:

uint32_t Flash_Read(uint32_t Flash_Address)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
	return *(uint32_t*)Flash_Address;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <main>:
uint32_t sample_temperature;
uint32_t sample_voltage;


int main(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
	HAL_Init();
 80077da:	f7f8 fd1d 	bl	8000218 <HAL_Init>

	SystemClock_Config();
 80077de:	f001 f9b9 	bl	8008b54 <SystemClock_Config>

	Config_Setup();
 80077e2:	f7ff f8e7 	bl	80069b4 <Config_Setup>

	MX_GPIO_Init();
 80077e6:	f001 fc1f 	bl	8009028 <MX_GPIO_Init>
	MX_DMA_Init();
 80077ea:	f001 fbeb 	bl	8008fc4 <MX_DMA_Init>
	MX_ADC1_Init();
 80077ee:	f001 fa17 	bl	8008c20 <MX_ADC1_Init>
	MX_ADC2_Init();
 80077f2:	f001 fabb 	bl	8008d6c <MX_ADC2_Init>
	MX_FDCAN_Init();
 80077f6:	f001 fb39 	bl	8008e6c <MX_FDCAN_Init>

	MX_TIM1_Init(); //""  ""
 80077fa:	f001 fd5f 	bl	80092bc <MX_TIM1_Init>
	MX_TIM6_Init(); //initialize unnecessary timers to avoid error handler being called when configuration is changed
 80077fe:	f001 fd7f 	bl	8009300 <MX_TIM6_Init>
	MX_TIM7_Init();
 8007802:	f001 fda1 	bl	8009348 <MX_TIM7_Init>
	MX_TIM15_Init();
 8007806:	f001 fdc1 	bl	800938c <MX_TIM15_Init>
	MX_TIM16_Init(); //""  ""
 800780a:	f001 fddd 	bl	80093c8 <MX_TIM16_Init>

	MX_TIM17_Init();
 800780e:	f001 fe03 	bl	8009418 <MX_TIM17_Init>
	MX_TIM3_Init();
 8007812:	f001 ff4d 	bl	80096b0 <MX_TIM3_Init>

	MX_TIM2_Init();
 8007816:	f001 fe6d 	bl	80094f4 <MX_TIM2_Init>
	MX_TIM4_Init();
 800781a:	f001 ffa5 	bl	8009768 <MX_TIM4_Init>
	MX_TIM8_Init();
 800781e:	f002 f881 	bl	8009924 <MX_TIM8_Init>

	//start everything that can generate interrupts after initialization is done
	HAL_TIM_Base_Start_IT(&htim1); //TODO: if regularly read voltage/temperature enabled
 8007822:	485d      	ldr	r0, [pc, #372]	; (8007998 <main+0x1c4>)
 8007824:	f7fd f818 	bl	8004858 <HAL_TIM_Base_Start_IT>
	if (Can_Timed_Enable) { HAL_TIM_Base_Start_IT(&htim6); }
 8007828:	4b5c      	ldr	r3, [pc, #368]	; (800799c <main+0x1c8>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d002      	beq.n	8007836 <main+0x62>
 8007830:	485b      	ldr	r0, [pc, #364]	; (80079a0 <main+0x1cc>)
 8007832:	f7fd f811 	bl	8004858 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8007836:	485b      	ldr	r0, [pc, #364]	; (80079a4 <main+0x1d0>)
 8007838:	f7fd f80e 	bl	8004858 <HAL_TIM_Base_Start_IT>

	//start pwm input channels if they are enabled
	if ((PWM_In_EN>>0)&1) { HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); }
 800783c:	4b5a      	ldr	r3, [pc, #360]	; (80079a8 <main+0x1d4>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d007      	beq.n	8007858 <main+0x84>
 8007848:	2100      	movs	r1, #0
 800784a:	4858      	ldr	r0, [pc, #352]	; (80079ac <main+0x1d8>)
 800784c:	f7fd f884 	bl	8004958 <HAL_TIM_PWM_Start>
 8007850:	2104      	movs	r1, #4
 8007852:	4856      	ldr	r0, [pc, #344]	; (80079ac <main+0x1d8>)
 8007854:	f7fd f880 	bl	8004958 <HAL_TIM_PWM_Start>
	if ((PWM_In_EN>>3)&1) { HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); }
 8007858:	4b53      	ldr	r3, [pc, #332]	; (80079a8 <main+0x1d4>)
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	08db      	lsrs	r3, r3, #3
 800785e:	b2db      	uxtb	r3, r3
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b00      	cmp	r3, #0
 8007866:	d007      	beq.n	8007878 <main+0xa4>
 8007868:	2104      	movs	r1, #4
 800786a:	4851      	ldr	r0, [pc, #324]	; (80079b0 <main+0x1dc>)
 800786c:	f7fd f874 	bl	8004958 <HAL_TIM_PWM_Start>
 8007870:	2100      	movs	r1, #0
 8007872:	484f      	ldr	r0, [pc, #316]	; (80079b0 <main+0x1dc>)
 8007874:	f7fd f870 	bl	8004958 <HAL_TIM_PWM_Start>
	if ((PWM_In_EN>>4)&1) { HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2); HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); }
 8007878:	4b4b      	ldr	r3, [pc, #300]	; (80079a8 <main+0x1d4>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	091b      	lsrs	r3, r3, #4
 800787e:	b2db      	uxtb	r3, r3
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	d007      	beq.n	8007898 <main+0xc4>
 8007888:	2104      	movs	r1, #4
 800788a:	484a      	ldr	r0, [pc, #296]	; (80079b4 <main+0x1e0>)
 800788c:	f7fd f864 	bl	8004958 <HAL_TIM_PWM_Start>
 8007890:	2100      	movs	r1, #0
 8007892:	4848      	ldr	r0, [pc, #288]	; (80079b4 <main+0x1e0>)
 8007894:	f7fd f860 	bl	8004958 <HAL_TIM_PWM_Start>

	//this timer starts the adc, so start it last
	HAL_TIM_Base_Start_IT(&htim15);
 8007898:	4847      	ldr	r0, [pc, #284]	; (80079b8 <main+0x1e4>)
 800789a:	f7fc ffdd 	bl	8004858 <HAL_TIM_Base_Start_IT>


	while(1)
	{
		if(canErrorToTransmit && canSendErrorFlag)
 800789e:	4b47      	ldr	r3, [pc, #284]	; (80079bc <main+0x1e8>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00c      	beq.n	80078c0 <main+0xec>
 80078a6:	4b46      	ldr	r3, [pc, #280]	; (80079c0 <main+0x1ec>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d008      	beq.n	80078c0 <main+0xec>
		{
			Send_Error();
 80078ae:	f001 f801 	bl	80088b4 <Send_Error>
			if(!canErrorToTransmit)
 80078b2:	4b42      	ldr	r3, [pc, #264]	; (80079bc <main+0x1e8>)
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <main+0xec>
			{
				canSendErrorFlag=0;
 80078ba:	4b41      	ldr	r3, [pc, #260]	; (80079c0 <main+0x1ec>)
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
			}
		}

		if(CanTimerFlag)
 80078c0:	4b40      	ldr	r3, [pc, #256]	; (80079c4 <main+0x1f0>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d03a      	beq.n	800793e <main+0x16a>
		{
			for(uint32_t i=0; i<8; i++)
 80078c8:	2300      	movs	r3, #0
 80078ca:	607b      	str	r3, [r7, #4]
 80078cc:	e031      	b.n	8007932 <main+0x15e>
			{
				if ((Can_Timed_Enable>>i)&0b1)
 80078ce:	4b33      	ldr	r3, [pc, #204]	; (800799c <main+0x1c8>)
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	fa42 f303 	asr.w	r3, r2, r3
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d024      	beq.n	800792c <main+0x158>
				{
					if(CanBuffer[CanBufferWritePos]!=255)
 80078e2:	4b39      	ldr	r3, [pc, #228]	; (80079c8 <main+0x1f4>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	4b38      	ldr	r3, [pc, #224]	; (80079cc <main+0x1f8>)
 80078ea:	5c9b      	ldrb	r3, [r3, r2]
 80078ec:	2bff      	cmp	r3, #255	; 0xff
 80078ee:	d002      	beq.n	80078f6 <main+0x122>
					{
						Set_Error(ERR_CAN_BUFFER_FULL);
 80078f0:	2001      	movs	r0, #1
 80078f2:	f000 ffb3 	bl	800885c <Set_Error>
					}
					//overwrite unsent messages
					CanBuffer[CanBufferWritePos]=i;
 80078f6:	4b34      	ldr	r3, [pc, #208]	; (80079c8 <main+0x1f4>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	b2d9      	uxtb	r1, r3
 8007900:	4b32      	ldr	r3, [pc, #200]	; (80079cc <main+0x1f8>)
 8007902:	5499      	strb	r1, [r3, r2]

					if(CanBufferWritePos>=30)
 8007904:	4b30      	ldr	r3, [pc, #192]	; (80079c8 <main+0x1f4>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b1d      	cmp	r3, #29
 800790a:	d903      	bls.n	8007914 <main+0x140>
					{
						CanBufferWritePos=0;
 800790c:	4b2e      	ldr	r3, [pc, #184]	; (80079c8 <main+0x1f4>)
 800790e:	2200      	movs	r2, #0
 8007910:	701a      	strb	r2, [r3, #0]
 8007912:	e005      	b.n	8007920 <main+0x14c>
					}
					else
					{
						CanBufferWritePos++;
 8007914:	4b2c      	ldr	r3, [pc, #176]	; (80079c8 <main+0x1f4>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	3301      	adds	r3, #1
 800791a:	b2da      	uxtb	r2, r3
 800791c:	4b2a      	ldr	r3, [pc, #168]	; (80079c8 <main+0x1f4>)
 800791e:	701a      	strb	r2, [r3, #0]
					}
					CanMessagesToSend++;
 8007920:	4b2b      	ldr	r3, [pc, #172]	; (80079d0 <main+0x1fc>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	3301      	adds	r3, #1
 8007926:	b2da      	uxtb	r2, r3
 8007928:	4b29      	ldr	r3, [pc, #164]	; (80079d0 <main+0x1fc>)
 800792a:	701a      	strb	r2, [r3, #0]
			for(uint32_t i=0; i<8; i++)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3301      	adds	r3, #1
 8007930:	607b      	str	r3, [r7, #4]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b07      	cmp	r3, #7
 8007936:	d9ca      	bls.n	80078ce <main+0xfa>
				}
			}
			CanTimerFlag=0;
 8007938:	4b22      	ldr	r3, [pc, #136]	; (80079c4 <main+0x1f0>)
 800793a:	2200      	movs	r2, #0
 800793c:	701a      	strb	r2, [r3, #0]
		}

		if (CanMessagesToSend)
 800793e:	4b24      	ldr	r3, [pc, #144]	; (80079d0 <main+0x1fc>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0ab      	beq.n	800789e <main+0xca>
		{
			//only put one thing to the fifo at a time so that sync message can be put to the front of the fifo
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) > 2)
 8007946:	4823      	ldr	r0, [pc, #140]	; (80079d4 <main+0x200>)
 8007948:	f7fb f828 	bl	800299c <HAL_FDCAN_GetTxFifoFreeLevel>
 800794c:	4603      	mov	r3, r0
 800794e:	2b02      	cmp	r3, #2
 8007950:	d9a5      	bls.n	800789e <main+0xca>
			{
				Can_Send(CanBuffer[CanBufferReadPos]);
 8007952:	4b21      	ldr	r3, [pc, #132]	; (80079d8 <main+0x204>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	4b1c      	ldr	r3, [pc, #112]	; (80079cc <main+0x1f8>)
 800795a:	5c9b      	ldrb	r3, [r3, r2]
 800795c:	4618      	mov	r0, r3
 800795e:	f000 fd23 	bl	80083a8 <Can_Send>

				CanBuffer[CanBufferReadPos]=255;
 8007962:	4b1d      	ldr	r3, [pc, #116]	; (80079d8 <main+0x204>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	4b18      	ldr	r3, [pc, #96]	; (80079cc <main+0x1f8>)
 800796a:	21ff      	movs	r1, #255	; 0xff
 800796c:	5499      	strb	r1, [r3, r2]
				CanMessagesToSend--;
 800796e:	4b18      	ldr	r3, [pc, #96]	; (80079d0 <main+0x1fc>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	3b01      	subs	r3, #1
 8007974:	b2da      	uxtb	r2, r3
 8007976:	4b16      	ldr	r3, [pc, #88]	; (80079d0 <main+0x1fc>)
 8007978:	701a      	strb	r2, [r3, #0]
				if(CanBufferReadPos>=30)
 800797a:	4b17      	ldr	r3, [pc, #92]	; (80079d8 <main+0x204>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b1d      	cmp	r3, #29
 8007980:	d903      	bls.n	800798a <main+0x1b6>
				{
					CanBufferReadPos=0;
 8007982:	4b15      	ldr	r3, [pc, #84]	; (80079d8 <main+0x204>)
 8007984:	2200      	movs	r2, #0
 8007986:	701a      	strb	r2, [r3, #0]
 8007988:	e789      	b.n	800789e <main+0xca>
				}
				else
				{
					CanBufferReadPos++;
 800798a:	4b13      	ldr	r3, [pc, #76]	; (80079d8 <main+0x204>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	3301      	adds	r3, #1
 8007990:	b2da      	uxtb	r2, r3
 8007992:	4b11      	ldr	r3, [pc, #68]	; (80079d8 <main+0x204>)
 8007994:	701a      	strb	r2, [r3, #0]
		if(canErrorToTransmit && canSendErrorFlag)
 8007996:	e782      	b.n	800789e <main+0xca>
 8007998:	20000778 	.word	0x20000778
 800799c:	200000e1 	.word	0x200000e1
 80079a0:	2000072c 	.word	0x2000072c
 80079a4:	200009f4 	.word	0x200009f4
 80079a8:	20000476 	.word	0x20000476
 80079ac:	2000087c 	.word	0x2000087c
 80079b0:	200001ac 	.word	0x200001ac
 80079b4:	20000128 	.word	0x20000128
 80079b8:	20000300 	.word	0x20000300
 80079bc:	20000550 	.word	0x20000550
 80079c0:	20000928 	.word	0x20000928
 80079c4:	200006e0 	.word	0x200006e0
 80079c8:	200001a8 	.word	0x200001a8
 80079cc:	20000040 	.word	0x20000040
 80079d0:	2000061c 	.word	0x2000061c
 80079d4:	20000410 	.word	0x20000410
 80079d8:	200007ba 	.word	0x200007ba

080079dc <HAL_TIM_PeriodElapsedCallback>:
	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM15)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a2b      	ldr	r2, [pc, #172]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d10d      	bne.n	8007a0a <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		HAL_TIM_Base_Stop_IT(&htim15);
 80079ee:	482b      	ldr	r0, [pc, #172]	; (8007a9c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80079f0:	f7fc ff5c 	bl	80048ac <HAL_TIM_Base_Stop_IT>
	    if (HAL_ADCEx_MultiModeStart_DMA(&hadc1, ADCDualConvertedValues, 3) != HAL_OK)
 80079f4:	2203      	movs	r2, #3
 80079f6:	492a      	ldr	r1, [pc, #168]	; (8007aa0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80079f8:	482a      	ldr	r0, [pc, #168]	; (8007aa4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80079fa:	f7f9 fe9b 	bl	8001734 <HAL_ADCEx_MultiModeStart_DMA>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d045      	beq.n	8007a90 <HAL_TIM_PeriodElapsedCallback+0xb4>
	    {
	    	Error_Handler();
 8007a04:	f002 f890 	bl	8009b28 <Error_Handler>
	}
	else
	{
		Error_Handler();
	}
}
 8007a08:	e042      	b.n	8007a90 <HAL_TIM_PeriodElapsedCallback+0xb4>
	else if (htim->Instance == TIM16)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a26      	ldr	r2, [pc, #152]	; (8007aa8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d105      	bne.n	8007a20 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_TIM_Base_Stop_IT(&htim16);
 8007a14:	4825      	ldr	r0, [pc, #148]	; (8007aac <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8007a16:	f7fc ff49 	bl	80048ac <HAL_TIM_Base_Stop_IT>
		Can_Sync();
 8007a1a:	f000 fd4f 	bl	80084bc <Can_Sync>
}
 8007a1e:	e037      	b.n	8007a90 <HAL_TIM_PeriodElapsedCallback+0xb4>
	else if (htim->Instance == TIM1)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a22      	ldr	r2, [pc, #136]	; (8007ab0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d11e      	bne.n	8007a68 <HAL_TIM_PeriodElapsedCallback+0x8c>
		sample_temperature+=SampleTemperatureBurst;
 8007a2a:	4b22      	ldr	r3, [pc, #136]	; (8007ab4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	4b21      	ldr	r3, [pc, #132]	; (8007ab8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4413      	add	r3, r2
 8007a36:	4a20      	ldr	r2, [pc, #128]	; (8007ab8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8007a38:	6013      	str	r3, [r2, #0]
		if(sample_temperature>255) //in this case sample_temperature should be continuous or it should be measured slower
 8007a3a:	4b1f      	ldr	r3, [pc, #124]	; (8007ab8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2bff      	cmp	r3, #255	; 0xff
 8007a40:	d902      	bls.n	8007a48 <HAL_TIM_PeriodElapsedCallback+0x6c>
			Set_Error(WARN_TEMP_MEASURE_OVERFLOW);
 8007a42:	20e1      	movs	r0, #225	; 0xe1
 8007a44:	f000 ff0a 	bl	800885c <Set_Error>
		sample_voltage+=SampleVoltageBurst;
 8007a48:	4b1c      	ldr	r3, [pc, #112]	; (8007abc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	4b1c      	ldr	r3, [pc, #112]	; (8007ac0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4413      	add	r3, r2
 8007a54:	4a1a      	ldr	r2, [pc, #104]	; (8007ac0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8007a56:	6013      	str	r3, [r2, #0]
		if(sample_voltage>255)
 8007a58:	4b19      	ldr	r3, [pc, #100]	; (8007ac0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2bff      	cmp	r3, #255	; 0xff
 8007a5e:	d917      	bls.n	8007a90 <HAL_TIM_PeriodElapsedCallback+0xb4>
			Set_Error(WARN_VOLT_MEASURE_OVERFLOW);
 8007a60:	20e2      	movs	r0, #226	; 0xe2
 8007a62:	f000 fefb 	bl	800885c <Set_Error>
}
 8007a66:	e013      	b.n	8007a90 <HAL_TIM_PeriodElapsedCallback+0xb4>
	else if (htim->Instance == TIM7)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a15      	ldr	r2, [pc, #84]	; (8007ac4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d103      	bne.n	8007a7a <HAL_TIM_PeriodElapsedCallback+0x9e>
		canSendErrorFlag=1;
 8007a72:	4b15      	ldr	r3, [pc, #84]	; (8007ac8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8007a74:	2201      	movs	r2, #1
 8007a76:	701a      	strb	r2, [r3, #0]
}
 8007a78:	e00a      	b.n	8007a90 <HAL_TIM_PeriodElapsedCallback+0xb4>
	else if (htim->Instance == TIM6)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a13      	ldr	r2, [pc, #76]	; (8007acc <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d103      	bne.n	8007a8c <HAL_TIM_PeriodElapsedCallback+0xb0>
		CanTimerFlag=1;
 8007a84:	4b12      	ldr	r3, [pc, #72]	; (8007ad0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	701a      	strb	r2, [r3, #0]
}
 8007a8a:	e001      	b.n	8007a90 <HAL_TIM_PeriodElapsedCallback+0xb4>
		Error_Handler();
 8007a8c:	f002 f84c 	bl	8009b28 <Error_Handler>
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	40014000 	.word	0x40014000
 8007a9c:	20000300 	.word	0x20000300
 8007aa0:	20000694 	.word	0x20000694
 8007aa4:	200005a8 	.word	0x200005a8
 8007aa8:	40014400 	.word	0x40014400
 8007aac:	200009b4 	.word	0x200009b4
 8007ab0:	40012c00 	.word	0x40012c00
 8007ab4:	20000852 	.word	0x20000852
 8007ab8:	2000047c 	.word	0x2000047c
 8007abc:	200001a9 	.word	0x200001a9
 8007ac0:	20000090 	.word	0x20000090
 8007ac4:	40001400 	.word	0x40001400
 8007ac8:	20000928 	.word	0x20000928
 8007acc:	40001000 	.word	0x40001000
 8007ad0:	200006e0 	.word	0x200006e0

08007ad4 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b0a0      	sub	sp, #128	; 0x80
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ae4:	f040 843d 	bne.w	8008362 <HAL_ADC_ConvCpltCallback+0x88e>
	{
		uint32_t sampled = adc_selection;
 8007ae8:	4ba6      	ldr	r3, [pc, #664]	; (8007d84 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	62fb      	str	r3, [r7, #44]	; 0x2c

		//we want the ability to not sample temperature and voltage as often as current, as sampling those heats up the switch
		//we also want to make sure that both current channels are sampled
		//TODO: change the constant 3 into however many switches are used; if only channel 0 is used then don't read current on channel 1
		//TODO: set voltage and temperature interrupts from timer, make timer configurable
		switch(adc_selection)
 8007aee:	4ba5      	ldr	r3, [pc, #660]	; (8007d84 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	f200 80b1 	bhi.w	8007c5a <HAL_ADC_ConvCpltCallback+0x186>
 8007af8:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <HAL_ADC_ConvCpltCallback+0x2c>)
 8007afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afe:	bf00      	nop
 8007b00:	08007b11 	.word	0x08007b11
 8007b04:	08007b35 	.word	0x08007b35
 8007b08:	08007bd5 	.word	0x08007bd5
 8007b0c:	08007c37 	.word	0x08007c37
		{
		case 0: //we have just sampled current for channel 0, so sample current for channel 1
			HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 1);
 8007b10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b18:	2201      	movs	r2, #1
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fb fea6 	bl	800386c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 8007b20:	4b99      	ldr	r3, [pc, #612]	; (8007d88 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8007b22:	2101      	movs	r1, #1
 8007b24:	2200      	movs	r2, #0
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fb fea0 	bl	800386c <HAL_GPIO_WritePin>
			adc_selection=1;
 8007b2c:	4b95      	ldr	r3, [pc, #596]	; (8007d84 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8007b2e:	2201      	movs	r2, #1
 8007b30:	601a      	str	r2, [r3, #0]
			break;
 8007b32:	e095      	b.n	8007c60 <HAL_ADC_ConvCpltCallback+0x18c>
		case 1: //if temperature or voltage has been enabled sample those, otherwise start again with current for channel 0
			if (sample_temperature)
 8007b34:	4b95      	ldr	r3, [pc, #596]	; (8007d8c <HAL_ADC_ConvCpltCallback+0x2b8>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01a      	beq.n	8007b72 <HAL_ADC_ConvCpltCallback+0x9e>
			{
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 8007b3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b44:	2200      	movs	r2, #0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fb fe90 	bl	800386c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 1);
 8007b4c:	4b8e      	ldr	r3, [pc, #568]	; (8007d88 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8007b4e:	2101      	movs	r1, #1
 8007b50:	2201      	movs	r2, #1
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fb fe8a 	bl	800386c <HAL_GPIO_WritePin>
				if (sample_temperature<255) { sample_temperature--; }
 8007b58:	4b8c      	ldr	r3, [pc, #560]	; (8007d8c <HAL_ADC_ConvCpltCallback+0x2b8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2bfe      	cmp	r3, #254	; 0xfe
 8007b5e:	d804      	bhi.n	8007b6a <HAL_ADC_ConvCpltCallback+0x96>
 8007b60:	4b8a      	ldr	r3, [pc, #552]	; (8007d8c <HAL_ADC_ConvCpltCallback+0x2b8>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	4a89      	ldr	r2, [pc, #548]	; (8007d8c <HAL_ADC_ConvCpltCallback+0x2b8>)
 8007b68:	6013      	str	r3, [r2, #0]
				adc_selection=2;
 8007b6a:	4b86      	ldr	r3, [pc, #536]	; (8007d84 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	601a      	str	r2, [r3, #0]
			{
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
				adc_selection=0;
			}
			break;
 8007b70:	e076      	b.n	8007c60 <HAL_ADC_ConvCpltCallback+0x18c>
			else if (sample_voltage)
 8007b72:	4b87      	ldr	r3, [pc, #540]	; (8007d90 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d01a      	beq.n	8007bb0 <HAL_ADC_ConvCpltCallback+0xdc>
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 1);
 8007b7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b82:	2201      	movs	r2, #1
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fb fe71 	bl	800386c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 1);
 8007b8a:	4b7f      	ldr	r3, [pc, #508]	; (8007d88 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	2201      	movs	r2, #1
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fb fe6b 	bl	800386c <HAL_GPIO_WritePin>
				if (sample_voltage<255) { sample_voltage--; }
 8007b96:	4b7e      	ldr	r3, [pc, #504]	; (8007d90 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2bfe      	cmp	r3, #254	; 0xfe
 8007b9c:	d804      	bhi.n	8007ba8 <HAL_ADC_ConvCpltCallback+0xd4>
 8007b9e:	4b7c      	ldr	r3, [pc, #496]	; (8007d90 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	4a7a      	ldr	r2, [pc, #488]	; (8007d90 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8007ba6:	6013      	str	r3, [r2, #0]
				adc_selection=3;
 8007ba8:	4b76      	ldr	r3, [pc, #472]	; (8007d84 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8007baa:	2203      	movs	r2, #3
 8007bac:	601a      	str	r2, [r3, #0]
			break;
 8007bae:	e057      	b.n	8007c60 <HAL_ADC_ConvCpltCallback+0x18c>
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 8007bb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fb fe56 	bl	800386c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 8007bc0:	4b71      	ldr	r3, [pc, #452]	; (8007d88 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fb fe50 	bl	800386c <HAL_GPIO_WritePin>
				adc_selection=0;
 8007bcc:	4b6d      	ldr	r3, [pc, #436]	; (8007d84 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	601a      	str	r2, [r3, #0]
			break;
 8007bd2:	e045      	b.n	8007c60 <HAL_ADC_ConvCpltCallback+0x18c>
		case 2: //if voltage has been enabled sample it, otherwise go back to current for channel 0
			if (sample_voltage)
 8007bd4:	4b6e      	ldr	r3, [pc, #440]	; (8007d90 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01a      	beq.n	8007c12 <HAL_ADC_ConvCpltCallback+0x13e>
			{
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 1);
 8007bdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007be0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007be4:	2201      	movs	r2, #1
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fb fe40 	bl	800386c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 1);
 8007bec:	4b66      	ldr	r3, [pc, #408]	; (8007d88 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8007bee:	2101      	movs	r1, #1
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fb fe3a 	bl	800386c <HAL_GPIO_WritePin>
				if (sample_voltage<255) { sample_voltage--; }
 8007bf8:	4b65      	ldr	r3, [pc, #404]	; (8007d90 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2bfe      	cmp	r3, #254	; 0xfe
 8007bfe:	d804      	bhi.n	8007c0a <HAL_ADC_ConvCpltCallback+0x136>
 8007c00:	4b63      	ldr	r3, [pc, #396]	; (8007d90 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	4a62      	ldr	r2, [pc, #392]	; (8007d90 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8007c08:	6013      	str	r3, [r2, #0]
				adc_selection=3;
 8007c0a:	4b5e      	ldr	r3, [pc, #376]	; (8007d84 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8007c0c:	2203      	movs	r2, #3
 8007c0e:	601a      	str	r2, [r3, #0]
			{
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
				adc_selection=0;
			}
			break;
 8007c10:	e026      	b.n	8007c60 <HAL_ADC_ConvCpltCallback+0x18c>
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 8007c12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fb fe25 	bl	800386c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 8007c22:	4b59      	ldr	r3, [pc, #356]	; (8007d88 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8007c24:	2101      	movs	r1, #1
 8007c26:	2200      	movs	r2, #0
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fb fe1f 	bl	800386c <HAL_GPIO_WritePin>
				adc_selection=0;
 8007c2e:	4b55      	ldr	r3, [pc, #340]	; (8007d84 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]
			break;
 8007c34:	e014      	b.n	8007c60 <HAL_ADC_ConvCpltCallback+0x18c>
		case 3: //as voltage has just been sampled go back to current for channel 0
			HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 8007c36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c3e:	2200      	movs	r2, #0
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fb fe13 	bl	800386c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 8007c46:	4b50      	ldr	r3, [pc, #320]	; (8007d88 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8007c48:	2101      	movs	r1, #1
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fb fe0d 	bl	800386c <HAL_GPIO_WritePin>
			adc_selection=0;
 8007c52:	4b4c      	ldr	r3, [pc, #304]	; (8007d84 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]
			break;
 8007c58:	e002      	b.n	8007c60 <HAL_ADC_ConvCpltCallback+0x18c>
		default:
			Error_Handler();
 8007c5a:	f001 ff65 	bl	8009b28 <Error_Handler>
			break;
 8007c5e:	bf00      	nop
		}

		HAL_TIM_Base_Start_IT(&htim15);
 8007c60:	484c      	ldr	r0, [pc, #304]	; (8007d94 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8007c62:	f7fc fdf9 	bl	8004858 <HAL_TIM_Base_Start_IT>

		for(uint32_t i=0; i<3; i++)
 8007c66:	2300      	movs	r3, #0
 8007c68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c6a:	e049      	b.n	8007d00 <HAL_ADC_ConvCpltCallback+0x22c>
		{
			slaveConvertedValue[i]=(ADCDualConvertedValues[i]>>16)&0xFFFF;
 8007c6c:	4a4a      	ldr	r2, [pc, #296]	; (8007d98 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8007c6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c74:	0c1a      	lsrs	r2, r3, #16
 8007c76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007c7e:	440b      	add	r3, r1
 8007c80:	f843 2c78 	str.w	r2, [r3, #-120]
			masterConvertedValue[i]=ADCDualConvertedValues[i]&0xFFFF;
 8007c84:	4a44      	ldr	r2, [pc, #272]	; (8007d98 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8007c86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007c96:	440b      	add	r3, r1
 8007c98:	f843 2c6c 	str.w	r2, [r3, #-108]
			if(masterConvertedValue[i]>slaveConvertedValue[i])
 8007c9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 8007caa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007cb2:	440b      	add	r3, r1
 8007cb4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d916      	bls.n	8007cea <HAL_ADC_ConvCpltCallback+0x216>
			{
				convertedValue[i]=masterConvertedValue[i]-slaveConvertedValue[i];
 8007cbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 8007cca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007cd2:	440b      	add	r3, r1
 8007cd4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8007cd8:	1ad2      	subs	r2, r2, r3
 8007cda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007ce2:	440b      	add	r3, r1
 8007ce4:	f843 2c60 	str.w	r2, [r3, #-96]
 8007ce8:	e007      	b.n	8007cfa <HAL_ADC_ConvCpltCallback+0x226>
			}
			else //this should only happen due to error in reading at low voltages
			{
				convertedValue[i]=0;
 8007cea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8007cf2:	4413      	add	r3, r2
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f843 2c60 	str.w	r2, [r3, #-96]
		for(uint32_t i=0; i<3; i++)
 8007cfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d9b2      	bls.n	8007c6c <HAL_ADC_ConvCpltCallback+0x198>
			}
		}

		if (HAL_ADCEx_MultiModeStop_DMA(&hadc1) != HAL_OK)
 8007d06:	4825      	ldr	r0, [pc, #148]	; (8007d9c <HAL_ADC_ConvCpltCallback+0x2c8>)
 8007d08:	f7f9 fdb2 	bl	8001870 <HAL_ADCEx_MultiModeStop_DMA>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <HAL_ADC_ConvCpltCallback+0x242>
		{
			Error_Handler();
 8007d12:	f001 ff09 	bl	8009b28 <Error_Handler>
		}

		//if not all switches are used this still does not take too much time and it is fine to write some extra 0s to variables
		switch(sampled)
 8007d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d18:	2b03      	cmp	r3, #3
 8007d1a:	f200 8317 	bhi.w	800834c <HAL_ADC_ConvCpltCallback+0x878>
 8007d1e:	a201      	add	r2, pc, #4	; (adr r2, 8007d24 <HAL_ADC_ConvCpltCallback+0x250>)
 8007d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d24:	08007d35 	.word	0x08007d35
 8007d28:	08007e87 	.word	0x08007e87
 8007d2c:	08007fad 	.word	0x08007fad
 8007d30:	08008159 	.word	0x08008159
		{
		case 0:
			U5I0[I0_rolling_average_position]=convertedValue[0];
 8007d34:	4b1a      	ldr	r3, [pc, #104]	; (8007da0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6a3a      	ldr	r2, [r7, #32]
 8007d3a:	491a      	ldr	r1, [pc, #104]	; (8007da4 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8007d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U6I0[I0_rolling_average_position]=convertedValue[1];
 8007d40:	4b17      	ldr	r3, [pc, #92]	; (8007da0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d46:	4918      	ldr	r1, [pc, #96]	; (8007da8 <HAL_ADC_ConvCpltCallback+0x2d4>)
 8007d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U7I0[I0_rolling_average_position]=convertedValue[2];
 8007d4c:	4b14      	ldr	r3, [pc, #80]	; (8007da0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d52:	4916      	ldr	r1, [pc, #88]	; (8007dac <HAL_ADC_ConvCpltCallback+0x2d8>)
 8007d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (I0_rolling_average_position == I_ROLLING_AVERAGE-1)
 8007d58:	4b11      	ldr	r3, [pc, #68]	; (8007da0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b0f      	cmp	r3, #15
 8007d5e:	d103      	bne.n	8007d68 <HAL_ADC_ConvCpltCallback+0x294>
			{
				I0_rolling_average_position=0;
 8007d60:	4b0f      	ldr	r3, [pc, #60]	; (8007da0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	e004      	b.n	8007d72 <HAL_ADC_ConvCpltCallback+0x29e>
			}
			else
			{
				I0_rolling_average_position++;
 8007d68:	4b0d      	ldr	r3, [pc, #52]	; (8007da0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	4a0c      	ldr	r2, [pc, #48]	; (8007da0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8007d70:	6013      	str	r3, [r2, #0]
			}

			uint32_t U5I0_raw=0; uint32_t U6I0_raw=0; uint32_t U7I0_raw=0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d76:	2300      	movs	r3, #0
 8007d78:	677b      	str	r3, [r7, #116]	; 0x74
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	673b      	str	r3, [r7, #112]	; 0x70
			for(uint32_t i=0; i<I_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 8007d7e:	2300      	movs	r3, #0
 8007d80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d82:	e02d      	b.n	8007de0 <HAL_ADC_ConvCpltCallback+0x30c>
 8007d84:	200007bc 	.word	0x200007bc
 8007d88:	48000400 	.word	0x48000400
 8007d8c:	2000047c 	.word	0x2000047c
 8007d90:	20000090 	.word	0x20000090
 8007d94:	20000300 	.word	0x20000300
 8007d98:	20000694 	.word	0x20000694
 8007d9c:	200005a8 	.word	0x200005a8
 8007da0:	20000868 	.word	0x20000868
 8007da4:	2000092c 	.word	0x2000092c
 8007da8:	200007d0 	.word	0x200007d0
 8007dac:	20000564 	.word	0x20000564
			{
				U5I0_raw+=U5I0[i];
 8007db0:	4a92      	ldr	r2, [pc, #584]	; (8007ffc <HAL_ADC_ConvCpltCallback+0x528>)
 8007db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007db8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007dba:	4413      	add	r3, r2
 8007dbc:	67bb      	str	r3, [r7, #120]	; 0x78
				U6I0_raw+=U6I0[i];
 8007dbe:	4a90      	ldr	r2, [pc, #576]	; (8008000 <HAL_ADC_ConvCpltCallback+0x52c>)
 8007dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007dc8:	4413      	add	r3, r2
 8007dca:	677b      	str	r3, [r7, #116]	; 0x74
				U7I0_raw+=U7I0[i];
 8007dcc:	4a8d      	ldr	r2, [pc, #564]	; (8008004 <HAL_ADC_ConvCpltCallback+0x530>)
 8007dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dd4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007dd6:	4413      	add	r3, r2
 8007dd8:	673b      	str	r3, [r7, #112]	; 0x70
			for(uint32_t i=0; i<I_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 8007dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ddc:	3301      	adds	r3, #1
 8007dde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de2:	2b0f      	cmp	r3, #15
 8007de4:	d9e4      	bls.n	8007db0 <HAL_ADC_ConvCpltCallback+0x2dc>
			}
			U5I0_raw/=I_ROLLING_AVERAGE; U6I0_raw/=I_ROLLING_AVERAGE; U7I0_raw/=I_ROLLING_AVERAGE; //TODO: calculated U5I0_calculated from U5I0_raw
 8007de6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007de8:	091b      	lsrs	r3, r3, #4
 8007dea:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dee:	091b      	lsrs	r3, r3, #4
 8007df0:	677b      	str	r3, [r7, #116]	; 0x74
 8007df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007df4:	091b      	lsrs	r3, r3, #4
 8007df6:	673b      	str	r3, [r7, #112]	; 0x70
			U5I0_real=U5I0_raw; U6I0_real=U6I0_raw; U7I0_real=U7I0_raw; //TODO: warnings on over/undercurrent, overcurrent shutoff
 8007df8:	4a83      	ldr	r2, [pc, #524]	; (8008008 <HAL_ADC_ConvCpltCallback+0x534>)
 8007dfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dfc:	6013      	str	r3, [r2, #0]
 8007dfe:	4a83      	ldr	r2, [pc, #524]	; (800800c <HAL_ADC_ConvCpltCallback+0x538>)
 8007e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e02:	6013      	str	r3, [r2, #0]
 8007e04:	4a82      	ldr	r2, [pc, #520]	; (8008010 <HAL_ADC_ConvCpltCallback+0x53c>)
 8007e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e08:	6013      	str	r3, [r2, #0]

			//TODO: check overcurrent and switch off immediately if too high

			//TODO: probably move this to main because it isn't so important
			//TODO: undercurrent warnings need to only happen when enabled, and logic for enabling them needs to exist
			if (U5I0_real>warn_overcurrent_U5I0)
 8007e0a:	4b82      	ldr	r3, [pc, #520]	; (8008014 <HAL_ADC_ConvCpltCallback+0x540>)
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	4b7d      	ldr	r3, [pc, #500]	; (8008008 <HAL_ADC_ConvCpltCallback+0x534>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d202      	bcs.n	8007e1e <HAL_ADC_ConvCpltCallback+0x34a>
			{
				Set_Error(WARN_OVERCURR_U5I0);
 8007e18:	20c6      	movs	r0, #198	; 0xc6
 8007e1a:	f000 fd1f 	bl	800885c <Set_Error>
			}
			if (U5I0_real<warn_undercurrent_U5I0)
 8007e1e:	4b7e      	ldr	r3, [pc, #504]	; (8008018 <HAL_ADC_ConvCpltCallback+0x544>)
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	461a      	mov	r2, r3
 8007e24:	4b78      	ldr	r3, [pc, #480]	; (8008008 <HAL_ADC_ConvCpltCallback+0x534>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d902      	bls.n	8007e32 <HAL_ADC_ConvCpltCallback+0x35e>
			{
				Set_Error(WARN_UNDERCURR_U5I0);
 8007e2c:	20c5      	movs	r0, #197	; 0xc5
 8007e2e:	f000 fd15 	bl	800885c <Set_Error>
			}
			if (U6I0_real>warn_overcurrent_U6I0)
 8007e32:	4b7a      	ldr	r3, [pc, #488]	; (800801c <HAL_ADC_ConvCpltCallback+0x548>)
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	461a      	mov	r2, r3
 8007e38:	4b74      	ldr	r3, [pc, #464]	; (800800c <HAL_ADC_ConvCpltCallback+0x538>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d202      	bcs.n	8007e46 <HAL_ADC_ConvCpltCallback+0x372>
			{
				Set_Error(WARN_OVERCURR_U6I0);
 8007e40:	20cf      	movs	r0, #207	; 0xcf
 8007e42:	f000 fd0b 	bl	800885c <Set_Error>
			}
			if (U6I0_real<warn_undercurrent_U6I0)
 8007e46:	4b76      	ldr	r3, [pc, #472]	; (8008020 <HAL_ADC_ConvCpltCallback+0x54c>)
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	4b6f      	ldr	r3, [pc, #444]	; (800800c <HAL_ADC_ConvCpltCallback+0x538>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d902      	bls.n	8007e5a <HAL_ADC_ConvCpltCallback+0x386>
			{
				Set_Error(WARN_UNDERCURR_U6I0);
 8007e54:	20ce      	movs	r0, #206	; 0xce
 8007e56:	f000 fd01 	bl	800885c <Set_Error>
			}
			if (U7I0_real>warn_overcurrent_U7I0)
 8007e5a:	4b72      	ldr	r3, [pc, #456]	; (8008024 <HAL_ADC_ConvCpltCallback+0x550>)
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	4b6b      	ldr	r3, [pc, #428]	; (8008010 <HAL_ADC_ConvCpltCallback+0x53c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d202      	bcs.n	8007e6e <HAL_ADC_ConvCpltCallback+0x39a>
			{
				Set_Error(WARN_OVERCURR_U7I0);
 8007e68:	20d8      	movs	r0, #216	; 0xd8
 8007e6a:	f000 fcf7 	bl	800885c <Set_Error>
			}
			if (U7I0_real<warn_undercurrent_U7I0)
 8007e6e:	4b6e      	ldr	r3, [pc, #440]	; (8008028 <HAL_ADC_ConvCpltCallback+0x554>)
 8007e70:	881b      	ldrh	r3, [r3, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	4b66      	ldr	r3, [pc, #408]	; (8008010 <HAL_ADC_ConvCpltCallback+0x53c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	f240 826b 	bls.w	8008354 <HAL_ADC_ConvCpltCallback+0x880>
			{
				Set_Error(WARN_UNDERCURR_U7I0);
 8007e7e:	20d7      	movs	r0, #215	; 0xd7
 8007e80:	f000 fcec 	bl	800885c <Set_Error>
			}
			//TODO: test all these limits when I have power supply and power trimmer

			break;
 8007e84:	e266      	b.n	8008354 <HAL_ADC_ConvCpltCallback+0x880>
		case 1:
			U5I1[I1_rolling_average_position]=convertedValue[0];
 8007e86:	4b69      	ldr	r3, [pc, #420]	; (800802c <HAL_ADC_ConvCpltCallback+0x558>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6a3a      	ldr	r2, [r7, #32]
 8007e8c:	4968      	ldr	r1, [pc, #416]	; (8008030 <HAL_ADC_ConvCpltCallback+0x55c>)
 8007e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U6I1[I1_rolling_average_position]=convertedValue[1];
 8007e92:	4b66      	ldr	r3, [pc, #408]	; (800802c <HAL_ADC_ConvCpltCallback+0x558>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e98:	4966      	ldr	r1, [pc, #408]	; (8008034 <HAL_ADC_ConvCpltCallback+0x560>)
 8007e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U7I1[I1_rolling_average_position]=convertedValue[2];
 8007e9e:	4b63      	ldr	r3, [pc, #396]	; (800802c <HAL_ADC_ConvCpltCallback+0x558>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ea4:	4964      	ldr	r1, [pc, #400]	; (8008038 <HAL_ADC_ConvCpltCallback+0x564>)
 8007ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (I1_rolling_average_position == I_ROLLING_AVERAGE-1)
 8007eaa:	4b60      	ldr	r3, [pc, #384]	; (800802c <HAL_ADC_ConvCpltCallback+0x558>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b0f      	cmp	r3, #15
 8007eb0:	d103      	bne.n	8007eba <HAL_ADC_ConvCpltCallback+0x3e6>
			{
				I1_rolling_average_position=0;
 8007eb2:	4b5e      	ldr	r3, [pc, #376]	; (800802c <HAL_ADC_ConvCpltCallback+0x558>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	e004      	b.n	8007ec4 <HAL_ADC_ConvCpltCallback+0x3f0>
			}
			else
			{
				I1_rolling_average_position++;
 8007eba:	4b5c      	ldr	r3, [pc, #368]	; (800802c <HAL_ADC_ConvCpltCallback+0x558>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	4a5a      	ldr	r2, [pc, #360]	; (800802c <HAL_ADC_ConvCpltCallback+0x558>)
 8007ec2:	6013      	str	r3, [r2, #0]
			}

			uint32_t U5I1_raw=0; uint32_t U6I1_raw=1; uint32_t U7I1_raw=0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ec8:	2301      	movs	r3, #1
 8007eca:	667b      	str	r3, [r7, #100]	; 0x64
 8007ecc:	2300      	movs	r3, #0
 8007ece:	663b      	str	r3, [r7, #96]	; 0x60
			for(uint32_t i=0; i<I_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ed4:	e017      	b.n	8007f06 <HAL_ADC_ConvCpltCallback+0x432>
			{
				U5I1_raw+=U5I1[i];
 8007ed6:	4a56      	ldr	r2, [pc, #344]	; (8008030 <HAL_ADC_ConvCpltCallback+0x55c>)
 8007ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ede:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ee0:	4413      	add	r3, r2
 8007ee2:	66bb      	str	r3, [r7, #104]	; 0x68
				U6I1_raw+=U6I1[i];
 8007ee4:	4a53      	ldr	r2, [pc, #332]	; (8008034 <HAL_ADC_ConvCpltCallback+0x560>)
 8007ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007eee:	4413      	add	r3, r2
 8007ef0:	667b      	str	r3, [r7, #100]	; 0x64
				U7I1_raw+=U7I1[i];
 8007ef2:	4a51      	ldr	r2, [pc, #324]	; (8008038 <HAL_ADC_ConvCpltCallback+0x564>)
 8007ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007efa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007efc:	4413      	add	r3, r2
 8007efe:	663b      	str	r3, [r7, #96]	; 0x60
			for(uint32_t i=0; i<I_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 8007f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f02:	3301      	adds	r3, #1
 8007f04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f08:	2b0f      	cmp	r3, #15
 8007f0a:	d9e4      	bls.n	8007ed6 <HAL_ADC_ConvCpltCallback+0x402>
			}
			U5I1_raw/=I_ROLLING_AVERAGE; U6I1_raw/=I_ROLLING_AVERAGE; U7I1_raw/=I_ROLLING_AVERAGE; //TODO: calculated U5I0_calculated from U5I0_raw
 8007f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f0e:	091b      	lsrs	r3, r3, #4
 8007f10:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f14:	091b      	lsrs	r3, r3, #4
 8007f16:	667b      	str	r3, [r7, #100]	; 0x64
 8007f18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f1a:	091b      	lsrs	r3, r3, #4
 8007f1c:	663b      	str	r3, [r7, #96]	; 0x60
			U5I1_real=U5I1_raw; U6I1_real=U6I1_raw; U7I1_real=U7I1_raw; //TODO: warnings on over/undercurrent, overcurrent shutoff
 8007f1e:	4a47      	ldr	r2, [pc, #284]	; (800803c <HAL_ADC_ConvCpltCallback+0x568>)
 8007f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	4a46      	ldr	r2, [pc, #280]	; (8008040 <HAL_ADC_ConvCpltCallback+0x56c>)
 8007f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	4a46      	ldr	r2, [pc, #280]	; (8008044 <HAL_ADC_ConvCpltCallback+0x570>)
 8007f2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f2e:	6013      	str	r3, [r2, #0]

			//TODO: check overcurrent and switch off immediately if too high

			//TODO: probably move this to main because it isn't so important
			if (U5I1_real>warn_overcurrent_U5I1)
 8007f30:	4b45      	ldr	r3, [pc, #276]	; (8008048 <HAL_ADC_ConvCpltCallback+0x574>)
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	461a      	mov	r2, r3
 8007f36:	4b41      	ldr	r3, [pc, #260]	; (800803c <HAL_ADC_ConvCpltCallback+0x568>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d202      	bcs.n	8007f44 <HAL_ADC_ConvCpltCallback+0x470>
			{
				Set_Error(WARN_OVERCURR_U5I1);
 8007f3e:	20c8      	movs	r0, #200	; 0xc8
 8007f40:	f000 fc8c 	bl	800885c <Set_Error>
			}
			if (U5I1_real<warn_undercurrent_U5I1)
 8007f44:	4b41      	ldr	r3, [pc, #260]	; (800804c <HAL_ADC_ConvCpltCallback+0x578>)
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	4b3c      	ldr	r3, [pc, #240]	; (800803c <HAL_ADC_ConvCpltCallback+0x568>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d902      	bls.n	8007f58 <HAL_ADC_ConvCpltCallback+0x484>
			{
				Set_Error(WARN_UNDERCURR_U5I1);
 8007f52:	20c7      	movs	r0, #199	; 0xc7
 8007f54:	f000 fc82 	bl	800885c <Set_Error>
			}
			if (U6I1_real>warn_overcurrent_U6I1)
 8007f58:	4b3d      	ldr	r3, [pc, #244]	; (8008050 <HAL_ADC_ConvCpltCallback+0x57c>)
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	4b38      	ldr	r3, [pc, #224]	; (8008040 <HAL_ADC_ConvCpltCallback+0x56c>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d202      	bcs.n	8007f6c <HAL_ADC_ConvCpltCallback+0x498>
			{
				Set_Error(WARN_OVERCURR_U6I1);
 8007f66:	20d1      	movs	r0, #209	; 0xd1
 8007f68:	f000 fc78 	bl	800885c <Set_Error>
			}
			if (U6I1_real<warn_undercurrent_U6I1)
 8007f6c:	4b39      	ldr	r3, [pc, #228]	; (8008054 <HAL_ADC_ConvCpltCallback+0x580>)
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	461a      	mov	r2, r3
 8007f72:	4b33      	ldr	r3, [pc, #204]	; (8008040 <HAL_ADC_ConvCpltCallback+0x56c>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d902      	bls.n	8007f80 <HAL_ADC_ConvCpltCallback+0x4ac>
			{
				Set_Error(WARN_UNDERCURR_U6I1);
 8007f7a:	20d0      	movs	r0, #208	; 0xd0
 8007f7c:	f000 fc6e 	bl	800885c <Set_Error>
			}
			if (U7I1_real>warn_overcurrent_U7I1)
 8007f80:	4b35      	ldr	r3, [pc, #212]	; (8008058 <HAL_ADC_ConvCpltCallback+0x584>)
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	4b2f      	ldr	r3, [pc, #188]	; (8008044 <HAL_ADC_ConvCpltCallback+0x570>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d202      	bcs.n	8007f94 <HAL_ADC_ConvCpltCallback+0x4c0>
			{
				Set_Error(WARN_OVERCURR_U7I1);
 8007f8e:	20da      	movs	r0, #218	; 0xda
 8007f90:	f000 fc64 	bl	800885c <Set_Error>
			}
			if (U7I1_real<warn_undercurrent_U7I1)
 8007f94:	4b31      	ldr	r3, [pc, #196]	; (800805c <HAL_ADC_ConvCpltCallback+0x588>)
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4b2a      	ldr	r3, [pc, #168]	; (8008044 <HAL_ADC_ConvCpltCallback+0x570>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	f240 81da 	bls.w	8008358 <HAL_ADC_ConvCpltCallback+0x884>
			{
				Set_Error(WARN_UNDERCURR_U7I1);
 8007fa4:	20d9      	movs	r0, #217	; 0xd9
 8007fa6:	f000 fc59 	bl	800885c <Set_Error>
			}
			//TODO: test all these limits when I have power supply and power trimmer

			break;
 8007faa:	e1d5      	b.n	8008358 <HAL_ADC_ConvCpltCallback+0x884>
		case 2:
			U5T[T_rolling_average_position]=convertedValue[0];
 8007fac:	4b2c      	ldr	r3, [pc, #176]	; (8008060 <HAL_ADC_ConvCpltCallback+0x58c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6a3a      	ldr	r2, [r7, #32]
 8007fb2:	492c      	ldr	r1, [pc, #176]	; (8008064 <HAL_ADC_ConvCpltCallback+0x590>)
 8007fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U6T[T_rolling_average_position]=convertedValue[1];
 8007fb8:	4b29      	ldr	r3, [pc, #164]	; (8008060 <HAL_ADC_ConvCpltCallback+0x58c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fbe:	492a      	ldr	r1, [pc, #168]	; (8008068 <HAL_ADC_ConvCpltCallback+0x594>)
 8007fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U7T[T_rolling_average_position]=convertedValue[2];
 8007fc4:	4b26      	ldr	r3, [pc, #152]	; (8008060 <HAL_ADC_ConvCpltCallback+0x58c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fca:	4928      	ldr	r1, [pc, #160]	; (800806c <HAL_ADC_ConvCpltCallback+0x598>)
 8007fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (T_rolling_average_position == T_ROLLING_AVERAGE-1)
 8007fd0:	4b23      	ldr	r3, [pc, #140]	; (8008060 <HAL_ADC_ConvCpltCallback+0x58c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b0f      	cmp	r3, #15
 8007fd6:	d103      	bne.n	8007fe0 <HAL_ADC_ConvCpltCallback+0x50c>
			{
				T_rolling_average_position=0;
 8007fd8:	4b21      	ldr	r3, [pc, #132]	; (8008060 <HAL_ADC_ConvCpltCallback+0x58c>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	e004      	b.n	8007fea <HAL_ADC_ConvCpltCallback+0x516>
			}
			else
			{
				T_rolling_average_position++;
 8007fe0:	4b1f      	ldr	r3, [pc, #124]	; (8008060 <HAL_ADC_ConvCpltCallback+0x58c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	4a1e      	ldr	r2, [pc, #120]	; (8008060 <HAL_ADC_ConvCpltCallback+0x58c>)
 8007fe8:	6013      	str	r3, [r2, #0]
			}

			uint32_t U5T_raw=0; uint32_t U6T_raw=1; uint32_t U7T_raw=0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fee:	2301      	movs	r3, #1
 8007ff0:	657b      	str	r3, [r7, #84]	; 0x54
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	653b      	str	r3, [r7, #80]	; 0x50
			for(uint32_t i=0; i<T_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ffa:	e051      	b.n	80080a0 <HAL_ADC_ConvCpltCallback+0x5cc>
 8007ffc:	2000092c 	.word	0x2000092c
 8008000:	200007d0 	.word	0x200007d0
 8008004:	20000564 	.word	0x20000564
 8008008:	20000560 	.word	0x20000560
 800800c:	200006e8 	.word	0x200006e8
 8008010:	20000344 	.word	0x20000344
 8008014:	200005a4 	.word	0x200005a4
 8008018:	200001ec 	.word	0x200001ec
 800801c:	20000210 	.word	0x20000210
 8008020:	20000a34 	.word	0x20000a34
 8008024:	20000616 	.word	0x20000616
 8008028:	20000870 	.word	0x20000870
 800802c:	20000684 	.word	0x20000684
 8008030:	200006a0 	.word	0x200006a0
 8008034:	20000810 	.word	0x20000810
 8008038:	20000348 	.word	0x20000348
 800803c:	20000618 	.word	0x20000618
 8008040:	20000a38 	.word	0x20000a38
 8008044:	20000548 	.word	0x20000548
 8008048:	200009b0 	.word	0x200009b0
 800804c:	200008be 	.word	0x200008be
 8008050:	200007b8 	.word	0x200007b8
 8008054:	20000850 	.word	0x20000850
 8008058:	20000474 	.word	0x20000474
 800805c:	200000e2 	.word	0x200000e2
 8008060:	20000098 	.word	0x20000098
 8008064:	20000a44 	.word	0x20000a44
 8008068:	2000009c 	.word	0x2000009c
 800806c:	20000280 	.word	0x20000280
			{
				U5T_raw+=U5T[i];
 8008070:	4a59      	ldr	r2, [pc, #356]	; (80081d8 <HAL_ADC_ConvCpltCallback+0x704>)
 8008072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008078:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800807a:	4413      	add	r3, r2
 800807c:	65bb      	str	r3, [r7, #88]	; 0x58
				U6T_raw+=U6T[i];
 800807e:	4a57      	ldr	r2, [pc, #348]	; (80081dc <HAL_ADC_ConvCpltCallback+0x708>)
 8008080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008086:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008088:	4413      	add	r3, r2
 800808a:	657b      	str	r3, [r7, #84]	; 0x54
				U7T_raw+=U7T[i];
 800808c:	4a54      	ldr	r2, [pc, #336]	; (80081e0 <HAL_ADC_ConvCpltCallback+0x70c>)
 800808e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008094:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008096:	4413      	add	r3, r2
 8008098:	653b      	str	r3, [r7, #80]	; 0x50
			for(uint32_t i=0; i<T_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 800809a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800809c:	3301      	adds	r3, #1
 800809e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a2:	2b0f      	cmp	r3, #15
 80080a4:	d9e4      	bls.n	8008070 <HAL_ADC_ConvCpltCallback+0x59c>
			}
			U5T_raw/=T_ROLLING_AVERAGE; U6T_raw/=T_ROLLING_AVERAGE; U7T_raw/=T_ROLLING_AVERAGE; //TODO: calculated U5I0_calculated from U5I0_raw
 80080a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080a8:	091b      	lsrs	r3, r3, #4
 80080aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80080ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ae:	091b      	lsrs	r3, r3, #4
 80080b0:	657b      	str	r3, [r7, #84]	; 0x54
 80080b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080b4:	091b      	lsrs	r3, r3, #4
 80080b6:	653b      	str	r3, [r7, #80]	; 0x50
			U5T_real=Parse_Temperature(U5T_raw); U6T_real=Parse_Temperature(U6T_raw); U7T_real=Parse_Temperature(U7T_raw); //TODO: warnings on over/undercurrent, overcurrent shutoff
 80080b8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80080ba:	f001 fd61 	bl	8009b80 <Parse_Temperature>
 80080be:	4602      	mov	r2, r0
 80080c0:	4b48      	ldr	r3, [pc, #288]	; (80081e4 <HAL_ADC_ConvCpltCallback+0x710>)
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80080c6:	f001 fd5b 	bl	8009b80 <Parse_Temperature>
 80080ca:	4602      	mov	r2, r0
 80080cc:	4b46      	ldr	r3, [pc, #280]	; (80081e8 <HAL_ADC_ConvCpltCallback+0x714>)
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80080d2:	f001 fd55 	bl	8009b80 <Parse_Temperature>
 80080d6:	4602      	mov	r2, r0
 80080d8:	4b44      	ldr	r3, [pc, #272]	; (80081ec <HAL_ADC_ConvCpltCallback+0x718>)
 80080da:	601a      	str	r2, [r3, #0]

			//TODO: probably move this to main because it isn't so important
			if (U5T_real>warn_overtemperature_U5)
 80080dc:	4b44      	ldr	r3, [pc, #272]	; (80081f0 <HAL_ADC_ConvCpltCallback+0x71c>)
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	461a      	mov	r2, r3
 80080e2:	4b40      	ldr	r3, [pc, #256]	; (80081e4 <HAL_ADC_ConvCpltCallback+0x710>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d202      	bcs.n	80080f0 <HAL_ADC_ConvCpltCallback+0x61c>
			{
				Set_Error(WARN_OVERTEMP_U5);
 80080ea:	20c4      	movs	r0, #196	; 0xc4
 80080ec:	f000 fbb6 	bl	800885c <Set_Error>
			}
			if (U5T_real<warn_undertemperature_U5)
 80080f0:	4b40      	ldr	r3, [pc, #256]	; (80081f4 <HAL_ADC_ConvCpltCallback+0x720>)
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	461a      	mov	r2, r3
 80080f6:	4b3b      	ldr	r3, [pc, #236]	; (80081e4 <HAL_ADC_ConvCpltCallback+0x710>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d902      	bls.n	8008104 <HAL_ADC_ConvCpltCallback+0x630>
			{
				Set_Error(WARN_UNDERTEMP_U5);
 80080fe:	20c3      	movs	r0, #195	; 0xc3
 8008100:	f000 fbac 	bl	800885c <Set_Error>
			}
			if (U6T_real>warn_overtemperature_U6)
 8008104:	4b3c      	ldr	r3, [pc, #240]	; (80081f8 <HAL_ADC_ConvCpltCallback+0x724>)
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	4b37      	ldr	r3, [pc, #220]	; (80081e8 <HAL_ADC_ConvCpltCallback+0x714>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d202      	bcs.n	8008118 <HAL_ADC_ConvCpltCallback+0x644>
			{
				Set_Error(WARN_OVERTEMP_U6);
 8008112:	20cd      	movs	r0, #205	; 0xcd
 8008114:	f000 fba2 	bl	800885c <Set_Error>
			}
			if (U6T_real<warn_undertemperature_U6)
 8008118:	4b38      	ldr	r3, [pc, #224]	; (80081fc <HAL_ADC_ConvCpltCallback+0x728>)
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	461a      	mov	r2, r3
 800811e:	4b32      	ldr	r3, [pc, #200]	; (80081e8 <HAL_ADC_ConvCpltCallback+0x714>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	429a      	cmp	r2, r3
 8008124:	d902      	bls.n	800812c <HAL_ADC_ConvCpltCallback+0x658>
			{
				Set_Error(WARN_UNDERTEMP_U6);
 8008126:	20cc      	movs	r0, #204	; 0xcc
 8008128:	f000 fb98 	bl	800885c <Set_Error>
			}
			if (U7T_real>warn_overtemperature_U7)
 800812c:	4b34      	ldr	r3, [pc, #208]	; (8008200 <HAL_ADC_ConvCpltCallback+0x72c>)
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	4b2e      	ldr	r3, [pc, #184]	; (80081ec <HAL_ADC_ConvCpltCallback+0x718>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	429a      	cmp	r2, r3
 8008138:	d202      	bcs.n	8008140 <HAL_ADC_ConvCpltCallback+0x66c>
			{
				Set_Error(WARN_OVERTEMP_U7);
 800813a:	20d6      	movs	r0, #214	; 0xd6
 800813c:	f000 fb8e 	bl	800885c <Set_Error>
			}
			if (U7T_real<warn_undertemperature_U7)
 8008140:	4b30      	ldr	r3, [pc, #192]	; (8008204 <HAL_ADC_ConvCpltCallback+0x730>)
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	461a      	mov	r2, r3
 8008146:	4b29      	ldr	r3, [pc, #164]	; (80081ec <HAL_ADC_ConvCpltCallback+0x718>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	429a      	cmp	r2, r3
 800814c:	f240 8106 	bls.w	800835c <HAL_ADC_ConvCpltCallback+0x888>
			{
				Set_Error(WARN_UNDERTEMP_U7);
 8008150:	20d5      	movs	r0, #213	; 0xd5
 8008152:	f000 fb83 	bl	800885c <Set_Error>
			}
			//TODO: test all these limits when I have power supply and power trimmer

			break;
 8008156:	e101      	b.n	800835c <HAL_ADC_ConvCpltCallback+0x888>
		case 3:
			U5V[V_rolling_average_position]=convertedValue[0]; U5GNDV[V_rolling_average_position]=slaveConvertedValue[0];
 8008158:	4b2b      	ldr	r3, [pc, #172]	; (8008208 <HAL_ADC_ConvCpltCallback+0x734>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6a3a      	ldr	r2, [r7, #32]
 800815e:	492b      	ldr	r1, [pc, #172]	; (800820c <HAL_ADC_ConvCpltCallback+0x738>)
 8008160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008164:	4b28      	ldr	r3, [pc, #160]	; (8008208 <HAL_ADC_ConvCpltCallback+0x734>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	4929      	ldr	r1, [pc, #164]	; (8008210 <HAL_ADC_ConvCpltCallback+0x73c>)
 800816c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U6V[V_rolling_average_position]=convertedValue[1]; U6GNDV[V_rolling_average_position]=slaveConvertedValue[1];
 8008170:	4b25      	ldr	r3, [pc, #148]	; (8008208 <HAL_ADC_ConvCpltCallback+0x734>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008176:	4927      	ldr	r1, [pc, #156]	; (8008214 <HAL_ADC_ConvCpltCallback+0x740>)
 8008178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800817c:	4b22      	ldr	r3, [pc, #136]	; (8008208 <HAL_ADC_ConvCpltCallback+0x734>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4925      	ldr	r1, [pc, #148]	; (8008218 <HAL_ADC_ConvCpltCallback+0x744>)
 8008184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U7V[V_rolling_average_position]=convertedValue[2]; U7GNDV[V_rolling_average_position]=slaveConvertedValue[2];
 8008188:	4b1f      	ldr	r3, [pc, #124]	; (8008208 <HAL_ADC_ConvCpltCallback+0x734>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800818e:	4923      	ldr	r1, [pc, #140]	; (800821c <HAL_ADC_ConvCpltCallback+0x748>)
 8008190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008194:	4b1c      	ldr	r3, [pc, #112]	; (8008208 <HAL_ADC_ConvCpltCallback+0x734>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	4921      	ldr	r1, [pc, #132]	; (8008220 <HAL_ADC_ConvCpltCallback+0x74c>)
 800819c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (V_rolling_average_position == V_ROLLING_AVERAGE-1)
 80081a0:	4b19      	ldr	r3, [pc, #100]	; (8008208 <HAL_ADC_ConvCpltCallback+0x734>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b0f      	cmp	r3, #15
 80081a6:	d103      	bne.n	80081b0 <HAL_ADC_ConvCpltCallback+0x6dc>
			{
				V_rolling_average_position=0;
 80081a8:	4b17      	ldr	r3, [pc, #92]	; (8008208 <HAL_ADC_ConvCpltCallback+0x734>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	e004      	b.n	80081ba <HAL_ADC_ConvCpltCallback+0x6e6>
			}
			else
			{
				V_rolling_average_position++;
 80081b0:	4b15      	ldr	r3, [pc, #84]	; (8008208 <HAL_ADC_ConvCpltCallback+0x734>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3301      	adds	r3, #1
 80081b6:	4a14      	ldr	r2, [pc, #80]	; (8008208 <HAL_ADC_ConvCpltCallback+0x734>)
 80081b8:	6013      	str	r3, [r2, #0]
			}

			uint32_t U5V_raw=0; uint32_t U6V_raw=0; uint32_t U7V_raw=0; uint32_t U5GNDV_raw=0; uint32_t U6GNDV_raw=0; uint32_t U7GNDV_raw=0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80081be:	2300      	movs	r3, #0
 80081c0:	647b      	str	r3, [r7, #68]	; 0x44
 80081c2:	2300      	movs	r3, #0
 80081c4:	643b      	str	r3, [r7, #64]	; 0x40
 80081c6:	2300      	movs	r3, #0
 80081c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081ca:	2300      	movs	r3, #0
 80081cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80081ce:	2300      	movs	r3, #0
 80081d0:	637b      	str	r3, [r7, #52]	; 0x34
			for(uint32_t i=0; i<V_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 80081d2:	2300      	movs	r3, #0
 80081d4:	633b      	str	r3, [r7, #48]	; 0x30
 80081d6:	e052      	b.n	800827e <HAL_ADC_ConvCpltCallback+0x7aa>
 80081d8:	20000a44 	.word	0x20000a44
 80081dc:	2000009c 	.word	0x2000009c
 80081e0:	20000280 	.word	0x20000280
 80081e4:	20000620 	.word	0x20000620
 80081e8:	20000874 	.word	0x20000874
 80081ec:	200006e4 	.word	0x200006e4
 80081f0:	20000690 	.word	0x20000690
 80081f4:	20000878 	.word	0x20000878
 80081f8:	20000544 	.word	0x20000544
 80081fc:	200008c2 	.word	0x200008c2
 8008200:	20000212 	.word	0x20000212
 8008204:	20000614 	.word	0x20000614
 8008208:	2000096c 	.word	0x2000096c
 800820c:	200004c4 	.word	0x200004c4
 8008210:	200000e8 	.word	0x200000e8
 8008214:	20000480 	.word	0x20000480
 8008218:	200006ec 	.word	0x200006ec
 800821c:	20000970 	.word	0x20000970
 8008220:	2000038c 	.word	0x2000038c
			{
				U5V_raw+=U5V[i]; U5GNDV_raw+=U5GNDV[i];
 8008224:	4a51      	ldr	r2, [pc, #324]	; (800836c <HAL_ADC_ConvCpltCallback+0x898>)
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800822c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800822e:	4413      	add	r3, r2
 8008230:	64bb      	str	r3, [r7, #72]	; 0x48
 8008232:	4a4f      	ldr	r2, [pc, #316]	; (8008370 <HAL_ADC_ConvCpltCallback+0x89c>)
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800823a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800823c:	4413      	add	r3, r2
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
				U6V_raw+=U6V[i]; U6GNDV_raw+=U6GNDV[i];
 8008240:	4a4c      	ldr	r2, [pc, #304]	; (8008374 <HAL_ADC_ConvCpltCallback+0x8a0>)
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800824a:	4413      	add	r3, r2
 800824c:	647b      	str	r3, [r7, #68]	; 0x44
 800824e:	4a4a      	ldr	r2, [pc, #296]	; (8008378 <HAL_ADC_ConvCpltCallback+0x8a4>)
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008256:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008258:	4413      	add	r3, r2
 800825a:	63bb      	str	r3, [r7, #56]	; 0x38
				U7V_raw+=U7V[i]; U7GNDV_raw+=U7GNDV[i];
 800825c:	4a47      	ldr	r2, [pc, #284]	; (800837c <HAL_ADC_ConvCpltCallback+0x8a8>)
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008264:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008266:	4413      	add	r3, r2
 8008268:	643b      	str	r3, [r7, #64]	; 0x40
 800826a:	4a45      	ldr	r2, [pc, #276]	; (8008380 <HAL_ADC_ConvCpltCallback+0x8ac>)
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008274:	4413      	add	r3, r2
 8008276:	637b      	str	r3, [r7, #52]	; 0x34
			for(uint32_t i=0; i<V_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	3301      	adds	r3, #1
 800827c:	633b      	str	r3, [r7, #48]	; 0x30
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	2b0f      	cmp	r3, #15
 8008282:	d9cf      	bls.n	8008224 <HAL_ADC_ConvCpltCallback+0x750>
			}
			U5V_raw/=V_ROLLING_AVERAGE; U6V_raw/=V_ROLLING_AVERAGE; U7V_raw/=V_ROLLING_AVERAGE; U5GNDV_raw/=V_ROLLING_AVERAGE; U6GNDV_raw/=V_ROLLING_AVERAGE; U7GNDV_raw/=V_ROLLING_AVERAGE;
 8008284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008286:	091b      	lsrs	r3, r3, #4
 8008288:	64bb      	str	r3, [r7, #72]	; 0x48
 800828a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800828c:	091b      	lsrs	r3, r3, #4
 800828e:	647b      	str	r3, [r7, #68]	; 0x44
 8008290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008292:	091b      	lsrs	r3, r3, #4
 8008294:	643b      	str	r3, [r7, #64]	; 0x40
 8008296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008298:	091b      	lsrs	r3, r3, #4
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800829c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829e:	091b      	lsrs	r3, r3, #4
 80082a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80082a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a4:	091b      	lsrs	r3, r3, #4
 80082a6:	637b      	str	r3, [r7, #52]	; 0x34
			U5V_real=Parse_Voltage(U5V_raw, U5GNDV_raw); U6V_real=Parse_Voltage(U6V_raw, U6GNDV_raw); U7V_real=Parse_Voltage(U7V_raw, U7GNDV_raw);
 80082a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80082ac:	f001 fc4a 	bl	8009b44 <Parse_Voltage>
 80082b0:	4602      	mov	r2, r0
 80082b2:	4b34      	ldr	r3, [pc, #208]	; (8008384 <HAL_ADC_ConvCpltCallback+0x8b0>)
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80082ba:	f001 fc43 	bl	8009b44 <Parse_Voltage>
 80082be:	4602      	mov	r2, r0
 80082c0:	4b31      	ldr	r3, [pc, #196]	; (8008388 <HAL_ADC_ConvCpltCallback+0x8b4>)
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80082c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80082c8:	f001 fc3c 	bl	8009b44 <Parse_Voltage>
 80082cc:	4602      	mov	r2, r0
 80082ce:	4b2f      	ldr	r3, [pc, #188]	; (800838c <HAL_ADC_ConvCpltCallback+0x8b8>)
 80082d0:	601a      	str	r2, [r3, #0]

			//TODO: probably move this to main because it isn't so important
			if (U5V_real>warn_overvoltage_U5)
 80082d2:	4b2f      	ldr	r3, [pc, #188]	; (8008390 <HAL_ADC_ConvCpltCallback+0x8bc>)
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	461a      	mov	r2, r3
 80082d8:	4b2a      	ldr	r3, [pc, #168]	; (8008384 <HAL_ADC_ConvCpltCallback+0x8b0>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d202      	bcs.n	80082e6 <HAL_ADC_ConvCpltCallback+0x812>
			{
				Set_Error(WARN_OVERVOLT_U5);
 80082e0:	20c2      	movs	r0, #194	; 0xc2
 80082e2:	f000 fabb 	bl	800885c <Set_Error>
			}
			if (U5V_real<warn_undervoltage_U5)
 80082e6:	4b2b      	ldr	r3, [pc, #172]	; (8008394 <HAL_ADC_ConvCpltCallback+0x8c0>)
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	4b25      	ldr	r3, [pc, #148]	; (8008384 <HAL_ADC_ConvCpltCallback+0x8b0>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d902      	bls.n	80082fa <HAL_ADC_ConvCpltCallback+0x826>
			{
				Set_Error(WARN_UNDERVOLT_U5);
 80082f4:	20c1      	movs	r0, #193	; 0xc1
 80082f6:	f000 fab1 	bl	800885c <Set_Error>
			}
			if (U6V_real>warn_overvoltage_U6)
 80082fa:	4b27      	ldr	r3, [pc, #156]	; (8008398 <HAL_ADC_ConvCpltCallback+0x8c4>)
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	4b21      	ldr	r3, [pc, #132]	; (8008388 <HAL_ADC_ConvCpltCallback+0x8b4>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	429a      	cmp	r2, r3
 8008306:	d202      	bcs.n	800830e <HAL_ADC_ConvCpltCallback+0x83a>
			{
				Set_Error(WARN_OVERVOLT_U6);
 8008308:	20cb      	movs	r0, #203	; 0xcb
 800830a:	f000 faa7 	bl	800885c <Set_Error>
			}
			if (U6V_real<warn_undervoltage_U6)
 800830e:	4b23      	ldr	r3, [pc, #140]	; (800839c <HAL_ADC_ConvCpltCallback+0x8c8>)
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	4b1c      	ldr	r3, [pc, #112]	; (8008388 <HAL_ADC_ConvCpltCallback+0x8b4>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	429a      	cmp	r2, r3
 800831a:	d902      	bls.n	8008322 <HAL_ADC_ConvCpltCallback+0x84e>
			{
				Set_Error(WARN_UNDERVOLT_U6);
 800831c:	20ca      	movs	r0, #202	; 0xca
 800831e:	f000 fa9d 	bl	800885c <Set_Error>
			}
			if (U7V_real>warn_overvoltage_U7)
 8008322:	4b1f      	ldr	r3, [pc, #124]	; (80083a0 <HAL_ADC_ConvCpltCallback+0x8cc>)
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	4b18      	ldr	r3, [pc, #96]	; (800838c <HAL_ADC_ConvCpltCallback+0x8b8>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	429a      	cmp	r2, r3
 800832e:	d202      	bcs.n	8008336 <HAL_ADC_ConvCpltCallback+0x862>
			{
				Set_Error(WARN_OVERVOLT_U7);
 8008330:	20d4      	movs	r0, #212	; 0xd4
 8008332:	f000 fa93 	bl	800885c <Set_Error>
			}
			if (U7V_real<warn_undervoltage_U7)
 8008336:	4b1b      	ldr	r3, [pc, #108]	; (80083a4 <HAL_ADC_ConvCpltCallback+0x8d0>)
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	4b13      	ldr	r3, [pc, #76]	; (800838c <HAL_ADC_ConvCpltCallback+0x8b8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	429a      	cmp	r2, r3
 8008342:	d90d      	bls.n	8008360 <HAL_ADC_ConvCpltCallback+0x88c>
			{
				Set_Error(WARN_UNDERVOLT_U7);
 8008344:	20d3      	movs	r0, #211	; 0xd3
 8008346:	f000 fa89 	bl	800885c <Set_Error>
			}
			//TODO: test all these limits when I have power supply and power trimmer
			break;
 800834a:	e009      	b.n	8008360 <HAL_ADC_ConvCpltCallback+0x88c>
		default:
			Error_Handler();
 800834c:	f001 fbec 	bl	8009b28 <Error_Handler>
			break;
 8008350:	bf00      	nop
 8008352:	e006      	b.n	8008362 <HAL_ADC_ConvCpltCallback+0x88e>
			break;
 8008354:	bf00      	nop
 8008356:	e004      	b.n	8008362 <HAL_ADC_ConvCpltCallback+0x88e>
			break;
 8008358:	bf00      	nop
 800835a:	e002      	b.n	8008362 <HAL_ADC_ConvCpltCallback+0x88e>
			break;
 800835c:	bf00      	nop
 800835e:	e000      	b.n	8008362 <HAL_ADC_ConvCpltCallback+0x88e>
			break;
 8008360:	bf00      	nop
		}
	}
}
 8008362:	bf00      	nop
 8008364:	3780      	adds	r7, #128	; 0x80
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	200004c4 	.word	0x200004c4
 8008370:	200000e8 	.word	0x200000e8
 8008374:	20000480 	.word	0x20000480
 8008378:	200006ec 	.word	0x200006ec
 800837c:	20000970 	.word	0x20000970
 8008380:	2000038c 	.word	0x2000038c
 8008384:	20000a40 	.word	0x20000a40
 8008388:	2000086c 	.word	0x2000086c
 800838c:	2000068c 	.word	0x2000068c
 8008390:	200008c0 	.word	0x200008c0
 8008394:	2000085c 	.word	0x2000085c
 8008398:	20000926 	.word	0x20000926
 800839c:	2000054e 	.word	0x2000054e
 80083a0:	2000054c 	.word	0x2000054c
 80083a4:	200000de 	.word	0x200000de

080083a8 <Can_Send>:


void Can_Send(uint8_t message)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08e      	sub	sp, #56	; 0x38
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	71fb      	strb	r3, [r7, #7]
	if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) < 1)
 80083b2:	483e      	ldr	r0, [pc, #248]	; (80084ac <Can_Send+0x104>)
 80083b4:	f7fa faf2 	bl	800299c <HAL_FDCAN_GetTxFifoFreeLevel>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d103      	bne.n	80083c6 <Can_Send+0x1e>
	{
		Set_Error(ERR_CAN_FIFO_FULL);
 80083be:	2002      	movs	r0, #2
 80083c0:	f000 fa4c 	bl	800885c <Set_Error>
		return;
 80083c4:	e06f      	b.n	80084a6 <Can_Send+0xfe>
	}

	if(Can_IDs[message]>2047)
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	4a39      	ldr	r2, [pc, #228]	; (80084b0 <Can_Send+0x108>)
 80083ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083d2:	d303      	bcc.n	80083dc <Can_Send+0x34>
	{
		Set_Error(ERR_MESSAGE_DISABLED);
 80083d4:	2003      	movs	r0, #3
 80083d6:	f000 fa41 	bl	800885c <Set_Error>
		return;
 80083da:	e064      	b.n	80084a6 <Can_Send+0xfe>
	}
	else if(Can_DLCs[message]==0)
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	4a35      	ldr	r2, [pc, #212]	; (80084b4 <Can_Send+0x10c>)
 80083e0:	5cd3      	ldrb	r3, [r2, r3]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d103      	bne.n	80083ee <Can_Send+0x46>
	{
		Set_Error(ERR_DLC_0);
 80083e6:	2004      	movs	r0, #4
 80083e8:	f000 fa38 	bl	800885c <Set_Error>
		return;
 80083ec:	e05b      	b.n	80084a6 <Can_Send+0xfe>
	}
	else if(Can_DLCs[message]>8)
 80083ee:	79fb      	ldrb	r3, [r7, #7]
 80083f0:	4a30      	ldr	r2, [pc, #192]	; (80084b4 <Can_Send+0x10c>)
 80083f2:	5cd3      	ldrb	r3, [r2, r3]
 80083f4:	2b08      	cmp	r3, #8
 80083f6:	d903      	bls.n	8008400 <Can_Send+0x58>
	{
		Set_Error(ERR_DLC_LONG);
 80083f8:	2005      	movs	r0, #5
 80083fa:	f000 fa2f 	bl	800885c <Set_Error>
		return;
 80083fe:	e052      	b.n	80084a6 <Can_Send+0xfe>
	}

	FDCAN_TxHeaderTypeDef TxHeader;

	TxHeader.Identifier = Can_IDs[message];
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	4a2b      	ldr	r2, [pc, #172]	; (80084b0 <Can_Send+0x108>)
 8008404:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008408:	60fb      	str	r3, [r7, #12]
	TxHeader.DataLength = (Can_DLCs[message]<<16); //<<16 makes storing the number of bytes not require a switch statement for classic can
 800840a:	79fb      	ldrb	r3, [r7, #7]
 800840c:	4a29      	ldr	r2, [pc, #164]	; (80084b4 <Can_Send+0x10c>)
 800840e:	5cd3      	ldrb	r3, [r2, r3]
 8008410:	041b      	lsls	r3, r3, #16
 8008412:	61bb      	str	r3, [r7, #24]

	//clear can tx data so that data from incorrectly configured message is 0
	for(uint32_t i=0; i<8; i++)
 8008414:	2300      	movs	r3, #0
 8008416:	637b      	str	r3, [r7, #52]	; 0x34
 8008418:	e007      	b.n	800842a <Can_Send+0x82>
	{
		CANTxData[i]=0;
 800841a:	4a27      	ldr	r2, [pc, #156]	; (80084b8 <Can_Send+0x110>)
 800841c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841e:	4413      	add	r3, r2
 8008420:	2200      	movs	r2, #0
 8008422:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 8008424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008426:	3301      	adds	r3, #1
 8008428:	637b      	str	r3, [r7, #52]	; 0x34
 800842a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842c:	2b07      	cmp	r3, #7
 800842e:	d9f4      	bls.n	800841a <Can_Send+0x72>
	}

	uint32_t pos=0;
 8008430:	2300      	movs	r3, #0
 8008432:	60bb      	str	r3, [r7, #8]
	for(uint32_t i=0; i<Can_DLCs[message]; i++) //max number of function calls is same as number of bytes
 8008434:	2300      	movs	r3, #0
 8008436:	633b      	str	r3, [r7, #48]	; 0x30
 8008438:	e010      	b.n	800845c <Can_Send+0xb4>
	{
		Set_Can_Bytes(&pos, message);
 800843a:	79fa      	ldrb	r2, [r7, #7]
 800843c:	f107 0308 	add.w	r3, r7, #8
 8008440:	4611      	mov	r1, r2
 8008442:	4618      	mov	r0, r3
 8008444:	f7fd fe96 	bl	8006174 <Set_Can_Bytes>
		if(pos>=Can_DLCs[message])
 8008448:	79fb      	ldrb	r3, [r7, #7]
 800844a:	4a1a      	ldr	r2, [pc, #104]	; (80084b4 <Can_Send+0x10c>)
 800844c:	5cd3      	ldrb	r3, [r2, r3]
 800844e:	461a      	mov	r2, r3
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	429a      	cmp	r2, r3
 8008454:	d90a      	bls.n	800846c <Can_Send+0xc4>
	for(uint32_t i=0; i<Can_DLCs[message]; i++) //max number of function calls is same as number of bytes
 8008456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008458:	3301      	adds	r3, #1
 800845a:	633b      	str	r3, [r7, #48]	; 0x30
 800845c:	79fb      	ldrb	r3, [r7, #7]
 800845e:	4a15      	ldr	r2, [pc, #84]	; (80084b4 <Can_Send+0x10c>)
 8008460:	5cd3      	ldrb	r3, [r2, r3]
 8008462:	461a      	mov	r2, r3
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	4293      	cmp	r3, r2
 8008468:	d3e7      	bcc.n	800843a <Can_Send+0x92>
 800846a:	e000      	b.n	800846e <Can_Send+0xc6>
		{
			break;
 800846c:	bf00      	nop
		}
	}

	TxHeader.IdType = FDCAN_STANDARD_ID;
 800846e:	2300      	movs	r3, #0
 8008470:	613b      	str	r3, [r7, #16]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8008472:	2300      	movs	r3, #0
 8008474:	617b      	str	r3, [r7, #20]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8008476:	2300      	movs	r3, #0
 8008478:	61fb      	str	r3, [r7, #28]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800847a:	2300      	movs	r3, #0
 800847c:	623b      	str	r3, [r7, #32]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800847e:	2300      	movs	r3, #0
 8008480:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8008482:	2300      	movs	r3, #0
 8008484:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.MessageMarker = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 800848a:	f107 030c 	add.w	r3, r7, #12
 800848e:	4a0a      	ldr	r2, [pc, #40]	; (80084b8 <Can_Send+0x110>)
 8008490:	4619      	mov	r1, r3
 8008492:	4806      	ldr	r0, [pc, #24]	; (80084ac <Can_Send+0x104>)
 8008494:	f7fa f964 	bl	8002760 <HAL_FDCAN_AddMessageToTxFifoQ>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <Can_Send+0xfe>
	{
		Set_Error(ERR_SEND_FAILED);
 800849e:	2006      	movs	r0, #6
 80084a0:	f000 f9dc 	bl	800885c <Set_Error>
		return;
 80084a4:	bf00      	nop
	}
}
 80084a6:	3738      	adds	r7, #56	; 0x38
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	20000410 	.word	0x20000410
 80084b0:	200007c0 	.word	0x200007c0
 80084b4:	20000860 	.word	0x20000860
 80084b8:	20000854 	.word	0x20000854

080084bc <Can_Sync>:

//for can sync we must send from the interrupt to ensure that we send the message quickly, but this means only 2 (or sometimes 3) messages may be sent without discarding messages
void Can_Sync(void)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<8; i++)
 80084c2:	2300      	movs	r3, #0
 80084c4:	607b      	str	r3, [r7, #4]
 80084c6:	e017      	b.n	80084f8 <Can_Sync+0x3c>
	{
		if ((Can_Sync_Enable>>i)&0b1)
 80084c8:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <Can_Sync+0x4c>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	461a      	mov	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	fa42 f303 	asr.w	r3, r2, r3
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00a      	beq.n	80084f2 <Can_Sync+0x36>
		{
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) > 0)
 80084dc:	480b      	ldr	r0, [pc, #44]	; (800850c <Can_Sync+0x50>)
 80084de:	f7fa fa5d 	bl	800299c <HAL_FDCAN_GetTxFifoFreeLevel>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d004      	beq.n	80084f2 <Can_Sync+0x36>
			{
				Can_Send(i);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7ff ff5b 	bl	80083a8 <Can_Send>
	for(uint32_t i=0; i<8; i++)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3301      	adds	r3, #1
 80084f6:	607b      	str	r3, [r7, #4]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b07      	cmp	r3, #7
 80084fc:	d9e4      	bls.n	80084c8 <Can_Sync+0xc>
			}
		}
	}
}
 80084fe:	bf00      	nop
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	200004c0 	.word	0x200004c0
 800850c:	20000410 	.word	0x20000410

08008510 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b090      	sub	sp, #64	; 0x40
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t CANRxData[8];

	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 8192 	beq.w	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
	{
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, CANRxData) != HAL_OK)
 8008526:	f107 030c 	add.w	r3, r7, #12
 800852a:	f107 0214 	add.w	r2, r7, #20
 800852e:	2140      	movs	r1, #64	; 0x40
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7fa f959 	bl	80027e8 <HAL_FDCAN_GetRxMessage>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <HAL_FDCAN_RxFifo0Callback+0x32>
		{
			Set_Error(ERR_RECIEVE_FAILED);
 800853c:	2007      	movs	r0, #7
 800853e:	f000 f98d 	bl	800885c <Set_Error>
		}

		//set any bytes not actaully read to 0 to prevent unknown values being in them
		for(uint32_t i=(RxHeader.DataLength>>16); i<8; i++)
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	0c1b      	lsrs	r3, r3, #16
 8008546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008548:	e008      	b.n	800855c <HAL_FDCAN_RxFifo0Callback+0x4c>
		{
			CANRxData[i]=0;
 800854a:	f107 020c 	add.w	r2, r7, #12
 800854e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008550:	4413      	add	r3, r2
 8008552:	2200      	movs	r2, #0
 8008554:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=(RxHeader.DataLength>>16); i<8; i++)
 8008556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008558:	3301      	adds	r3, #1
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800855c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800855e:	2b07      	cmp	r3, #7
 8008560:	d9f3      	bls.n	800854a <HAL_FDCAN_RxFifo0Callback+0x3a>
		}

		if (RxHeader.Identifier == CANID_SYNC)
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2b80      	cmp	r3, #128	; 0x80
 8008566:	d10a      	bne.n	800857e <HAL_FDCAN_RxFifo0Callback+0x6e>
		{
			if(Can_Sync_Delay)
 8008568:	4bba      	ldr	r3, [pc, #744]	; (8008854 <HAL_FDCAN_RxFifo0Callback+0x344>)
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d003      	beq.n	8008578 <HAL_FDCAN_RxFifo0Callback+0x68>
			{
				HAL_TIM_Base_Start_IT(&htim16);
 8008570:	48b9      	ldr	r0, [pc, #740]	; (8008858 <HAL_FDCAN_RxFifo0Callback+0x348>)
 8008572:	f7fc f971 	bl	8004858 <HAL_TIM_Base_Start_IT>
		else
		{
			Set_Error(ERR_RECIEVED_INVALID_ID);
		}
	}
}
 8008576:	e168      	b.n	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
				Can_Sync();
 8008578:	f7ff ffa0 	bl	80084bc <Can_Sync>
}
 800857c:	e165      	b.n	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
		else if (RxHeader.Identifier == CANID_CONFIG)
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008584:	f040 8146 	bne.w	8008814 <HAL_FDCAN_RxFifo0Callback+0x304>
			if(CANRxData[0] == ID)
 8008588:	7b3b      	ldrb	r3, [r7, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	f040 8146 	bne.w	800881c <HAL_FDCAN_RxFifo0Callback+0x30c>
				switch(CANRxData[1])
 8008590:	7b7b      	ldrb	r3, [r7, #13]
 8008592:	2b83      	cmp	r3, #131	; 0x83
 8008594:	f000 8088 	beq.w	80086a8 <HAL_FDCAN_RxFifo0Callback+0x198>
 8008598:	2b83      	cmp	r3, #131	; 0x83
 800859a:	dc0d      	bgt.n	80085b8 <HAL_FDCAN_RxFifo0Callback+0xa8>
 800859c:	2b80      	cmp	r3, #128	; 0x80
 800859e:	d05b      	beq.n	8008658 <HAL_FDCAN_RxFifo0Callback+0x148>
 80085a0:	2b80      	cmp	r3, #128	; 0x80
 80085a2:	dc04      	bgt.n	80085ae <HAL_FDCAN_RxFifo0Callback+0x9e>
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d01c      	beq.n	80085e2 <HAL_FDCAN_RxFifo0Callback+0xd2>
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d029      	beq.n	8008600 <HAL_FDCAN_RxFifo0Callback+0xf0>
 80085ac:	e12d      	b.n	800880a <HAL_FDCAN_RxFifo0Callback+0x2fa>
 80085ae:	2b81      	cmp	r3, #129	; 0x81
 80085b0:	d055      	beq.n	800865e <HAL_FDCAN_RxFifo0Callback+0x14e>
 80085b2:	2b82      	cmp	r3, #130	; 0x82
 80085b4:	d069      	beq.n	800868a <HAL_FDCAN_RxFifo0Callback+0x17a>
 80085b6:	e128      	b.n	800880a <HAL_FDCAN_RxFifo0Callback+0x2fa>
 80085b8:	2b86      	cmp	r3, #134	; 0x86
 80085ba:	f000 80a7 	beq.w	800870c <HAL_FDCAN_RxFifo0Callback+0x1fc>
 80085be:	2b86      	cmp	r3, #134	; 0x86
 80085c0:	dc05      	bgt.n	80085ce <HAL_FDCAN_RxFifo0Callback+0xbe>
 80085c2:	2b84      	cmp	r3, #132	; 0x84
 80085c4:	d07f      	beq.n	80086c6 <HAL_FDCAN_RxFifo0Callback+0x1b6>
 80085c6:	2b85      	cmp	r3, #133	; 0x85
 80085c8:	f000 808c 	beq.w	80086e4 <HAL_FDCAN_RxFifo0Callback+0x1d4>
 80085cc:	e11d      	b.n	800880a <HAL_FDCAN_RxFifo0Callback+0x2fa>
 80085ce:	2b88      	cmp	r3, #136	; 0x88
 80085d0:	f000 80c5 	beq.w	800875e <HAL_FDCAN_RxFifo0Callback+0x24e>
 80085d4:	2b88      	cmp	r3, #136	; 0x88
 80085d6:	f2c0 80ad 	blt.w	8008734 <HAL_FDCAN_RxFifo0Callback+0x224>
 80085da:	2b89      	cmp	r3, #137	; 0x89
 80085dc:	f000 80ea 	beq.w	80087b4 <HAL_FDCAN_RxFifo0Callback+0x2a4>
 80085e0:	e113      	b.n	800880a <HAL_FDCAN_RxFifo0Callback+0x2fa>
					Switch_Power(CANRxData[2], CANRxData[3]);
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
 80085e4:	7bfa      	ldrb	r2, [r7, #15]
 80085e6:	4611      	mov	r1, r2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fd ff97 	bl	800651c <Switch_Power>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	0c1b      	lsrs	r3, r3, #16
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	f200 8114 	bhi.w	8008820 <HAL_FDCAN_RxFifo0Callback+0x310>
 80085f8:	2009      	movs	r0, #9
 80085fa:	f000 f92f 	bl	800885c <Set_Error>
					break;
 80085fe:	e10f      	b.n	8008820 <HAL_FDCAN_RxFifo0Callback+0x310>
					Switch_DC(CANRxData[2], CANRxData);
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	f107 020c 	add.w	r2, r7, #12
 8008606:	4611      	mov	r1, r2
 8008608:	4618      	mov	r0, r3
 800860a:	f7fd ffbf 	bl	800658c <Switch_DC>
					if ((RxHeader.DataLength>>16) < (3+((CANRxData[2]>>4)&1))+((CANRxData[2]>>3)&1)+((CANRxData[2]>>2)&1)+((CANRxData[2]>>1)&1)+((CANRxData[2]>>0)&1)) { Set_Error(ERR_COMMAND_SHORT); }
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	0c1b      	lsrs	r3, r3, #16
 8008612:	7bba      	ldrb	r2, [r7, #14]
 8008614:	0912      	lsrs	r2, r2, #4
 8008616:	b2d2      	uxtb	r2, r2
 8008618:	f002 0201 	and.w	r2, r2, #1
 800861c:	1cd1      	adds	r1, r2, #3
 800861e:	7bba      	ldrb	r2, [r7, #14]
 8008620:	08d2      	lsrs	r2, r2, #3
 8008622:	b2d2      	uxtb	r2, r2
 8008624:	f002 0201 	and.w	r2, r2, #1
 8008628:	4411      	add	r1, r2
 800862a:	7bba      	ldrb	r2, [r7, #14]
 800862c:	0892      	lsrs	r2, r2, #2
 800862e:	b2d2      	uxtb	r2, r2
 8008630:	f002 0201 	and.w	r2, r2, #1
 8008634:	4411      	add	r1, r2
 8008636:	7bba      	ldrb	r2, [r7, #14]
 8008638:	0852      	lsrs	r2, r2, #1
 800863a:	b2d2      	uxtb	r2, r2
 800863c:	f002 0201 	and.w	r2, r2, #1
 8008640:	4411      	add	r1, r2
 8008642:	7bba      	ldrb	r2, [r7, #14]
 8008644:	f002 0201 	and.w	r2, r2, #1
 8008648:	440a      	add	r2, r1
 800864a:	4293      	cmp	r3, r2
 800864c:	f080 80ea 	bcs.w	8008824 <HAL_FDCAN_RxFifo0Callback+0x314>
 8008650:	2009      	movs	r0, #9
 8008652:	f000 f903 	bl	800885c <Set_Error>
					break;
 8008656:	e0e5      	b.n	8008824 <HAL_FDCAN_RxFifo0Callback+0x314>
					Save_Config();
 8008658:	f7fd ff54 	bl	8006504 <Save_Config>
					break;
 800865c:	e0f5      	b.n	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
					Config_Message(CANRxData[2], CANRxData[3], (((uint16_t)CANRxData[4])<<8)+(((uint16_t)CANRxData[5])<<0));
 800865e:	7bb8      	ldrb	r0, [r7, #14]
 8008660:	7bf9      	ldrb	r1, [r7, #15]
 8008662:	7c3b      	ldrb	r3, [r7, #16]
 8008664:	b29b      	uxth	r3, r3
 8008666:	021b      	lsls	r3, r3, #8
 8008668:	b29a      	uxth	r2, r3
 800866a:	7c7b      	ldrb	r3, [r7, #17]
 800866c:	b29b      	uxth	r3, r3
 800866e:	4413      	add	r3, r2
 8008670:	b29b      	uxth	r3, r3
 8008672:	461a      	mov	r2, r3
 8008674:	f7fd ffb6 	bl	80065e4 <Config_Message>
					if ((RxHeader.DataLength>>16) < 6) { Set_Error(ERR_COMMAND_SHORT); }
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	0c1b      	lsrs	r3, r3, #16
 800867c:	2b05      	cmp	r3, #5
 800867e:	f200 80d3 	bhi.w	8008828 <HAL_FDCAN_RxFifo0Callback+0x318>
 8008682:	2009      	movs	r0, #9
 8008684:	f000 f8ea 	bl	800885c <Set_Error>
					break;
 8008688:	e0ce      	b.n	8008828 <HAL_FDCAN_RxFifo0Callback+0x318>
					Config_Switch_Defaults(CANRxData[2], CANRxData[3]);
 800868a:	7bbb      	ldrb	r3, [r7, #14]
 800868c:	7bfa      	ldrb	r2, [r7, #15]
 800868e:	4611      	mov	r1, r2
 8008690:	4618      	mov	r0, r3
 8008692:	f7fd fff9 	bl	8006688 <Config_Switch_Defaults>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	0c1b      	lsrs	r3, r3, #16
 800869a:	2b03      	cmp	r3, #3
 800869c:	f200 80c6 	bhi.w	800882c <HAL_FDCAN_RxFifo0Callback+0x31c>
 80086a0:	2009      	movs	r0, #9
 80086a2:	f000 f8db 	bl	800885c <Set_Error>
					break;
 80086a6:	e0c1      	b.n	800882c <HAL_FDCAN_RxFifo0Callback+0x31c>
					Config_Can_Sync(CANRxData[2], CANRxData[3]);
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	7bfa      	ldrb	r2, [r7, #15]
 80086ac:	4611      	mov	r1, r2
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fe f832 	bl	8006718 <Config_Can_Sync>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	0c1b      	lsrs	r3, r3, #16
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	f200 80b9 	bhi.w	8008830 <HAL_FDCAN_RxFifo0Callback+0x320>
 80086be:	2009      	movs	r0, #9
 80086c0:	f000 f8cc 	bl	800885c <Set_Error>
					break;
 80086c4:	e0b4      	b.n	8008830 <HAL_FDCAN_RxFifo0Callback+0x320>
					Config_Can_Timed(CANRxData[2], CANRxData[3]);
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	7bfa      	ldrb	r2, [r7, #15]
 80086ca:	4611      	mov	r1, r2
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fe f86b 	bl	80067a8 <Config_Can_Timed>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 80086d2:	6a3b      	ldr	r3, [r7, #32]
 80086d4:	0c1b      	lsrs	r3, r3, #16
 80086d6:	2b03      	cmp	r3, #3
 80086d8:	f200 80ac 	bhi.w	8008834 <HAL_FDCAN_RxFifo0Callback+0x324>
 80086dc:	2009      	movs	r0, #9
 80086de:	f000 f8bd 	bl	800885c <Set_Error>
					break;
 80086e2:	e0a7      	b.n	8008834 <HAL_FDCAN_RxFifo0Callback+0x324>
					Config_Can_Interval((((uint16_t)CANRxData[2])<<8)+(((uint16_t)CANRxData[3])<<0));
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	021b      	lsls	r3, r3, #8
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	4413      	add	r3, r2
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fe f89f 	bl	8006838 <Config_Can_Interval>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 80086fa:	6a3b      	ldr	r3, [r7, #32]
 80086fc:	0c1b      	lsrs	r3, r3, #16
 80086fe:	2b03      	cmp	r3, #3
 8008700:	f200 809a 	bhi.w	8008838 <HAL_FDCAN_RxFifo0Callback+0x328>
 8008704:	2009      	movs	r0, #9
 8008706:	f000 f8a9 	bl	800885c <Set_Error>
					break;
 800870a:	e095      	b.n	8008838 <HAL_FDCAN_RxFifo0Callback+0x328>
					Config_Can_Sync_Delay((((uint16_t)CANRxData[2])<<8)+(((uint16_t)CANRxData[3])<<0));
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	b29b      	uxth	r3, r3
 8008710:	021b      	lsls	r3, r3, #8
 8008712:	b29a      	uxth	r2, r3
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	b29b      	uxth	r3, r3
 8008718:	4413      	add	r3, r2
 800871a:	b29b      	uxth	r3, r3
 800871c:	4618      	mov	r0, r3
 800871e:	f7fe f89d 	bl	800685c <Config_Can_Sync_Delay>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 8008722:	6a3b      	ldr	r3, [r7, #32]
 8008724:	0c1b      	lsrs	r3, r3, #16
 8008726:	2b03      	cmp	r3, #3
 8008728:	f200 8088 	bhi.w	800883c <HAL_FDCAN_RxFifo0Callback+0x32c>
 800872c:	2009      	movs	r0, #9
 800872e:	f000 f895 	bl	800885c <Set_Error>
					break;
 8008732:	e083      	b.n	800883c <HAL_FDCAN_RxFifo0Callback+0x32c>
					Config_Temperature_Voltage_Reading((((uint16_t)CANRxData[2])<<8)+(((uint16_t)CANRxData[3])<<0), CANRxData[4], CANRxData[5]);
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	b29b      	uxth	r3, r3
 8008738:	021b      	lsls	r3, r3, #8
 800873a:	b29a      	uxth	r2, r3
 800873c:	7bfb      	ldrb	r3, [r7, #15]
 800873e:	b29b      	uxth	r3, r3
 8008740:	4413      	add	r3, r2
 8008742:	b29b      	uxth	r3, r3
 8008744:	7c39      	ldrb	r1, [r7, #16]
 8008746:	7c7a      	ldrb	r2, [r7, #17]
 8008748:	4618      	mov	r0, r3
 800874a:	f7fe f899 	bl	8006880 <Config_Temperature_Voltage_Reading>
					if ((RxHeader.DataLength>>16) < 6) { Set_Error(ERR_COMMAND_SHORT); }
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	0c1b      	lsrs	r3, r3, #16
 8008752:	2b05      	cmp	r3, #5
 8008754:	d874      	bhi.n	8008840 <HAL_FDCAN_RxFifo0Callback+0x330>
 8008756:	2009      	movs	r0, #9
 8008758:	f000 f880 	bl	800885c <Set_Error>
					break;
 800875c:	e070      	b.n	8008840 <HAL_FDCAN_RxFifo0Callback+0x330>
					Config_Default_DC(CANRxData[2], CANRxData);
 800875e:	7bbb      	ldrb	r3, [r7, #14]
 8008760:	f107 020c 	add.w	r2, r7, #12
 8008764:	4611      	mov	r1, r2
 8008766:	4618      	mov	r0, r3
 8008768:	f7fe f8c8 	bl	80068fc <Config_Default_DC>
					if ((RxHeader.DataLength>>16) < (3+((CANRxData[2]>>4)&1))+((CANRxData[2]>>3)&1)+((CANRxData[2]>>2)&1)+((CANRxData[2]>>1)&1)+((CANRxData[2]>>0)&1)) { Set_Error(ERR_COMMAND_SHORT); }
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	0c1b      	lsrs	r3, r3, #16
 8008770:	7bba      	ldrb	r2, [r7, #14]
 8008772:	0912      	lsrs	r2, r2, #4
 8008774:	b2d2      	uxtb	r2, r2
 8008776:	f002 0201 	and.w	r2, r2, #1
 800877a:	1cd1      	adds	r1, r2, #3
 800877c:	7bba      	ldrb	r2, [r7, #14]
 800877e:	08d2      	lsrs	r2, r2, #3
 8008780:	b2d2      	uxtb	r2, r2
 8008782:	f002 0201 	and.w	r2, r2, #1
 8008786:	4411      	add	r1, r2
 8008788:	7bba      	ldrb	r2, [r7, #14]
 800878a:	0892      	lsrs	r2, r2, #2
 800878c:	b2d2      	uxtb	r2, r2
 800878e:	f002 0201 	and.w	r2, r2, #1
 8008792:	4411      	add	r1, r2
 8008794:	7bba      	ldrb	r2, [r7, #14]
 8008796:	0852      	lsrs	r2, r2, #1
 8008798:	b2d2      	uxtb	r2, r2
 800879a:	f002 0201 	and.w	r2, r2, #1
 800879e:	4411      	add	r1, r2
 80087a0:	7bba      	ldrb	r2, [r7, #14]
 80087a2:	f002 0201 	and.w	r2, r2, #1
 80087a6:	440a      	add	r2, r1
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d24b      	bcs.n	8008844 <HAL_FDCAN_RxFifo0Callback+0x334>
 80087ac:	2009      	movs	r0, #9
 80087ae:	f000 f855 	bl	800885c <Set_Error>
					break;
 80087b2:	e047      	b.n	8008844 <HAL_FDCAN_RxFifo0Callback+0x334>
					Config_PWM_Prescalers(CANRxData[2], CANRxData);
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	f107 020c 	add.w	r2, r7, #12
 80087ba:	4611      	mov	r1, r2
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fe f8cb 	bl	8006958 <Config_PWM_Prescalers>
					if ((RxHeader.DataLength>>16) < (3+((CANRxData[2]>>4)&1))+((CANRxData[2]>>3)&1)+((CANRxData[2]>>2)&1)+((CANRxData[2]>>1)&1)+((CANRxData[2]>>0)&1)) { Set_Error(ERR_COMMAND_SHORT); }
 80087c2:	6a3b      	ldr	r3, [r7, #32]
 80087c4:	0c1b      	lsrs	r3, r3, #16
 80087c6:	7bba      	ldrb	r2, [r7, #14]
 80087c8:	0912      	lsrs	r2, r2, #4
 80087ca:	b2d2      	uxtb	r2, r2
 80087cc:	f002 0201 	and.w	r2, r2, #1
 80087d0:	1cd1      	adds	r1, r2, #3
 80087d2:	7bba      	ldrb	r2, [r7, #14]
 80087d4:	08d2      	lsrs	r2, r2, #3
 80087d6:	b2d2      	uxtb	r2, r2
 80087d8:	f002 0201 	and.w	r2, r2, #1
 80087dc:	4411      	add	r1, r2
 80087de:	7bba      	ldrb	r2, [r7, #14]
 80087e0:	0892      	lsrs	r2, r2, #2
 80087e2:	b2d2      	uxtb	r2, r2
 80087e4:	f002 0201 	and.w	r2, r2, #1
 80087e8:	4411      	add	r1, r2
 80087ea:	7bba      	ldrb	r2, [r7, #14]
 80087ec:	0852      	lsrs	r2, r2, #1
 80087ee:	b2d2      	uxtb	r2, r2
 80087f0:	f002 0201 	and.w	r2, r2, #1
 80087f4:	4411      	add	r1, r2
 80087f6:	7bba      	ldrb	r2, [r7, #14]
 80087f8:	f002 0201 	and.w	r2, r2, #1
 80087fc:	440a      	add	r2, r1
 80087fe:	4293      	cmp	r3, r2
 8008800:	d222      	bcs.n	8008848 <HAL_FDCAN_RxFifo0Callback+0x338>
 8008802:	2009      	movs	r0, #9
 8008804:	f000 f82a 	bl	800885c <Set_Error>
					break;
 8008808:	e01e      	b.n	8008848 <HAL_FDCAN_RxFifo0Callback+0x338>
					Set_Error(ERR_INVALID_COMMAND);
 800880a:	2008      	movs	r0, #8
 800880c:	f000 f826 	bl	800885c <Set_Error>
					break;
 8008810:	bf00      	nop
 8008812:	e01a      	b.n	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
			Set_Error(ERR_RECIEVED_INVALID_ID);
 8008814:	200a      	movs	r0, #10
 8008816:	f000 f821 	bl	800885c <Set_Error>
}
 800881a:	e016      	b.n	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
			}
 800881c:	bf00      	nop
 800881e:	e014      	b.n	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
					break;
 8008820:	bf00      	nop
 8008822:	e012      	b.n	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
					break;
 8008824:	bf00      	nop
 8008826:	e010      	b.n	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
					break;
 8008828:	bf00      	nop
 800882a:	e00e      	b.n	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
					break;
 800882c:	bf00      	nop
 800882e:	e00c      	b.n	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
					break;
 8008830:	bf00      	nop
 8008832:	e00a      	b.n	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
					break;
 8008834:	bf00      	nop
 8008836:	e008      	b.n	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
					break;
 8008838:	bf00      	nop
 800883a:	e006      	b.n	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
					break;
 800883c:	bf00      	nop
 800883e:	e004      	b.n	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
					break;
 8008840:	bf00      	nop
 8008842:	e002      	b.n	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
					break;
 8008844:	bf00      	nop
 8008846:	e000      	b.n	800884a <HAL_FDCAN_RxFifo0Callback+0x33a>
					break;
 8008848:	bf00      	nop
}
 800884a:	bf00      	nop
 800884c:	3740      	adds	r7, #64	; 0x40
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	2000040c 	.word	0x2000040c
 8008858:	200009b4 	.word	0x200009b4

0800885c <Set_Error>:


void Set_Error(uint32_t error)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	canErrors[(error/32)]  |= (1<<(error%32));
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	095b      	lsrs	r3, r3, #5
 8008868:	4a10      	ldr	r2, [pc, #64]	; (80088ac <Set_Error+0x50>)
 800886a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800886e:	6879      	ldr	r1, [r7, #4]
 8008870:	f001 011f 	and.w	r1, r1, #31
 8008874:	2001      	movs	r0, #1
 8008876:	fa00 f101 	lsl.w	r1, r0, r1
 800887a:	430a      	orrs	r2, r1
 800887c:	490b      	ldr	r1, [pc, #44]	; (80088ac <Set_Error+0x50>)
 800887e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	canErrorToTransmit |= (1<<(error/32));
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	095b      	lsrs	r3, r3, #5
 8008886:	2201      	movs	r2, #1
 8008888:	fa02 f303 	lsl.w	r3, r2, r3
 800888c:	b25a      	sxtb	r2, r3
 800888e:	4b08      	ldr	r3, [pc, #32]	; (80088b0 <Set_Error+0x54>)
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	b25b      	sxtb	r3, r3
 8008894:	4313      	orrs	r3, r2
 8008896:	b25b      	sxtb	r3, r3
 8008898:	b2da      	uxtb	r2, r3
 800889a:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <Set_Error+0x54>)
 800889c:	701a      	strb	r2, [r3, #0]
}
 800889e:	bf00      	nop
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	200001f0 	.word	0x200001f0
 80088b0:	20000550 	.word	0x20000550

080088b4 <Send_Error>:

void Send_Error(void)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b08a      	sub	sp, #40	; 0x28
 80088b8:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<8; i++)
 80088ba:	2300      	movs	r3, #0
 80088bc:	627b      	str	r3, [r7, #36]	; 0x24
 80088be:	e06d      	b.n	800899c <Send_Error+0xe8>
	{
		if (canErrorToTransmit&(1<<i))
 80088c0:	4b39      	ldr	r3, [pc, #228]	; (80089a8 <Send_Error+0xf4>)
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	461a      	mov	r2, r3
 80088c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c8:	fa42 f303 	asr.w	r3, r2, r3
 80088cc:	f003 0301 	and.w	r3, r3, #1
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d060      	beq.n	8008996 <Send_Error+0xe2>
		{
			if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) > 0)
 80088d4:	4835      	ldr	r0, [pc, #212]	; (80089ac <Send_Error+0xf8>)
 80088d6:	f7fa f861 	bl	800299c <HAL_FDCAN_GetTxFifoFreeLevel>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d05a      	beq.n	8008996 <Send_Error+0xe2>
			{
				FDCAN_TxHeaderTypeDef TxHeader;

				TxHeader.Identifier = CANID_ERROR;
 80088e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80088e4:	603b      	str	r3, [r7, #0]
				TxHeader.DataLength = FDCAN_DLC_BYTES_6;
 80088e6:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80088ea:	60fb      	str	r3, [r7, #12]

				CANTxData[0]=ID;
 80088ec:	4b30      	ldr	r3, [pc, #192]	; (80089b0 <Send_Error+0xfc>)
 80088ee:	2200      	movs	r2, #0
 80088f0:	701a      	strb	r2, [r3, #0]
				CANTxData[1]=i;
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	4b2e      	ldr	r3, [pc, #184]	; (80089b0 <Send_Error+0xfc>)
 80088f8:	705a      	strb	r2, [r3, #1]
				CANTxData[2]=(canErrors[i]>>24)&0xFF;
 80088fa:	4a2e      	ldr	r2, [pc, #184]	; (80089b4 <Send_Error+0x100>)
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008902:	0e1b      	lsrs	r3, r3, #24
 8008904:	b2da      	uxtb	r2, r3
 8008906:	4b2a      	ldr	r3, [pc, #168]	; (80089b0 <Send_Error+0xfc>)
 8008908:	709a      	strb	r2, [r3, #2]
				CANTxData[3]=(canErrors[i]>>16)&0xFF;
 800890a:	4a2a      	ldr	r2, [pc, #168]	; (80089b4 <Send_Error+0x100>)
 800890c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008912:	0c1b      	lsrs	r3, r3, #16
 8008914:	b2da      	uxtb	r2, r3
 8008916:	4b26      	ldr	r3, [pc, #152]	; (80089b0 <Send_Error+0xfc>)
 8008918:	70da      	strb	r2, [r3, #3]
				CANTxData[4]=(canErrors[i]>>8)&0xFF;
 800891a:	4a26      	ldr	r2, [pc, #152]	; (80089b4 <Send_Error+0x100>)
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008922:	0a1b      	lsrs	r3, r3, #8
 8008924:	b2da      	uxtb	r2, r3
 8008926:	4b22      	ldr	r3, [pc, #136]	; (80089b0 <Send_Error+0xfc>)
 8008928:	711a      	strb	r2, [r3, #4]
				CANTxData[5]=(canErrors[i]>>0)&0xFF;
 800892a:	4a22      	ldr	r2, [pc, #136]	; (80089b4 <Send_Error+0x100>)
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008932:	b2da      	uxtb	r2, r3
 8008934:	4b1e      	ldr	r3, [pc, #120]	; (80089b0 <Send_Error+0xfc>)
 8008936:	715a      	strb	r2, [r3, #5]

				TxHeader.IdType = FDCAN_STANDARD_ID;
 8008938:	2300      	movs	r3, #0
 800893a:	607b      	str	r3, [r7, #4]
				TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800893c:	2300      	movs	r3, #0
 800893e:	60bb      	str	r3, [r7, #8]
				TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8008940:	2300      	movs	r3, #0
 8008942:	613b      	str	r3, [r7, #16]
				TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8008944:	2300      	movs	r3, #0
 8008946:	617b      	str	r3, [r7, #20]
				TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8008948:	2300      	movs	r3, #0
 800894a:	61bb      	str	r3, [r7, #24]
				TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800894c:	2300      	movs	r3, #0
 800894e:	61fb      	str	r3, [r7, #28]
				TxHeader.MessageMarker = 0;
 8008950:	2300      	movs	r3, #0
 8008952:	623b      	str	r3, [r7, #32]

				if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 8008954:	463b      	mov	r3, r7
 8008956:	4a16      	ldr	r2, [pc, #88]	; (80089b0 <Send_Error+0xfc>)
 8008958:	4619      	mov	r1, r3
 800895a:	4814      	ldr	r0, [pc, #80]	; (80089ac <Send_Error+0xf8>)
 800895c:	f7f9 ff00 	bl	8002760 <HAL_FDCAN_AddMessageToTxFifoQ>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <Send_Error+0xba>
				{
					Set_Error(ERR_SEND_FAILED);
 8008966:	2006      	movs	r0, #6
 8008968:	f7ff ff78 	bl	800885c <Set_Error>
 800896c:	e019      	b.n	80089a2 <Send_Error+0xee>
					return;
				}
				else
				{
					//if we sent the error message clear the error so that if it only occurs once the error is not sent continuously
					canErrors[i]=0;
 800896e:	4a11      	ldr	r2, [pc, #68]	; (80089b4 <Send_Error+0x100>)
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	2100      	movs	r1, #0
 8008974:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					canErrorToTransmit &= ~(1<<i);
 8008978:	2201      	movs	r2, #1
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	fa02 f303 	lsl.w	r3, r2, r3
 8008980:	b25b      	sxtb	r3, r3
 8008982:	43db      	mvns	r3, r3
 8008984:	b25a      	sxtb	r2, r3
 8008986:	4b08      	ldr	r3, [pc, #32]	; (80089a8 <Send_Error+0xf4>)
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	b25b      	sxtb	r3, r3
 800898c:	4013      	ands	r3, r2
 800898e:	b25b      	sxtb	r3, r3
 8008990:	b2da      	uxtb	r2, r3
 8008992:	4b05      	ldr	r3, [pc, #20]	; (80089a8 <Send_Error+0xf4>)
 8008994:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 8008996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008998:	3301      	adds	r3, #1
 800899a:	627b      	str	r3, [r7, #36]	; 0x24
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	2b07      	cmp	r3, #7
 80089a0:	d98e      	bls.n	80088c0 <Send_Error+0xc>
				}
			}
		}
	}
}
 80089a2:	3728      	adds	r7, #40	; 0x28
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	20000550 	.word	0x20000550
 80089ac:	20000410 	.word	0x20000410
 80089b0:	20000854 	.word	0x20000854
 80089b4:	200001f0 	.word	0x200001f0

080089b8 <Write_PWM>:

void Write_PWM(uint32_t DIO_channel, uint16_t pulse) //TODO: make sure the pwm signal works nicely in real life
{
 80089b8:	b5b0      	push	{r4, r5, r7, lr}
 80089ba:	b09a      	sub	sp, #104	; 0x68
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	807b      	strh	r3, [r7, #2]
	if(PWM_Out_EN&(1<<DIO_channel))
 80089c4:	4b5d      	ldr	r3, [pc, #372]	; (8008b3c <Write_PWM+0x184>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	461a      	mov	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	fa42 f303 	asr.w	r3, r2, r3
 80089d0:	f003 0301 	and.w	r3, r3, #1
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 80ae 	beq.w	8008b36 <Write_PWM+0x17e>
	{
		TIM_HandleTypeDef htim = {0};
 80089da:	f107 0308 	add.w	r3, r7, #8
 80089de:	2240      	movs	r2, #64	; 0x40
 80089e0:	2100      	movs	r1, #0
 80089e2:	4618      	mov	r0, r3
 80089e4:	f001 fe8c 	bl	800a700 <memset>
		uint32_t channel = 0;
 80089e8:	2300      	movs	r3, #0
 80089ea:	667b      	str	r3, [r7, #100]	; 0x64
		TIM_OC_InitTypeDef sConfigOC = {0};
 80089ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	605a      	str	r2, [r3, #4]
 80089f6:	609a      	str	r2, [r3, #8]
 80089f8:	60da      	str	r2, [r3, #12]
 80089fa:	611a      	str	r2, [r3, #16]
 80089fc:	615a      	str	r2, [r3, #20]
 80089fe:	619a      	str	r2, [r3, #24]

		if(pulse>255) { pulse=255; }
 8008a00:	887b      	ldrh	r3, [r7, #2]
 8008a02:	2bff      	cmp	r3, #255	; 0xff
 8008a04:	d901      	bls.n	8008a0a <Write_PWM+0x52>
 8008a06:	23ff      	movs	r3, #255	; 0xff
 8008a08:	807b      	strh	r3, [r7, #2]

		switch(DIO_channel)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	d862      	bhi.n	8008ad6 <Write_PWM+0x11e>
 8008a10:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <Write_PWM+0x60>)
 8008a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a16:	bf00      	nop
 8008a18:	08008a2d 	.word	0x08008a2d
 8008a1c:	08008a4f 	.word	0x08008a4f
 8008a20:	08008a71 	.word	0x08008a71
 8008a24:	08008a93 	.word	0x08008a93
 8008a28:	08008ab5 	.word	0x08008ab5
		{
			case 0: //PB3
				htim = htim2;
 8008a2c:	4b44      	ldr	r3, [pc, #272]	; (8008b40 <Write_PWM+0x188>)
 8008a2e:	f107 0408 	add.w	r4, r7, #8
 8008a32:	461d      	mov	r5, r3
 8008a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				channel = TIM_CHANNEL_2;
 8008a48:	2304      	movs	r3, #4
 8008a4a:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8008a4c:	e048      	b.n	8008ae0 <Write_PWM+0x128>
			case 1: //PB4
				htim = htim3;
 8008a4e:	4b3d      	ldr	r3, [pc, #244]	; (8008b44 <Write_PWM+0x18c>)
 8008a50:	f107 0408 	add.w	r4, r7, #8
 8008a54:	461d      	mov	r5, r3
 8008a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a62:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008a66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				channel = TIM_CHANNEL_1;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8008a6e:	e037      	b.n	8008ae0 <Write_PWM+0x128>
			case 2: //PB5
				htim = htim17;
 8008a70:	4b35      	ldr	r3, [pc, #212]	; (8008b48 <Write_PWM+0x190>)
 8008a72:	f107 0408 	add.w	r4, r7, #8
 8008a76:	461d      	mov	r5, r3
 8008a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008a88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				channel = TIM_CHANNEL_1;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8008a90:	e026      	b.n	8008ae0 <Write_PWM+0x128>
			case 3: //PB6
				htim = htim4;
 8008a92:	4b2e      	ldr	r3, [pc, #184]	; (8008b4c <Write_PWM+0x194>)
 8008a94:	f107 0408 	add.w	r4, r7, #8
 8008a98:	461d      	mov	r5, r3
 8008a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008aa6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008aaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				channel = TIM_CHANNEL_1;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8008ab2:	e015      	b.n	8008ae0 <Write_PWM+0x128>
			case 4: //PA15
				htim = htim8;
 8008ab4:	4b26      	ldr	r3, [pc, #152]	; (8008b50 <Write_PWM+0x198>)
 8008ab6:	f107 0408 	add.w	r4, r7, #8
 8008aba:	461d      	mov	r5, r3
 8008abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ac8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				channel = TIM_CHANNEL_1;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8008ad4:	e004      	b.n	8008ae0 <Write_PWM+0x128>
			default:
				Set_Error(WARN_PWM_INVALID_CHANNEL);
 8008ad6:	f240 1001 	movw	r0, #257	; 0x101
 8008ada:	f7ff febf 	bl	800885c <Set_Error>
 8008ade:	e02a      	b.n	8008b36 <Write_PWM+0x17e>
				return;
		}

		if (HAL_TIM_PWM_Stop(&htim, channel) != HAL_OK)
 8008ae0:	f107 0308 	add.w	r3, r7, #8
 8008ae4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fb ff8e 	bl	8004a08 <HAL_TIM_PWM_Stop>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <Write_PWM+0x13e>
		{
			Error_Handler();
 8008af2:	f001 f819 	bl	8009b28 <Error_Handler>
		}
		/*htim.Init.Period = 255;
		HAL_TIM_PWM_Init(&htim);*/
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008af6:	2360      	movs	r3, #96	; 0x60
 8008af8:	64bb      	str	r3, [r7, #72]	; 0x48
		sConfigOC.Pulse = pulse;
 8008afa:	887b      	ldrh	r3, [r7, #2]
 8008afc:	64fb      	str	r3, [r7, #76]	; 0x4c
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008afe:	2300      	movs	r3, #0
 8008b00:	653b      	str	r3, [r7, #80]	; 0x50
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008b02:	2300      	movs	r3, #0
 8008b04:	65bb      	str	r3, [r7, #88]	; 0x58
		if (HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, channel) != HAL_OK)
 8008b06:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8008b0a:	f107 0308 	add.w	r3, r7, #8
 8008b0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fc fa2d 	bl	8004f70 <HAL_TIM_PWM_ConfigChannel>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <Write_PWM+0x168>
		{
			Error_Handler();
 8008b1c:	f001 f804 	bl	8009b28 <Error_Handler>
		}
		if (HAL_TIM_PWM_Start(&htim, channel) != HAL_OK)
 8008b20:	f107 0308 	add.w	r3, r7, #8
 8008b24:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fb ff16 	bl	8004958 <HAL_TIM_PWM_Start>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <Write_PWM+0x17e>
		{
			Error_Handler();
 8008b32:	f000 fff9 	bl	8009b28 <Error_Handler>
		}
	}
}
 8008b36:	3768      	adds	r7, #104	; 0x68
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8008b3c:	20000924 	.word	0x20000924
 8008b40:	2000087c 	.word	0x2000087c
 8008b44:	20000504 	.word	0x20000504
 8008b48:	200003cc 	.word	0x200003cc
 8008b4c:	200001ac 	.word	0x200001ac
 8008b50:	20000128 	.word	0x20000128

08008b54 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b0a4      	sub	sp, #144	; 0x90
 8008b58:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008b5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008b5e:	2238      	movs	r2, #56	; 0x38
 8008b60:	2100      	movs	r1, #0
 8008b62:	4618      	mov	r0, r3
 8008b64:	f001 fdcc 	bl	800a700 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008b68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	601a      	str	r2, [r3, #0]
 8008b70:	605a      	str	r2, [r3, #4]
 8008b72:	609a      	str	r2, [r3, #8]
 8008b74:	60da      	str	r2, [r3, #12]
 8008b76:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008b78:	463b      	mov	r3, r7
 8008b7a:	2244      	movs	r2, #68	; 0x44
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f001 fdbe 	bl	800a700 <memset>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8008b84:	2000      	movs	r0, #0
 8008b86:	f7fa fea3 	bl	80038d0 <HAL_PWREx_ControlVoltageScaling>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8008b8e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8008b92:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008b94:	2302      	movs	r3, #2
 8008b96:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8008b9c:	2304      	movs	r3, #4
 8008b9e:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8008ba0:	2355      	movs	r3, #85	; 0x55
 8008ba2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008bac:	2302      	movs	r3, #2
 8008bae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008bb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fa ff2b 	bl	8003a18 <HAL_RCC_OscConfig>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <SystemClock_Config+0x78>
	{
		Error_Handler();
 8008bc8:	f000 ffae 	bl	8009b28 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8008bcc:	230f      	movs	r3, #15
 8008bce:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	657b      	str	r3, [r7, #84]	; 0x54
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8008be0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008be4:	2108      	movs	r1, #8
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fb fa2e 	bl	8004048 <HAL_RCC_ClockConfig>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8008bf2:	f000 ff99 	bl	8009b28 <Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
 8008bf6:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8008bfa:	603b      	str	r3, [r7, #0]
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008c00:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008c04:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008c06:	463b      	mov	r3, r7
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7fb fc09 	bl	8004420 <HAL_RCCEx_PeriphCLKConfig>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8008c14:	f000 ff88 	bl	8009b28 <Error_Handler>
	}
}
 8008c18:	bf00      	nop
 8008c1a:	3790      	adds	r7, #144	; 0x90
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b08c      	sub	sp, #48	; 0x30
 8008c24:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode = {0};
 8008c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	601a      	str	r2, [r3, #0]
 8008c2e:	605a      	str	r2, [r3, #4]
 8008c30:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8008c32:	1d3b      	adds	r3, r7, #4
 8008c34:	2220      	movs	r2, #32
 8008c36:	2100      	movs	r1, #0
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f001 fd61 	bl	800a700 <memset>

	hadc1.Instance = ADC1;
 8008c3e:	4b47      	ldr	r3, [pc, #284]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008c40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c44:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8008c46:	4b45      	ldr	r3, [pc, #276]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8008c4c:	4b43      	ldr	r3, [pc, #268]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008c4e:	2208      	movs	r2, #8
 8008c50:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008c52:	4b42      	ldr	r3, [pc, #264]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8008c58:	4b40      	ldr	r3, [pc, #256]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008c5e:	4b3f      	ldr	r3, [pc, #252]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008c60:	2201      	movs	r2, #1
 8008c62:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008c64:	4b3d      	ldr	r3, [pc, #244]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008c66:	2204      	movs	r2, #4
 8008c68:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8008c6a:	4b3c      	ldr	r3, [pc, #240]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8008c70:	4b3a      	ldr	r3, [pc, #232]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 3;
 8008c76:	4b39      	ldr	r3, [pc, #228]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008c78:	2203      	movs	r2, #3
 8008c7a:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = ENABLE;
 8008c7c:	4b37      	ldr	r3, [pc, #220]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008c84:	4b35      	ldr	r3, [pc, #212]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008c8a:	4b34      	ldr	r3, [pc, #208]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8008c90:	4b32      	ldr	r3, [pc, #200]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8008c98:	4b30      	ldr	r3, [pc, #192]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008c9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c9e:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8008ca0:	4b2e      	ldr	r3, [pc, #184]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008ca8:	482c      	ldr	r0, [pc, #176]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008caa:	f7f7 fd7f 	bl	80007ac <HAL_ADC_Init>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <MX_ADC1_Init+0x98>
	{
		Error_Handler();
 8008cb4:	f000 ff38 	bl	8009b28 <Error_Handler>
	}

	multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8008cb8:	2306      	movs	r3, #6
 8008cba:	627b      	str	r3, [r7, #36]	; 0x24
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8008cbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cc0:	62bb      	str	r3, [r7, #40]	; 0x28
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_12CYCLES;
 8008cc2:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8008cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8008cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ccc:	4619      	mov	r1, r3
 8008cce:	4823      	ldr	r0, [pc, #140]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008cd0:	f7f8 fe84 	bl	80019dc <HAL_ADCEx_MultiModeConfigChannel>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <MX_ADC1_Init+0xbe>
	{
		Error_Handler();
 8008cda:	f000 ff25 	bl	8009b28 <Error_Handler>
	}


	sConfig.Channel = ADC_CHANNEL_1;
 8008cde:	4b20      	ldr	r3, [pc, #128]	; (8008d60 <MX_ADC1_Init+0x140>)
 8008ce0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8008ce2:	2312      	movs	r3, #18
 8008ce4:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8008ce6:	2307      	movs	r3, #7
 8008ce8:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008cea:	237f      	movs	r3, #127	; 0x7f
 8008cec:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008cee:	2304      	movs	r3, #4
 8008cf0:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008cf6:	1d3b      	adds	r3, r7, #4
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4818      	ldr	r0, [pc, #96]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008cfc:	f7f7 fef2 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <MX_ADC1_Init+0xea>
	{
		Error_Handler();
 8008d06:	f000 ff0f 	bl	8009b28 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_2;
 8008d0a:	4b16      	ldr	r3, [pc, #88]	; (8008d64 <MX_ADC1_Init+0x144>)
 8008d0c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8008d0e:	230c      	movs	r3, #12
 8008d10:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008d12:	1d3b      	adds	r3, r7, #4
 8008d14:	4619      	mov	r1, r3
 8008d16:	4811      	ldr	r0, [pc, #68]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008d18:	f7f7 fee4 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <MX_ADC1_Init+0x106>
	{
		Error_Handler();
 8008d22:	f000 ff01 	bl	8009b28 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_3;
 8008d26:	4b10      	ldr	r3, [pc, #64]	; (8008d68 <MX_ADC1_Init+0x148>)
 8008d28:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8008d2a:	2306      	movs	r3, #6
 8008d2c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008d2e:	1d3b      	adds	r3, r7, #4
 8008d30:	4619      	mov	r1, r3
 8008d32:	480a      	ldr	r0, [pc, #40]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008d34:	f7f7 fed6 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d001      	beq.n	8008d42 <MX_ADC1_Init+0x122>
	{
		Error_Handler();
 8008d3e:	f000 fef3 	bl	8009b28 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8008d42:	217f      	movs	r1, #127	; 0x7f
 8008d44:	4805      	ldr	r0, [pc, #20]	; (8008d5c <MX_ADC1_Init+0x13c>)
 8008d46:	f7f8 fc93 	bl	8001670 <HAL_ADCEx_Calibration_Start>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d001      	beq.n	8008d54 <MX_ADC1_Init+0x134>
	{
		Error_Handler();
 8008d50:	f000 feea 	bl	8009b28 <Error_Handler>
	}
}
 8008d54:	bf00      	nop
 8008d56:	3730      	adds	r7, #48	; 0x30
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	200005a8 	.word	0x200005a8
 8008d60:	04300002 	.word	0x04300002
 8008d64:	08600004 	.word	0x08600004
 8008d68:	0c900008 	.word	0x0c900008

08008d6c <MX_ADC2_Init>:

static void MX_ADC2_Init(void)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b088      	sub	sp, #32
 8008d70:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8008d72:	463b      	mov	r3, r7
 8008d74:	2220      	movs	r2, #32
 8008d76:	2100      	movs	r1, #0
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f001 fcc1 	bl	800a700 <memset>

	hadc2.Instance = ADC2;
 8008d7e:	4b38      	ldr	r3, [pc, #224]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008d80:	4a38      	ldr	r2, [pc, #224]	; (8008e64 <MX_ADC2_Init+0xf8>)
 8008d82:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8008d84:	4b36      	ldr	r3, [pc, #216]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8008d8a:	4b35      	ldr	r3, [pc, #212]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008d8c:	2208      	movs	r2, #8
 8008d8e:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008d90:	4b33      	ldr	r3, [pc, #204]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 8008d96:	4b32      	ldr	r3, [pc, #200]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008d9c:	4b30      	ldr	r3, [pc, #192]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008da2:	4b2f      	ldr	r3, [pc, #188]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008da4:	2204      	movs	r2, #4
 8008da6:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8008da8:	4b2d      	ldr	r3, [pc, #180]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8008dae:	4b2c      	ldr	r3, [pc, #176]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 3;
 8008db4:	4b2a      	ldr	r3, [pc, #168]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008db6:	2203      	movs	r2, #3
 8008db8:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = ENABLE;
 8008dba:	4b29      	ldr	r3, [pc, #164]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8008dc2:	4b27      	ldr	r3, [pc, #156]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8008dca:	4b25      	ldr	r3, [pc, #148]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008dcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008dd0:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 8008dd2:	4b23      	ldr	r3, [pc, #140]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8008dda:	4821      	ldr	r0, [pc, #132]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008ddc:	f7f7 fce6 	bl	80007ac <HAL_ADC_Init>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <MX_ADC2_Init+0x7e>
	{
		Error_Handler();
 8008de6:	f000 fe9f 	bl	8009b28 <Error_Handler>
	}


	sConfig.Channel = ADC_CHANNEL_10;
 8008dea:	4b1f      	ldr	r3, [pc, #124]	; (8008e68 <MX_ADC2_Init+0xfc>)
 8008dec:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8008dee:	2306      	movs	r3, #6
 8008df0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8008df2:	2307      	movs	r3, #7
 8008df4:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008df6:	237f      	movs	r3, #127	; 0x7f
 8008df8:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008dfa:	2304      	movs	r3, #4
 8008dfc:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008e02:	463b      	mov	r3, r7
 8008e04:	4619      	mov	r1, r3
 8008e06:	4816      	ldr	r0, [pc, #88]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008e08:	f7f7 fe6c 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <MX_ADC2_Init+0xaa>
	{
		Error_Handler();
 8008e12:	f000 fe89 	bl	8009b28 <Error_Handler>
	}

	sConfig.Rank = ADC_REGULAR_RANK_2;
 8008e16:	230c      	movs	r3, #12
 8008e18:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008e1a:	463b      	mov	r3, r7
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	4810      	ldr	r0, [pc, #64]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008e20:	f7f7 fe60 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <MX_ADC2_Init+0xc2>
	{
		Error_Handler();
 8008e2a:	f000 fe7d 	bl	8009b28 <Error_Handler>
	}

	sConfig.Rank = ADC_REGULAR_RANK_3;
 8008e2e:	2312      	movs	r3, #18
 8008e30:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008e32:	463b      	mov	r3, r7
 8008e34:	4619      	mov	r1, r3
 8008e36:	480a      	ldr	r0, [pc, #40]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008e38:	f7f7 fe54 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <MX_ADC2_Init+0xda>
	{
		Error_Handler();
 8008e42:	f000 fe71 	bl	8009b28 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8008e46:	217f      	movs	r1, #127	; 0x7f
 8008e48:	4805      	ldr	r0, [pc, #20]	; (8008e60 <MX_ADC2_Init+0xf4>)
 8008e4a:	f7f8 fc11 	bl	8001670 <HAL_ADCEx_Calibration_Start>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <MX_ADC2_Init+0xec>
	{
		Error_Handler();
 8008e54:	f000 fe68 	bl	8009b28 <Error_Handler>
	}
}
 8008e58:	bf00      	nop
 8008e5a:	3720      	adds	r7, #32
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	20000214 	.word	0x20000214
 8008e64:	50000100 	.word	0x50000100
 8008e68:	2a000400 	.word	0x2a000400

08008e6c <MX_FDCAN_Init>:

static void MX_FDCAN_Init(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b088      	sub	sp, #32
 8008e70:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef	sFilterConfig;

	hfdcan.Instance = FDCAN1;
 8008e72:	4b52      	ldr	r3, [pc, #328]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008e74:	4a52      	ldr	r2, [pc, #328]	; (8008fc0 <MX_FDCAN_Init+0x154>)
 8008e76:	601a      	str	r2, [r3, #0]
	hfdcan.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8008e78:	4b50      	ldr	r3, [pc, #320]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	605a      	str	r2, [r3, #4]
	hfdcan.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8008e7e:	4b4f      	ldr	r3, [pc, #316]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008e80:	2200      	movs	r2, #0
 8008e82:	609a      	str	r2, [r3, #8]
	hfdcan.Init.Mode = FDCAN_MODE_NORMAL;
 8008e84:	4b4d      	ldr	r3, [pc, #308]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	60da      	str	r2, [r3, #12]
	hfdcan.Init.AutoRetransmission = DISABLE;
 8008e8a:	4b4c      	ldr	r3, [pc, #304]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	741a      	strb	r2, [r3, #16]
	hfdcan.Init.TransmitPause = DISABLE;
 8008e90:	4b4a      	ldr	r3, [pc, #296]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	745a      	strb	r2, [r3, #17]
	hfdcan.Init.ProtocolException = DISABLE;
 8008e96:	4b49      	ldr	r3, [pc, #292]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	749a      	strb	r2, [r3, #18]
	hfdcan.Init.NominalPrescaler = 1;
 8008e9c:	4b47      	ldr	r3, [pc, #284]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	615a      	str	r2, [r3, #20]
	hfdcan.Init.NominalSyncJumpWidth = 1;
 8008ea2:	4b46      	ldr	r3, [pc, #280]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	619a      	str	r2, [r3, #24]
	hfdcan.Init.NominalTimeSeg1 = 13;
 8008ea8:	4b44      	ldr	r3, [pc, #272]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008eaa:	220d      	movs	r2, #13
 8008eac:	61da      	str	r2, [r3, #28]
	hfdcan.Init.NominalTimeSeg2 = 2;
 8008eae:	4b43      	ldr	r3, [pc, #268]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	621a      	str	r2, [r3, #32]
	hfdcan.Init.DataPrescaler = 1;
 8008eb4:	4b41      	ldr	r3, [pc, #260]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan.Init.DataSyncJumpWidth = 1;
 8008eba:	4b40      	ldr	r3, [pc, #256]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan.Init.DataTimeSeg1 = 1;
 8008ec0:	4b3e      	ldr	r3, [pc, #248]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan.Init.DataTimeSeg2 = 1;
 8008ec6:	4b3d      	ldr	r3, [pc, #244]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008ec8:	2201      	movs	r2, #1
 8008eca:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan.Init.StdFiltersNbr = 2;
 8008ecc:	4b3b      	ldr	r3, [pc, #236]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008ece:	2202      	movs	r2, #2
 8008ed0:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan.Init.ExtFiltersNbr = 0;
 8008ed2:	4b3a      	ldr	r3, [pc, #232]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8008ed8:	4b38      	ldr	r3, [pc, #224]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_FDCAN_Init(&hfdcan) != HAL_OK)
 8008ede:	4837      	ldr	r0, [pc, #220]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008ee0:	f7f9 f9f8 	bl	80022d4 <HAL_FDCAN_Init>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <MX_FDCAN_Init+0x82>
	{
		Error_Handler();
 8008eea:	f000 fe1d 	bl	8009b28 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8008eee:	2201      	movs	r2, #1
 8008ef0:	2140      	movs	r1, #64	; 0x40
 8008ef2:	4832      	ldr	r0, [pc, #200]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008ef4:	f7f9 fbd3 	bl	800269e <HAL_FDCAN_ConfigRxFifoOverwrite>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <MX_FDCAN_Init+0x96>
	{
		Error_Handler();
 8008efe:	f000 fe13 	bl	8009b28 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8008f02:	2201      	movs	r2, #1
 8008f04:	2141      	movs	r1, #65	; 0x41
 8008f06:	482d      	ldr	r0, [pc, #180]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008f08:	f7f9 fbc9 	bl	800269e <HAL_FDCAN_ConfigRxFifoOverwrite>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <MX_FDCAN_Init+0xaa>
	{
		Error_Handler();
 8008f12:	f000 fe09 	bl	8009b28 <Error_Handler>
	}

	//only accept config/request can messages and sync can messages
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8008f16:	2300      	movs	r3, #0
 8008f18:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8008f1e:	2302      	movs	r3, #2
 8008f20:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8008f22:	2301      	movs	r3, #1
 8008f24:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_CONFIG;
 8008f26:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8008f2a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8008f2c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008f30:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 8008f32:	463b      	mov	r3, r7
 8008f34:	4619      	mov	r1, r3
 8008f36:	4821      	ldr	r0, [pc, #132]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008f38:	f7f9 fb26 	bl	8002588 <HAL_FDCAN_ConfigFilter>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <MX_FDCAN_Init+0xda>
	{
		Error_Handler();
 8008f42:	f000 fdf1 	bl	8009b28 <Error_Handler>
	}

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8008f46:	2300      	movs	r3, #0
 8008f48:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 1;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8008f4e:	2302      	movs	r3, #2
 8008f50:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8008f52:	2301      	movs	r3, #1
 8008f54:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_SYNC;
 8008f56:	2380      	movs	r3, #128	; 0x80
 8008f58:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8008f5a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008f5e:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 8008f60:	463b      	mov	r3, r7
 8008f62:	4619      	mov	r1, r3
 8008f64:	4815      	ldr	r0, [pc, #84]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008f66:	f7f9 fb0f 	bl	8002588 <HAL_FDCAN_ConfigFilter>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <MX_FDCAN_Init+0x108>
	{
		Error_Handler();
 8008f70:	f000 fdda 	bl	8009b28 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 8008f74:	2301      	movs	r3, #1
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	2301      	movs	r3, #1
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	2102      	movs	r1, #2
 8008f7e:	480f      	ldr	r0, [pc, #60]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008f80:	f7f9 fb5c 	bl	800263c <HAL_FDCAN_ConfigGlobalFilter>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <MX_FDCAN_Init+0x122>
	{
		Error_Handler();
 8008f8a:	f000 fdcd 	bl	8009b28 <Error_Handler>
	}

	if(HAL_FDCAN_Start(&hfdcan) != HAL_OK)
 8008f8e:	480b      	ldr	r0, [pc, #44]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008f90:	f7f9 fbbe 	bl	8002710 <HAL_FDCAN_Start>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <MX_FDCAN_Init+0x132>
	{
		Error_Handler();
 8008f9a:	f000 fdc5 	bl	8009b28 <Error_Handler>
	}
	if(HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	4806      	ldr	r0, [pc, #24]	; (8008fbc <MX_FDCAN_Init+0x150>)
 8008fa4:	f7f9 fd0c 	bl	80029c0 <HAL_FDCAN_ActivateNotification>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <MX_FDCAN_Init+0x146>
	{
		Error_Handler();
 8008fae:	f000 fdbb 	bl	8009b28 <Error_Handler>
	}
}
 8008fb2:	bf00      	nop
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000410 	.word	0x20000410
 8008fc0:	40006400 	.word	0x40006400

08008fc4 <MX_DMA_Init>:

static void MX_DMA_Init(void) 
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008fca:	4b16      	ldr	r3, [pc, #88]	; (8009024 <MX_DMA_Init+0x60>)
 8008fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fce:	4a15      	ldr	r2, [pc, #84]	; (8009024 <MX_DMA_Init+0x60>)
 8008fd0:	f043 0304 	orr.w	r3, r3, #4
 8008fd4:	6493      	str	r3, [r2, #72]	; 0x48
 8008fd6:	4b13      	ldr	r3, [pc, #76]	; (8009024 <MX_DMA_Init+0x60>)
 8008fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fda:	f003 0304 	and.w	r3, r3, #4
 8008fde:	607b      	str	r3, [r7, #4]
 8008fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008fe2:	4b10      	ldr	r3, [pc, #64]	; (8009024 <MX_DMA_Init+0x60>)
 8008fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fe6:	4a0f      	ldr	r2, [pc, #60]	; (8009024 <MX_DMA_Init+0x60>)
 8008fe8:	f043 0301 	orr.w	r3, r3, #1
 8008fec:	6493      	str	r3, [r2, #72]	; 0x48
 8008fee:	4b0d      	ldr	r3, [pc, #52]	; (8009024 <MX_DMA_Init+0x60>)
 8008ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	200b      	movs	r0, #11
 8009000:	f7f8 fe67 	bl	8001cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009004:	200b      	movs	r0, #11
 8009006:	f7f8 fe7e 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800900a:	2200      	movs	r2, #0
 800900c:	2100      	movs	r1, #0
 800900e:	200c      	movs	r0, #12
 8009010:	f7f8 fe5f 	bl	8001cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8009014:	200c      	movs	r0, #12
 8009016:	f7f8 fe76 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800901a:	bf00      	nop
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	40021000 	.word	0x40021000

08009028 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800902e:	f107 030c 	add.w	r3, r7, #12
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	605a      	str	r2, [r3, #4]
 8009038:	609a      	str	r2, [r3, #8]
 800903a:	60da      	str	r2, [r3, #12]
 800903c:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800903e:	4b9b      	ldr	r3, [pc, #620]	; (80092ac <MX_GPIO_Init+0x284>)
 8009040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009042:	4a9a      	ldr	r2, [pc, #616]	; (80092ac <MX_GPIO_Init+0x284>)
 8009044:	f043 0301 	orr.w	r3, r3, #1
 8009048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800904a:	4b98      	ldr	r3, [pc, #608]	; (80092ac <MX_GPIO_Init+0x284>)
 800904c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	60bb      	str	r3, [r7, #8]
 8009054:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009056:	4b95      	ldr	r3, [pc, #596]	; (80092ac <MX_GPIO_Init+0x284>)
 8009058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800905a:	4a94      	ldr	r2, [pc, #592]	; (80092ac <MX_GPIO_Init+0x284>)
 800905c:	f043 0302 	orr.w	r3, r3, #2
 8009060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009062:	4b92      	ldr	r3, [pc, #584]	; (80092ac <MX_GPIO_Init+0x284>)
 8009064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009066:	f003 0302 	and.w	r3, r3, #2
 800906a:	607b      	str	r3, [r7, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800906e:	4b8f      	ldr	r3, [pc, #572]	; (80092ac <MX_GPIO_Init+0x284>)
 8009070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009072:	4a8e      	ldr	r2, [pc, #568]	; (80092ac <MX_GPIO_Init+0x284>)
 8009074:	f043 0320 	orr.w	r3, r3, #32
 8009078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800907a:	4b8c      	ldr	r3, [pc, #560]	; (80092ac <MX_GPIO_Init+0x284>)
 800907c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800907e:	f003 0320 	and.w	r3, r3, #32
 8009082:	603b      	str	r3, [r7, #0]
 8009084:	683b      	ldr	r3, [r7, #0]

	//led pin, sel pins, and in pins should always be outputs
	//led pin and sel pins should always start low, in pins should start based on configuration
	HAL_GPIO_WritePin(LED.PORT, LED.PIN, 0);
 8009086:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800908a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800908e:	2200      	movs	r2, #0
 8009090:	4618      	mov	r0, r3
 8009092:	f7fa fbeb 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 8009096:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800909a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800909e:	2200      	movs	r2, #0
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fa fbe3 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 80090a6:	4b82      	ldr	r3, [pc, #520]	; (80092b0 <MX_GPIO_Init+0x288>)
 80090a8:	2101      	movs	r1, #1
 80090aa:	2200      	movs	r2, #0
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fa fbdd 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U5IN0.PORT, U5IN0.PIN, (Default_Switch_State>>0)&0b1);
 80090b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80090b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80090ba:	4b7e      	ldr	r3, [pc, #504]	; (80092b4 <MX_GPIO_Init+0x28c>)
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	461a      	mov	r2, r3
 80090c6:	f7fa fbd1 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U5IN1.PORT, U5IN1.PIN, (Default_Switch_State>>1)&0b1);
 80090ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80090ce:	2180      	movs	r1, #128	; 0x80
 80090d0:	4b78      	ldr	r3, [pc, #480]	; (80092b4 <MX_GPIO_Init+0x28c>)
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	085b      	lsrs	r3, r3, #1
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	461a      	mov	r2, r3
 80090e0:	f7fa fbc4 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U6IN0.PORT, U6IN0.PIN, (Default_Switch_State>>2)&0b1);
 80090e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80090e8:	2140      	movs	r1, #64	; 0x40
 80090ea:	4b72      	ldr	r3, [pc, #456]	; (80092b4 <MX_GPIO_Init+0x28c>)
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	089b      	lsrs	r3, r3, #2
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	461a      	mov	r2, r3
 80090fa:	f7fa fbb7 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U6IN1.PORT, U6IN1.PIN, (Default_Switch_State>>3)&0b1);
 80090fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009102:	2120      	movs	r1, #32
 8009104:	4b6b      	ldr	r3, [pc, #428]	; (80092b4 <MX_GPIO_Init+0x28c>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	08db      	lsrs	r3, r3, #3
 800910a:	b2db      	uxtb	r3, r3
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	b2db      	uxtb	r3, r3
 8009112:	461a      	mov	r2, r3
 8009114:	f7fa fbaa 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U7IN0.PORT, U7IN0.PIN, (Default_Switch_State>>4)&0b1);
 8009118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800911c:	2110      	movs	r1, #16
 800911e:	4b65      	ldr	r3, [pc, #404]	; (80092b4 <MX_GPIO_Init+0x28c>)
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	091b      	lsrs	r3, r3, #4
 8009124:	b2db      	uxtb	r3, r3
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	b2db      	uxtb	r3, r3
 800912c:	461a      	mov	r2, r3
 800912e:	f7fa fb9d 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U7IN1.PORT, U7IN1.PIN, (Default_Switch_State>>5)&0b1);
 8009132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009136:	2108      	movs	r1, #8
 8009138:	4b5e      	ldr	r3, [pc, #376]	; (80092b4 <MX_GPIO_Init+0x28c>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	095b      	lsrs	r3, r3, #5
 800913e:	b2db      	uxtb	r3, r3
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	b2db      	uxtb	r3, r3
 8009146:	461a      	mov	r2, r3
 8009148:	f7fa fb90 	bl	800386c <HAL_GPIO_WritePin>

	//all outputs on portA assigned here
	GPIO_InitStruct.Pin = LED.PIN|SEL0.PIN|U5IN0.PIN|U5IN1.PIN|U6IN0.PIN|U6IN1.PIN|U7IN0.PIN|U7IN1.PIN;
 800914c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009154:	4313      	orrs	r3, r2
 8009156:	b29b      	uxth	r3, r3
 8009158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800915c:	4313      	orrs	r3, r2
 800915e:	b29b      	uxth	r3, r3
 8009160:	2280      	movs	r2, #128	; 0x80
 8009162:	4313      	orrs	r3, r2
 8009164:	b29b      	uxth	r3, r3
 8009166:	2240      	movs	r2, #64	; 0x40
 8009168:	4313      	orrs	r3, r2
 800916a:	b29b      	uxth	r3, r3
 800916c:	2220      	movs	r2, #32
 800916e:	4313      	orrs	r3, r2
 8009170:	b29b      	uxth	r3, r3
 8009172:	2210      	movs	r2, #16
 8009174:	4313      	orrs	r3, r2
 8009176:	b29b      	uxth	r3, r3
 8009178:	2208      	movs	r2, #8
 800917a:	4313      	orrs	r3, r2
 800917c:	b29b      	uxth	r3, r3
 800917e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009180:	2301      	movs	r3, #1
 8009182:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009184:	2300      	movs	r3, #0
 8009186:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009188:	2300      	movs	r3, #0
 800918a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800918c:	f107 030c 	add.w	r3, r7, #12
 8009190:	4619      	mov	r1, r3
 8009192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009196:	f7fa f9cf 	bl	8003538 <HAL_GPIO_Init>

	//all outputs on portB assigned here
	GPIO_InitStruct.Pin = SEL1.PIN;
 800919a:	2301      	movs	r3, #1
 800919c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800919e:	2301      	movs	r3, #1
 80091a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091a2:	2300      	movs	r3, #0
 80091a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091a6:	2300      	movs	r3, #0
 80091a8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80091aa:	f107 030c 	add.w	r3, r7, #12
 80091ae:	4619      	mov	r1, r3
 80091b0:	483f      	ldr	r0, [pc, #252]	; (80092b0 <MX_GPIO_Init+0x288>)
 80091b2:	f7fa f9c1 	bl	8003538 <HAL_GPIO_Init>


	if(Digital_In_EN && (1<<0))
 80091b6:	4b40      	ldr	r3, [pc, #256]	; (80092b8 <MX_GPIO_Init+0x290>)
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d012      	beq.n	80091e4 <MX_GPIO_Init+0x1bc>
	{
		HAL_GPIO_WritePin(DIO3.PORT, DIO3.PIN, GPIO_PIN_RESET);
 80091be:	4b3c      	ldr	r3, [pc, #240]	; (80092b0 <MX_GPIO_Init+0x288>)
 80091c0:	2108      	movs	r1, #8
 80091c2:	2200      	movs	r2, #0
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fa fb51 	bl	800386c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO3.PIN;
 80091ca:	2308      	movs	r3, #8
 80091cc:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091ce:	2300      	movs	r3, #0
 80091d0:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO3.PORT, &GPIO_InitStruct);
 80091d6:	4a36      	ldr	r2, [pc, #216]	; (80092b0 <MX_GPIO_Init+0x288>)
 80091d8:	f107 030c 	add.w	r3, r7, #12
 80091dc:	4619      	mov	r1, r3
 80091de:	4610      	mov	r0, r2
 80091e0:	f7fa f9aa 	bl	8003538 <HAL_GPIO_Init>
	}

	if(Digital_In_EN && (1<<1))
 80091e4:	4b34      	ldr	r3, [pc, #208]	; (80092b8 <MX_GPIO_Init+0x290>)
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d012      	beq.n	8009212 <MX_GPIO_Init+0x1ea>
	{
		HAL_GPIO_WritePin(DIO4.PORT, DIO4.PIN, GPIO_PIN_RESET);
 80091ec:	4b30      	ldr	r3, [pc, #192]	; (80092b0 <MX_GPIO_Init+0x288>)
 80091ee:	2110      	movs	r1, #16
 80091f0:	2200      	movs	r2, #0
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fa fb3a 	bl	800386c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO4.PIN;
 80091f8:	2310      	movs	r3, #16
 80091fa:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091fc:	2300      	movs	r3, #0
 80091fe:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009200:	2300      	movs	r3, #0
 8009202:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO4.PORT, &GPIO_InitStruct);
 8009204:	4a2a      	ldr	r2, [pc, #168]	; (80092b0 <MX_GPIO_Init+0x288>)
 8009206:	f107 030c 	add.w	r3, r7, #12
 800920a:	4619      	mov	r1, r3
 800920c:	4610      	mov	r0, r2
 800920e:	f7fa f993 	bl	8003538 <HAL_GPIO_Init>
	}

	if(Digital_In_EN && (1<<2))
 8009212:	4b29      	ldr	r3, [pc, #164]	; (80092b8 <MX_GPIO_Init+0x290>)
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d012      	beq.n	8009240 <MX_GPIO_Init+0x218>
	{
		HAL_GPIO_WritePin(DIO5.PORT, DIO5.PIN, GPIO_PIN_RESET);
 800921a:	4b25      	ldr	r3, [pc, #148]	; (80092b0 <MX_GPIO_Init+0x288>)
 800921c:	2120      	movs	r1, #32
 800921e:	2200      	movs	r2, #0
 8009220:	4618      	mov	r0, r3
 8009222:	f7fa fb23 	bl	800386c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO5.PIN;
 8009226:	2320      	movs	r3, #32
 8009228:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800922a:	2300      	movs	r3, #0
 800922c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800922e:	2300      	movs	r3, #0
 8009230:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO5.PORT, &GPIO_InitStruct);
 8009232:	4a1f      	ldr	r2, [pc, #124]	; (80092b0 <MX_GPIO_Init+0x288>)
 8009234:	f107 030c 	add.w	r3, r7, #12
 8009238:	4619      	mov	r1, r3
 800923a:	4610      	mov	r0, r2
 800923c:	f7fa f97c 	bl	8003538 <HAL_GPIO_Init>
	}

	if(Digital_In_EN && (1<<3))
 8009240:	4b1d      	ldr	r3, [pc, #116]	; (80092b8 <MX_GPIO_Init+0x290>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d012      	beq.n	800926e <MX_GPIO_Init+0x246>
	{
		HAL_GPIO_WritePin(DIO6.PORT, DIO6.PIN, GPIO_PIN_RESET);
 8009248:	4b19      	ldr	r3, [pc, #100]	; (80092b0 <MX_GPIO_Init+0x288>)
 800924a:	2140      	movs	r1, #64	; 0x40
 800924c:	2200      	movs	r2, #0
 800924e:	4618      	mov	r0, r3
 8009250:	f7fa fb0c 	bl	800386c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO6.PIN;
 8009254:	2340      	movs	r3, #64	; 0x40
 8009256:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009258:	2300      	movs	r3, #0
 800925a:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800925c:	2300      	movs	r3, #0
 800925e:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO6.PORT, &GPIO_InitStruct);
 8009260:	4a13      	ldr	r2, [pc, #76]	; (80092b0 <MX_GPIO_Init+0x288>)
 8009262:	f107 030c 	add.w	r3, r7, #12
 8009266:	4619      	mov	r1, r3
 8009268:	4610      	mov	r0, r2
 800926a:	f7fa f965 	bl	8003538 <HAL_GPIO_Init>
	}

	if(Digital_In_EN && (1<<4))
 800926e:	4b12      	ldr	r3, [pc, #72]	; (80092b8 <MX_GPIO_Init+0x290>)
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d016      	beq.n	80092a4 <MX_GPIO_Init+0x27c>
	{
		HAL_GPIO_WritePin(DIO15.PORT, DIO15.PIN, GPIO_PIN_RESET);
 8009276:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800927a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800927e:	2200      	movs	r2, #0
 8009280:	4618      	mov	r0, r3
 8009282:	f7fa faf3 	bl	800386c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO15.PIN;
 8009286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800928a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800928c:	2300      	movs	r3, #0
 800928e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009290:	2300      	movs	r3, #0
 8009292:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO15.PORT, &GPIO_InitStruct);
 8009294:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8009298:	f107 030c 	add.w	r3, r7, #12
 800929c:	4619      	mov	r1, r3
 800929e:	4610      	mov	r0, r2
 80092a0:	f7fa f94a 	bl	8003538 <HAL_GPIO_Init>
	}
}
 80092a4:	bf00      	nop
 80092a6:	3720      	adds	r7, #32
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	40021000 	.word	0x40021000
 80092b0:	48000400 	.word	0x48000400
 80092b4:	20000477 	.word	0x20000477
 80092b8:	200000e0 	.word	0x200000e0

080092bc <MX_TIM1_Init>:


static void MX_TIM1_Init(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
	htim1.Instance = TIM1;
 80092c0:	4b0c      	ldr	r3, [pc, #48]	; (80092f4 <MX_TIM1_Init+0x38>)
 80092c2:	4a0d      	ldr	r2, [pc, #52]	; (80092f8 <MX_TIM1_Init+0x3c>)
 80092c4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 16999; //resolution in 100's of us
 80092c6:	4b0b      	ldr	r3, [pc, #44]	; (80092f4 <MX_TIM1_Init+0x38>)
 80092c8:	f244 2267 	movw	r2, #16999	; 0x4267
 80092cc:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80092ce:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <MX_TIM1_Init+0x38>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = SampleTemperatureVoltagePeriod;
 80092d4:	4b09      	ldr	r3, [pc, #36]	; (80092fc <MX_TIM1_Init+0x40>)
 80092d6:	881b      	ldrh	r3, [r3, #0]
 80092d8:	461a      	mov	r2, r3
 80092da:	4b06      	ldr	r3, [pc, #24]	; (80092f4 <MX_TIM1_Init+0x38>)
 80092dc:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim1) !=HAL_OK)
 80092de:	4805      	ldr	r0, [pc, #20]	; (80092f4 <MX_TIM1_Init+0x38>)
 80092e0:	f7fb fa8e 	bl	8004800 <HAL_TIM_Base_Init>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <MX_TIM1_Init+0x32>
	{
		Error_Handler();
 80092ea:	f000 fc1d 	bl	8009b28 <Error_Handler>
	}
}
 80092ee:	bf00      	nop
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	20000778 	.word	0x20000778
 80092f8:	40012c00 	.word	0x40012c00
 80092fc:	200008bc 	.word	0x200008bc

08009300 <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	af00      	add	r7, sp, #0
	htim6.Instance = TIM6;
 8009304:	4b0d      	ldr	r3, [pc, #52]	; (800933c <MX_TIM6_Init+0x3c>)
 8009306:	4a0e      	ldr	r2, [pc, #56]	; (8009340 <MX_TIM6_Init+0x40>)
 8009308:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 16999;
 800930a:	4b0c      	ldr	r3, [pc, #48]	; (800933c <MX_TIM6_Init+0x3c>)
 800930c:	f244 2267 	movw	r2, #16999	; 0x4267
 8009310:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009312:	4b0a      	ldr	r3, [pc, #40]	; (800933c <MX_TIM6_Init+0x3c>)
 8009314:	2200      	movs	r2, #0
 8009316:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = Can_Interval;
 8009318:	4b0a      	ldr	r3, [pc, #40]	; (8009344 <MX_TIM6_Init+0x44>)
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	461a      	mov	r2, r3
 800931e:	4b07      	ldr	r3, [pc, #28]	; (800933c <MX_TIM6_Init+0x3c>)
 8009320:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009322:	4b06      	ldr	r3, [pc, #24]	; (800933c <MX_TIM6_Init+0x3c>)
 8009324:	2200      	movs	r2, #0
 8009326:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009328:	4804      	ldr	r0, [pc, #16]	; (800933c <MX_TIM6_Init+0x3c>)
 800932a:	f7fb fa69 	bl	8004800 <HAL_TIM_Base_Init>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <MX_TIM6_Init+0x38>
	{
		Error_Handler();
 8009334:	f000 fbf8 	bl	8009b28 <Error_Handler>
	}
}
 8009338:	bf00      	nop
 800933a:	bd80      	pop	{r7, pc}
 800933c:	2000072c 	.word	0x2000072c
 8009340:	40001000 	.word	0x40001000
 8009344:	200000e4 	.word	0x200000e4

08009348 <MX_TIM7_Init>:

static void MX_TIM7_Init(void)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	af00      	add	r7, sp, #0
	htim7.Instance = TIM7;
 800934c:	4b0d      	ldr	r3, [pc, #52]	; (8009384 <MX_TIM7_Init+0x3c>)
 800934e:	4a0e      	ldr	r2, [pc, #56]	; (8009388 <MX_TIM7_Init+0x40>)
 8009350:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 16999;
 8009352:	4b0c      	ldr	r3, [pc, #48]	; (8009384 <MX_TIM7_Init+0x3c>)
 8009354:	f244 2267 	movw	r2, #16999	; 0x4267
 8009358:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800935a:	4b0a      	ldr	r3, [pc, #40]	; (8009384 <MX_TIM7_Init+0x3c>)
 800935c:	2200      	movs	r2, #0
 800935e:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = ERROR_PERIOD_100US;
 8009360:	4b08      	ldr	r3, [pc, #32]	; (8009384 <MX_TIM7_Init+0x3c>)
 8009362:	f242 7210 	movw	r2, #10000	; 0x2710
 8009366:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009368:	4b06      	ldr	r3, [pc, #24]	; (8009384 <MX_TIM7_Init+0x3c>)
 800936a:	2200      	movs	r2, #0
 800936c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800936e:	4805      	ldr	r0, [pc, #20]	; (8009384 <MX_TIM7_Init+0x3c>)
 8009370:	f7fb fa46 	bl	8004800 <HAL_TIM_Base_Init>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <MX_TIM7_Init+0x36>
	{
		Error_Handler();
 800937a:	f000 fbd5 	bl	8009b28 <Error_Handler>
	}
}
 800937e:	bf00      	nop
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	200009f4 	.word	0x200009f4
 8009388:	40001400 	.word	0x40001400

0800938c <MX_TIM15_Init>:

static void MX_TIM15_Init(void)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	af00      	add	r7, sp, #0
	htim15.Instance = TIM15;
 8009390:	4b0b      	ldr	r3, [pc, #44]	; (80093c0 <MX_TIM15_Init+0x34>)
 8009392:	4a0c      	ldr	r2, [pc, #48]	; (80093c4 <MX_TIM15_Init+0x38>)
 8009394:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 16;
 8009396:	4b0a      	ldr	r3, [pc, #40]	; (80093c0 <MX_TIM15_Init+0x34>)
 8009398:	2210      	movs	r2, #16
 800939a:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800939c:	4b08      	ldr	r3, [pc, #32]	; (80093c0 <MX_TIM15_Init+0x34>)
 800939e:	2200      	movs	r2, #0
 80093a0:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 1000; //this corresponds to 100us, as going at max speed (20us) seems to be too fast
 80093a2:	4b07      	ldr	r3, [pc, #28]	; (80093c0 <MX_TIM15_Init+0x34>)
 80093a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80093a8:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80093aa:	4805      	ldr	r0, [pc, #20]	; (80093c0 <MX_TIM15_Init+0x34>)
 80093ac:	f7fb fa28 	bl	8004800 <HAL_TIM_Base_Init>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <MX_TIM15_Init+0x2e>
	{
		Error_Handler();
 80093b6:	f000 fbb7 	bl	8009b28 <Error_Handler>
	}
}
 80093ba:	bf00      	nop
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	20000300 	.word	0x20000300
 80093c4:	40014000 	.word	0x40014000

080093c8 <MX_TIM16_Init>:

static void MX_TIM16_Init(void)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	af00      	add	r7, sp, #0
	htim16.Instance = TIM16;
 80093cc:	4b0f      	ldr	r3, [pc, #60]	; (800940c <MX_TIM16_Init+0x44>)
 80093ce:	4a10      	ldr	r2, [pc, #64]	; (8009410 <MX_TIM16_Init+0x48>)
 80093d0:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 1699; //10us resolution
 80093d2:	4b0e      	ldr	r3, [pc, #56]	; (800940c <MX_TIM16_Init+0x44>)
 80093d4:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80093d8:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80093da:	4b0c      	ldr	r3, [pc, #48]	; (800940c <MX_TIM16_Init+0x44>)
 80093dc:	2200      	movs	r2, #0
 80093de:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = Can_Sync_Delay;
 80093e0:	4b0c      	ldr	r3, [pc, #48]	; (8009414 <MX_TIM16_Init+0x4c>)
 80093e2:	881b      	ldrh	r3, [r3, #0]
 80093e4:	461a      	mov	r2, r3
 80093e6:	4b09      	ldr	r3, [pc, #36]	; (800940c <MX_TIM16_Init+0x44>)
 80093e8:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80093ea:	4b08      	ldr	r3, [pc, #32]	; (800940c <MX_TIM16_Init+0x44>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	611a      	str	r2, [r3, #16]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80093f0:	4b06      	ldr	r3, [pc, #24]	; (800940c <MX_TIM16_Init+0x44>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80093f6:	4805      	ldr	r0, [pc, #20]	; (800940c <MX_TIM16_Init+0x44>)
 80093f8:	f7fb fa02 	bl	8004800 <HAL_TIM_Base_Init>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <MX_TIM16_Init+0x3e>
	{
		Error_Handler();
 8009402:	f000 fb91 	bl	8009b28 <Error_Handler>
	}
}
 8009406:	bf00      	nop
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	200009b4 	.word	0x200009b4
 8009410:	40014400 	.word	0x40014400
 8009414:	2000040c 	.word	0x2000040c

08009418 <MX_TIM17_Init>:

static void MX_TIM17_Init(void)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b088      	sub	sp, #32
 800941c:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef sConfigOC = {0};
 800941e:	1d3b      	adds	r3, r7, #4
 8009420:	2200      	movs	r2, #0
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	605a      	str	r2, [r3, #4]
 8009426:	609a      	str	r2, [r3, #8]
 8009428:	60da      	str	r2, [r3, #12]
 800942a:	611a      	str	r2, [r3, #16]
 800942c:	615a      	str	r2, [r3, #20]
 800942e:	619a      	str	r2, [r3, #24]

	htim17.Instance = TIM17;
 8009430:	4b2b      	ldr	r3, [pc, #172]	; (80094e0 <MX_TIM17_Init+0xc8>)
 8009432:	4a2c      	ldr	r2, [pc, #176]	; (80094e4 <MX_TIM17_Init+0xcc>)
 8009434:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = PWM_Prescalers[2];
 8009436:	4b2c      	ldr	r3, [pc, #176]	; (80094e8 <MX_TIM17_Init+0xd0>)
 8009438:	889b      	ldrh	r3, [r3, #4]
 800943a:	461a      	mov	r2, r3
 800943c:	4b28      	ldr	r3, [pc, #160]	; (80094e0 <MX_TIM17_Init+0xc8>)
 800943e:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009440:	4b27      	ldr	r3, [pc, #156]	; (80094e0 <MX_TIM17_Init+0xc8>)
 8009442:	2200      	movs	r2, #0
 8009444:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 255; //pulse will be from 0 to 255
 8009446:	4b26      	ldr	r3, [pc, #152]	; (80094e0 <MX_TIM17_Init+0xc8>)
 8009448:	22ff      	movs	r2, #255	; 0xff
 800944a:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800944c:	4b24      	ldr	r3, [pc, #144]	; (80094e0 <MX_TIM17_Init+0xc8>)
 800944e:	2200      	movs	r2, #0
 8009450:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8009452:	4b23      	ldr	r3, [pc, #140]	; (80094e0 <MX_TIM17_Init+0xc8>)
 8009454:	2200      	movs	r2, #0
 8009456:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009458:	4b21      	ldr	r3, [pc, #132]	; (80094e0 <MX_TIM17_Init+0xc8>)
 800945a:	2200      	movs	r2, #0
 800945c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800945e:	4820      	ldr	r0, [pc, #128]	; (80094e0 <MX_TIM17_Init+0xc8>)
 8009460:	f7fb f9ce 	bl	8004800 <HAL_TIM_Base_Init>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <MX_TIM17_Init+0x56>
	{
		Error_Handler();
 800946a:	f000 fb5d 	bl	8009b28 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800946e:	481c      	ldr	r0, [pc, #112]	; (80094e0 <MX_TIM17_Init+0xc8>)
 8009470:	f7fb fa47 	bl	8004902 <HAL_TIM_PWM_Init>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <MX_TIM17_Init+0x66>
	{
		Error_Handler();
 800947a:	f000 fb55 	bl	8009b28 <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800947e:	2360      	movs	r3, #96	; 0x60
 8009480:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = PWM_Pulses[2];
 8009482:	4b1a      	ldr	r3, [pc, #104]	; (80094ec <MX_TIM17_Init+0xd4>)
 8009484:	889b      	ldrh	r3, [r3, #4]
 8009486:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009488:	2300      	movs	r3, #0
 800948a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800948c:	2300      	movs	r3, #0
 800948e:	613b      	str	r3, [r7, #16]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009490:	2300      	movs	r3, #0
 8009492:	617b      	str	r3, [r7, #20]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009494:	2300      	movs	r3, #0
 8009496:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009498:	2300      	movs	r3, #0
 800949a:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800949c:	1d3b      	adds	r3, r7, #4
 800949e:	2200      	movs	r2, #0
 80094a0:	4619      	mov	r1, r3
 80094a2:	480f      	ldr	r0, [pc, #60]	; (80094e0 <MX_TIM17_Init+0xc8>)
 80094a4:	f7fb fd64 	bl	8004f70 <HAL_TIM_PWM_ConfigChannel>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <MX_TIM17_Init+0x9a>
	{
		Error_Handler();
 80094ae:	f000 fb3b 	bl	8009b28 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim17);
 80094b2:	480b      	ldr	r0, [pc, #44]	; (80094e0 <MX_TIM17_Init+0xc8>)
 80094b4:	f000 fe2a 	bl	800a10c <HAL_TIM_MspPostInit>

	if(PWM_Out_EN&(1<<2))
 80094b8:	4b0d      	ldr	r3, [pc, #52]	; (80094f0 <MX_TIM17_Init+0xd8>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	f003 0304 	and.w	r3, r3, #4
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d008      	beq.n	80094d6 <MX_TIM17_Init+0xbe>
	{
		if (HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1) != HAL_OK)
 80094c4:	2100      	movs	r1, #0
 80094c6:	4806      	ldr	r0, [pc, #24]	; (80094e0 <MX_TIM17_Init+0xc8>)
 80094c8:	f7fb fa46 	bl	8004958 <HAL_TIM_PWM_Start>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <MX_TIM17_Init+0xbe>
		{
			Error_Handler();
 80094d2:	f000 fb29 	bl	8009b28 <Error_Handler>
		}
	}
}
 80094d6:	bf00      	nop
 80094d8:	3720      	adds	r7, #32
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	200003cc 	.word	0x200003cc
 80094e4:	40014800 	.word	0x40014800
 80094e8:	20000554 	.word	0x20000554
 80094ec:	2000076c 	.word	0x2000076c
 80094f0:	20000924 	.word	0x20000924

080094f4 <MX_TIM2_Init>:

static void MX_TIM2_Init()
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b094      	sub	sp, #80	; 0x50
 80094f8:	af00      	add	r7, sp, #0
	if (!(PWM_In_EN>>0)&1) //default if pin is not used as pwm input
 80094fa:	4b68      	ldr	r3, [pc, #416]	; (800969c <MX_TIM2_Init+0x1a8>)
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d14f      	bne.n	80095a2 <MX_TIM2_Init+0xae>
	{
		TIM_OC_InitTypeDef sConfigOC = {0};
 8009502:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009506:	2200      	movs	r2, #0
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	605a      	str	r2, [r3, #4]
 800950c:	609a      	str	r2, [r3, #8]
 800950e:	60da      	str	r2, [r3, #12]
 8009510:	611a      	str	r2, [r3, #16]
 8009512:	615a      	str	r2, [r3, #20]
 8009514:	619a      	str	r2, [r3, #24]

		htim2.Instance = TIM2;
 8009516:	4b62      	ldr	r3, [pc, #392]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 8009518:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800951c:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = PWM_Prescalers[0];
 800951e:	4b61      	ldr	r3, [pc, #388]	; (80096a4 <MX_TIM2_Init+0x1b0>)
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	4b5e      	ldr	r3, [pc, #376]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 8009526:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009528:	4b5d      	ldr	r3, [pc, #372]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 800952a:	2200      	movs	r2, #0
 800952c:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 255;
 800952e:	4b5c      	ldr	r3, [pc, #368]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 8009530:	22ff      	movs	r2, #255	; 0xff
 8009532:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009534:	4b5a      	ldr	r3, [pc, #360]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 8009536:	2200      	movs	r2, #0
 8009538:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800953a:	4b59      	ldr	r3, [pc, #356]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 800953c:	2200      	movs	r2, #0
 800953e:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009540:	4857      	ldr	r0, [pc, #348]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 8009542:	f7fb f9de 	bl	8004902 <HAL_TIM_PWM_Init>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <MX_TIM2_Init+0x5c>
		{
			Error_Handler();
 800954c:	f000 faec 	bl	8009b28 <Error_Handler>
		}

		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009550:	2360      	movs	r3, #96	; 0x60
 8009552:	637b      	str	r3, [r7, #52]	; 0x34
		sConfigOC.Pulse = PWM_Pulses[0];
 8009554:	4b54      	ldr	r3, [pc, #336]	; (80096a8 <MX_TIM2_Init+0x1b4>)
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	63bb      	str	r3, [r7, #56]	; 0x38
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800955a:	2300      	movs	r3, #0
 800955c:	63fb      	str	r3, [r7, #60]	; 0x3c
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800955e:	2300      	movs	r3, #0
 8009560:	647b      	str	r3, [r7, #68]	; 0x44
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009562:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009566:	2204      	movs	r2, #4
 8009568:	4619      	mov	r1, r3
 800956a:	484d      	ldr	r0, [pc, #308]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 800956c:	f7fb fd00 	bl	8004f70 <HAL_TIM_PWM_ConfigChannel>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <MX_TIM2_Init+0x86>
		{
			Error_Handler();
 8009576:	f000 fad7 	bl	8009b28 <Error_Handler>
		}

		HAL_TIM_MspPostInit(&htim2);
 800957a:	4849      	ldr	r0, [pc, #292]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 800957c:	f000 fdc6 	bl	800a10c <HAL_TIM_MspPostInit>

		if(PWM_Out_EN&(1<<0))
 8009580:	4b4a      	ldr	r3, [pc, #296]	; (80096ac <MX_TIM2_Init+0x1b8>)
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 8083 	beq.w	8009694 <MX_TIM2_Init+0x1a0>
		{
			if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 800958e:	2104      	movs	r1, #4
 8009590:	4843      	ldr	r0, [pc, #268]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 8009592:	f7fb f9e1 	bl	8004958 <HAL_TIM_PWM_Start>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d07b      	beq.n	8009694 <MX_TIM2_Init+0x1a0>
			{
				Error_Handler();
 800959c:	f000 fac4 	bl	8009b28 <Error_Handler>
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
		{
			Error_Handler();
		}
	}
}
 80095a0:	e078      	b.n	8009694 <MX_TIM2_Init+0x1a0>
		TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80095a2:	f107 0320 	add.w	r3, r7, #32
 80095a6:	2200      	movs	r2, #0
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	605a      	str	r2, [r3, #4]
 80095ac:	609a      	str	r2, [r3, #8]
 80095ae:	60da      	str	r2, [r3, #12]
 80095b0:	611a      	str	r2, [r3, #16]
		TIM_IC_InitTypeDef sConfigIC = {0};
 80095b2:	f107 0310 	add.w	r3, r7, #16
 80095b6:	2200      	movs	r2, #0
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	605a      	str	r2, [r3, #4]
 80095bc:	609a      	str	r2, [r3, #8]
 80095be:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 80095c0:	1d3b      	adds	r3, r7, #4
 80095c2:	2200      	movs	r2, #0
 80095c4:	601a      	str	r2, [r3, #0]
 80095c6:	605a      	str	r2, [r3, #4]
 80095c8:	609a      	str	r2, [r3, #8]
		htim2.Instance = TIM2;
 80095ca:	4b35      	ldr	r3, [pc, #212]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 80095cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80095d0:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = PWM_Prescalers[0];
 80095d2:	4b34      	ldr	r3, [pc, #208]	; (80096a4 <MX_TIM2_Init+0x1b0>)
 80095d4:	881b      	ldrh	r3, [r3, #0]
 80095d6:	461a      	mov	r2, r3
 80095d8:	4b31      	ldr	r3, [pc, #196]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 80095da:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095dc:	4b30      	ldr	r3, [pc, #192]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 80095de:	2200      	movs	r2, #0
 80095e0:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 65535;
 80095e2:	4b2f      	ldr	r3, [pc, #188]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 80095e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095e8:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80095ea:	4b2d      	ldr	r3, [pc, #180]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095f0:	4b2b      	ldr	r3, [pc, #172]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80095f6:	482a      	ldr	r0, [pc, #168]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 80095f8:	f7fb fa74 	bl	8004ae4 <HAL_TIM_IC_Init>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <MX_TIM2_Init+0x112>
			Error_Handler();
 8009602:	f000 fa91 	bl	8009b28 <Error_Handler>
		sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8009606:	2304      	movs	r3, #4
 8009608:	623b      	str	r3, [r7, #32]
		sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800960a:	2360      	movs	r3, #96	; 0x60
 800960c:	627b      	str	r3, [r7, #36]	; 0x24
		sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800960e:	2302      	movs	r3, #2
 8009610:	62bb      	str	r3, [r7, #40]	; 0x28
		sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8009612:	2300      	movs	r3, #0
 8009614:	62fb      	str	r3, [r7, #44]	; 0x2c
		sSlaveConfig.TriggerFilter = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800961a:	f107 0320 	add.w	r3, r7, #32
 800961e:	4619      	mov	r1, r3
 8009620:	481f      	ldr	r0, [pc, #124]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 8009622:	f7fb fdbd 	bl	80051a0 <HAL_TIM_SlaveConfigSynchro>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <MX_TIM2_Init+0x13c>
			Error_Handler();
 800962c:	f000 fa7c 	bl	8009b28 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8009630:	2300      	movs	r3, #0
 8009632:	613b      	str	r3, [r7, #16]
		sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8009634:	2302      	movs	r3, #2
 8009636:	617b      	str	r3, [r7, #20]
		sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8009638:	2300      	movs	r3, #0
 800963a:	61bb      	str	r3, [r7, #24]
		sConfigIC.ICFilter = 0;
 800963c:	2300      	movs	r3, #0
 800963e:	61fb      	str	r3, [r7, #28]
		if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8009640:	f107 0310 	add.w	r3, r7, #16
 8009644:	2200      	movs	r2, #0
 8009646:	4619      	mov	r1, r3
 8009648:	4815      	ldr	r0, [pc, #84]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 800964a:	f7fb fbf5 	bl	8004e38 <HAL_TIM_IC_ConfigChannel>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <MX_TIM2_Init+0x164>
			Error_Handler();
 8009654:	f000 fa68 	bl	8009b28 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8009658:	2302      	movs	r3, #2
 800965a:	613b      	str	r3, [r7, #16]
		sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800965c:	2301      	movs	r3, #1
 800965e:	617b      	str	r3, [r7, #20]
		if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8009660:	f107 0310 	add.w	r3, r7, #16
 8009664:	2204      	movs	r2, #4
 8009666:	4619      	mov	r1, r3
 8009668:	480d      	ldr	r0, [pc, #52]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 800966a:	f7fb fbe5 	bl	8004e38 <HAL_TIM_IC_ConfigChannel>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <MX_TIM2_Init+0x184>
			Error_Handler();
 8009674:	f000 fa58 	bl	8009b28 <Error_Handler>
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009678:	2300      	movs	r3, #0
 800967a:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800967c:	2300      	movs	r3, #0
 800967e:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009680:	1d3b      	adds	r3, r7, #4
 8009682:	4619      	mov	r1, r3
 8009684:	4806      	ldr	r0, [pc, #24]	; (80096a0 <MX_TIM2_Init+0x1ac>)
 8009686:	f7fc fc31 	bl	8005eec <HAL_TIMEx_MasterConfigSynchronization>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <MX_TIM2_Init+0x1a0>
			Error_Handler();
 8009690:	f000 fa4a 	bl	8009b28 <Error_Handler>
}
 8009694:	bf00      	nop
 8009696:	3750      	adds	r7, #80	; 0x50
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	20000476 	.word	0x20000476
 80096a0:	2000087c 	.word	0x2000087c
 80096a4:	20000554 	.word	0x20000554
 80096a8:	2000076c 	.word	0x2000076c
 80096ac:	20000924 	.word	0x20000924

080096b0 <MX_TIM3_Init>:

static void MX_TIM3_Init()
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b088      	sub	sp, #32
 80096b4:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef sConfigOC = {0};
 80096b6:	1d3b      	adds	r3, r7, #4
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	605a      	str	r2, [r3, #4]
 80096be:	609a      	str	r2, [r3, #8]
 80096c0:	60da      	str	r2, [r3, #12]
 80096c2:	611a      	str	r2, [r3, #16]
 80096c4:	615a      	str	r2, [r3, #20]
 80096c6:	619a      	str	r2, [r3, #24]

	htim3.Instance = TIM3;
 80096c8:	4b22      	ldr	r3, [pc, #136]	; (8009754 <MX_TIM3_Init+0xa4>)
 80096ca:	4a23      	ldr	r2, [pc, #140]	; (8009758 <MX_TIM3_Init+0xa8>)
 80096cc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = PWM_Prescalers[1];
 80096ce:	4b23      	ldr	r3, [pc, #140]	; (800975c <MX_TIM3_Init+0xac>)
 80096d0:	885b      	ldrh	r3, [r3, #2]
 80096d2:	461a      	mov	r2, r3
 80096d4:	4b1f      	ldr	r3, [pc, #124]	; (8009754 <MX_TIM3_Init+0xa4>)
 80096d6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096d8:	4b1e      	ldr	r3, [pc, #120]	; (8009754 <MX_TIM3_Init+0xa4>)
 80096da:	2200      	movs	r2, #0
 80096dc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 255;
 80096de:	4b1d      	ldr	r3, [pc, #116]	; (8009754 <MX_TIM3_Init+0xa4>)
 80096e0:	22ff      	movs	r2, #255	; 0xff
 80096e2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80096e4:	4b1b      	ldr	r3, [pc, #108]	; (8009754 <MX_TIM3_Init+0xa4>)
 80096e6:	2200      	movs	r2, #0
 80096e8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80096ea:	4b1a      	ldr	r3, [pc, #104]	; (8009754 <MX_TIM3_Init+0xa4>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80096f0:	4818      	ldr	r0, [pc, #96]	; (8009754 <MX_TIM3_Init+0xa4>)
 80096f2:	f7fb f906 	bl	8004902 <HAL_TIM_PWM_Init>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d001      	beq.n	8009700 <MX_TIM3_Init+0x50>
	{
		Error_Handler();
 80096fc:	f000 fa14 	bl	8009b28 <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009700:	2360      	movs	r3, #96	; 0x60
 8009702:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = PWM_Pulses[1];
 8009704:	4b16      	ldr	r3, [pc, #88]	; (8009760 <MX_TIM3_Init+0xb0>)
 8009706:	885b      	ldrh	r3, [r3, #2]
 8009708:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800970a:	2300      	movs	r3, #0
 800970c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800970e:	2300      	movs	r3, #0
 8009710:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009712:	1d3b      	adds	r3, r7, #4
 8009714:	2200      	movs	r2, #0
 8009716:	4619      	mov	r1, r3
 8009718:	480e      	ldr	r0, [pc, #56]	; (8009754 <MX_TIM3_Init+0xa4>)
 800971a:	f7fb fc29 	bl	8004f70 <HAL_TIM_PWM_ConfigChannel>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d001      	beq.n	8009728 <MX_TIM3_Init+0x78>
	{
		Error_Handler();
 8009724:	f000 fa00 	bl	8009b28 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim3);
 8009728:	480a      	ldr	r0, [pc, #40]	; (8009754 <MX_TIM3_Init+0xa4>)
 800972a:	f000 fcef 	bl	800a10c <HAL_TIM_MspPostInit>

	if(PWM_Out_EN&(1<<1))
 800972e:	4b0d      	ldr	r3, [pc, #52]	; (8009764 <MX_TIM3_Init+0xb4>)
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	f003 0302 	and.w	r3, r3, #2
 8009736:	2b00      	cmp	r3, #0
 8009738:	d008      	beq.n	800974c <MX_TIM3_Init+0x9c>
	{
		if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 800973a:	2100      	movs	r1, #0
 800973c:	4805      	ldr	r0, [pc, #20]	; (8009754 <MX_TIM3_Init+0xa4>)
 800973e:	f7fb f90b 	bl	8004958 <HAL_TIM_PWM_Start>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <MX_TIM3_Init+0x9c>
		{
			Error_Handler();
 8009748:	f000 f9ee 	bl	8009b28 <Error_Handler>
		}
	}
}
 800974c:	bf00      	nop
 800974e:	3720      	adds	r7, #32
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	20000504 	.word	0x20000504
 8009758:	40000400 	.word	0x40000400
 800975c:	20000554 	.word	0x20000554
 8009760:	2000076c 	.word	0x2000076c
 8009764:	20000924 	.word	0x20000924

08009768 <MX_TIM4_Init>:

static void MX_TIM4_Init()
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b094      	sub	sp, #80	; 0x50
 800976c:	af00      	add	r7, sp, #0
	if (!(PWM_In_EN>>0)&1) //default if pin is not used as pwm input
 800976e:	4b67      	ldr	r3, [pc, #412]	; (800990c <MX_TIM4_Init+0x1a4>)
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d14e      	bne.n	8009814 <MX_TIM4_Init+0xac>
	{
		TIM_OC_InitTypeDef sConfigOC = {0};
 8009776:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800977a:	2200      	movs	r2, #0
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	605a      	str	r2, [r3, #4]
 8009780:	609a      	str	r2, [r3, #8]
 8009782:	60da      	str	r2, [r3, #12]
 8009784:	611a      	str	r2, [r3, #16]
 8009786:	615a      	str	r2, [r3, #20]
 8009788:	619a      	str	r2, [r3, #24]

		htim4.Instance = TIM4;
 800978a:	4b61      	ldr	r3, [pc, #388]	; (8009910 <MX_TIM4_Init+0x1a8>)
 800978c:	4a61      	ldr	r2, [pc, #388]	; (8009914 <MX_TIM4_Init+0x1ac>)
 800978e:	601a      	str	r2, [r3, #0]
		htim4.Init.Prescaler = PWM_Prescalers[3];
 8009790:	4b61      	ldr	r3, [pc, #388]	; (8009918 <MX_TIM4_Init+0x1b0>)
 8009792:	88db      	ldrh	r3, [r3, #6]
 8009794:	461a      	mov	r2, r3
 8009796:	4b5e      	ldr	r3, [pc, #376]	; (8009910 <MX_TIM4_Init+0x1a8>)
 8009798:	605a      	str	r2, [r3, #4]
		htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800979a:	4b5d      	ldr	r3, [pc, #372]	; (8009910 <MX_TIM4_Init+0x1a8>)
 800979c:	2200      	movs	r2, #0
 800979e:	609a      	str	r2, [r3, #8]
		htim4.Init.Period = 255;
 80097a0:	4b5b      	ldr	r3, [pc, #364]	; (8009910 <MX_TIM4_Init+0x1a8>)
 80097a2:	22ff      	movs	r2, #255	; 0xff
 80097a4:	60da      	str	r2, [r3, #12]
		htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80097a6:	4b5a      	ldr	r3, [pc, #360]	; (8009910 <MX_TIM4_Init+0x1a8>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	611a      	str	r2, [r3, #16]
		htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80097ac:	4b58      	ldr	r3, [pc, #352]	; (8009910 <MX_TIM4_Init+0x1a8>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80097b2:	4857      	ldr	r0, [pc, #348]	; (8009910 <MX_TIM4_Init+0x1a8>)
 80097b4:	f7fb f8a5 	bl	8004902 <HAL_TIM_PWM_Init>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <MX_TIM4_Init+0x5a>
		{
			Error_Handler();
 80097be:	f000 f9b3 	bl	8009b28 <Error_Handler>
		}

		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80097c2:	2360      	movs	r3, #96	; 0x60
 80097c4:	637b      	str	r3, [r7, #52]	; 0x34
		sConfigOC.Pulse = PWM_Pulses[3];
 80097c6:	4b55      	ldr	r3, [pc, #340]	; (800991c <MX_TIM4_Init+0x1b4>)
 80097c8:	88db      	ldrh	r3, [r3, #6]
 80097ca:	63bb      	str	r3, [r7, #56]	; 0x38
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80097cc:	2300      	movs	r3, #0
 80097ce:	63fb      	str	r3, [r7, #60]	; 0x3c
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80097d0:	2300      	movs	r3, #0
 80097d2:	647b      	str	r3, [r7, #68]	; 0x44
		if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80097d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80097d8:	2200      	movs	r2, #0
 80097da:	4619      	mov	r1, r3
 80097dc:	484c      	ldr	r0, [pc, #304]	; (8009910 <MX_TIM4_Init+0x1a8>)
 80097de:	f7fb fbc7 	bl	8004f70 <HAL_TIM_PWM_ConfigChannel>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <MX_TIM4_Init+0x84>
		{
			Error_Handler();
 80097e8:	f000 f99e 	bl	8009b28 <Error_Handler>
		}

		HAL_TIM_MspPostInit(&htim4);
 80097ec:	4848      	ldr	r0, [pc, #288]	; (8009910 <MX_TIM4_Init+0x1a8>)
 80097ee:	f000 fc8d 	bl	800a10c <HAL_TIM_MspPostInit>

		if(PWM_Out_EN&(1<<3))
 80097f2:	4b4b      	ldr	r3, [pc, #300]	; (8009920 <MX_TIM4_Init+0x1b8>)
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	f003 0308 	and.w	r3, r3, #8
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 8081 	beq.w	8009902 <MX_TIM4_Init+0x19a>
		{
			if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 8009800:	2100      	movs	r1, #0
 8009802:	4843      	ldr	r0, [pc, #268]	; (8009910 <MX_TIM4_Init+0x1a8>)
 8009804:	f7fb f8a8 	bl	8004958 <HAL_TIM_PWM_Start>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d079      	beq.n	8009902 <MX_TIM4_Init+0x19a>
			{
				Error_Handler();
 800980e:	f000 f98b 	bl	8009b28 <Error_Handler>
		if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
		{
			Error_Handler();
		}
	}
}
 8009812:	e076      	b.n	8009902 <MX_TIM4_Init+0x19a>
		TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8009814:	f107 0320 	add.w	r3, r7, #32
 8009818:	2200      	movs	r2, #0
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	605a      	str	r2, [r3, #4]
 800981e:	609a      	str	r2, [r3, #8]
 8009820:	60da      	str	r2, [r3, #12]
 8009822:	611a      	str	r2, [r3, #16]
		TIM_IC_InitTypeDef sConfigIC = {0};
 8009824:	f107 0310 	add.w	r3, r7, #16
 8009828:	2200      	movs	r2, #0
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	605a      	str	r2, [r3, #4]
 800982e:	609a      	str	r2, [r3, #8]
 8009830:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009832:	1d3b      	adds	r3, r7, #4
 8009834:	2200      	movs	r2, #0
 8009836:	601a      	str	r2, [r3, #0]
 8009838:	605a      	str	r2, [r3, #4]
 800983a:	609a      	str	r2, [r3, #8]
		htim4.Instance = TIM4;
 800983c:	4b34      	ldr	r3, [pc, #208]	; (8009910 <MX_TIM4_Init+0x1a8>)
 800983e:	4a35      	ldr	r2, [pc, #212]	; (8009914 <MX_TIM4_Init+0x1ac>)
 8009840:	601a      	str	r2, [r3, #0]
		htim4.Init.Prescaler = 999;
 8009842:	4b33      	ldr	r3, [pc, #204]	; (8009910 <MX_TIM4_Init+0x1a8>)
 8009844:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009848:	605a      	str	r2, [r3, #4]
		htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800984a:	4b31      	ldr	r3, [pc, #196]	; (8009910 <MX_TIM4_Init+0x1a8>)
 800984c:	2200      	movs	r2, #0
 800984e:	609a      	str	r2, [r3, #8]
		htim4.Init.Period = 65535;
 8009850:	4b2f      	ldr	r3, [pc, #188]	; (8009910 <MX_TIM4_Init+0x1a8>)
 8009852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009856:	60da      	str	r2, [r3, #12]
		htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009858:	4b2d      	ldr	r3, [pc, #180]	; (8009910 <MX_TIM4_Init+0x1a8>)
 800985a:	2200      	movs	r2, #0
 800985c:	611a      	str	r2, [r3, #16]
		htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800985e:	4b2c      	ldr	r3, [pc, #176]	; (8009910 <MX_TIM4_Init+0x1a8>)
 8009860:	2200      	movs	r2, #0
 8009862:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8009864:	482a      	ldr	r0, [pc, #168]	; (8009910 <MX_TIM4_Init+0x1a8>)
 8009866:	f7fb f93d 	bl	8004ae4 <HAL_TIM_IC_Init>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <MX_TIM4_Init+0x10c>
			Error_Handler();
 8009870:	f000 f95a 	bl	8009b28 <Error_Handler>
		sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8009874:	2304      	movs	r3, #4
 8009876:	623b      	str	r3, [r7, #32]
		sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8009878:	2350      	movs	r3, #80	; 0x50
 800987a:	627b      	str	r3, [r7, #36]	; 0x24
		sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800987c:	2300      	movs	r3, #0
 800987e:	62bb      	str	r3, [r7, #40]	; 0x28
		sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8009880:	2300      	movs	r3, #0
 8009882:	62fb      	str	r3, [r7, #44]	; 0x2c
		sSlaveConfig.TriggerFilter = 0;
 8009884:	2300      	movs	r3, #0
 8009886:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8009888:	f107 0320 	add.w	r3, r7, #32
 800988c:	4619      	mov	r1, r3
 800988e:	4820      	ldr	r0, [pc, #128]	; (8009910 <MX_TIM4_Init+0x1a8>)
 8009890:	f7fb fc86 	bl	80051a0 <HAL_TIM_SlaveConfigSynchro>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <MX_TIM4_Init+0x136>
			Error_Handler();
 800989a:	f000 f945 	bl	8009b28 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800989e:	2300      	movs	r3, #0
 80098a0:	613b      	str	r3, [r7, #16]
		sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80098a2:	2301      	movs	r3, #1
 80098a4:	617b      	str	r3, [r7, #20]
		sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80098a6:	2300      	movs	r3, #0
 80098a8:	61bb      	str	r3, [r7, #24]
		sConfigIC.ICFilter = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	61fb      	str	r3, [r7, #28]
		if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80098ae:	f107 0310 	add.w	r3, r7, #16
 80098b2:	2200      	movs	r2, #0
 80098b4:	4619      	mov	r1, r3
 80098b6:	4816      	ldr	r0, [pc, #88]	; (8009910 <MX_TIM4_Init+0x1a8>)
 80098b8:	f7fb fabe 	bl	8004e38 <HAL_TIM_IC_ConfigChannel>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <MX_TIM4_Init+0x15e>
			Error_Handler();
 80098c2:	f000 f931 	bl	8009b28 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80098c6:	2302      	movs	r3, #2
 80098c8:	613b      	str	r3, [r7, #16]
		sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80098ca:	2302      	movs	r3, #2
 80098cc:	617b      	str	r3, [r7, #20]
		if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80098ce:	f107 0310 	add.w	r3, r7, #16
 80098d2:	2204      	movs	r2, #4
 80098d4:	4619      	mov	r1, r3
 80098d6:	480e      	ldr	r0, [pc, #56]	; (8009910 <MX_TIM4_Init+0x1a8>)
 80098d8:	f7fb faae 	bl	8004e38 <HAL_TIM_IC_ConfigChannel>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <MX_TIM4_Init+0x17e>
			Error_Handler();
 80098e2:	f000 f921 	bl	8009b28 <Error_Handler>
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80098e6:	2300      	movs	r3, #0
 80098e8:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80098ea:	2300      	movs	r3, #0
 80098ec:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80098ee:	1d3b      	adds	r3, r7, #4
 80098f0:	4619      	mov	r1, r3
 80098f2:	4807      	ldr	r0, [pc, #28]	; (8009910 <MX_TIM4_Init+0x1a8>)
 80098f4:	f7fc fafa 	bl	8005eec <HAL_TIMEx_MasterConfigSynchronization>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <MX_TIM4_Init+0x19a>
			Error_Handler();
 80098fe:	f000 f913 	bl	8009b28 <Error_Handler>
}
 8009902:	bf00      	nop
 8009904:	3750      	adds	r7, #80	; 0x50
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	20000476 	.word	0x20000476
 8009910:	200001ac 	.word	0x200001ac
 8009914:	40000800 	.word	0x40000800
 8009918:	20000554 	.word	0x20000554
 800991c:	2000076c 	.word	0x2000076c
 8009920:	20000924 	.word	0x20000924

08009924 <MX_TIM8_Init>:

static void MX_TIM8_Init()
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b0a0      	sub	sp, #128	; 0x80
 8009928:	af00      	add	r7, sp, #0
	if (!(PWM_In_EN>>4)&1) //default if pin is not used as a pwm input
 800992a:	4b79      	ldr	r3, [pc, #484]	; (8009b10 <MX_TIM8_Init+0x1ec>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	091b      	lsrs	r3, r3, #4
 8009930:	b2db      	uxtb	r3, r3
 8009932:	2b00      	cmp	r3, #0
 8009934:	d158      	bne.n	80099e8 <MX_TIM8_Init+0xc4>
	{
		TIM_OC_InitTypeDef sConfigOC = {0};
 8009936:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800993a:	2200      	movs	r2, #0
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	605a      	str	r2, [r3, #4]
 8009940:	609a      	str	r2, [r3, #8]
 8009942:	60da      	str	r2, [r3, #12]
 8009944:	611a      	str	r2, [r3, #16]
 8009946:	615a      	str	r2, [r3, #20]
 8009948:	619a      	str	r2, [r3, #24]

		htim8.Instance = TIM8;
 800994a:	4b72      	ldr	r3, [pc, #456]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 800994c:	4a72      	ldr	r2, [pc, #456]	; (8009b18 <MX_TIM8_Init+0x1f4>)
 800994e:	601a      	str	r2, [r3, #0]
		htim8.Init.Prescaler = PWM_Prescalers[4];
 8009950:	4b72      	ldr	r3, [pc, #456]	; (8009b1c <MX_TIM8_Init+0x1f8>)
 8009952:	891b      	ldrh	r3, [r3, #8]
 8009954:	461a      	mov	r2, r3
 8009956:	4b6f      	ldr	r3, [pc, #444]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009958:	605a      	str	r2, [r3, #4]
		htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800995a:	4b6e      	ldr	r3, [pc, #440]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 800995c:	2200      	movs	r2, #0
 800995e:	609a      	str	r2, [r3, #8]
		htim8.Init.Period = 255;
 8009960:	4b6c      	ldr	r3, [pc, #432]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009962:	22ff      	movs	r2, #255	; 0xff
 8009964:	60da      	str	r2, [r3, #12]
		htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009966:	4b6b      	ldr	r3, [pc, #428]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009968:	2200      	movs	r2, #0
 800996a:	611a      	str	r2, [r3, #16]
		htim8.Init.RepetitionCounter = 0;
 800996c:	4b69      	ldr	r3, [pc, #420]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 800996e:	2200      	movs	r2, #0
 8009970:	615a      	str	r2, [r3, #20]
		htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009972:	4b68      	ldr	r3, [pc, #416]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009974:	2200      	movs	r2, #0
 8009976:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009978:	4866      	ldr	r0, [pc, #408]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 800997a:	f7fa ffc2 	bl	8004902 <HAL_TIM_PWM_Init>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <MX_TIM8_Init+0x64>
		{
			Error_Handler();
 8009984:	f000 f8d0 	bl	8009b28 <Error_Handler>
		}

		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009988:	2360      	movs	r3, #96	; 0x60
 800998a:	667b      	str	r3, [r7, #100]	; 0x64
		sConfigOC.Pulse = PWM_Pulses[4];
 800998c:	4b64      	ldr	r3, [pc, #400]	; (8009b20 <MX_TIM8_Init+0x1fc>)
 800998e:	891b      	ldrh	r3, [r3, #8]
 8009990:	66bb      	str	r3, [r7, #104]	; 0x68
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009992:	2300      	movs	r3, #0
 8009994:	66fb      	str	r3, [r7, #108]	; 0x6c
		sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009996:	2300      	movs	r3, #0
 8009998:	673b      	str	r3, [r7, #112]	; 0x70
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800999a:	2300      	movs	r3, #0
 800999c:	677b      	str	r3, [r7, #116]	; 0x74
		sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800999e:	2300      	movs	r3, #0
 80099a0:	67bb      	str	r3, [r7, #120]	; 0x78
		sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80099a2:	2300      	movs	r3, #0
 80099a4:	67fb      	str	r3, [r7, #124]	; 0x7c
		if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80099a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80099aa:	2200      	movs	r2, #0
 80099ac:	4619      	mov	r1, r3
 80099ae:	4859      	ldr	r0, [pc, #356]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 80099b0:	f7fb fade 	bl	8004f70 <HAL_TIM_PWM_ConfigChannel>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d001      	beq.n	80099be <MX_TIM8_Init+0x9a>
		{
			Error_Handler();
 80099ba:	f000 f8b5 	bl	8009b28 <Error_Handler>
		}

		HAL_TIM_MspPostInit(&htim8);
 80099be:	4855      	ldr	r0, [pc, #340]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 80099c0:	f000 fba4 	bl	800a10c <HAL_TIM_MspPostInit>

		if(PWM_Out_EN&(1<<4))
 80099c4:	4b57      	ldr	r3, [pc, #348]	; (8009b24 <MX_TIM8_Init+0x200>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f003 0310 	and.w	r3, r3, #16
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f000 809b 	beq.w	8009b08 <MX_TIM8_Init+0x1e4>
		{
			if (HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1) != HAL_OK)
 80099d2:	2100      	movs	r1, #0
 80099d4:	484f      	ldr	r0, [pc, #316]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 80099d6:	f7fa ffbf 	bl	8004958 <HAL_TIM_PWM_Start>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f000 8093 	beq.w	8009b08 <MX_TIM8_Init+0x1e4>
			{
				Error_Handler();
 80099e2:	f000 f8a1 	bl	8009b28 <Error_Handler>
		if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
		{
			Error_Handler();
		}
	}
}
 80099e6:	e08f      	b.n	8009b08 <MX_TIM8_Init+0x1e4>
		TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80099e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80099ec:	2200      	movs	r2, #0
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	605a      	str	r2, [r3, #4]
 80099f2:	609a      	str	r2, [r3, #8]
 80099f4:	60da      	str	r2, [r3, #12]
 80099f6:	611a      	str	r2, [r3, #16]
		TIM_IC_InitTypeDef sConfigIC = {0};
 80099f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80099fc:	2200      	movs	r2, #0
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	605a      	str	r2, [r3, #4]
 8009a02:	609a      	str	r2, [r3, #8]
 8009a04:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	605a      	str	r2, [r3, #4]
 8009a10:	609a      	str	r2, [r3, #8]
		TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009a12:	463b      	mov	r3, r7
 8009a14:	2234      	movs	r2, #52	; 0x34
 8009a16:	2100      	movs	r1, #0
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f000 fe71 	bl	800a700 <memset>
		htim8.Instance = TIM8;
 8009a1e:	4b3d      	ldr	r3, [pc, #244]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009a20:	4a3d      	ldr	r2, [pc, #244]	; (8009b18 <MX_TIM8_Init+0x1f4>)
 8009a22:	601a      	str	r2, [r3, #0]
		htim8.Init.Prescaler = 0;
 8009a24:	4b3b      	ldr	r3, [pc, #236]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009a26:	2200      	movs	r2, #0
 8009a28:	605a      	str	r2, [r3, #4]
		htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a2a:	4b3a      	ldr	r3, [pc, #232]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	609a      	str	r2, [r3, #8]
		htim8.Init.Period = 0;
 8009a30:	4b38      	ldr	r3, [pc, #224]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	60da      	str	r2, [r3, #12]
		htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a36:	4b37      	ldr	r3, [pc, #220]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	611a      	str	r2, [r3, #16]
		htim8.Init.RepetitionCounter = 0;
 8009a3c:	4b35      	ldr	r3, [pc, #212]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009a3e:	2200      	movs	r2, #0
 8009a40:	615a      	str	r2, [r3, #20]
		htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a42:	4b34      	ldr	r3, [pc, #208]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8009a48:	4832      	ldr	r0, [pc, #200]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009a4a:	f7fb f84b 	bl	8004ae4 <HAL_TIM_IC_Init>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d001      	beq.n	8009a58 <MX_TIM8_Init+0x134>
			Error_Handler();
 8009a54:	f000 f868 	bl	8009b28 <Error_Handler>
		sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8009a58:	2304      	movs	r3, #4
 8009a5a:	653b      	str	r3, [r7, #80]	; 0x50
		sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8009a5c:	2350      	movs	r3, #80	; 0x50
 8009a5e:	657b      	str	r3, [r7, #84]	; 0x54
		sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8009a60:	2300      	movs	r3, #0
 8009a62:	65bb      	str	r3, [r7, #88]	; 0x58
		sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8009a64:	2300      	movs	r3, #0
 8009a66:	65fb      	str	r3, [r7, #92]	; 0x5c
		sSlaveConfig.TriggerFilter = 0;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	663b      	str	r3, [r7, #96]	; 0x60
		if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8009a6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009a70:	4619      	mov	r1, r3
 8009a72:	4828      	ldr	r0, [pc, #160]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009a74:	f7fb fb94 	bl	80051a0 <HAL_TIM_SlaveConfigSynchro>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <MX_TIM8_Init+0x15e>
			Error_Handler();
 8009a7e:	f000 f853 	bl	8009b28 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8009a82:	2300      	movs	r3, #0
 8009a84:	643b      	str	r3, [r7, #64]	; 0x40
		sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8009a86:	2301      	movs	r3, #1
 8009a88:	647b      	str	r3, [r7, #68]	; 0x44
		sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	64bb      	str	r3, [r7, #72]	; 0x48
		sConfigIC.ICFilter = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8009a92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009a96:	2200      	movs	r2, #0
 8009a98:	4619      	mov	r1, r3
 8009a9a:	481e      	ldr	r0, [pc, #120]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009a9c:	f7fb f9cc 	bl	8004e38 <HAL_TIM_IC_ConfigChannel>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <MX_TIM8_Init+0x186>
			Error_Handler();
 8009aa6:	f000 f83f 	bl	8009b28 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8009aaa:	2302      	movs	r3, #2
 8009aac:	643b      	str	r3, [r7, #64]	; 0x40
		sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8009aae:	2302      	movs	r3, #2
 8009ab0:	647b      	str	r3, [r7, #68]	; 0x44
		if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8009ab2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009ab6:	2204      	movs	r2, #4
 8009ab8:	4619      	mov	r1, r3
 8009aba:	4816      	ldr	r0, [pc, #88]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009abc:	f7fb f9bc 	bl	8004e38 <HAL_TIM_IC_ConfigChannel>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <MX_TIM8_Init+0x1a6>
			Error_Handler();
 8009ac6:	f000 f82f 	bl	8009b28 <Error_Handler>
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009aca:	2300      	movs	r3, #0
 8009acc:	637b      	str	r3, [r7, #52]	; 0x34
		sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	63bb      	str	r3, [r7, #56]	; 0x38
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009ad6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ada:	4619      	mov	r1, r3
 8009adc:	480d      	ldr	r0, [pc, #52]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009ade:	f7fc fa05 	bl	8005eec <HAL_TIMEx_MasterConfigSynchronization>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <MX_TIM8_Init+0x1c8>
			Error_Handler();
 8009ae8:	f000 f81e 	bl	8009b28 <Error_Handler>
		sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8009aec:	2300      	movs	r3, #0
 8009aee:	61fb      	str	r3, [r7, #28]
		sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009af0:	2300      	movs	r3, #0
 8009af2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009af4:	463b      	mov	r3, r7
 8009af6:	4619      	mov	r1, r3
 8009af8:	4806      	ldr	r0, [pc, #24]	; (8009b14 <MX_TIM8_Init+0x1f0>)
 8009afa:	f7fc fa55 	bl	8005fa8 <HAL_TIMEx_ConfigBreakDeadTime>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <MX_TIM8_Init+0x1e4>
			Error_Handler();
 8009b04:	f000 f810 	bl	8009b28 <Error_Handler>
}
 8009b08:	bf00      	nop
 8009b0a:	3780      	adds	r7, #128	; 0x80
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	20000476 	.word	0x20000476
 8009b14:	20000128 	.word	0x20000128
 8009b18:	40013400 	.word	0x40013400
 8009b1c:	20000554 	.word	0x20000554
 8009b20:	2000076c 	.word	0x2000076c
 8009b24:	20000924 	.word	0x20000924

08009b28 <Error_Handler>:


void Error_Handler(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(LED.PORT, LED.PIN);
 8009b2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b34:	4611      	mov	r1, r2
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7f9 feb0 	bl	800389c <HAL_GPIO_TogglePin>
		HAL_Delay(33);
 8009b3c:	2021      	movs	r0, #33	; 0x21
 8009b3e:	f7f6 fbdb 	bl	80002f8 <HAL_Delay>
		HAL_GPIO_TogglePin(LED.PORT, LED.PIN);
 8009b42:	e7f3      	b.n	8009b2c <Error_Handler+0x4>

08009b44 <Parse_Voltage>:
		return 0;
	}
}

uint32_t Parse_Voltage(uint32_t raw, uint32_t raw_ground)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
	//voltage should be raw*4 after voltage divider, but component is not working with tolerances, voltage divider is 130 and 82 which is 106/41, voltage is raw*3.3/(2^10), V to mV is *1000;
	//approximate value from raw->Vcc based on measured values is (95*raw/2)-1645; note that this formula is not taken from reality, it is probably approximating a logarithimic formula but datasheet doesn't give enough details; is low enough precision that overflow is not a problem to consider at all
	uint32_t calculated=(((95*raw)/2)-1645)+((raw_ground*825)/256); //calculate current in mV
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	4613      	mov	r3, r2
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	4413      	add	r3, r2
 8009b56:	015b      	lsls	r3, r3, #5
 8009b58:	1a9b      	subs	r3, r3, r2
 8009b5a:	085a      	lsrs	r2, r3, #1
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	f240 3139 	movw	r1, #825	; 0x339
 8009b62:	fb01 f303 	mul.w	r3, r1, r3
 8009b66:	0a1b      	lsrs	r3, r3, #8
 8009b68:	4413      	add	r3, r2
 8009b6a:	f2a3 636d 	subw	r3, r3, #1645	; 0x66d
 8009b6e:	60fb      	str	r3, [r7, #12]
	//TODO: check that this function works properly for the second board assembled as well sometime

	return calculated;
 8009b70:	68fb      	ldr	r3, [r7, #12]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3714      	adds	r7, #20
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
	...

08009b80 <Parse_Temperature>:

uint32_t Parse_Temperature(uint32_t raw)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
	uint32_t calculated=401-(raw*3791/5000); //calculate temperature in °C
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f640 62cf 	movw	r2, #3791	; 0xecf
 8009b8e:	fb02 f303 	mul.w	r3, r2, r3
 8009b92:	4a07      	ldr	r2, [pc, #28]	; (8009bb0 <Parse_Temperature+0x30>)
 8009b94:	fba2 2303 	umull	r2, r3, r2, r3
 8009b98:	0b1b      	lsrs	r3, r3, #12
 8009b9a:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	60fb      	str	r3, [r7, #12]
	//TODO: get some sort of line for this and check what it looks like in reality, datasheet only gives value for 1k ohm resistor

	return calculated;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	d1b71759 	.word	0xd1b71759

08009bb4 <Calculate_PWM_DC>:
/*
		volatile uint32_t a = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
		volatile uint32_t b = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);*/

uint32_t Calculate_PWM_DC(uint32_t channel)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
	uint32_t DC=0;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	617b      	str	r3, [r7, #20]
	uint32_t T=0, off=0, on=0;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	613b      	str	r3, [r7, #16]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	60fb      	str	r3, [r7, #12]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	60bb      	str	r3, [r7, #8]

	if (!(PWM_In_EN>>channel)&1)
 8009bcc:	4b20      	ldr	r3, [pc, #128]	; (8009c50 <Calculate_PWM_DC+0x9c>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	fa42 f303 	asr.w	r3, r2, r3
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <Calculate_PWM_DC+0x2c>
	{
		//TODO: error message for uninitialized channel
		return 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	e032      	b.n	8009c46 <Calculate_PWM_DC+0x92>
	}

	switch(channel)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d018      	beq.n	8009c18 <Calculate_PWM_DC+0x64>
 8009be6:	2b04      	cmp	r3, #4
 8009be8:	d02b      	beq.n	8009c42 <Calculate_PWM_DC+0x8e>
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d127      	bne.n	8009c3e <Calculate_PWM_DC+0x8a>
	{
	case 0:
		T=HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8009bee:	2104      	movs	r1, #4
 8009bf0:	4818      	ldr	r0, [pc, #96]	; (8009c54 <Calculate_PWM_DC+0xa0>)
 8009bf2:	f7fb fb17 	bl	8005224 <HAL_TIM_ReadCapturedValue>
 8009bf6:	6138      	str	r0, [r7, #16]
		off=HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	4816      	ldr	r0, [pc, #88]	; (8009c54 <Calculate_PWM_DC+0xa0>)
 8009bfc:	f7fb fb12 	bl	8005224 <HAL_TIM_ReadCapturedValue>
 8009c00:	60f8      	str	r0, [r7, #12]
		DC=(((T-off)*100)/T); //note integer division always rounds down
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	1ad3      	subs	r3, r2, r3
 8009c08:	2264      	movs	r2, #100	; 0x64
 8009c0a:	fb02 f203 	mul.w	r2, r2, r3
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c14:	617b      	str	r3, [r7, #20]
		break;
 8009c16:	e015      	b.n	8009c44 <Calculate_PWM_DC+0x90>
	case 3:
		T=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8009c18:	2100      	movs	r1, #0
 8009c1a:	480f      	ldr	r0, [pc, #60]	; (8009c58 <Calculate_PWM_DC+0xa4>)
 8009c1c:	f7fb fb02 	bl	8005224 <HAL_TIM_ReadCapturedValue>
 8009c20:	6138      	str	r0, [r7, #16]
		on=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8009c22:	2104      	movs	r1, #4
 8009c24:	480c      	ldr	r0, [pc, #48]	; (8009c58 <Calculate_PWM_DC+0xa4>)
 8009c26:	f7fb fafd 	bl	8005224 <HAL_TIM_ReadCapturedValue>
 8009c2a:	60b8      	str	r0, [r7, #8]
		DC=((on*100)/T);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	2264      	movs	r2, #100	; 0x64
 8009c30:	fb02 f203 	mul.w	r2, r2, r3
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c3a:	617b      	str	r3, [r7, #20]
		break;
 8009c3c:	e002      	b.n	8009c44 <Calculate_PWM_DC+0x90>
	case 4:

		break;
	default:
		//TODO: error message here for trying to calculate PWM of invalid PWM channel
		return 0;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	e001      	b.n	8009c46 <Calculate_PWM_DC+0x92>
		break;
 8009c42:	bf00      	nop
	}


	return DC; //DC ranges from 0-100
 8009c44:	697b      	ldr	r3, [r7, #20]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3718      	adds	r7, #24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20000476 	.word	0x20000476
 8009c54:	2000087c 	.word	0x2000087c
 8009c58:	200001ac 	.word	0x200001ac

08009c5c <Calculate_PWM_Freq>:

uint32_t Calculate_PWM_Freq(uint32_t channel)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
	uint32_t frequency=0;
 8009c64:	2300      	movs	r3, #0
 8009c66:	60bb      	str	r3, [r7, #8]
	uint32_t T=0;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60fb      	str	r3, [r7, #12]

	if (!(PWM_In_EN>>channel)&1)
 8009c6c:	4b1e      	ldr	r3, [pc, #120]	; (8009ce8 <Calculate_PWM_Freq+0x8c>)
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	461a      	mov	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	fa42 f303 	asr.w	r3, r2, r3
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d101      	bne.n	8009c80 <Calculate_PWM_Freq+0x24>
	{
		//TODO: error message for uninitialized channel
		return 0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	e02f      	b.n	8009ce0 <Calculate_PWM_Freq+0x84>
	}

	switch(channel)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b03      	cmp	r3, #3
 8009c84:	d009      	beq.n	8009c9a <Calculate_PWM_Freq+0x3e>
 8009c86:	2b04      	cmp	r3, #4
 8009c88:	d00f      	beq.n	8009caa <Calculate_PWM_Freq+0x4e>
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10b      	bne.n	8009ca6 <Calculate_PWM_Freq+0x4a>
	{
	case 0:
		T=HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8009c8e:	2104      	movs	r1, #4
 8009c90:	4816      	ldr	r0, [pc, #88]	; (8009cec <Calculate_PWM_Freq+0x90>)
 8009c92:	f7fb fac7 	bl	8005224 <HAL_TIM_ReadCapturedValue>
 8009c96:	60f8      	str	r0, [r7, #12]
		break;
 8009c98:	e008      	b.n	8009cac <Calculate_PWM_Freq+0x50>
	case 3:
		T=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	4814      	ldr	r0, [pc, #80]	; (8009cf0 <Calculate_PWM_Freq+0x94>)
 8009c9e:	f7fb fac1 	bl	8005224 <HAL_TIM_ReadCapturedValue>
 8009ca2:	60f8      	str	r0, [r7, #12]
		break;
 8009ca4:	e002      	b.n	8009cac <Calculate_PWM_Freq+0x50>
	case 4:

		break;
	default:
		//TODO: error message here for trying to calculate PWM of invalid PWM channel
		return 0;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	e01a      	b.n	8009ce0 <Calculate_PWM_Freq+0x84>
		break;
 8009caa:	bf00      	nop
	}
	frequency = (((HAL_RCC_GetHCLKFreq()*10)/(T*(PWM_Prescalers[channel]+1)))+5)/10; //calculate frequency in .1 Hz, add .5 Hz, divide by 10 to get rounded value in Hz
 8009cac:	f7fa fb68 	bl	8004380 <HAL_RCC_GetHCLKFreq>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	005b      	lsls	r3, r3, #1
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4a0d      	ldr	r2, [pc, #52]	; (8009cf4 <Calculate_PWM_Freq+0x98>)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	fb03 f302 	mul.w	r3, r3, r2
 8009cce:	fbb1 f3f3 	udiv	r3, r1, r3
 8009cd2:	3305      	adds	r3, #5
 8009cd4:	4a08      	ldr	r2, [pc, #32]	; (8009cf8 <Calculate_PWM_Freq+0x9c>)
 8009cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cda:	08db      	lsrs	r3, r3, #3
 8009cdc:	60bb      	str	r3, [r7, #8]

	//if frequency is higher than 255 Hz, two bytes must be used to send the frequency, frequency will almost surely not be over 65kHz
	return frequency;
 8009cde:	68bb      	ldr	r3, [r7, #8]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	20000476 	.word	0x20000476
 8009cec:	2000087c 	.word	0x2000087c
 8009cf0:	200001ac 	.word	0x200001ac
 8009cf4:	20000554 	.word	0x20000554
 8009cf8:	cccccccd 	.word	0xcccccccd

08009cfc <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009d00:	4b05      	ldr	r3, [pc, #20]	; (8009d18 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	4a04      	ldr	r2, [pc, #16]	; (8009d18 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8009d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d0a:	6093      	str	r3, [r2, #8]
}
 8009d0c:	bf00      	nop
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	40007000 	.word	0x40007000

08009d1c <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_adc1;
extern DMA_HandleTypeDef hdma_adc2;


void HAL_MspInit(void)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d22:	4b0f      	ldr	r3, [pc, #60]	; (8009d60 <HAL_MspInit+0x44>)
 8009d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d26:	4a0e      	ldr	r2, [pc, #56]	; (8009d60 <HAL_MspInit+0x44>)
 8009d28:	f043 0301 	orr.w	r3, r3, #1
 8009d2c:	6613      	str	r3, [r2, #96]	; 0x60
 8009d2e:	4b0c      	ldr	r3, [pc, #48]	; (8009d60 <HAL_MspInit+0x44>)
 8009d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	607b      	str	r3, [r7, #4]
 8009d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009d3a:	4b09      	ldr	r3, [pc, #36]	; (8009d60 <HAL_MspInit+0x44>)
 8009d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d3e:	4a08      	ldr	r2, [pc, #32]	; (8009d60 <HAL_MspInit+0x44>)
 8009d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d44:	6593      	str	r3, [r2, #88]	; 0x58
 8009d46:	4b06      	ldr	r3, [pc, #24]	; (8009d60 <HAL_MspInit+0x44>)
 8009d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d4e:	603b      	str	r3, [r7, #0]
 8009d50:	683b      	ldr	r3, [r7, #0]

  LL_PWR_DisableDeadBatteryPD();
 8009d52:	f7ff ffd3 	bl	8009cfc <LL_PWR_DisableDeadBatteryPD>
}
 8009d56:	bf00      	nop
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	40021000 	.word	0x40021000

08009d64 <HAL_ADC_MspInit>:

//counter to keep track of how many peripherals require ADC12 clock, so that deinitializing ADC1 allows ADC2 to run
static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b08c      	sub	sp, #48	; 0x30
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d6c:	f107 031c 	add.w	r3, r7, #28
 8009d70:	2200      	movs	r2, #0
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	605a      	str	r2, [r3, #4]
 8009d76:	609a      	str	r2, [r3, #8]
 8009d78:	60da      	str	r2, [r3, #12]
 8009d7a:	611a      	str	r2, [r3, #16]
	if(hadc->Instance==ADC1)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d84:	d15a      	bne.n	8009e3c <HAL_ADC_MspInit+0xd8>
	{
		HAL_RCC_ADC12_CLK_ENABLED++;
 8009d86:	4b5e      	ldr	r3, [pc, #376]	; (8009f00 <HAL_ADC_MspInit+0x19c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	4a5c      	ldr	r2, [pc, #368]	; (8009f00 <HAL_ADC_MspInit+0x19c>)
 8009d8e:	6013      	str	r3, [r2, #0]
		if(HAL_RCC_ADC12_CLK_ENABLED==1)
 8009d90:	4b5b      	ldr	r3, [pc, #364]	; (8009f00 <HAL_ADC_MspInit+0x19c>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d10b      	bne.n	8009db0 <HAL_ADC_MspInit+0x4c>
		{
			__HAL_RCC_ADC12_CLK_ENABLE();
 8009d98:	4b5a      	ldr	r3, [pc, #360]	; (8009f04 <HAL_ADC_MspInit+0x1a0>)
 8009d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d9c:	4a59      	ldr	r2, [pc, #356]	; (8009f04 <HAL_ADC_MspInit+0x1a0>)
 8009d9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009da2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009da4:	4b57      	ldr	r3, [pc, #348]	; (8009f04 <HAL_ADC_MspInit+0x1a0>)
 8009da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dac:	61bb      	str	r3, [r7, #24]
 8009dae:	69bb      	ldr	r3, [r7, #24]
		}
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8009db0:	4b54      	ldr	r3, [pc, #336]	; (8009f04 <HAL_ADC_MspInit+0x1a0>)
 8009db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009db4:	4a53      	ldr	r2, [pc, #332]	; (8009f04 <HAL_ADC_MspInit+0x1a0>)
 8009db6:	f043 0301 	orr.w	r3, r3, #1
 8009dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009dbc:	4b51      	ldr	r3, [pc, #324]	; (8009f04 <HAL_ADC_MspInit+0x1a0>)
 8009dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dc0:	f003 0301 	and.w	r3, r3, #1
 8009dc4:	617b      	str	r3, [r7, #20]
 8009dc6:	697b      	ldr	r3, [r7, #20]

		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8009dc8:	2307      	movs	r3, #7
 8009dca:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009dcc:	2303      	movs	r3, #3
 8009dce:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009dd4:	f107 031c 	add.w	r3, r7, #28
 8009dd8:	4619      	mov	r1, r3
 8009dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009dde:	f7f9 fbab 	bl	8003538 <HAL_GPIO_Init>

		hdma_adc1.Instance = DMA1_Channel1;
 8009de2:	4b49      	ldr	r3, [pc, #292]	; (8009f08 <HAL_ADC_MspInit+0x1a4>)
 8009de4:	4a49      	ldr	r2, [pc, #292]	; (8009f0c <HAL_ADC_MspInit+0x1a8>)
 8009de6:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8009de8:	4b47      	ldr	r3, [pc, #284]	; (8009f08 <HAL_ADC_MspInit+0x1a4>)
 8009dea:	2205      	movs	r2, #5
 8009dec:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009dee:	4b46      	ldr	r3, [pc, #280]	; (8009f08 <HAL_ADC_MspInit+0x1a4>)
 8009df0:	2200      	movs	r2, #0
 8009df2:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009df4:	4b44      	ldr	r3, [pc, #272]	; (8009f08 <HAL_ADC_MspInit+0x1a4>)
 8009df6:	2200      	movs	r2, #0
 8009df8:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009dfa:	4b43      	ldr	r3, [pc, #268]	; (8009f08 <HAL_ADC_MspInit+0x1a4>)
 8009dfc:	2280      	movs	r2, #128	; 0x80
 8009dfe:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009e00:	4b41      	ldr	r3, [pc, #260]	; (8009f08 <HAL_ADC_MspInit+0x1a4>)
 8009e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e06:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009e08:	4b3f      	ldr	r3, [pc, #252]	; (8009f08 <HAL_ADC_MspInit+0x1a4>)
 8009e0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e0e:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8009e10:	4b3d      	ldr	r3, [pc, #244]	; (8009f08 <HAL_ADC_MspInit+0x1a4>)
 8009e12:	2220      	movs	r2, #32
 8009e14:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8009e16:	4b3c      	ldr	r3, [pc, #240]	; (8009f08 <HAL_ADC_MspInit+0x1a4>)
 8009e18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009e1c:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8009e1e:	483a      	ldr	r0, [pc, #232]	; (8009f08 <HAL_ADC_MspInit+0x1a4>)
 8009e20:	f7f7 ff8c 	bl	8001d3c <HAL_DMA_Init>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <HAL_ADC_MspInit+0xca>
		{
			Error_Handler();
 8009e2a:	f7ff fe7d 	bl	8009b28 <Error_Handler>
		}

		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a35      	ldr	r2, [pc, #212]	; (8009f08 <HAL_ADC_MspInit+0x1a4>)
 8009e32:	655a      	str	r2, [r3, #84]	; 0x54
 8009e34:	4a34      	ldr	r2, [pc, #208]	; (8009f08 <HAL_ADC_MspInit+0x1a4>)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6293      	str	r3, [r2, #40]	; 0x28
		  Error_Handler();
		}

		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
	}
}
 8009e3a:	e05d      	b.n	8009ef8 <HAL_ADC_MspInit+0x194>
	else if(hadc->Instance==ADC2)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a33      	ldr	r2, [pc, #204]	; (8009f10 <HAL_ADC_MspInit+0x1ac>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d158      	bne.n	8009ef8 <HAL_ADC_MspInit+0x194>
		HAL_RCC_ADC12_CLK_ENABLED++;
 8009e46:	4b2e      	ldr	r3, [pc, #184]	; (8009f00 <HAL_ADC_MspInit+0x19c>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	4a2c      	ldr	r2, [pc, #176]	; (8009f00 <HAL_ADC_MspInit+0x19c>)
 8009e4e:	6013      	str	r3, [r2, #0]
		if(HAL_RCC_ADC12_CLK_ENABLED==1)
 8009e50:	4b2b      	ldr	r3, [pc, #172]	; (8009f00 <HAL_ADC_MspInit+0x19c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d10b      	bne.n	8009e70 <HAL_ADC_MspInit+0x10c>
		  __HAL_RCC_ADC12_CLK_ENABLE();
 8009e58:	4b2a      	ldr	r3, [pc, #168]	; (8009f04 <HAL_ADC_MspInit+0x1a0>)
 8009e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e5c:	4a29      	ldr	r2, [pc, #164]	; (8009f04 <HAL_ADC_MspInit+0x1a0>)
 8009e5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e64:	4b27      	ldr	r3, [pc, #156]	; (8009f04 <HAL_ADC_MspInit+0x1a0>)
 8009e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e6c:	613b      	str	r3, [r7, #16]
 8009e6e:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8009e70:	4b24      	ldr	r3, [pc, #144]	; (8009f04 <HAL_ADC_MspInit+0x1a0>)
 8009e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e74:	4a23      	ldr	r2, [pc, #140]	; (8009f04 <HAL_ADC_MspInit+0x1a0>)
 8009e76:	f043 0320 	orr.w	r3, r3, #32
 8009e7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e7c:	4b21      	ldr	r3, [pc, #132]	; (8009f04 <HAL_ADC_MspInit+0x1a0>)
 8009e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e80:	f003 0320 	and.w	r3, r3, #32
 8009e84:	60fb      	str	r3, [r7, #12]
 8009e86:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009e88:	2302      	movs	r3, #2
 8009e8a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e90:	2300      	movs	r3, #0
 8009e92:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009e94:	f107 031c 	add.w	r3, r7, #28
 8009e98:	4619      	mov	r1, r3
 8009e9a:	481e      	ldr	r0, [pc, #120]	; (8009f14 <HAL_ADC_MspInit+0x1b0>)
 8009e9c:	f7f9 fb4c 	bl	8003538 <HAL_GPIO_Init>
		hdma_adc2.Instance = DMA1_Channel2;
 8009ea0:	4b1d      	ldr	r3, [pc, #116]	; (8009f18 <HAL_ADC_MspInit+0x1b4>)
 8009ea2:	4a1e      	ldr	r2, [pc, #120]	; (8009f1c <HAL_ADC_MspInit+0x1b8>)
 8009ea4:	601a      	str	r2, [r3, #0]
		hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8009ea6:	4b1c      	ldr	r3, [pc, #112]	; (8009f18 <HAL_ADC_MspInit+0x1b4>)
 8009ea8:	2224      	movs	r2, #36	; 0x24
 8009eaa:	605a      	str	r2, [r3, #4]
		hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009eac:	4b1a      	ldr	r3, [pc, #104]	; (8009f18 <HAL_ADC_MspInit+0x1b4>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	609a      	str	r2, [r3, #8]
		hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8009eb2:	4b19      	ldr	r3, [pc, #100]	; (8009f18 <HAL_ADC_MspInit+0x1b4>)
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	60da      	str	r2, [r3, #12]
		hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8009eb8:	4b17      	ldr	r3, [pc, #92]	; (8009f18 <HAL_ADC_MspInit+0x1b4>)
 8009eba:	2280      	movs	r2, #128	; 0x80
 8009ebc:	611a      	str	r2, [r3, #16]
		hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009ebe:	4b16      	ldr	r3, [pc, #88]	; (8009f18 <HAL_ADC_MspInit+0x1b4>)
 8009ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ec4:	615a      	str	r2, [r3, #20]
		hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009ec6:	4b14      	ldr	r3, [pc, #80]	; (8009f18 <HAL_ADC_MspInit+0x1b4>)
 8009ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ecc:	619a      	str	r2, [r3, #24]
		hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8009ece:	4b12      	ldr	r3, [pc, #72]	; (8009f18 <HAL_ADC_MspInit+0x1b4>)
 8009ed0:	2220      	movs	r2, #32
 8009ed2:	61da      	str	r2, [r3, #28]
		hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8009ed4:	4b10      	ldr	r3, [pc, #64]	; (8009f18 <HAL_ADC_MspInit+0x1b4>)
 8009ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009eda:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8009edc:	480e      	ldr	r0, [pc, #56]	; (8009f18 <HAL_ADC_MspInit+0x1b4>)
 8009ede:	f7f7 ff2d 	bl	8001d3c <HAL_DMA_Init>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <HAL_ADC_MspInit+0x188>
		  Error_Handler();
 8009ee8:	f7ff fe1e 	bl	8009b28 <Error_Handler>
		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a0a      	ldr	r2, [pc, #40]	; (8009f18 <HAL_ADC_MspInit+0x1b4>)
 8009ef0:	655a      	str	r2, [r3, #84]	; 0x54
 8009ef2:	4a09      	ldr	r2, [pc, #36]	; (8009f18 <HAL_ADC_MspInit+0x1b4>)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6293      	str	r3, [r2, #40]	; 0x28
}
 8009ef8:	bf00      	nop
 8009efa:	3730      	adds	r7, #48	; 0x30
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	20000084 	.word	0x20000084
 8009f04:	40021000 	.word	0x40021000
 8009f08:	20000624 	.word	0x20000624
 8009f0c:	40020008 	.word	0x40020008
 8009f10:	50000100 	.word	0x50000100
 8009f14:	48001400 	.word	0x48001400
 8009f18:	200008c4 	.word	0x200008c4
 8009f1c:	4002001c 	.word	0x4002001c

08009f20 <HAL_FDCAN_MspInit>:

}


void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08a      	sub	sp, #40	; 0x28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f28:	f107 0314 	add.w	r3, r7, #20
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	601a      	str	r2, [r3, #0]
 8009f30:	605a      	str	r2, [r3, #4]
 8009f32:	609a      	str	r2, [r3, #8]
 8009f34:	60da      	str	r2, [r3, #12]
 8009f36:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a1c      	ldr	r2, [pc, #112]	; (8009fb0 <HAL_FDCAN_MspInit+0x90>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d131      	bne.n	8009fa6 <HAL_FDCAN_MspInit+0x86>
  {
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8009f42:	4b1c      	ldr	r3, [pc, #112]	; (8009fb4 <HAL_FDCAN_MspInit+0x94>)
 8009f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f46:	4a1b      	ldr	r2, [pc, #108]	; (8009fb4 <HAL_FDCAN_MspInit+0x94>)
 8009f48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8009f4e:	4b19      	ldr	r3, [pc, #100]	; (8009fb4 <HAL_FDCAN_MspInit+0x94>)
 8009f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f56:	613b      	str	r3, [r7, #16]
 8009f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f5a:	4b16      	ldr	r3, [pc, #88]	; (8009fb4 <HAL_FDCAN_MspInit+0x94>)
 8009f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f5e:	4a15      	ldr	r2, [pc, #84]	; (8009fb4 <HAL_FDCAN_MspInit+0x94>)
 8009f60:	f043 0301 	orr.w	r3, r3, #1
 8009f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f66:	4b13      	ldr	r3, [pc, #76]	; (8009fb4 <HAL_FDCAN_MspInit+0x94>)
 8009f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	60fb      	str	r3, [r7, #12]
 8009f70:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009f72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f78:	2302      	movs	r3, #2
 8009f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f80:	2300      	movs	r3, #0
 8009f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8009f84:	2309      	movs	r3, #9
 8009f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f88:	f107 0314 	add.w	r3, r7, #20
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f92:	f7f9 fad1 	bl	8003538 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8009f96:	2200      	movs	r2, #0
 8009f98:	2100      	movs	r1, #0
 8009f9a:	2015      	movs	r0, #21
 8009f9c:	f7f7 fe99 	bl	8001cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8009fa0:	2015      	movs	r0, #21
 8009fa2:	f7f7 feb0 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  }
}
 8009fa6:	bf00      	nop
 8009fa8:	3728      	adds	r7, #40	; 0x28
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	40006400 	.word	0x40006400
 8009fb4:	40021000 	.word	0x40021000

08009fb8 <HAL_TIM_Base_MspInit>:

}


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
	if(htim_base->Instance==TIM1)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a4a      	ldr	r2, [pc, #296]	; (800a0f0 <HAL_TIM_Base_MspInit+0x138>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d114      	bne.n	8009ff4 <HAL_TIM_Base_MspInit+0x3c>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8009fca:	4b4a      	ldr	r3, [pc, #296]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 8009fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fce:	4a49      	ldr	r2, [pc, #292]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 8009fd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009fd4:	6613      	str	r3, [r2, #96]	; 0x60
 8009fd6:	4b47      	ldr	r3, [pc, #284]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 8009fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fde:	61fb      	str	r3, [r7, #28]
 8009fe0:	69fb      	ldr	r3, [r7, #28]
		HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	2019      	movs	r0, #25
 8009fe8:	f7f7 fe73 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009fec:	2019      	movs	r0, #25
 8009fee:	f7f7 fe8a 	bl	8001d06 <HAL_NVIC_EnableIRQ>
	}
	else if(htim_base->Instance==TIM17)
	{
		__HAL_RCC_TIM17_CLK_ENABLE();
	}
}
 8009ff2:	e078      	b.n	800a0e6 <HAL_TIM_Base_MspInit+0x12e>
	else if(htim_base->Instance==TIM6)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a3f      	ldr	r2, [pc, #252]	; (800a0f8 <HAL_TIM_Base_MspInit+0x140>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d114      	bne.n	800a028 <HAL_TIM_Base_MspInit+0x70>
		__HAL_RCC_TIM6_CLK_ENABLE();
 8009ffe:	4b3d      	ldr	r3, [pc, #244]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 800a000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a002:	4a3c      	ldr	r2, [pc, #240]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 800a004:	f043 0310 	orr.w	r3, r3, #16
 800a008:	6593      	str	r3, [r2, #88]	; 0x58
 800a00a:	4b3a      	ldr	r3, [pc, #232]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 800a00c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a00e:	f003 0310 	and.w	r3, r3, #16
 800a012:	61bb      	str	r3, [r7, #24]
 800a014:	69bb      	ldr	r3, [r7, #24]
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800a016:	2200      	movs	r2, #0
 800a018:	2100      	movs	r1, #0
 800a01a:	2036      	movs	r0, #54	; 0x36
 800a01c:	f7f7 fe59 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a020:	2036      	movs	r0, #54	; 0x36
 800a022:	f7f7 fe70 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800a026:	e05e      	b.n	800a0e6 <HAL_TIM_Base_MspInit+0x12e>
	else if(htim_base->Instance==TIM7)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a33      	ldr	r2, [pc, #204]	; (800a0fc <HAL_TIM_Base_MspInit+0x144>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d114      	bne.n	800a05c <HAL_TIM_Base_MspInit+0xa4>
		__HAL_RCC_TIM7_CLK_ENABLE();
 800a032:	4b30      	ldr	r3, [pc, #192]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 800a034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a036:	4a2f      	ldr	r2, [pc, #188]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 800a038:	f043 0320 	orr.w	r3, r3, #32
 800a03c:	6593      	str	r3, [r2, #88]	; 0x58
 800a03e:	4b2d      	ldr	r3, [pc, #180]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 800a040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a042:	f003 0320 	and.w	r3, r3, #32
 800a046:	617b      	str	r3, [r7, #20]
 800a048:	697b      	ldr	r3, [r7, #20]
		HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800a04a:	2200      	movs	r2, #0
 800a04c:	2100      	movs	r1, #0
 800a04e:	2037      	movs	r0, #55	; 0x37
 800a050:	f7f7 fe3f 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800a054:	2037      	movs	r0, #55	; 0x37
 800a056:	f7f7 fe56 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800a05a:	e044      	b.n	800a0e6 <HAL_TIM_Base_MspInit+0x12e>
	else if(htim_base->Instance==TIM15)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a27      	ldr	r2, [pc, #156]	; (800a100 <HAL_TIM_Base_MspInit+0x148>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d114      	bne.n	800a090 <HAL_TIM_Base_MspInit+0xd8>
		__HAL_RCC_TIM15_CLK_ENABLE();
 800a066:	4b23      	ldr	r3, [pc, #140]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 800a068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a06a:	4a22      	ldr	r2, [pc, #136]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 800a06c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a070:	6613      	str	r3, [r2, #96]	; 0x60
 800a072:	4b20      	ldr	r3, [pc, #128]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 800a074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a07a:	613b      	str	r3, [r7, #16]
 800a07c:	693b      	ldr	r3, [r7, #16]
		HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800a07e:	2200      	movs	r2, #0
 800a080:	2100      	movs	r1, #0
 800a082:	2018      	movs	r0, #24
 800a084:	f7f7 fe25 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800a088:	2018      	movs	r0, #24
 800a08a:	f7f7 fe3c 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800a08e:	e02a      	b.n	800a0e6 <HAL_TIM_Base_MspInit+0x12e>
	else if(htim_base->Instance==TIM16)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a1b      	ldr	r2, [pc, #108]	; (800a104 <HAL_TIM_Base_MspInit+0x14c>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d114      	bne.n	800a0c4 <HAL_TIM_Base_MspInit+0x10c>
		__HAL_RCC_TIM16_CLK_ENABLE();
 800a09a:	4b16      	ldr	r3, [pc, #88]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 800a09c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a09e:	4a15      	ldr	r2, [pc, #84]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 800a0a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0a4:	6613      	str	r3, [r2, #96]	; 0x60
 800a0a6:	4b13      	ldr	r3, [pc, #76]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 800a0a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0ae:	60fb      	str	r3, [r7, #12]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	2019      	movs	r0, #25
 800a0b8:	f7f7 fe0b 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a0bc:	2019      	movs	r0, #25
 800a0be:	f7f7 fe22 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800a0c2:	e010      	b.n	800a0e6 <HAL_TIM_Base_MspInit+0x12e>
	else if(htim_base->Instance==TIM17)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a0f      	ldr	r2, [pc, #60]	; (800a108 <HAL_TIM_Base_MspInit+0x150>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d10b      	bne.n	800a0e6 <HAL_TIM_Base_MspInit+0x12e>
		__HAL_RCC_TIM17_CLK_ENABLE();
 800a0ce:	4b09      	ldr	r3, [pc, #36]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 800a0d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0d2:	4a08      	ldr	r2, [pc, #32]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 800a0d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a0d8:	6613      	str	r3, [r2, #96]	; 0x60
 800a0da:	4b06      	ldr	r3, [pc, #24]	; (800a0f4 <HAL_TIM_Base_MspInit+0x13c>)
 800a0dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0e2:	60bb      	str	r3, [r7, #8]
 800a0e4:	68bb      	ldr	r3, [r7, #8]
}
 800a0e6:	bf00      	nop
 800a0e8:	3720      	adds	r7, #32
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	40012c00 	.word	0x40012c00
 800a0f4:	40021000 	.word	0x40021000
 800a0f8:	40001000 	.word	0x40001000
 800a0fc:	40001400 	.word	0x40001400
 800a100:	40014000 	.word	0x40014000
 800a104:	40014400 	.word	0x40014400
 800a108:	40014800 	.word	0x40014800

0800a10c <HAL_TIM_MspPostInit>:
		__HAL_RCC_TIM17_CLK_DISABLE();
	}
}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b08c      	sub	sp, #48	; 0x30
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a114:	f107 031c 	add.w	r3, r7, #28
 800a118:	2200      	movs	r2, #0
 800a11a:	601a      	str	r2, [r3, #0]
 800a11c:	605a      	str	r2, [r3, #4]
 800a11e:	609a      	str	r2, [r3, #8]
 800a120:	60da      	str	r2, [r3, #12]
 800a122:	611a      	str	r2, [r3, #16]
	if(htim->Instance==TIM2)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a12c:	d123      	bne.n	800a176 <HAL_TIM_MspPostInit+0x6a>
	{
		if(PWM_Out_EN&(1<<0)) //TIM2 is for PB3, which is first output pin
 800a12e:	4b65      	ldr	r3, [pc, #404]	; (800a2c4 <HAL_TIM_MspPostInit+0x1b8>)
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	f003 0301 	and.w	r3, r3, #1
 800a136:	2b00      	cmp	r3, #0
 800a138:	f000 80bf 	beq.w	800a2ba <HAL_TIM_MspPostInit+0x1ae>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 800a13c:	4b62      	ldr	r3, [pc, #392]	; (800a2c8 <HAL_TIM_MspPostInit+0x1bc>)
 800a13e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a140:	4a61      	ldr	r2, [pc, #388]	; (800a2c8 <HAL_TIM_MspPostInit+0x1bc>)
 800a142:	f043 0302 	orr.w	r3, r3, #2
 800a146:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a148:	4b5f      	ldr	r3, [pc, #380]	; (800a2c8 <HAL_TIM_MspPostInit+0x1bc>)
 800a14a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a14c:	f003 0302 	and.w	r3, r3, #2
 800a150:	61bb      	str	r3, [r7, #24]
 800a152:	69bb      	ldr	r3, [r7, #24]
			GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a154:	2308      	movs	r3, #8
 800a156:	61fb      	str	r3, [r7, #28]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a158:	2302      	movs	r3, #2
 800a15a:	623b      	str	r3, [r7, #32]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a15c:	2300      	movs	r3, #0
 800a15e:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a160:	2300      	movs	r3, #0
 800a162:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a164:	2301      	movs	r3, #1
 800a166:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a168:	f107 031c 	add.w	r3, r7, #28
 800a16c:	4619      	mov	r1, r3
 800a16e:	4857      	ldr	r0, [pc, #348]	; (800a2cc <HAL_TIM_MspPostInit+0x1c0>)
 800a170:	f7f9 f9e2 	bl	8003538 <HAL_GPIO_Init>
			GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
		}
	}

}
 800a174:	e0a1      	b.n	800a2ba <HAL_TIM_MspPostInit+0x1ae>
	else if(htim->Instance==TIM3)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a55      	ldr	r2, [pc, #340]	; (800a2d0 <HAL_TIM_MspPostInit+0x1c4>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d123      	bne.n	800a1c8 <HAL_TIM_MspPostInit+0xbc>
		if(PWM_Out_EN&(1<<1)) //TIM3 is for PB4, which is second output pin
 800a180:	4b50      	ldr	r3, [pc, #320]	; (800a2c4 <HAL_TIM_MspPostInit+0x1b8>)
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	f003 0302 	and.w	r3, r3, #2
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 8096 	beq.w	800a2ba <HAL_TIM_MspPostInit+0x1ae>
			__HAL_RCC_GPIOB_CLK_ENABLE();
 800a18e:	4b4e      	ldr	r3, [pc, #312]	; (800a2c8 <HAL_TIM_MspPostInit+0x1bc>)
 800a190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a192:	4a4d      	ldr	r2, [pc, #308]	; (800a2c8 <HAL_TIM_MspPostInit+0x1bc>)
 800a194:	f043 0302 	orr.w	r3, r3, #2
 800a198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a19a:	4b4b      	ldr	r3, [pc, #300]	; (800a2c8 <HAL_TIM_MspPostInit+0x1bc>)
 800a19c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a19e:	f003 0302 	and.w	r3, r3, #2
 800a1a2:	617b      	str	r3, [r7, #20]
 800a1a4:	697b      	ldr	r3, [r7, #20]
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a1a6:	2310      	movs	r3, #16
 800a1a8:	61fb      	str	r3, [r7, #28]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	623b      	str	r3, [r7, #32]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a1ba:	f107 031c 	add.w	r3, r7, #28
 800a1be:	4619      	mov	r1, r3
 800a1c0:	4842      	ldr	r0, [pc, #264]	; (800a2cc <HAL_TIM_MspPostInit+0x1c0>)
 800a1c2:	f7f9 f9b9 	bl	8003538 <HAL_GPIO_Init>
}
 800a1c6:	e078      	b.n	800a2ba <HAL_TIM_MspPostInit+0x1ae>
	else if(htim->Instance==TIM4)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a41      	ldr	r2, [pc, #260]	; (800a2d4 <HAL_TIM_MspPostInit+0x1c8>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d122      	bne.n	800a218 <HAL_TIM_MspPostInit+0x10c>
		if(PWM_Out_EN&(1<<3)) //TIM4 is for PB6, which is fourth output pin
 800a1d2:	4b3c      	ldr	r3, [pc, #240]	; (800a2c4 <HAL_TIM_MspPostInit+0x1b8>)
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	f003 0308 	and.w	r3, r3, #8
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d06d      	beq.n	800a2ba <HAL_TIM_MspPostInit+0x1ae>
			__HAL_RCC_GPIOB_CLK_ENABLE();
 800a1de:	4b3a      	ldr	r3, [pc, #232]	; (800a2c8 <HAL_TIM_MspPostInit+0x1bc>)
 800a1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1e2:	4a39      	ldr	r2, [pc, #228]	; (800a2c8 <HAL_TIM_MspPostInit+0x1bc>)
 800a1e4:	f043 0302 	orr.w	r3, r3, #2
 800a1e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a1ea:	4b37      	ldr	r3, [pc, #220]	; (800a2c8 <HAL_TIM_MspPostInit+0x1bc>)
 800a1ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1ee:	f003 0302 	and.w	r3, r3, #2
 800a1f2:	613b      	str	r3, [r7, #16]
 800a1f4:	693b      	ldr	r3, [r7, #16]
			GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a1f6:	2340      	movs	r3, #64	; 0x40
 800a1f8:	61fb      	str	r3, [r7, #28]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	623b      	str	r3, [r7, #32]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1fe:	2300      	movs	r3, #0
 800a200:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a202:	2300      	movs	r3, #0
 800a204:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a206:	2302      	movs	r3, #2
 800a208:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a20a:	f107 031c 	add.w	r3, r7, #28
 800a20e:	4619      	mov	r1, r3
 800a210:	482e      	ldr	r0, [pc, #184]	; (800a2cc <HAL_TIM_MspPostInit+0x1c0>)
 800a212:	f7f9 f991 	bl	8003538 <HAL_GPIO_Init>
}
 800a216:	e050      	b.n	800a2ba <HAL_TIM_MspPostInit+0x1ae>
	else if(htim->Instance==TIM8)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a2e      	ldr	r2, [pc, #184]	; (800a2d8 <HAL_TIM_MspPostInit+0x1cc>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d124      	bne.n	800a26c <HAL_TIM_MspPostInit+0x160>
		if(PWM_Out_EN&(1<<4)) //TIM8 is for PA15, which if fourth output pin
 800a222:	4b28      	ldr	r3, [pc, #160]	; (800a2c4 <HAL_TIM_MspPostInit+0x1b8>)
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	f003 0310 	and.w	r3, r3, #16
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d045      	beq.n	800a2ba <HAL_TIM_MspPostInit+0x1ae>
			__HAL_RCC_GPIOA_CLK_ENABLE();
 800a22e:	4b26      	ldr	r3, [pc, #152]	; (800a2c8 <HAL_TIM_MspPostInit+0x1bc>)
 800a230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a232:	4a25      	ldr	r2, [pc, #148]	; (800a2c8 <HAL_TIM_MspPostInit+0x1bc>)
 800a234:	f043 0301 	orr.w	r3, r3, #1
 800a238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a23a:	4b23      	ldr	r3, [pc, #140]	; (800a2c8 <HAL_TIM_MspPostInit+0x1bc>)
 800a23c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	60fb      	str	r3, [r7, #12]
 800a244:	68fb      	ldr	r3, [r7, #12]
			GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a24a:	61fb      	str	r3, [r7, #28]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a24c:	2302      	movs	r3, #2
 800a24e:	623b      	str	r3, [r7, #32]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a250:	2300      	movs	r3, #0
 800a252:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a254:	2300      	movs	r3, #0
 800a256:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800a258:	2302      	movs	r3, #2
 800a25a:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a25c:	f107 031c 	add.w	r3, r7, #28
 800a260:	4619      	mov	r1, r3
 800a262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a266:	f7f9 f967 	bl	8003538 <HAL_GPIO_Init>
}
 800a26a:	e026      	b.n	800a2ba <HAL_TIM_MspPostInit+0x1ae>
	else if(htim->Instance==TIM17)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a1a      	ldr	r2, [pc, #104]	; (800a2dc <HAL_TIM_MspPostInit+0x1d0>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d121      	bne.n	800a2ba <HAL_TIM_MspPostInit+0x1ae>
		if(PWM_Out_EN&(1<<2)) //TIM17 is for PB5, which is third output pin
 800a276:	4b13      	ldr	r3, [pc, #76]	; (800a2c4 <HAL_TIM_MspPostInit+0x1b8>)
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	f003 0304 	and.w	r3, r3, #4
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d01b      	beq.n	800a2ba <HAL_TIM_MspPostInit+0x1ae>
			__HAL_RCC_GPIOB_CLK_ENABLE();
 800a282:	4b11      	ldr	r3, [pc, #68]	; (800a2c8 <HAL_TIM_MspPostInit+0x1bc>)
 800a284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a286:	4a10      	ldr	r2, [pc, #64]	; (800a2c8 <HAL_TIM_MspPostInit+0x1bc>)
 800a288:	f043 0302 	orr.w	r3, r3, #2
 800a28c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a28e:	4b0e      	ldr	r3, [pc, #56]	; (800a2c8 <HAL_TIM_MspPostInit+0x1bc>)
 800a290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a292:	f003 0302 	and.w	r3, r3, #2
 800a296:	60bb      	str	r3, [r7, #8]
 800a298:	68bb      	ldr	r3, [r7, #8]
			GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a29a:	2320      	movs	r3, #32
 800a29c:	61fb      	str	r3, [r7, #28]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a29e:	2302      	movs	r3, #2
 800a2a0:	623b      	str	r3, [r7, #32]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800a2aa:	230a      	movs	r3, #10
 800a2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a2ae:	f107 031c 	add.w	r3, r7, #28
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	4805      	ldr	r0, [pc, #20]	; (800a2cc <HAL_TIM_MspPostInit+0x1c0>)
 800a2b6:	f7f9 f93f 	bl	8003538 <HAL_GPIO_Init>
}
 800a2ba:	bf00      	nop
 800a2bc:	3730      	adds	r7, #48	; 0x30
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20000924 	.word	0x20000924
 800a2c8:	40021000 	.word	0x40021000
 800a2cc:	48000400 	.word	0x48000400
 800a2d0:	40000400 	.word	0x40000400
 800a2d4:	40000800 	.word	0x40000800
 800a2d8:	40013400 	.word	0x40013400
 800a2dc:	40014800 	.word	0x40014800

0800a2e0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM2)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2f0:	d10c      	bne.n	800a30c <HAL_TIM_PWM_MspInit+0x2c>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 800a2f2:	4b24      	ldr	r3, [pc, #144]	; (800a384 <HAL_TIM_PWM_MspInit+0xa4>)
 800a2f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2f6:	4a23      	ldr	r2, [pc, #140]	; (800a384 <HAL_TIM_PWM_MspInit+0xa4>)
 800a2f8:	f043 0301 	orr.w	r3, r3, #1
 800a2fc:	6593      	str	r3, [r2, #88]	; 0x58
 800a2fe:	4b21      	ldr	r3, [pc, #132]	; (800a384 <HAL_TIM_PWM_MspInit+0xa4>)
 800a300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a302:	f003 0301 	and.w	r3, r3, #1
 800a306:	617b      	str	r3, [r7, #20]
 800a308:	697b      	ldr	r3, [r7, #20]
	}
	else if(htim_pwm->Instance==TIM8)
	{
		__HAL_RCC_TIM8_CLK_ENABLE();
	}
}
 800a30a:	e034      	b.n	800a376 <HAL_TIM_PWM_MspInit+0x96>
	else if(htim_pwm->Instance==TIM3)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a1d      	ldr	r2, [pc, #116]	; (800a388 <HAL_TIM_PWM_MspInit+0xa8>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d10c      	bne.n	800a330 <HAL_TIM_PWM_MspInit+0x50>
		__HAL_RCC_TIM3_CLK_ENABLE();
 800a316:	4b1b      	ldr	r3, [pc, #108]	; (800a384 <HAL_TIM_PWM_MspInit+0xa4>)
 800a318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a31a:	4a1a      	ldr	r2, [pc, #104]	; (800a384 <HAL_TIM_PWM_MspInit+0xa4>)
 800a31c:	f043 0302 	orr.w	r3, r3, #2
 800a320:	6593      	str	r3, [r2, #88]	; 0x58
 800a322:	4b18      	ldr	r3, [pc, #96]	; (800a384 <HAL_TIM_PWM_MspInit+0xa4>)
 800a324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a326:	f003 0302 	and.w	r3, r3, #2
 800a32a:	613b      	str	r3, [r7, #16]
 800a32c:	693b      	ldr	r3, [r7, #16]
}
 800a32e:	e022      	b.n	800a376 <HAL_TIM_PWM_MspInit+0x96>
	else if(htim_pwm->Instance==TIM4)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a15      	ldr	r2, [pc, #84]	; (800a38c <HAL_TIM_PWM_MspInit+0xac>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d10c      	bne.n	800a354 <HAL_TIM_PWM_MspInit+0x74>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800a33a:	4b12      	ldr	r3, [pc, #72]	; (800a384 <HAL_TIM_PWM_MspInit+0xa4>)
 800a33c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a33e:	4a11      	ldr	r2, [pc, #68]	; (800a384 <HAL_TIM_PWM_MspInit+0xa4>)
 800a340:	f043 0304 	orr.w	r3, r3, #4
 800a344:	6593      	str	r3, [r2, #88]	; 0x58
 800a346:	4b0f      	ldr	r3, [pc, #60]	; (800a384 <HAL_TIM_PWM_MspInit+0xa4>)
 800a348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a34a:	f003 0304 	and.w	r3, r3, #4
 800a34e:	60fb      	str	r3, [r7, #12]
 800a350:	68fb      	ldr	r3, [r7, #12]
}
 800a352:	e010      	b.n	800a376 <HAL_TIM_PWM_MspInit+0x96>
	else if(htim_pwm->Instance==TIM8)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a0d      	ldr	r2, [pc, #52]	; (800a390 <HAL_TIM_PWM_MspInit+0xb0>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d10b      	bne.n	800a376 <HAL_TIM_PWM_MspInit+0x96>
		__HAL_RCC_TIM8_CLK_ENABLE();
 800a35e:	4b09      	ldr	r3, [pc, #36]	; (800a384 <HAL_TIM_PWM_MspInit+0xa4>)
 800a360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a362:	4a08      	ldr	r2, [pc, #32]	; (800a384 <HAL_TIM_PWM_MspInit+0xa4>)
 800a364:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a368:	6613      	str	r3, [r2, #96]	; 0x60
 800a36a:	4b06      	ldr	r3, [pc, #24]	; (800a384 <HAL_TIM_PWM_MspInit+0xa4>)
 800a36c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a36e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a372:	60bb      	str	r3, [r7, #8]
 800a374:	68bb      	ldr	r3, [r7, #8]
}
 800a376:	bf00      	nop
 800a378:	371c      	adds	r7, #28
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	40021000 	.word	0x40021000
 800a388:	40000400 	.word	0x40000400
 800a38c:	40000800 	.word	0x40000800
 800a390:	40013400 	.word	0x40013400

0800a394 <HAL_TIM_IC_MspInit>:
	}

}

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b08e      	sub	sp, #56	; 0x38
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a39c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	601a      	str	r2, [r3, #0]
 800a3a4:	605a      	str	r2, [r3, #4]
 800a3a6:	609a      	str	r2, [r3, #8]
 800a3a8:	60da      	str	r2, [r3, #12]
 800a3aa:	611a      	str	r2, [r3, #16]

	if(htim_ic->Instance==TIM2)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3b4:	d130      	bne.n	800a418 <HAL_TIM_IC_MspInit+0x84>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 800a3b6:	4b51      	ldr	r3, [pc, #324]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a3b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ba:	4a50      	ldr	r2, [pc, #320]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a3bc:	f043 0301 	orr.w	r3, r3, #1
 800a3c0:	6593      	str	r3, [r2, #88]	; 0x58
 800a3c2:	4b4e      	ldr	r3, [pc, #312]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a3c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3c6:	f003 0301 	and.w	r3, r3, #1
 800a3ca:	623b      	str	r3, [r7, #32]
 800a3cc:	6a3b      	ldr	r3, [r7, #32]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800a3ce:	4b4b      	ldr	r3, [pc, #300]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a3d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3d2:	4a4a      	ldr	r2, [pc, #296]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a3d4:	f043 0302 	orr.w	r3, r3, #2
 800a3d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3da:	4b48      	ldr	r3, [pc, #288]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a3dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3de:	f003 0302 	and.w	r3, r3, #2
 800a3e2:	61fb      	str	r3, [r7, #28]
 800a3e4:	69fb      	ldr	r3, [r7, #28]

		GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a3e6:	2308      	movs	r3, #8
 800a3e8:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3fe:	4619      	mov	r1, r3
 800a400:	483f      	ldr	r0, [pc, #252]	; (800a500 <HAL_TIM_IC_MspInit+0x16c>)
 800a402:	f7f9 f899 	bl	8003538 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800a406:	2200      	movs	r2, #0
 800a408:	2100      	movs	r1, #0
 800a40a:	201c      	movs	r0, #28
 800a40c:	f7f7 fc61 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a410:	201c      	movs	r0, #28
 800a412:	f7f7 fc78 	bl	8001d06 <HAL_NVIC_EnableIRQ>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

		HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
	}
}
 800a416:	e06c      	b.n	800a4f2 <HAL_TIM_IC_MspInit+0x15e>
	else if(htim_ic->Instance==TIM4)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a39      	ldr	r2, [pc, #228]	; (800a504 <HAL_TIM_IC_MspInit+0x170>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d130      	bne.n	800a484 <HAL_TIM_IC_MspInit+0xf0>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800a422:	4b36      	ldr	r3, [pc, #216]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a426:	4a35      	ldr	r2, [pc, #212]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a428:	f043 0304 	orr.w	r3, r3, #4
 800a42c:	6593      	str	r3, [r2, #88]	; 0x58
 800a42e:	4b33      	ldr	r3, [pc, #204]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a432:	f003 0304 	and.w	r3, r3, #4
 800a436:	61bb      	str	r3, [r7, #24]
 800a438:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800a43a:	4b30      	ldr	r3, [pc, #192]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a43c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a43e:	4a2f      	ldr	r2, [pc, #188]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a440:	f043 0302 	orr.w	r3, r3, #2
 800a444:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a446:	4b2d      	ldr	r3, [pc, #180]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	617b      	str	r3, [r7, #20]
 800a450:	697b      	ldr	r3, [r7, #20]
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a452:	2340      	movs	r3, #64	; 0x40
 800a454:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a456:	2302      	movs	r3, #2
 800a458:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a45a:	2300      	movs	r3, #0
 800a45c:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a45e:	2300      	movs	r3, #0
 800a460:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a462:	2302      	movs	r3, #2
 800a464:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a46a:	4619      	mov	r1, r3
 800a46c:	4824      	ldr	r0, [pc, #144]	; (800a500 <HAL_TIM_IC_MspInit+0x16c>)
 800a46e:	f7f9 f863 	bl	8003538 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800a472:	2200      	movs	r2, #0
 800a474:	2100      	movs	r1, #0
 800a476:	201e      	movs	r0, #30
 800a478:	f7f7 fc2b 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a47c:	201e      	movs	r0, #30
 800a47e:	f7f7 fc42 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800a482:	e036      	b.n	800a4f2 <HAL_TIM_IC_MspInit+0x15e>
	else if(htim_ic->Instance==TIM8)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a1f      	ldr	r2, [pc, #124]	; (800a508 <HAL_TIM_IC_MspInit+0x174>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d131      	bne.n	800a4f2 <HAL_TIM_IC_MspInit+0x15e>
		__HAL_RCC_TIM8_CLK_ENABLE();
 800a48e:	4b1b      	ldr	r3, [pc, #108]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a492:	4a1a      	ldr	r2, [pc, #104]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a494:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a498:	6613      	str	r3, [r2, #96]	; 0x60
 800a49a:	4b18      	ldr	r3, [pc, #96]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a49c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a49e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4a2:	613b      	str	r3, [r7, #16]
 800a4a4:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800a4a6:	4b15      	ldr	r3, [pc, #84]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a4a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4aa:	4a14      	ldr	r2, [pc, #80]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a4ac:	f043 0301 	orr.w	r3, r3, #1
 800a4b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4b2:	4b12      	ldr	r3, [pc, #72]	; (800a4fc <HAL_TIM_IC_MspInit+0x168>)
 800a4b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	60fb      	str	r3, [r7, #12]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a4be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4c2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4d8:	4619      	mov	r1, r3
 800a4da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a4de:	f7f9 f82b 	bl	8003538 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	202e      	movs	r0, #46	; 0x2e
 800a4e8:	f7f7 fbf3 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800a4ec:	202e      	movs	r0, #46	; 0x2e
 800a4ee:	f7f7 fc0a 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800a4f2:	bf00      	nop
 800a4f4:	3738      	adds	r7, #56	; 0x38
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	40021000 	.word	0x40021000
 800a500:	48000400 	.word	0x48000400
 800a504:	40000800 	.word	0x40000800
 800a508:	40013400 	.word	0x40013400

0800a50c <NMI_Handler>:

//external variables
extern uint8_t CanTimerFlag;

void NMI_Handler(void)
{
 800a50c:	b480      	push	{r7}
 800a50e:	af00      	add	r7, sp, #0

}
 800a510:	bf00      	nop
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <HardFault_Handler>:

void HardFault_Handler(void)
{
 800a51a:	b480      	push	{r7}
 800a51c:	af00      	add	r7, sp, #0
  while (1)
 800a51e:	e7fe      	b.n	800a51e <HardFault_Handler+0x4>

0800a520 <MemManage_Handler>:

  }
}

void MemManage_Handler(void)
{
 800a520:	b480      	push	{r7}
 800a522:	af00      	add	r7, sp, #0
  while (1)
 800a524:	e7fe      	b.n	800a524 <MemManage_Handler+0x4>

0800a526 <BusFault_Handler>:

  }
}

void BusFault_Handler(void)
{
 800a526:	b480      	push	{r7}
 800a528:	af00      	add	r7, sp, #0
  while (1)
 800a52a:	e7fe      	b.n	800a52a <BusFault_Handler+0x4>

0800a52c <UsageFault_Handler>:

  }
}

void UsageFault_Handler(void)
{
 800a52c:	b480      	push	{r7}
 800a52e:	af00      	add	r7, sp, #0
  while (1)
 800a530:	e7fe      	b.n	800a530 <UsageFault_Handler+0x4>

0800a532 <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 800a532:	b480      	push	{r7}
 800a534:	af00      	add	r7, sp, #0

}
 800a536:	bf00      	nop
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 800a540:	b480      	push	{r7}
 800a542:	af00      	add	r7, sp, #0

}
 800a544:	bf00      	nop
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <PendSV_Handler>:

void PendSV_Handler(void)
{
 800a54e:	b480      	push	{r7}
 800a550:	af00      	add	r7, sp, #0

}
 800a552:	bf00      	nop
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <SysTick_Handler>:

void SysTick_Handler(void)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800a560:	f7f5 feac 	bl	80002bc <HAL_IncTick>
}
 800a564:	bf00      	nop
 800a566:	bd80      	pop	{r7, pc}

0800a568 <DMA1_Channel1_IRQHandler>:


void DMA1_Channel1_IRQHandler(void)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 800a56c:	4802      	ldr	r0, [pc, #8]	; (800a578 <DMA1_Channel1_IRQHandler+0x10>)
 800a56e:	f7f7 fd61 	bl	8002034 <HAL_DMA_IRQHandler>
}
 800a572:	bf00      	nop
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	20000624 	.word	0x20000624

0800a57c <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800a580:	4802      	ldr	r0, [pc, #8]	; (800a58c <DMA1_Channel2_IRQHandler+0x10>)
 800a582:	f7f7 fd57 	bl	8002034 <HAL_DMA_IRQHandler>
}
 800a586:	bf00      	nop
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	200008c4 	.word	0x200008c4

0800a590 <FDCAN1_IT0_IRQHandler>:


void FDCAN1_IT0_IRQHandler(void)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(&hfdcan);
 800a594:	4802      	ldr	r0, [pc, #8]	; (800a5a0 <FDCAN1_IT0_IRQHandler+0x10>)
 800a596:	f7f8 faf9 	bl	8002b8c <HAL_FDCAN_IRQHandler>
}
 800a59a:	bf00      	nop
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20000410 	.word	0x20000410

0800a5a4 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 800a5a8:	4802      	ldr	r0, [pc, #8]	; (800a5b4 <TIM6_DAC_IRQHandler+0x10>)
 800a5aa:	f7fa fac6 	bl	8004b3a <HAL_TIM_IRQHandler>
}
 800a5ae:	bf00      	nop
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	2000072c 	.word	0x2000072c

0800a5b8 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim7);
 800a5bc:	4802      	ldr	r0, [pc, #8]	; (800a5c8 <TIM7_IRQHandler+0x10>)
 800a5be:	f7fa fabc 	bl	8004b3a <HAL_TIM_IRQHandler>
}
 800a5c2:	bf00      	nop
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	200009f4 	.word	0x200009f4

0800a5cc <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	af00      	add	r7, sp, #0
	//we don't care or want to do anything with TIM1 BRK
	HAL_TIM_IRQHandler(&htim15);
 800a5d0:	4802      	ldr	r0, [pc, #8]	; (800a5dc <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800a5d2:	f7fa fab2 	bl	8004b3a <HAL_TIM_IRQHandler>
}
 800a5d6:	bf00      	nop
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20000300 	.word	0x20000300

0800a5e0 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	af00      	add	r7, sp, #0
	//this will work because IRQHandler checks to see what event happened
	//however, IRQHandler is not very efficient function for the things we are using here, code could be faster checking registers and calling callback function directly
	//but no time for writing that now
	HAL_TIM_IRQHandler(&htim1);
 800a5e4:	4803      	ldr	r0, [pc, #12]	; (800a5f4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800a5e6:	f7fa faa8 	bl	8004b3a <HAL_TIM_IRQHandler>
	HAL_TIM_IRQHandler(&htim16);
 800a5ea:	4803      	ldr	r0, [pc, #12]	; (800a5f8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800a5ec:	f7fa faa5 	bl	8004b3a <HAL_TIM_IRQHandler>
}
 800a5f0:	bf00      	nop
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	20000778 	.word	0x20000778
 800a5f8:	200009b4 	.word	0x200009b4

0800a5fc <TIM2_IRQHandler>:

//it seems like the interrupts for PWM inputs aren't a thing
void TIM2_IRQHandler(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800a600:	4802      	ldr	r0, [pc, #8]	; (800a60c <TIM2_IRQHandler+0x10>)
 800a602:	f7fa fa9a 	bl	8004b3a <HAL_TIM_IRQHandler>
}
 800a606:	bf00      	nop
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	2000087c 	.word	0x2000087c

0800a610 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim4);
 800a614:	4802      	ldr	r0, [pc, #8]	; (800a620 <TIM4_IRQHandler+0x10>)
 800a616:	f7fa fa90 	bl	8004b3a <HAL_TIM_IRQHandler>
}
 800a61a:	bf00      	nop
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	200001ac 	.word	0x200001ac

0800a624 <TIM8_CC_IRQHandler>:

void TIM8_CC_IRQHandler(void)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim8);
 800a628:	4802      	ldr	r0, [pc, #8]	; (800a634 <TIM8_CC_IRQHandler+0x10>)
 800a62a:	f7fa fa86 	bl	8004b3a <HAL_TIM_IRQHandler>
}
 800a62e:	bf00      	nop
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	20000128 	.word	0x20000128

0800a638 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800a638:	b480      	push	{r7}
 800a63a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a63c:	4b08      	ldr	r3, [pc, #32]	; (800a660 <SystemInit+0x28>)
 800a63e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a642:	4a07      	ldr	r2, [pc, #28]	; (800a660 <SystemInit+0x28>)
 800a644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a64c:	4b04      	ldr	r3, [pc, #16]	; (800a660 <SystemInit+0x28>)
 800a64e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a652:	609a      	str	r2, [r3, #8]
#endif
}
 800a654:	bf00      	nop
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	e000ed00 	.word	0xe000ed00

0800a664 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800a664:	480d      	ldr	r0, [pc, #52]	; (800a69c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800a666:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a668:	480d      	ldr	r0, [pc, #52]	; (800a6a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800a66a:	490e      	ldr	r1, [pc, #56]	; (800a6a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a66c:	4a0e      	ldr	r2, [pc, #56]	; (800a6a8 <LoopForever+0xe>)
  movs r3, #0
 800a66e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800a670:	e002      	b.n	800a678 <LoopCopyDataInit>

0800a672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a676:	3304      	adds	r3, #4

0800a678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a67a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a67c:	d3f9      	bcc.n	800a672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a67e:	4a0b      	ldr	r2, [pc, #44]	; (800a6ac <LoopForever+0x12>)
  ldr r4, =_ebss
 800a680:	4c0b      	ldr	r4, [pc, #44]	; (800a6b0 <LoopForever+0x16>)
  movs r3, #0
 800a682:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a684:	e001      	b.n	800a68a <LoopFillZerobss>

0800a686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a688:	3204      	adds	r2, #4

0800a68a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a68a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a68c:	d3fb      	bcc.n	800a686 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a68e:	f7ff ffd3 	bl	800a638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a692:	f000 f811 	bl	800a6b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a696:	f7fd f89d 	bl	80077d4 <main>

0800a69a <LoopForever>:

LoopForever:
    b LoopForever
 800a69a:	e7fe      	b.n	800a69a <LoopForever>
  ldr   r0, =_estack
 800a69c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800a6a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a6a4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800a6a8:	0800a848 	.word	0x0800a848
  ldr r2, =_sbss
 800a6ac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800a6b0:	20000a84 	.word	0x20000a84

0800a6b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a6b4:	e7fe      	b.n	800a6b4 <ADC1_2_IRQHandler>
	...

0800a6b8 <__libc_init_array>:
 800a6b8:	b570      	push	{r4, r5, r6, lr}
 800a6ba:	4e0d      	ldr	r6, [pc, #52]	; (800a6f0 <__libc_init_array+0x38>)
 800a6bc:	4c0d      	ldr	r4, [pc, #52]	; (800a6f4 <__libc_init_array+0x3c>)
 800a6be:	1ba4      	subs	r4, r4, r6
 800a6c0:	10a4      	asrs	r4, r4, #2
 800a6c2:	2500      	movs	r5, #0
 800a6c4:	42a5      	cmp	r5, r4
 800a6c6:	d109      	bne.n	800a6dc <__libc_init_array+0x24>
 800a6c8:	4e0b      	ldr	r6, [pc, #44]	; (800a6f8 <__libc_init_array+0x40>)
 800a6ca:	4c0c      	ldr	r4, [pc, #48]	; (800a6fc <__libc_init_array+0x44>)
 800a6cc:	f000 f820 	bl	800a710 <_init>
 800a6d0:	1ba4      	subs	r4, r4, r6
 800a6d2:	10a4      	asrs	r4, r4, #2
 800a6d4:	2500      	movs	r5, #0
 800a6d6:	42a5      	cmp	r5, r4
 800a6d8:	d105      	bne.n	800a6e6 <__libc_init_array+0x2e>
 800a6da:	bd70      	pop	{r4, r5, r6, pc}
 800a6dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a6e0:	4798      	blx	r3
 800a6e2:	3501      	adds	r5, #1
 800a6e4:	e7ee      	b.n	800a6c4 <__libc_init_array+0xc>
 800a6e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a6ea:	4798      	blx	r3
 800a6ec:	3501      	adds	r5, #1
 800a6ee:	e7f2      	b.n	800a6d6 <__libc_init_array+0x1e>
 800a6f0:	0800a840 	.word	0x0800a840
 800a6f4:	0800a840 	.word	0x0800a840
 800a6f8:	0800a840 	.word	0x0800a840
 800a6fc:	0800a844 	.word	0x0800a844

0800a700 <memset>:
 800a700:	4402      	add	r2, r0
 800a702:	4603      	mov	r3, r0
 800a704:	4293      	cmp	r3, r2
 800a706:	d100      	bne.n	800a70a <memset+0xa>
 800a708:	4770      	bx	lr
 800a70a:	f803 1b01 	strb.w	r1, [r3], #1
 800a70e:	e7f9      	b.n	800a704 <memset+0x4>

0800a710 <_init>:
 800a710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a712:	bf00      	nop
 800a714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a716:	bc08      	pop	{r3}
 800a718:	469e      	mov	lr, r3
 800a71a:	4770      	bx	lr

0800a71c <_fini>:
 800a71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71e:	bf00      	nop
 800a720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a722:	bc08      	pop	{r3}
 800a724:	469e      	mov	lr, r3
 800a726:	4770      	bx	lr
