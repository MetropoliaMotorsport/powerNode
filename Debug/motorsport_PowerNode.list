
motorsport_PowerNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbd8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800bdb0  0800bdb0  0001bdb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bec8  0800bec8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800bec8  0800bec8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bec8  0800bec8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bec8  0800bec8  0001bec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800becc  0800becc  0001becc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800bed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000acc  20000068  0800bf38  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b34  0800bf38  00020b34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7ba  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003052  00000000  00000000  0003b852  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001870  00000000  00000000  0003e8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001710  00000000  00000000  00040118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000213e1  00000000  00000000  00041828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000115d5  00000000  00000000  00062c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc6a7  00000000  00000000  000741de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00150885  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000689c  00000000  00000000  00150900  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bd98 	.word	0x0800bd98

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	0800bd98 	.word	0x0800bd98

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f001 fd4a 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f00b f869 	bl	800b310 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f001 fd56 	bl	8001d22 <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f001 fd22 	bl	8001cd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	20000064 	.word	0x20000064
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	2000008c 	.word	0x2000008c

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	431a      	orrs	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	609a      	str	r2, [r3, #8]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	431a      	orrs	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	609a      	str	r2, [r3, #8]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000398:	4618      	mov	r0, r3
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80003a4:	b490      	push	{r4, r7}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	3360      	adds	r3, #96	; 0x60
 80003b6:	461a      	mov	r2, r3
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	4413      	add	r3, r2
 80003be:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80003c0:	6822      	ldr	r2, [r4, #0]
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <LL_ADC_SetOffset+0x40>)
 80003c4:	4013      	ands	r3, r2
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	430a      	orrs	r2, r1
 80003d0:	4313      	orrs	r3, r2
 80003d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003d6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc90      	pop	{r4, r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	03fff000 	.word	0x03fff000

080003e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80003e8:	b490      	push	{r4, r7}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3360      	adds	r3, #96	; 0x60
 80003f6:	461a      	mov	r2, r3
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000400:	6823      	ldr	r3, [r4, #0]
 8000402:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bc90      	pop	{r4, r7}
 800040e:	4770      	bx	lr

08000410 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000410:	b490      	push	{r4, r7}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	3360      	adds	r3, #96	; 0x60
 8000420:	461a      	mov	r2, r3
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800042a:	6823      	ldr	r3, [r4, #0]
 800042c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4313      	orrs	r3, r2
 8000434:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bc90      	pop	{r4, r7}
 800043e:	4770      	bx	lr

08000440 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000440:	b490      	push	{r4, r7}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3360      	adds	r3, #96	; 0x60
 8000450:	461a      	mov	r2, r3
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800045a:	6823      	ldr	r3, [r4, #0]
 800045c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4313      	orrs	r3, r2
 8000464:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bc90      	pop	{r4, r7}
 800046e:	4770      	bx	lr

08000470 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000470:	b490      	push	{r4, r7}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3360      	adds	r3, #96	; 0x60
 8000480:	461a      	mov	r2, r3
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4413      	add	r3, r2
 8000488:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800048a:	6823      	ldr	r3, [r4, #0]
 800048c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bc90      	pop	{r4, r7}
 800049e:	4770      	bx	lr

080004a0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	615a      	str	r2, [r3, #20]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d101      	bne.n	80004de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80004da:	2301      	movs	r3, #1
 80004dc:	e000      	b.n	80004e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80004de:	2300      	movs	r3, #0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004ec:	b490      	push	{r4, r7}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3330      	adds	r3, #48	; 0x30
 80004fc:	461a      	mov	r2, r3
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	0a1b      	lsrs	r3, r3, #8
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	f003 030c 	and.w	r3, r3, #12
 8000508:	4413      	add	r3, r2
 800050a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800050c:	6822      	ldr	r2, [r4, #0]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	f003 031f 	and.w	r3, r3, #31
 8000514:	211f      	movs	r1, #31
 8000516:	fa01 f303 	lsl.w	r3, r1, r3
 800051a:	43db      	mvns	r3, r3
 800051c:	401a      	ands	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	0e9b      	lsrs	r3, r3, #26
 8000522:	f003 011f 	and.w	r1, r3, #31
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	f003 031f 	and.w	r3, r3, #31
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	4313      	orrs	r3, r2
 8000532:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bc90      	pop	{r4, r7}
 800053c:	4770      	bx	lr

0800053e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800053e:	b490      	push	{r4, r7}
 8000540:	b084      	sub	sp, #16
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	3314      	adds	r3, #20
 800054e:	461a      	mov	r2, r3
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	0e5b      	lsrs	r3, r3, #25
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	4413      	add	r3, r2
 800055c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800055e:	6822      	ldr	r2, [r4, #0]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	0d1b      	lsrs	r3, r3, #20
 8000564:	f003 031f 	and.w	r3, r3, #31
 8000568:	2107      	movs	r1, #7
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	43db      	mvns	r3, r3
 8000570:	401a      	ands	r2, r3
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	0d1b      	lsrs	r3, r3, #20
 8000576:	f003 031f 	and.w	r3, r3, #31
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	4313      	orrs	r3, r2
 8000582:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bc90      	pop	{r4, r7}
 800058c:	4770      	bx	lr
	...

08000590 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005a8:	43db      	mvns	r3, r3
 80005aa:	401a      	ands	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f003 0318 	and.w	r3, r3, #24
 80005b2:	4908      	ldr	r1, [pc, #32]	; (80005d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80005b4:	40d9      	lsrs	r1, r3
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	400b      	ands	r3, r1
 80005ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005be:	431a      	orrs	r2, r3
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	0007ffff 	.word	0x0007ffff

080005d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80005e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	6093      	str	r3, [r2, #8]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800060c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000610:	d101      	bne.n	8000616 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000612:	2301      	movs	r3, #1
 8000614:	e000      	b.n	8000618 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000634:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000638:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000660:	d101      	bne.n	8000666 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000662:	2301      	movs	r3, #1
 8000664:	e000      	b.n	8000668 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000684:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000688:	f043 0201 	orr.w	r2, r3, #1
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80006ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006b0:	f043 0202 	orr.w	r2, r3, #2
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d101      	bne.n	80006dc <LL_ADC_IsEnabled+0x18>
 80006d8:	2301      	movs	r3, #1
 80006da:	e000      	b.n	80006de <LL_ADC_IsEnabled+0x1a>
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d101      	bne.n	8000702 <LL_ADC_IsDisableOngoing+0x18>
 80006fe:	2301      	movs	r3, #1
 8000700:	e000      	b.n	8000704 <LL_ADC_IsDisableOngoing+0x1a>
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000720:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000724:	f043 0210 	orr.w	r2, r3, #16
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f003 0304 	and.w	r3, r3, #4
 8000748:	2b04      	cmp	r3, #4
 800074a:	d101      	bne.n	8000750 <LL_ADC_REG_IsConversionOngoing+0x18>
 800074c:	2301      	movs	r3, #1
 800074e:	e000      	b.n	8000752 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800076e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000772:	f043 0220 	orr.w	r2, r3, #32
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	2b08      	cmp	r3, #8
 8000798:	d101      	bne.n	800079e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800079a:	2301      	movs	r3, #1
 800079c:	e000      	b.n	80007a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007b4:	2300      	movs	r3, #0
 80007b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e16b      	b.n	8000a9e <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d109      	bne.n	80007e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f00a fdbf 	bl	800b358 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff05 	bl	80005fc <LL_ADC_IsDeepPowerDownEnabled>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d004      	beq.n	8000802 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff feeb 	bl	80005d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff20 	bl	800064c <LL_ADC_IsInternalRegulatorEnabled>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d113      	bne.n	800083a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff04 	bl	8000624 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800081c:	4ba2      	ldr	r3, [pc, #648]	; (8000aa8 <HAL_ADC_Init+0x2fc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	099b      	lsrs	r3, r3, #6
 8000822:	4aa2      	ldr	r2, [pc, #648]	; (8000aac <HAL_ADC_Init+0x300>)
 8000824:	fba2 2303 	umull	r2, r3, r2, r3
 8000828:	099b      	lsrs	r3, r3, #6
 800082a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800082c:	e002      	b.n	8000834 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	3b01      	subs	r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1f9      	bne.n	800082e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff04 	bl	800064c <LL_ADC_IsInternalRegulatorEnabled>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10d      	bne.n	8000866 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800084e:	f043 0210 	orr.w	r2, r3, #16
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085a:	f043 0201 	orr.w	r2, r3, #1
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff64 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 8000870:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	2b00      	cmp	r3, #0
 800087c:	f040 8106 	bne.w	8000a8c <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	2b00      	cmp	r3, #0
 8000884:	f040 8102 	bne.w	8000a8c <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800088c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000890:	f043 0202 	orr.w	r2, r3, #2
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff11 	bl	80006c4 <LL_ADC_IsEnabled>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d111      	bne.n	80008cc <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80008a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80008ac:	f7ff ff0a 	bl	80006c4 <LL_ADC_IsEnabled>
 80008b0:	4604      	mov	r4, r0
 80008b2:	487f      	ldr	r0, [pc, #508]	; (8000ab0 <HAL_ADC_Init+0x304>)
 80008b4:	f7ff ff06 	bl	80006c4 <LL_ADC_IsEnabled>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4323      	orrs	r3, r4
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d105      	bne.n	80008cc <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	4619      	mov	r1, r3
 80008c6:	487b      	ldr	r0, [pc, #492]	; (8000ab4 <HAL_ADC_Init+0x308>)
 80008c8:	f7ff fd38 	bl	800033c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	7f5b      	ldrb	r3, [r3, #29]
 80008d0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80008d6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80008dc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80008e2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008ea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80008ec:	4313      	orrs	r3, r2
 80008ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d106      	bne.n	8000908 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fe:	3b01      	subs	r3, #1
 8000900:	045b      	lsls	r3, r3, #17
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	4313      	orrs	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090c:	2b00      	cmp	r3, #0
 800090e:	d009      	beq.n	8000924 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	4b63      	ldr	r3, [pc, #396]	; (8000ab8 <HAL_ADC_Init+0x30c>)
 800092c:	4013      	ands	r3, r2
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	6812      	ldr	r2, [r2, #0]
 8000932:	69b9      	ldr	r1, [r7, #24]
 8000934:	430b      	orrs	r3, r1
 8000936:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	691b      	ldr	r3, [r3, #16]
 800093e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	430a      	orrs	r2, r1
 800094c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fef0 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 8000958:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff11 	bl	8000786 <LL_ADC_INJ_IsConversionOngoing>
 8000964:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d16d      	bne.n	8000a48 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d16a      	bne.n	8000a48 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000976:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800097e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000980:	4313      	orrs	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68db      	ldr	r3, [r3, #12]
 800098a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800098e:	f023 0302 	bic.w	r3, r3, #2
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	6812      	ldr	r2, [r2, #0]
 8000996:	69b9      	ldr	r1, [r7, #24]
 8000998:	430b      	orrs	r3, r1
 800099a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	691b      	ldr	r3, [r3, #16]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d017      	beq.n	80009d4 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	691a      	ldr	r2, [r3, #16]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80009b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80009bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	6911      	ldr	r1, [r2, #16]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	6812      	ldr	r2, [r2, #0]
 80009cc:	430b      	orrs	r3, r1
 80009ce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80009d2:	e013      	b.n	80009fc <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	691a      	ldr	r2, [r3, #16]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	6812      	ldr	r2, [r2, #0]
 80009f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009f8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d118      	bne.n	8000a38 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000a10:	f023 0304 	bic.w	r3, r3, #4
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000a1c:	4311      	orrs	r1, r2
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000a22:	4311      	orrs	r1, r2
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f042 0201 	orr.w	r2, r2, #1
 8000a34:	611a      	str	r2, [r3, #16]
 8000a36:	e007      	b.n	8000a48 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	691a      	ldr	r2, [r3, #16]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f022 0201 	bic.w	r2, r2, #1
 8000a46:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d10c      	bne.n	8000a6a <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f023 010f 	bic.w	r1, r3, #15
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6a1b      	ldr	r3, [r3, #32]
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	430a      	orrs	r2, r1
 8000a66:	631a      	str	r2, [r3, #48]	; 0x30
 8000a68:	e007      	b.n	8000a7a <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f022 020f 	bic.w	r2, r2, #15
 8000a78:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a7e:	f023 0303 	bic.w	r3, r3, #3
 8000a82:	f043 0201 	orr.w	r2, r3, #1
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	65da      	str	r2, [r3, #92]	; 0x5c
 8000a8a:	e007      	b.n	8000a9c <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a90:	f043 0210 	orr.w	r2, r3, #16
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000a9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	; 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd90      	pop	{r4, r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000064 	.word	0x20000064
 8000aac:	053e2d63 	.word	0x053e2d63
 8000ab0:	50000100 	.word	0x50000100
 8000ab4:	50000300 	.word	0x50000300
 8000ab8:	fff04007 	.word	0xfff04007

08000abc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b0a6      	sub	sp, #152	; 0x98
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d101      	bne.n	8000b06 <HAL_ADC_ConfigChannel+0x22>
 8000b02:	2302      	movs	r3, #2
 8000b04:	e348      	b.n	8001198 <HAL_ADC_ConfigChannel+0x6b4>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fe10 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f040 832d 	bne.w	800117a <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	6859      	ldr	r1, [r3, #4]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	f7ff fcdd 	bl	80004ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fdfe 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 8000b3c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fe1e 	bl	8000786 <LL_ADC_INJ_IsConversionOngoing>
 8000b4a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f040 817b 	bne.w	8000e4e <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	f040 8176 	bne.w	8000e4e <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b6a:	d10f      	bne.n	8000b8c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	f7ff fce1 	bl	800053e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fc8b 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>
 8000b8a:	e00e      	b.n	8000baa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	6819      	ldr	r1, [r3, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	f7ff fcd0 	bl	800053e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fc7b 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	695a      	ldr	r2, [r3, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	08db      	lsrs	r3, r3, #3
 8000bb6:	f003 0303 	and.w	r3, r3, #3
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	d022      	beq.n	8000c12 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	6919      	ldr	r1, [r3, #16]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000bdc:	f7ff fbe2 	bl	80003a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	6919      	ldr	r1, [r3, #16]
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	461a      	mov	r2, r3
 8000bee:	f7ff fc27 	bl	8000440 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	6919      	ldr	r1, [r3, #16]
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	7f1b      	ldrb	r3, [r3, #28]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d102      	bne.n	8000c08 <HAL_ADC_ConfigChannel+0x124>
 8000c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c06:	e000      	b.n	8000c0a <HAL_ADC_ConfigChannel+0x126>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	f7ff fc30 	bl	8000470 <LL_ADC_SetOffsetSaturation>
 8000c10:	e11d      	b.n	8000e4e <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fbe5 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10a      	bne.n	8000c3e <HAL_ADC_ConfigChannel+0x15a>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fbda 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	0e9b      	lsrs	r3, r3, #26
 8000c38:	f003 021f 	and.w	r2, r3, #31
 8000c3c:	e012      	b.n	8000c64 <HAL_ADC_ConfigChannel+0x180>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fbcf 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c54:	fa93 f3a3 	rbit	r3, r3
 8000c58:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c5c:	fab3 f383 	clz	r3, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d105      	bne.n	8000c7c <HAL_ADC_ConfigChannel+0x198>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	0e9b      	lsrs	r3, r3, #26
 8000c76:	f003 031f 	and.w	r3, r3, #31
 8000c7a:	e00a      	b.n	8000c92 <HAL_ADC_ConfigChannel+0x1ae>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c84:	fa93 f3a3 	rbit	r3, r3
 8000c88:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c8c:	fab3 f383 	clz	r3, r3
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d106      	bne.n	8000ca4 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fbb6 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2101      	movs	r1, #1
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fb9c 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10a      	bne.n	8000cd0 <HAL_ADC_ConfigChannel+0x1ec>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fb91 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	0e9b      	lsrs	r3, r3, #26
 8000cca:	f003 021f 	and.w	r2, r3, #31
 8000cce:	e010      	b.n	8000cf2 <HAL_ADC_ConfigChannel+0x20e>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fb86 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ce2:	fa93 f3a3 	rbit	r3, r3
 8000ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cea:	fab3 f383 	clz	r3, r3
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d105      	bne.n	8000d0a <HAL_ADC_ConfigChannel+0x226>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	0e9b      	lsrs	r3, r3, #26
 8000d04:	f003 031f 	and.w	r3, r3, #31
 8000d08:	e00a      	b.n	8000d20 <HAL_ADC_ConfigChannel+0x23c>
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d12:	fa93 f3a3 	rbit	r3, r3
 8000d16:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d1a:	fab3 f383 	clz	r3, r3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d106      	bne.n	8000d32 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fb6f 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2102      	movs	r1, #2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fb55 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10a      	bne.n	8000d5e <HAL_ADC_ConfigChannel+0x27a>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fb4a 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d54:	4603      	mov	r3, r0
 8000d56:	0e9b      	lsrs	r3, r3, #26
 8000d58:	f003 021f 	and.w	r2, r3, #31
 8000d5c:	e010      	b.n	8000d80 <HAL_ADC_ConfigChannel+0x29c>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2102      	movs	r1, #2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fb3f 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d70:	fa93 f3a3 	rbit	r3, r3
 8000d74:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d78:	fab3 f383 	clz	r3, r3
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	461a      	mov	r2, r3
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d105      	bne.n	8000d98 <HAL_ADC_ConfigChannel+0x2b4>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	0e9b      	lsrs	r3, r3, #26
 8000d92:	f003 031f 	and.w	r3, r3, #31
 8000d96:	e00a      	b.n	8000dae <HAL_ADC_ConfigChannel+0x2ca>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000da0:	fa93 f3a3 	rbit	r3, r3
 8000da4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000da8:	fab3 f383 	clz	r3, r3
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d106      	bne.n	8000dc0 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2200      	movs	r2, #0
 8000db8:	2102      	movs	r1, #2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fb28 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2103      	movs	r1, #3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fb0e 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10a      	bne.n	8000dec <HAL_ADC_ConfigChannel+0x308>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2103      	movs	r1, #3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fb03 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	0e9b      	lsrs	r3, r3, #26
 8000de6:	f003 021f 	and.w	r2, r3, #31
 8000dea:	e010      	b.n	8000e0e <HAL_ADC_ConfigChannel+0x32a>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2103      	movs	r1, #3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff faf8 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dfe:	fa93 f3a3 	rbit	r3, r3
 8000e02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e06:	fab3 f383 	clz	r3, r3
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d105      	bne.n	8000e26 <HAL_ADC_ConfigChannel+0x342>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	0e9b      	lsrs	r3, r3, #26
 8000e20:	f003 031f 	and.w	r3, r3, #31
 8000e24:	e00a      	b.n	8000e3c <HAL_ADC_ConfigChannel+0x358>
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e2e:	fa93 f3a3 	rbit	r3, r3
 8000e32:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e36:	fab3 f383 	clz	r3, r3
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d106      	bne.n	8000e4e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2200      	movs	r2, #0
 8000e46:	2103      	movs	r1, #3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fae1 	bl	8000410 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fc36 	bl	80006c4 <LL_ADC_IsEnabled>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f040 810c 	bne.w	8001078 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6818      	ldr	r0, [r3, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	6819      	ldr	r1, [r3, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	f7ff fb8f 	bl	8000590 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	4aab      	ldr	r2, [pc, #684]	; (8001124 <HAL_ADC_ConfigChannel+0x640>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	f040 80fd 	bne.w	8001078 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10b      	bne.n	8000ea6 <HAL_ADC_ConfigChannel+0x3c2>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	0e9b      	lsrs	r3, r3, #26
 8000e94:	3301      	adds	r3, #1
 8000e96:	f003 031f 	and.w	r3, r3, #31
 8000e9a:	2b09      	cmp	r3, #9
 8000e9c:	bf94      	ite	ls
 8000e9e:	2301      	movls	r3, #1
 8000ea0:	2300      	movhi	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	e012      	b.n	8000ecc <HAL_ADC_ConfigChannel+0x3e8>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eae:	fa93 f3a3 	rbit	r3, r3
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eb6:	fab3 f383 	clz	r3, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	f003 031f 	and.w	r3, r3, #31
 8000ec2:	2b09      	cmp	r3, #9
 8000ec4:	bf94      	ite	ls
 8000ec6:	2301      	movls	r3, #1
 8000ec8:	2300      	movhi	r3, #0
 8000eca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d064      	beq.n	8000f9a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d107      	bne.n	8000eec <HAL_ADC_ConfigChannel+0x408>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	0e9b      	lsrs	r3, r3, #26
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	069b      	lsls	r3, r3, #26
 8000ee6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000eea:	e00e      	b.n	8000f0a <HAL_ADC_ConfigChannel+0x426>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ef4:	fa93 f3a3 	rbit	r3, r3
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efc:	fab3 f383 	clz	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	3301      	adds	r3, #1
 8000f04:	069b      	lsls	r3, r3, #26
 8000f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d109      	bne.n	8000f2a <HAL_ADC_ConfigChannel+0x446>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	0e9b      	lsrs	r3, r3, #26
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f003 031f 	and.w	r3, r3, #31
 8000f22:	2101      	movs	r1, #1
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	e010      	b.n	8000f4c <HAL_ADC_ConfigChannel+0x468>
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8000f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3a:	fab3 f383 	clz	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	f003 031f 	and.w	r3, r3, #31
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	ea42 0103 	orr.w	r1, r2, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d10a      	bne.n	8000f72 <HAL_ADC_ConfigChannel+0x48e>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	0e9b      	lsrs	r3, r3, #26
 8000f62:	3301      	adds	r3, #1
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	051b      	lsls	r3, r3, #20
 8000f70:	e011      	b.n	8000f96 <HAL_ADC_ConfigChannel+0x4b2>
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7a:	fa93 f3a3 	rbit	r3, r3
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	fab3 f383 	clz	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	3301      	adds	r3, #1
 8000f8a:	f003 021f 	and.w	r2, r3, #31
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f96:	430b      	orrs	r3, r1
 8000f98:	e069      	b.n	800106e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d107      	bne.n	8000fb6 <HAL_ADC_ConfigChannel+0x4d2>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	0e9b      	lsrs	r3, r3, #26
 8000fac:	3301      	adds	r3, #1
 8000fae:	069b      	lsls	r3, r3, #26
 8000fb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fb4:	e00e      	b.n	8000fd4 <HAL_ADC_ConfigChannel+0x4f0>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	61fb      	str	r3, [r7, #28]
  return result;
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	fab3 f383 	clz	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	069b      	lsls	r3, r3, #26
 8000fd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d109      	bne.n	8000ff4 <HAL_ADC_ConfigChannel+0x510>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	0e9b      	lsrs	r3, r3, #26
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f003 031f 	and.w	r3, r3, #31
 8000fec:	2101      	movs	r1, #1
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	e010      	b.n	8001016 <HAL_ADC_ConfigChannel+0x532>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	617b      	str	r3, [r7, #20]
  return result;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	3301      	adds	r3, #1
 800100c:	f003 031f 	and.w	r3, r3, #31
 8001010:	2101      	movs	r1, #1
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	ea42 0103 	orr.w	r1, r2, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10d      	bne.n	8001042 <HAL_ADC_ConfigChannel+0x55e>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	0e9b      	lsrs	r3, r3, #26
 800102c:	3301      	adds	r3, #1
 800102e:	f003 021f 	and.w	r2, r3, #31
 8001032:	4613      	mov	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4413      	add	r3, r2
 8001038:	3b1e      	subs	r3, #30
 800103a:	051b      	lsls	r3, r3, #20
 800103c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001040:	e014      	b.n	800106c <HAL_ADC_ConfigChannel+0x588>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	60fb      	str	r3, [r7, #12]
  return result;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	fab3 f383 	clz	r3, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	3301      	adds	r3, #1
 800105a:	f003 021f 	and.w	r2, r3, #31
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	3b1e      	subs	r3, #30
 8001066:	051b      	lsls	r3, r3, #20
 8001068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800106c:	430b      	orrs	r3, r1
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	6892      	ldr	r2, [r2, #8]
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fa63 	bl	800053e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <HAL_ADC_ConfigChannel+0x644>)
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 8083 	beq.w	800118c <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001086:	4829      	ldr	r0, [pc, #164]	; (800112c <HAL_ADC_ConfigChannel+0x648>)
 8001088:	f7ff f97e 	bl	8000388 <LL_ADC_GetCommonPathInternalCh>
 800108c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a26      	ldr	r2, [pc, #152]	; (8001130 <HAL_ADC_ConfigChannel+0x64c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d004      	beq.n	80010a4 <HAL_ADC_ConfigChannel+0x5c0>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a25      	ldr	r2, [pc, #148]	; (8001134 <HAL_ADC_ConfigChannel+0x650>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d126      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80010a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d120      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010b8:	d168      	bne.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010c2:	4619      	mov	r1, r3
 80010c4:	4819      	ldr	r0, [pc, #100]	; (800112c <HAL_ADC_ConfigChannel+0x648>)
 80010c6:	f7ff f94c 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_ADC_ConfigChannel+0x654>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	099b      	lsrs	r3, r3, #6
 80010d0:	4a1a      	ldr	r2, [pc, #104]	; (800113c <HAL_ADC_ConfigChannel+0x658>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	099a      	lsrs	r2, r3, #6
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80010e2:	e002      	b.n	80010ea <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f9      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80010f0:	e04c      	b.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <HAL_ADC_ConfigChannel+0x65c>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d125      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x664>
 80010fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d11f      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <HAL_ADC_ConfigChannel+0x660>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d03c      	beq.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001112:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800111a:	4619      	mov	r1, r3
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <HAL_ADC_ConfigChannel+0x648>)
 800111e:	f7ff f920 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001122:	e033      	b.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
 8001124:	407f0000 	.word	0x407f0000
 8001128:	80080000 	.word	0x80080000
 800112c:	50000300 	.word	0x50000300
 8001130:	c3210000 	.word	0xc3210000
 8001134:	90c00010 	.word	0x90c00010
 8001138:	20000064 	.word	0x20000064
 800113c:	053e2d63 	.word	0x053e2d63
 8001140:	c7520000 	.word	0xc7520000
 8001144:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <HAL_ADC_ConfigChannel+0x6bc>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d11c      	bne.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d116      	bne.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_ADC_ConfigChannel+0x6c0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d011      	beq.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800116c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001170:	4619      	mov	r1, r3
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <HAL_ADC_ConfigChannel+0x6c4>)
 8001174:	f7ff f8f5 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
 8001178:	e008      	b.n	800118c <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117e:	f043 0220 	orr.w	r2, r3, #32
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001194:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001198:	4618      	mov	r0, r3
 800119a:	3798      	adds	r7, #152	; 0x98
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	cb840000 	.word	0xcb840000
 80011a4:	50000100 	.word	0x50000100
 80011a8:	50000300 	.word	0x50000300

080011ac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fab8 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 80011c8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fad9 	bl	8000786 <LL_ADC_INJ_IsConversionOngoing>
 80011d4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d103      	bne.n	80011e4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 8090 	beq.w	8001304 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d02a      	beq.n	8001248 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7f5b      	ldrb	r3, [r3, #29]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d126      	bne.n	8001248 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7f1b      	ldrb	r3, [r3, #28]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d122      	bne.n	8001248 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001202:	2301      	movs	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001206:	e014      	b.n	8001232 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	4a41      	ldr	r2, [pc, #260]	; (8001310 <ADC_ConversionStop+0x164>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d90d      	bls.n	800122c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	f043 0210 	orr.w	r2, r3, #16
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e06c      	b.n	8001306 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	3301      	adds	r3, #1
 8001230:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123c:	2b40      	cmp	r3, #64	; 0x40
 800123e:	d1e3      	bne.n	8001208 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2240      	movs	r2, #64	; 0x40
 8001246:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d014      	beq.n	8001278 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fa70 	bl	8000738 <LL_ADC_REG_IsConversionOngoing>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00c      	beq.n	8001278 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fa41 	bl	80006ea <LL_ADC_IsDisableOngoing>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d104      	bne.n	8001278 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fa4c 	bl	8000710 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d014      	beq.n	80012a8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fa7f 	bl	8000786 <LL_ADC_INJ_IsConversionOngoing>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00c      	beq.n	80012a8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fa29 	bl	80006ea <LL_ADC_IsDisableOngoing>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d104      	bne.n	80012a8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fa5b 	bl	800075e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d004      	beq.n	80012b8 <ADC_ConversionStop+0x10c>
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d105      	bne.n	80012be <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80012b2:	230c      	movs	r3, #12
 80012b4:	617b      	str	r3, [r7, #20]
        break;
 80012b6:	e005      	b.n	80012c4 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80012b8:	2308      	movs	r3, #8
 80012ba:	617b      	str	r3, [r7, #20]
        break;
 80012bc:	e002      	b.n	80012c4 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80012be:	2304      	movs	r3, #4
 80012c0:	617b      	str	r3, [r7, #20]
        break;
 80012c2:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80012c4:	f7ff f80c 	bl	80002e0 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80012ca:	e014      	b.n	80012f6 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80012cc:	f7ff f808 	bl	80002e0 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d90d      	bls.n	80012f6 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012de:	f043 0210 	orr.w	r2, r3, #16
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ea:	f043 0201 	orr.w	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e007      	b.n	8001306 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	4013      	ands	r3, r2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1e3      	bne.n	80012cc <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	a33fffff 	.word	0xa33fffff

08001314 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f9cf 	bl	80006c4 <LL_ADC_IsEnabled>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d146      	bne.n	80013ba <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <ADC_Enable+0xb0>)
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00d      	beq.n	8001356 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133e:	f043 0210 	orr.w	r2, r3, #16
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134a:	f043 0201 	orr.w	r2, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e032      	b.n	80013bc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f98a 	bl	8000674 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001360:	f7fe ffbe 	bl	80002e0 <HAL_GetTick>
 8001364:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001366:	e021      	b.n	80013ac <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f9a9 	bl	80006c4 <LL_ADC_IsEnabled>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d104      	bne.n	8001382 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f979 	bl	8000674 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001382:	f7fe ffad 	bl	80002e0 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d90d      	bls.n	80013ac <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001394:	f043 0210 	orr.w	r2, r3, #16
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a0:	f043 0201 	orr.w	r2, r3, #1
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e007      	b.n	80013bc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d1d6      	bne.n	8001368 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	8000003f 	.word	0x8000003f

080013c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f988 	bl	80006ea <LL_ADC_IsDisableOngoing>
 80013da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f96f 	bl	80006c4 <LL_ADC_IsEnabled>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d040      	beq.n	800146e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d13d      	bne.n	800146e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 030d 	and.w	r3, r3, #13
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d10c      	bne.n	800141a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f949 	bl	800069c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2203      	movs	r2, #3
 8001410:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001412:	f7fe ff65 	bl	80002e0 <HAL_GetTick>
 8001416:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001418:	e022      	b.n	8001460 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141e:	f043 0210 	orr.w	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	f043 0201 	orr.w	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e01c      	b.n	8001470 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001436:	f7fe ff53 	bl	80002e0 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d90d      	bls.n	8001460 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001448:	f043 0210 	orr.w	r2, r3, #16
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001454:	f043 0201 	orr.w	r2, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e007      	b.n	8001470 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1e3      	bne.n	8001436 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800148e:	2b00      	cmp	r3, #0
 8001490:	d14b      	bne.n	800152a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001496:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d021      	beq.n	80014f0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f808 	bl	80004c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d032      	beq.n	8001522 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d12b      	bne.n	8001522 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d11f      	bne.n	8001522 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e6:	f043 0201 	orr.w	r2, r3, #1
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80014ee:	e018      	b.n	8001522 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d111      	bne.n	8001522 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d105      	bne.n	8001522 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151a:	f043 0201 	orr.w	r2, r3, #1
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f007 fbb2 	bl	8008c8c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001528:	e00e      	b.n	8001548 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f7ff faca 	bl	8000ad0 <HAL_ADC_ErrorCallback>
}
 800153c:	e004      	b.n	8001548 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	4798      	blx	r3
}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7ff faac 	bl	8000abc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158a:	f043 0204 	orr.w	r2, r3, #4
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7ff fa9c 	bl	8000ad0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <LL_ADC_IsEnabled>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <LL_ADC_IsEnabled+0x18>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <LL_ADC_IsEnabled+0x1a>
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_ADC_StartCalibration>:
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80015e2:	4313      	orrs	r3, r2
 80015e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	609a      	str	r2, [r3, #8]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_IsCalibrationOnGoing>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800160c:	d101      	bne.n	8001612 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <LL_ADC_REG_StartConversion>:
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001630:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001634:	f043 0204 	orr.w	r2, r3, #4
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	609a      	str	r2, [r3, #8]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_ADC_REG_IsConversionOngoing>:
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b04      	cmp	r3, #4
 800165a:	d101      	bne.n	8001660 <LL_ADC_REG_IsConversionOngoing+0x18>
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <HAL_ADCEx_Calibration_Start+0x1c>
 8001688:	2302      	movs	r3, #2
 800168a:	e04d      	b.n	8001728 <HAL_ADCEx_Calibration_Start+0xb8>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fe97 	bl	80013c8 <ADC_Disable>
 800169a:	4603      	mov	r3, r0
 800169c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d136      	bne.n	8001712 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016ac:	f023 0302 	bic.w	r3, r3, #2
 80016b0:	f043 0202 	orr.w	r2, r3, #2
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6839      	ldr	r1, [r7, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff81 	bl	80015c6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80016c4:	e014      	b.n	80016f0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	3301      	adds	r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4a18      	ldr	r2, [pc, #96]	; (8001730 <HAL_ADCEx_Calibration_Start+0xc0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d90d      	bls.n	80016f0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	f023 0312 	bic.w	r3, r3, #18
 80016dc:	f043 0210 	orr.w	r2, r3, #16
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e01b      	b.n	8001728 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff7f 	bl	80015f8 <LL_ADC_IsCalibrationOnGoing>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1e2      	bne.n	80016c6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	f023 0303 	bic.w	r3, r3, #3
 8001708:	f043 0201 	orr.w	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001710:	e005      	b.n	800171e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001716:	f043 0210 	orr.w	r2, r3, #16
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	0004de01 	.word	0x0004de01

08001734 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b0a2      	sub	sp, #136	; 0x88
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff7f 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8001750:	2302      	movs	r3, #2
 8001752:	e07e      	b.n	8001852 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800175e:	2302      	movs	r3, #2
 8001760:	e077      	b.n	8001852 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001772:	d102      	bne.n	800177a <HAL_ADCEx_MultiModeStart_DMA+0x46>
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <HAL_ADCEx_MultiModeStart_DMA+0x128>)
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e001      	b.n	800177e <HAL_ADCEx_MultiModeStart_DMA+0x4a>
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10b      	bne.n	800179c <HAL_ADCEx_MultiModeStart_DMA+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	f043 0220 	orr.w	r2, r3, #32
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e05a      	b.n	8001852 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f7ff fdb9 	bl	8001314 <ADC_Enable>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 80017a8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d107      	bne.n	80017c0 <HAL_ADCEx_MultiModeStart_DMA+0x8c>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fdad 	bl	8001314 <ADC_Enable>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80017c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d13e      	bne.n	8001846 <HAL_ADCEx_MultiModeStart_DMA+0x112>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e6:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <HAL_ADCEx_MultiModeStart_DMA+0x12c>)
 80017e8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ee:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 80017f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f6:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 80017f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 80017fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	221c      	movs	r2, #28
 8001806:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0210 	orr.w	r2, r2, #16
 800181e:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001824:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001828:	330c      	adds	r3, #12
 800182a:	4619      	mov	r1, r3
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f000 fb2c 	bl	8001e8c <HAL_DMA_Start_IT>
 8001834:	4603      	mov	r3, r0
 8001836:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff feee 	bl	8001620 <LL_ADC_REG_StartConversion>
 8001844:	e003      	b.n	800184e <HAL_ADCEx_MultiModeStart_DMA+0x11a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800184e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 8001852:	4618      	mov	r0, r3
 8001854:	3788      	adds	r7, #136	; 0x88
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	50000100 	.word	0x50000100
 8001860:	08001479 	.word	0x08001479
 8001864:	08001551 	.word	0x08001551
 8001868:	0800156d 	.word	0x0800156d
 800186c:	50000300 	.word	0x50000300

08001870 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b0a2      	sub	sp, #136	; 0x88
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HAL_ADCEx_MultiModeStop_DMA+0x16>
 8001882:	2302      	movs	r3, #2
 8001884:	e0a3      	b.n	80019ce <HAL_ADCEx_MultiModeStop_DMA+0x15e>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800188e:	2103      	movs	r1, #3
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fc8b 	bl	80011ac <ADC_ConversionStop>
 8001896:	4603      	mov	r3, r0
 8001898:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800189c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f040 808e 	bne.w	80019c2 <HAL_ADCEx_MultiModeStop_DMA+0x152>
  {
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ae:	d102      	bne.n	80018b6 <HAL_ADCEx_MultiModeStop_DMA+0x46>
 80018b0:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <HAL_ADCEx_MultiModeStop_DMA+0x168>)
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e001      	b.n	80018ba <HAL_ADCEx_MultiModeStop_DMA+0x4a>
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]

    if (tmphadcSlave.Instance == NULL)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10b      	bne.n	80018d8 <HAL_ADCEx_MultiModeStop_DMA+0x68>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	f043 0220 	orr.w	r2, r3, #32
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e07a      	b.n	80019ce <HAL_ADCEx_MultiModeStop_DMA+0x15e>

    /* Procedure to disable the ADC peripheral: wait for conversions          */
    /* effectively stopped (ADC master and ADC slave), then disable ADC       */

    /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
    tickstart = HAL_GetTick();
 80018d8:	f7fe fd02 	bl	80002e0 <HAL_GetTick>
 80018dc:	67f8      	str	r0, [r7, #124]	; 0x7c

    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff feb1 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 80018e6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 80018ea:	e018      	b.n	800191e <HAL_ADCEx_MultiModeStop_DMA+0xae>
           || (tmphadcSlave_conversion_on_going == 1UL)
          )
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80018ec:	f7fe fcf8 	bl	80002e0 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	d90b      	bls.n	8001912 <HAL_ADCEx_MultiModeStop_DMA+0xa2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fe:	f043 0210 	orr.w	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e05d      	b.n	80019ce <HAL_ADCEx_MultiModeStop_DMA+0x15e>
      }

      tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fe97 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 800191a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fe90 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 8001928:	4603      	mov	r3, r0
 800192a:	2b01      	cmp	r3, #1
 800192c:	d0de      	beq.n	80018ec <HAL_ADCEx_MultiModeStop_DMA+0x7c>
           || (tmphadcSlave_conversion_on_going == 1UL)
 800192e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001932:	2b01      	cmp	r3, #1
 8001934:	d0da      	beq.n	80018ec <HAL_ADCEx_MultiModeStop_DMA+0x7c>

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    /* Note: DMA channel of ADC slave should be stopped after this function   */
    /*       with HAL_ADC_Stop_DMA() API.                                     */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fb21 	bl	8001f82 <HAL_DMA_Abort>
 8001940:	4603      	mov	r3, r0
 8001942:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_ERROR)
 8001946:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800194a:	2b01      	cmp	r3, #1
 800194c:	d105      	bne.n	800195a <HAL_ADCEx_MultiModeStop_DMA+0xea>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001952:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0210 	bic.w	r2, r2, #16
 8001968:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripherals: master and slave */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
    /* memory a potential failing status.                                     */
    if (tmp_hal_status == HAL_OK)
 800196a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800196e:	2b00      	cmp	r3, #0
 8001970:	d115      	bne.n	800199e <HAL_ADCEx_MultiModeStop_DMA+0x12e>
    {
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fd26 	bl	80013c8 <ADC_Disable>
 800197c:	4603      	mov	r3, r0
 800197e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fd20 	bl	80013c8 <ADC_Disable>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10f      	bne.n	80019ae <HAL_ADCEx_MultiModeStop_DMA+0x13e>
 800198e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10b      	bne.n	80019ae <HAL_ADCEx_MultiModeStop_DMA+0x13e>
          (tmphadcSlave_disable_status == HAL_OK))
      {
        tmp_hal_status = HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800199c:	e007      	b.n	80019ae <HAL_ADCEx_MultiModeStop_DMA+0x13e>
      }
    }
    else
    {
      /* In case of error, attempt to disable ADC master and slave without status assert */
      (void) ADC_Disable(hadc);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fd12 	bl	80013c8 <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fd0d 	bl	80013c8 <ADC_Disable>
    }

    /* Set ADC state (ADC master) */
    ADC_STATE_CLR_SET(hadc->State,
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	f043 0201 	orr.w	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80019ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3788      	adds	r7, #136	; 0x88
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	50000100 	.word	0x50000100

080019dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b0a1      	sub	sp, #132	; 0x84
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e087      	b.n	8001b0a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a0a:	d102      	bne.n	8001a12 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001a0c:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	e001      	b.n	8001a16 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10b      	bne.n	8001a34 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	f043 0220 	orr.w	r2, r3, #32
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e06a      	b.n	8001b0a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fe06 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 8001a3c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fe00 	bl	8001648 <LL_ADC_REG_IsConversionOngoing>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d14c      	bne.n	8001ae8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d149      	bne.n	8001ae8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001a54:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001a56:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d028      	beq.n	8001ab2 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a72:	035b      	lsls	r3, r3, #13
 8001a74:	430b      	orrs	r3, r1
 8001a76:	431a      	orrs	r2, r3
 8001a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a80:	f7ff fd8e 	bl	80015a0 <LL_ADC_IsEnabled>
 8001a84:	4604      	mov	r4, r0
 8001a86:	4823      	ldr	r0, [pc, #140]	; (8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001a88:	f7ff fd8a 	bl	80015a0 <LL_ADC_IsEnabled>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4323      	orrs	r3, r4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d133      	bne.n	8001afc <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a9c:	f023 030f 	bic.w	r3, r3, #15
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	6811      	ldr	r1, [r2, #0]
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	6892      	ldr	r2, [r2, #8]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ab0:	e024      	b.n	8001afc <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001abc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001abe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ac2:	f7ff fd6d 	bl	80015a0 <LL_ADC_IsEnabled>
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	4812      	ldr	r0, [pc, #72]	; (8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001aca:	f7ff fd69 	bl	80015a0 <LL_ADC_IsEnabled>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4323      	orrs	r3, r4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d112      	bne.n	8001afc <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ade:	f023 030f 	bic.w	r3, r3, #15
 8001ae2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ae4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ae6:	e009      	b.n	8001afc <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aec:	f043 0220 	orr.w	r2, r3, #32
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001afa:	e000      	b.n	8001afe <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001afc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001b06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3784      	adds	r7, #132	; 0x84
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd90      	pop	{r4, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	50000100 	.word	0x50000100
 8001b18:	50000300 	.word	0x50000300

08001b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	60d3      	str	r3, [r2, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__NVIC_GetPriorityGrouping+0x18>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db0b      	blt.n	8001baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	4907      	ldr	r1, [pc, #28]	; (8001bb8 <__NVIC_EnableIRQ+0x38>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000e100 	.word	0xe000e100

08001bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db0a      	blt.n	8001be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	490c      	ldr	r1, [pc, #48]	; (8001c08 <__NVIC_SetPriority+0x4c>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	440b      	add	r3, r1
 8001be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be4:	e00a      	b.n	8001bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4908      	ldr	r1, [pc, #32]	; (8001c0c <__NVIC_SetPriority+0x50>)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	3b04      	subs	r3, #4
 8001bf4:	0112      	lsls	r2, r2, #4
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	761a      	strb	r2, [r3, #24]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000e100 	.word	0xe000e100
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f1c3 0307 	rsb	r3, r3, #7
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	bf28      	it	cs
 8001c2e:	2304      	movcs	r3, #4
 8001c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3304      	adds	r3, #4
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d902      	bls.n	8001c40 <NVIC_EncodePriority+0x30>
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3b03      	subs	r3, #3
 8001c3e:	e000      	b.n	8001c42 <NVIC_EncodePriority+0x32>
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	401a      	ands	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	43d9      	mvns	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	4313      	orrs	r3, r2
         );
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c88:	d301      	bcc.n	8001c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00f      	b.n	8001cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <SysTick_Config+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f7ff ff8e 	bl	8001bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff29 	bl	8001b1c <__NVIC_SetPriorityGrouping>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff40 	bl	8001b64 <__NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff90 	bl	8001c10 <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff5f 	bl	8001bbc <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff33 	bl	8001b80 <__NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffa4 	bl	8001c78 <SysTick_Config>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e08d      	b.n	8001e6a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b47      	ldr	r3, [pc, #284]	; (8001e74 <HAL_DMA_Init+0x138>)
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d80f      	bhi.n	8001d7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b45      	ldr	r3, [pc, #276]	; (8001e78 <HAL_DMA_Init+0x13c>)
 8001d62:	4413      	add	r3, r2
 8001d64:	4a45      	ldr	r2, [pc, #276]	; (8001e7c <HAL_DMA_Init+0x140>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	009a      	lsls	r2, r3, #2
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a42      	ldr	r2, [pc, #264]	; (8001e80 <HAL_DMA_Init+0x144>)
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
 8001d78:	e00e      	b.n	8001d98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b40      	ldr	r3, [pc, #256]	; (8001e84 <HAL_DMA_Init+0x148>)
 8001d82:	4413      	add	r3, r2
 8001d84:	4a3d      	ldr	r2, [pc, #244]	; (8001e7c <HAL_DMA_Init+0x140>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	009a      	lsls	r2, r3, #2
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a3c      	ldr	r2, [pc, #240]	; (8001e88 <HAL_DMA_Init+0x14c>)
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001db2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fa10 	bl	8002210 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df8:	d102      	bne.n	8001e00 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e14:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d010      	beq.n	8001e40 <HAL_DMA_Init+0x104>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d80c      	bhi.n	8001e40 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fa30 	bl	800228c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	e008      	b.n	8001e52 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40020407 	.word	0x40020407
 8001e78:	bffdfff8 	.word	0xbffdfff8
 8001e7c:	cccccccd 	.word	0xcccccccd
 8001e80:	40020000 	.word	0x40020000
 8001e84:	bffdfbf8 	.word	0xbffdfbf8
 8001e88:	40020400 	.word	0x40020400

08001e8c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_DMA_Start_IT+0x20>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e066      	b.n	8001f7a <HAL_DMA_Start_IT+0xee>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d155      	bne.n	8001f6c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	68b9      	ldr	r1, [r7, #8]
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 f954 	bl	8002192 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 020e 	orr.w	r2, r2, #14
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	e00f      	b.n	8001f24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0204 	bic.w	r2, r2, #4
 8001f12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 020a 	orr.w	r2, r2, #10
 8001f22:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f40:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f58:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0201 	orr.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e005      	b.n	8001f78 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f74:	2302      	movs	r3, #2
 8001f76:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d005      	beq.n	8001fa6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e037      	b.n	8002016 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 020e 	bic.w	r2, r2, #14
 8001fb4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fc4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0201 	bic.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f003 021f 	and.w	r2, r3, #31
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ff2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00c      	beq.n	8002016 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800200a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002014:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	2204      	movs	r2, #4
 8002056:	409a      	lsls	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d026      	beq.n	80020ae <HAL_DMA_IRQHandler+0x7a>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b00      	cmp	r3, #0
 8002068:	d021      	beq.n	80020ae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0320 	and.w	r3, r3, #32
 8002074:	2b00      	cmp	r3, #0
 8002076:	d107      	bne.n	8002088 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0204 	bic.w	r2, r2, #4
 8002086:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208c:	f003 021f 	and.w	r2, r3, #31
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	2104      	movs	r1, #4
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d071      	beq.n	8002188 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80020ac:	e06c      	b.n	8002188 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	2202      	movs	r2, #2
 80020b8:	409a      	lsls	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d02e      	beq.n	8002120 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d029      	beq.n	8002120 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10b      	bne.n	80020f2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 020a 	bic.w	r2, r2, #10
 80020e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f003 021f 	and.w	r2, r3, #31
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	2102      	movs	r1, #2
 8002100:	fa01 f202 	lsl.w	r2, r1, r2
 8002104:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d038      	beq.n	8002188 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800211e:	e033      	b.n	8002188 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	2208      	movs	r2, #8
 800212a:	409a      	lsls	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d02a      	beq.n	800218a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d025      	beq.n	800218a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 020e 	bic.w	r2, r2, #14
 800214c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f003 021f 	and.w	r2, r3, #31
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f202 	lsl.w	r2, r1, r2
 8002160:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002188:	bf00      	nop
 800218a:	bf00      	nop
}
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021a8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80021ba:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2101      	movs	r1, #1
 80021ca:	fa01 f202 	lsl.w	r2, r1, r2
 80021ce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b10      	cmp	r3, #16
 80021de:	d108      	bne.n	80021f2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021f0:	e007      	b.n	8002202 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	60da      	str	r2, [r3, #12]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002220:	429a      	cmp	r2, r3
 8002222:	d802      	bhi.n	800222a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	e001      	b.n	800222e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800222c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	3b08      	subs	r3, #8
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	009a      	lsls	r2, r3, #2
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	461a      	mov	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800225a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	2201      	movs	r2, #1
 8002264:	409a      	lsls	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	651a      	str	r2, [r3, #80]	; 0x50
}
 800226a:	bf00      	nop
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40020407 	.word	0x40020407
 800227c:	40020800 	.word	0x40020800
 8002280:	40020820 	.word	0x40020820
 8002284:	cccccccd 	.word	0xcccccccd
 8002288:	40020880 	.word	0x40020880

0800228c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	461a      	mov	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80022ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	2201      	movs	r2, #1
 80022ba:	409a      	lsls	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	1000823f 	.word	0x1000823f
 80022d0:	40020940 	.word	0x40020940

080022d4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e147      	b.n	8002576 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f009 f90a 	bl	800b514 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0210 	bic.w	r2, r2, #16
 800230e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002310:	f7fd ffe6 	bl	80002e0 <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002316:	e012      	b.n	800233e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002318:	f7fd ffe2 	bl	80002e0 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b0a      	cmp	r3, #10
 8002324:	d90b      	bls.n	800233e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232a:	f043 0201 	orr.w	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2203      	movs	r2, #3
 8002336:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e11b      	b.n	8002576 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b08      	cmp	r3, #8
 800234a:	d0e5      	beq.n	8002318 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800235c:	f7fd ffc0 	bl	80002e0 <HAL_GetTick>
 8002360:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002362:	e012      	b.n	800238a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002364:	f7fd ffbc 	bl	80002e0 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b0a      	cmp	r3, #10
 8002370:	d90b      	bls.n	800238a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2203      	movs	r2, #3
 8002382:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e0f5      	b.n	8002576 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0e5      	beq.n	8002364 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0202 	orr.w	r2, r2, #2
 80023a6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a74      	ldr	r2, [pc, #464]	; (8002580 <HAL_FDCAN_Init+0x2ac>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d103      	bne.n	80023ba <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80023b2:	4a74      	ldr	r2, [pc, #464]	; (8002584 <HAL_FDCAN_Init+0x2b0>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7c1b      	ldrb	r3, [r3, #16]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d108      	bne.n	80023d4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699a      	ldr	r2, [r3, #24]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d0:	619a      	str	r2, [r3, #24]
 80023d2:	e007      	b.n	80023e4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7c5b      	ldrb	r3, [r3, #17]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d108      	bne.n	80023fe <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023fa:	619a      	str	r2, [r3, #24]
 80023fc:	e007      	b.n	800240e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699a      	ldr	r2, [r3, #24]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800240c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7c9b      	ldrb	r3, [r3, #18]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d108      	bne.n	8002428 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002424:	619a      	str	r2, [r3, #24]
 8002426:	e007      	b.n	8002438 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002436:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699a      	ldr	r2, [r3, #24]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800245c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0210 	bic.w	r2, r2, #16
 800246c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d108      	bne.n	8002488 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699a      	ldr	r2, [r3, #24]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0204 	orr.w	r2, r2, #4
 8002484:	619a      	str	r2, [r3, #24]
 8002486:	e02c      	b.n	80024e2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d028      	beq.n	80024e2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d01c      	beq.n	80024d2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024a6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691a      	ldr	r2, [r3, #16]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0210 	orr.w	r2, r2, #16
 80024b6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d110      	bne.n	80024e2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0220 	orr.w	r2, r2, #32
 80024ce:	619a      	str	r2, [r3, #24]
 80024d0:	e007      	b.n	80024e2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699a      	ldr	r2, [r3, #24]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0220 	orr.w	r2, r2, #32
 80024e0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024f2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80024fa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	3b01      	subs	r3, #1
 8002504:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800250a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800250c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002516:	d115      	bne.n	8002544 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	3b01      	subs	r3, #1
 8002524:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002526:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	3b01      	subs	r3, #1
 800252e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002530:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	3b01      	subs	r3, #1
 800253a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002540:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002542:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fcb8 	bl	8002ed0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40006400 	.word	0x40006400
 8002584:	40006500 	.word	0x40006500

08002588 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002598:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800259a:	7dfb      	ldrb	r3, [r7, #23]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d002      	beq.n	80025a6 <HAL_FDCAN_ConfigFilter+0x1e>
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d13d      	bne.n	8002622 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d119      	bne.n	80025e2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80025ba:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80025c2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e01d      	b.n	800261e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	075a      	lsls	r2, r3, #29
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	079a      	lsls	r2, r3, #30
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3304      	adds	r3, #4
 8002616:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	e006      	b.n	8002630 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002626:	f043 0202 	orr.w	r2, r3, #2
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
  }
}
 8002630:	4618      	mov	r0, r3
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d116      	bne.n	8002684 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800265e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	011a      	lsls	r2, r3, #4
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	431a      	orrs	r2, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	431a      	orrs	r2, r3
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                         (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                                         (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                                         (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e006      	b.n	8002692 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002688:	f043 0204 	orr.w	r2, r3, #4
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 800269e:	b480      	push	{r7}
 80026a0:	b085      	sub	sp, #20
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d11f      	bne.n	80026f6 <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b40      	cmp	r3, #64	; 0x40
 80026ba:	d10d      	bne.n	80026d8 <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c4:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	025a      	lsls	r2, r3, #9
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80026d6:	e00c      	b.n	80026f2 <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026e0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	021a      	lsls	r2, r3, #8
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Return function status */
    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e006      	b.n	8002704 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fa:	f043 0204 	orr.w	r2, r3, #4
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
  }
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d110      	bne.n	8002746 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	e006      	b.n	8002754 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274a:	f043 0204 	orr.w	r2, r3, #4
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
  }
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d12c      	bne.n	80027d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e023      	b.n	80027e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80027a0:	0c1b      	lsrs	r3, r3, #16
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fbe4 	bl	8002f7c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2101      	movs	r1, #1
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	fa01 f202 	lsl.w	r2, r1, r2
 80027c0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80027c4:	2201      	movs	r2, #1
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	409a      	lsls	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	e006      	b.n	80027e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d6:	f043 0208 	orr.w	r2, r3, #8
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
  }
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b08b      	sub	sp, #44	; 0x2c
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027fc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80027fe:	7efb      	ldrb	r3, [r7, #27]
 8002800:	2b02      	cmp	r3, #2
 8002802:	f040 80bc 	bne.w	800297e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b40      	cmp	r3, #64	; 0x40
 800280a:	d121      	bne.n	8002850 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	2b00      	cmp	r3, #0
 800281a:	d107      	bne.n	800282c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002820:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0af      	b.n	800298c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
 800284e:	e020      	b.n	8002892 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002864:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e08d      	b.n	800298c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	4613      	mov	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	440b      	add	r3, r1
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	0c9b      	lsrs	r3, r3, #18
 80028ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	e005      	b.n	80028c2 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	3304      	adds	r3, #4
 80028de:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	0e1b      	lsrs	r3, r3, #24
 8002914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	0fda      	lsrs	r2, r3, #31
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	3304      	adds	r3, #4
 800292a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002930:	2300      	movs	r3, #0
 8002932:	623b      	str	r3, [r7, #32]
 8002934:	e00a      	b.n	800294c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	441a      	add	r2, r3
 800293c:	6839      	ldr	r1, [r7, #0]
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	440b      	add	r3, r1
 8002942:	7812      	ldrb	r2, [r2, #0]
 8002944:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	3301      	adds	r3, #1
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	4a11      	ldr	r2, [pc, #68]	; (8002998 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	461a      	mov	r2, r3
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	4293      	cmp	r3, r2
 800295c:	d3eb      	bcc.n	8002936 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b40      	cmp	r3, #64	; 0x40
 8002962:	d105      	bne.n	8002970 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800296e:	e004      	b.n	800297a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e006      	b.n	800298c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002982:	f043 0208 	orr.w	r2, r3, #8
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
  }
}
 800298c:	4618      	mov	r0, r3
 800298e:	372c      	adds	r7, #44	; 0x2c
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	0800be50 	.word	0x0800be50

0800299c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029d2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d003      	beq.n	80029e2 <HAL_FDCAN_ActivateNotification+0x22>
 80029da:	7dfb      	ldrb	r3, [r7, #23]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	f040 80c8 	bne.w	8002b72 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <HAL_FDCAN_ActivateNotification+0x3e>
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d03b      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d004      	beq.n	8002a12 <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d031      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d004      	beq.n	8002a26 <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d027      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d004      	beq.n	8002a3a <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01d      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d013      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d004      	beq.n	8002a62 <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00c      	beq.n	8002a86 <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d107      	bne.n	8002a86 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d004      	beq.n	8002a9a <HAL_FDCAN_ActivateNotification+0xda>
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d13b      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d004      	beq.n	8002aae <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d131      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d127      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d11d      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d113      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d004      	beq.n	8002afe <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00c      	beq.n	8002b22 <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0202 	orr.w	r2, r2, #2
 8002b20:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d009      	beq.n	8002b40 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e006      	b.n	8002b80 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	f043 0202 	orr.w	r2, r3, #2
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
  }
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba8:	4013      	ands	r3, r2
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	6a3a      	ldr	r2, [r7, #32]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bce:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be2:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8002be6:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002bfe:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d006      	beq.n	8002c36 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2240      	movs	r2, #64	; 0x40
 8002c2e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f92e 	bl	8002e92 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01b      	beq.n	8002c7c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d014      	beq.n	8002c7c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c5a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c72:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002c74:	6939      	ldr	r1, [r7, #16]
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f8ec 	bl	8002e54 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c88:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002c8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f8b6 	bl	8002dfe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d007      	beq.n	8002ca8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6a3a      	ldr	r2, [r7, #32]
 8002c9e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002ca0:	6a39      	ldr	r1, [r7, #32]
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f006 fd10 	bl	80096c8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002cb6:	69f9      	ldr	r1, [r7, #28]
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f8ab 	bl	8002e14 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00e      	beq.n	8002cea <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f8a0 	bl	8002e2a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01a      	beq.n	8002d2e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d013      	beq.n	8002d2e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002d0e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002d26:	68f9      	ldr	r1, [r7, #12]
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f888 	bl	8002e3e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00e      	beq.n	8002d5a <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d52:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f888 	bl	8002e6a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00e      	beq.n	8002d86 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d7e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f87c 	bl	8002e7e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d011      	beq.n	8002db8 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002daa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002dc6:	6979      	ldr	r1, [r7, #20]
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f876 	bl	8002eba <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d009      	beq.n	8002de8 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f858 	bl	8002ea6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002df6:	bf00      	nop
 8002df8:	3728      	adds	r7, #40	; 0x28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002ed8:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002eda:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eea:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef2:	041a      	lsls	r2, r3, #16
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f10:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	061a      	lsls	r2, r3, #24
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e005      	b.n	8002f5e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d3f3      	bcc.n	8002f52 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	4000a400 	.word	0x4000a400

08002f7c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002f9a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	e00a      	b.n	8002fbe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002fb0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002fb6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fbc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002fc8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002fce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002fd4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	3304      	adds	r3, #4
 8003006:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	e020      	b.n	8003050 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	3303      	adds	r3, #3
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	3302      	adds	r3, #2
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	440b      	add	r3, r1
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003026:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	3301      	adds	r3, #1
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	440b      	add	r3, r1
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003034:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	440a      	add	r2, r1
 800303c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800303e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	3304      	adds	r3, #4
 8003048:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	3304      	adds	r3, #4
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	4a06      	ldr	r2, [pc, #24]	; (8003070 <FDCAN_CopyMessageToRAM+0xf4>)
 8003058:	5cd3      	ldrb	r3, [r2, r3]
 800305a:	461a      	mov	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	4293      	cmp	r3, r2
 8003060:	d3d5      	bcc.n	800300e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8003062:	bf00      	nop
 8003064:	3724      	adds	r7, #36	; 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	0800be50 	.word	0x0800be50

08003074 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003086:	4b24      	ldr	r3, [pc, #144]	; (8003118 <HAL_FLASH_Program+0xa4>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_FLASH_Program+0x1e>
 800308e:	2302      	movs	r3, #2
 8003090:	e03e      	b.n	8003110 <HAL_FLASH_Program+0x9c>
 8003092:	4b21      	ldr	r3, [pc, #132]	; (8003118 <HAL_FLASH_Program+0xa4>)
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800309c:	f000 f87c 	bl	8003198 <FLASH_WaitForLastOperation>
 80030a0:	4603      	mov	r3, r0
 80030a2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d12e      	bne.n	8003108 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030aa:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_FLASH_Program+0xa4>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d107      	bne.n	80030c6 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80030b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030ba:	68b8      	ldr	r0, [r7, #8]
 80030bc:	f000 f8c0 	bl	8003240 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80030c0:	2301      	movs	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e010      	b.n	80030e8 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d002      	beq.n	80030d2 <HAL_FLASH_Program+0x5e>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d10a      	bne.n	80030e8 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	4619      	mov	r1, r3
 80030d6:	68b8      	ldr	r0, [r7, #8]
 80030d8:	f000 f8d6 	bl	8003288 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d102      	bne.n	80030e8 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80030e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030e6:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80030e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030ec:	f000 f854 	bl	8003198 <FLASH_WaitForLastOperation>
 80030f0:	4603      	mov	r3, r0
 80030f2:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <HAL_FLASH_Program+0xa8>)
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	43db      	mvns	r3, r3
 8003102:	4906      	ldr	r1, [pc, #24]	; (800311c <HAL_FLASH_Program+0xa8>)
 8003104:	4013      	ands	r3, r2
 8003106:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <HAL_FLASH_Program+0xa4>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800310e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000008 	.word	0x20000008
 800311c:	40022000 	.word	0x40022000

08003120 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_FLASH_Unlock+0x38>)
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	2b00      	cmp	r3, #0
 8003130:	da0b      	bge.n	800314a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003132:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_FLASH_Unlock+0x38>)
 8003134:	4a09      	ldr	r2, [pc, #36]	; (800315c <HAL_FLASH_Unlock+0x3c>)
 8003136:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003138:	4b07      	ldr	r3, [pc, #28]	; (8003158 <HAL_FLASH_Unlock+0x38>)
 800313a:	4a09      	ldr	r2, [pc, #36]	; (8003160 <HAL_FLASH_Unlock+0x40>)
 800313c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_FLASH_Unlock+0x38>)
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	da01      	bge.n	800314a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800314a:	79fb      	ldrb	r3, [r7, #7]
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	40022000 	.word	0x40022000
 800315c:	45670123 	.word	0x45670123
 8003160:	cdef89ab 	.word	0xcdef89ab

08003164 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_FLASH_Lock+0x30>)
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	4a08      	ldr	r2, [pc, #32]	; (8003194 <HAL_FLASH_Lock+0x30>)
 8003174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003178:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_FLASH_Lock+0x30>)
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	da01      	bge.n	8003186 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8003186:	79fb      	ldrb	r3, [r7, #7]
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40022000 	.word	0x40022000

08003198 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7fd f89e 	bl	80002e0 <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80031a6:	e009      	b.n	80031bc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80031a8:	f7fd f89a 	bl	80002e0 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d201      	bcs.n	80031bc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e038      	b.n	800322e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80031bc:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c8:	d0ee      	beq.n	80031a8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80031ca:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80031d2:	4013      	ands	r3, r2
 80031d4:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01e      	beq.n	800321a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80031dc:	4b17      	ldr	r3, [pc, #92]	; (800323c <FLASH_WaitForLastOperation+0xa4>)
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	4a15      	ldr	r2, [pc, #84]	; (800323c <FLASH_WaitForLastOperation+0xa4>)
 80031e6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <FLASH_WaitForLastOperation+0x6a>
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80031fc:	490e      	ldr	r1, [pc, #56]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	618b      	str	r3, [r1, #24]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d004      	beq.n	8003216 <FLASH_WaitForLastOperation+0x7e>
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003214:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e009      	b.n	800322e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d102      	bne.n	800322c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003226:	4b04      	ldr	r3, [pc, #16]	; (8003238 <FLASH_WaitForLastOperation+0xa0>)
 8003228:	2201      	movs	r2, #1
 800322a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40022000 	.word	0x40022000
 800323c:	20000008 	.word	0x20000008

08003240 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003240:	b490      	push	{r4, r7}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800324c:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <FLASH_Program_DoubleWord+0x44>)
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	4a0c      	ldr	r2, [pc, #48]	; (8003284 <FLASH_Program_DoubleWord+0x44>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800325e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003262:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	f04f 0400 	mov.w	r4, #0
 800326e:	0013      	movs	r3, r2
 8003270:	2400      	movs	r4, #0
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	3204      	adds	r2, #4
 8003276:	6013      	str	r3, [r2, #0]
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bc90      	pop	{r4, r7}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40022000 	.word	0x40022000

08003288 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003288:	b480      	push	{r7}
 800328a:	b089      	sub	sp, #36	; 0x24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003292:	2340      	movs	r3, #64	; 0x40
 8003294:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800329e:	4b13      	ldr	r3, [pc, #76]	; (80032ec <FLASH_Program_Fast+0x64>)
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	4a12      	ldr	r2, [pc, #72]	; (80032ec <FLASH_Program_Fast+0x64>)
 80032a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032aa:	f3ef 8310 	mrs	r3, PRIMASK
 80032ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80032b0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80032b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80032b4:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	3304      	adds	r3, #4
 80032c2:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	3304      	adds	r3, #4
 80032c8:	617b      	str	r3, [r7, #20]
    row_index--;
 80032ca:	7ffb      	ldrb	r3, [r7, #31]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80032d0:	7ffb      	ldrb	r3, [r7, #31]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1ef      	bne.n	80032b6 <FLASH_Program_Fast+0x2e>
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80032e0:	bf00      	nop
 80032e2:	3724      	adds	r7, #36	; 0x24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40022000 	.word	0x40022000

080032f0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80032fa:	4b4a      	ldr	r3, [pc, #296]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_FLASHEx_Erase+0x16>
 8003302:	2302      	movs	r3, #2
 8003304:	e089      	b.n	800341a <HAL_FLASHEx_Erase+0x12a>
 8003306:	4b47      	ldr	r3, [pc, #284]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800330c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003310:	f7ff ff42 	bl	8003198 <FLASH_WaitForLastOperation>
 8003314:	4603      	mov	r3, r0
 8003316:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d179      	bne.n	8003412 <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800331e:	4b41      	ldr	r3, [pc, #260]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 8003320:	2200      	movs	r2, #0
 8003322:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003324:	4b40      	ldr	r3, [pc, #256]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332c:	2b00      	cmp	r3, #0
 800332e:	d019      	beq.n	8003364 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003330:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a3c      	ldr	r2, [pc, #240]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003336:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800333a:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800333c:	4b3a      	ldr	r3, [pc, #232]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003344:	2b00      	cmp	r3, #0
 8003346:	d009      	beq.n	800335c <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003348:	4b37      	ldr	r3, [pc, #220]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a36      	ldr	r2, [pc, #216]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 800334e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003352:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003354:	4b33      	ldr	r3, [pc, #204]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 8003356:	2203      	movs	r2, #3
 8003358:	771a      	strb	r2, [r3, #28]
 800335a:	e016      	b.n	800338a <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800335c:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 800335e:	2201      	movs	r2, #1
 8003360:	771a      	strb	r2, [r3, #28]
 8003362:	e012      	b.n	800338a <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003364:	4b30      	ldr	r3, [pc, #192]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d009      	beq.n	8003384 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003370:	4b2d      	ldr	r3, [pc, #180]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a2c      	ldr	r2, [pc, #176]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 8003376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800337a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800337c:	4b29      	ldr	r3, [pc, #164]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 800337e:	2202      	movs	r2, #2
 8003380:	771a      	strb	r2, [r3, #28]
 8003382:	e002      	b.n	800338a <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003384:	4b27      	ldr	r3, [pc, #156]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 8003386:	2200      	movs	r2, #0
 8003388:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d111      	bne.n	80033b6 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f848 	bl	800342c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800339c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033a0:	f7ff fefa 	bl	8003198 <FLASH_WaitForLastOperation>
 80033a4:	4603      	mov	r3, r0
 80033a6:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80033a8:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	4a1e      	ldr	r2, [pc, #120]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 80033ae:	f023 0304 	bic.w	r3, r3, #4
 80033b2:	6153      	str	r3, [r2, #20]
 80033b4:	e02b      	b.n	800340e <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f04f 32ff 	mov.w	r2, #4294967295
 80033bc:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	e01b      	b.n	80033fe <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	4619      	mov	r1, r3
 80033cc:	68b8      	ldr	r0, [r7, #8]
 80033ce:	f000 f84b 	bl	8003468 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033d6:	f7ff fedf 	bl	8003198 <FLASH_WaitForLastOperation>
 80033da:	4603      	mov	r3, r0
 80033dc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80033de:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	4a11      	ldr	r2, [pc, #68]	; (8003428 <HAL_FLASHEx_Erase+0x138>)
 80033e4:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80033e8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	601a      	str	r2, [r3, #0]
          break;
 80033f6:	e00a      	b.n	800340e <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	3301      	adds	r3, #1
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	4413      	add	r3, r2
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	429a      	cmp	r2, r3
 800340c:	d3db      	bcc.n	80033c6 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800340e:	f000 f84f 	bl	80034b0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003412:	4b04      	ldr	r3, [pc, #16]	; (8003424 <HAL_FLASHEx_Erase+0x134>)
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]

  return status;
 8003418:	7bfb      	ldrb	r3, [r7, #15]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000008 	.word	0x20000008
 8003428:	40022000 	.word	0x40022000

0800342c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800343e:	4b09      	ldr	r3, [pc, #36]	; (8003464 <FLASH_MassErase+0x38>)
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	4a08      	ldr	r2, [pc, #32]	; (8003464 <FLASH_MassErase+0x38>)
 8003444:	f043 0304 	orr.w	r3, r3, #4
 8003448:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <FLASH_MassErase+0x38>)
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4a05      	ldr	r2, [pc, #20]	; (8003464 <FLASH_MassErase+0x38>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003454:	6153      	str	r3, [r2, #20]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40022000 	.word	0x40022000

08003468 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <FLASH_PageErase+0x44>)
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8003482:	490a      	ldr	r1, [pc, #40]	; (80034ac <FLASH_PageErase+0x44>)
 8003484:	4313      	orrs	r3, r2
 8003486:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003488:	4b08      	ldr	r3, [pc, #32]	; (80034ac <FLASH_PageErase+0x44>)
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	4a07      	ldr	r2, [pc, #28]	; (80034ac <FLASH_PageErase+0x44>)
 800348e:	f043 0302 	orr.w	r3, r3, #2
 8003492:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <FLASH_PageErase+0x44>)
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <FLASH_PageErase+0x44>)
 800349a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349e:	6153      	str	r3, [r2, #20]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	40022000 	.word	0x40022000

080034b0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80034b6:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <FLASH_FlushCaches+0x80>)
 80034b8:	7f1b      	ldrb	r3, [r3, #28]
 80034ba:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d002      	beq.n	80034c8 <FLASH_FlushCaches+0x18>
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d111      	bne.n	80034ec <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a19      	ldr	r2, [pc, #100]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b17      	ldr	r3, [pc, #92]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a16      	ldr	r2, [pc, #88]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034de:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034e0:	4b14      	ldr	r3, [pc, #80]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a13      	ldr	r2, [pc, #76]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d002      	beq.n	80034f8 <FLASH_FlushCaches+0x48>
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d111      	bne.n	800351c <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80034f8:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0d      	ldr	r2, [pc, #52]	; (8003534 <FLASH_FlushCaches+0x84>)
 80034fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <FLASH_FlushCaches+0x84>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <FLASH_FlushCaches+0x84>)
 800350a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800350e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003510:	4b08      	ldr	r3, [pc, #32]	; (8003534 <FLASH_FlushCaches+0x84>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a07      	ldr	r2, [pc, #28]	; (8003534 <FLASH_FlushCaches+0x84>)
 8003516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800351a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <FLASH_FlushCaches+0x80>)
 800351e:	2200      	movs	r2, #0
 8003520:	771a      	strb	r2, [r3, #28]
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	20000008 	.word	0x20000008
 8003534:	40022000 	.word	0x40022000

08003538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003546:	e15a      	b.n	80037fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2101      	movs	r1, #1
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	4013      	ands	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 814c 	beq.w	80037f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x38>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b12      	cmp	r3, #18
 800356e:	d123      	bne.n	80035b8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	08da      	lsrs	r2, r3, #3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3208      	adds	r2, #8
 8003578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	220f      	movs	r2, #15
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4013      	ands	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	08da      	lsrs	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3208      	adds	r2, #8
 80035b2:	6939      	ldr	r1, [r7, #16]
 80035b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4013      	ands	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0203 	and.w	r2, r3, #3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d00b      	beq.n	800360c <HAL_GPIO_Init+0xd4>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d007      	beq.n	800360c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003600:	2b11      	cmp	r3, #17
 8003602:	d003      	beq.n	800360c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b12      	cmp	r3, #18
 800360a:	d130      	bne.n	800366e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	2203      	movs	r2, #3
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003642:	2201      	movs	r2, #1
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f003 0201 	and.w	r2, r3, #1
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	2203      	movs	r2, #3
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43db      	mvns	r3, r3
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4013      	ands	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80a6 	beq.w	80037f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ac:	4b5b      	ldr	r3, [pc, #364]	; (800381c <HAL_GPIO_Init+0x2e4>)
 80036ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b0:	4a5a      	ldr	r2, [pc, #360]	; (800381c <HAL_GPIO_Init+0x2e4>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6613      	str	r3, [r2, #96]	; 0x60
 80036b8:	4b58      	ldr	r3, [pc, #352]	; (800381c <HAL_GPIO_Init+0x2e4>)
 80036ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036c4:	4a56      	ldr	r2, [pc, #344]	; (8003820 <HAL_GPIO_Init+0x2e8>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	3302      	adds	r3, #2
 80036cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	220f      	movs	r2, #15
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036ee:	d01f      	beq.n	8003730 <HAL_GPIO_Init+0x1f8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a4c      	ldr	r2, [pc, #304]	; (8003824 <HAL_GPIO_Init+0x2ec>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d019      	beq.n	800372c <HAL_GPIO_Init+0x1f4>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a4b      	ldr	r2, [pc, #300]	; (8003828 <HAL_GPIO_Init+0x2f0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d013      	beq.n	8003728 <HAL_GPIO_Init+0x1f0>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a4a      	ldr	r2, [pc, #296]	; (800382c <HAL_GPIO_Init+0x2f4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00d      	beq.n	8003724 <HAL_GPIO_Init+0x1ec>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a49      	ldr	r2, [pc, #292]	; (8003830 <HAL_GPIO_Init+0x2f8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d007      	beq.n	8003720 <HAL_GPIO_Init+0x1e8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a48      	ldr	r2, [pc, #288]	; (8003834 <HAL_GPIO_Init+0x2fc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d101      	bne.n	800371c <HAL_GPIO_Init+0x1e4>
 8003718:	2305      	movs	r3, #5
 800371a:	e00a      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 800371c:	2306      	movs	r3, #6
 800371e:	e008      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003720:	2304      	movs	r3, #4
 8003722:	e006      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003724:	2303      	movs	r3, #3
 8003726:	e004      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003728:	2302      	movs	r3, #2
 800372a:	e002      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003730:	2300      	movs	r3, #0
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	f002 0203 	and.w	r2, r2, #3
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	4093      	lsls	r3, r2
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003742:	4937      	ldr	r1, [pc, #220]	; (8003820 <HAL_GPIO_Init+0x2e8>)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3302      	adds	r3, #2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003750:	4b39      	ldr	r3, [pc, #228]	; (8003838 <HAL_GPIO_Init+0x300>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003774:	4a30      	ldr	r2, [pc, #192]	; (8003838 <HAL_GPIO_Init+0x300>)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800377a:	4b2f      	ldr	r3, [pc, #188]	; (8003838 <HAL_GPIO_Init+0x300>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43db      	mvns	r3, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800379e:	4a26      	ldr	r2, [pc, #152]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037a4:	4b24      	ldr	r3, [pc, #144]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037ce:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037f2:	4a11      	ldr	r2, [pc, #68]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3301      	adds	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	f47f ae9d 	bne.w	8003548 <HAL_GPIO_Init+0x10>
  }
}
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000
 8003820:	40010000 	.word	0x40010000
 8003824:	48000400 	.word	0x48000400
 8003828:	48000800 	.word	0x48000800
 800382c:	48000c00 	.word	0x48000c00
 8003830:	48001000 	.word	0x48001000
 8003834:	48001400 	.word	0x48001400
 8003838:	40010400 	.word	0x40010400

0800383c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	887b      	ldrh	r3, [r7, #2]
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	e001      	b.n	800385e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800385e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
 8003878:	4613      	mov	r3, r2
 800387a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800387c:	787b      	ldrb	r3, [r7, #1]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003882:	887a      	ldrh	r2, [r7, #2]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003888:	e002      	b.n	8003890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695a      	ldr	r2, [r3, #20]
 80038ac:	887b      	ldrh	r3, [r7, #2]
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038b4:	887a      	ldrh	r2, [r7, #2]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80038ba:	e002      	b.n	80038c2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038bc:	887a      	ldrh	r2, [r7, #2]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	619a      	str	r2, [r3, #24]
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d006      	beq.n	80038f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038e6:	4a05      	ldr	r2, [pc, #20]	; (80038fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f005 f8ee 	bl	8008ad0 <HAL_GPIO_EXTI_Callback>
  }
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40010400 	.word	0x40010400

08003900 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e078      	b.n	8003a04 <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f008 f8ea 	bl	800bb00 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d004      	beq.n	800394e <HAL_LPTIM_Init+0x4e>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800394c:	d103      	bne.n	8003956 <HAL_LPTIM_Init+0x56>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f023 031e 	bic.w	r3, r3, #30
 8003954:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800395e:	4293      	cmp	r3, r2
 8003960:	d003      	beq.n	800396a <HAL_LPTIM_Init+0x6a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4b29      	ldr	r3, [pc, #164]	; (8003a0c <HAL_LPTIM_Init+0x10c>)
 8003966:	4013      	ands	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4b28      	ldr	r3, [pc, #160]	; (8003a10 <HAL_LPTIM_Init+0x110>)
 800396e:	4013      	ands	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800397a:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003980:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003986:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800398c:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d004      	beq.n	80039a6 <HAL_LPTIM_Init+0xa6>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039a4:	d107      	bne.n	80039b6 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80039ae:	4313      	orrs	r3, r2
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00a      	beq.n	80039d8 <HAL_LPTIM_Init+0xd8>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80039ca:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80039d0:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <HAL_LPTIM_Init+0x114>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d107      	bne.n	80039fa <HAL_LPTIM_Init+0xfa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	dfff1f3f 	.word	0xdfff1f3f
 8003a10:	ff19f1f8 	.word	0xff19f1f8
 8003a14:	40007c00 	.word	0x40007c00

08003a18 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003a2c:	4b1c      	ldr	r3, [pc, #112]	; (8003aa0 <HAL_LPTIM_TimeOut_Start_IT+0x88>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4a1b      	ldr	r2, [pc, #108]	; (8003aa0 <HAL_LPTIM_TimeOut_Start_IT+0x88>)
 8003a32:	f043 0320 	orr.w	r3, r3, #32
 8003a36:	6213      	str	r3, [r2, #32]

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003a46:	60da      	str	r2, [r3, #12]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	619a      	str	r2, [r3, #24]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	615a      	str	r2, [r3, #20]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0204 	orr.w	r2, r2, #4
 8003a86:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40010400 	.word	0x40010400

08003aa4 <HAL_LPTIM_TimeOut_Stop_IT>:
  * @brief  Stop the Timeout function in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 8003ab4:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <HAL_LPTIM_TimeOut_Stop_IT+0x54>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	4a0f      	ldr	r2, [pc, #60]	; (8003af8 <HAL_LPTIM_TimeOut_Stop_IT+0x54>)
 8003aba:	f023 0320 	bic.w	r3, r3, #32
 8003abe:	6213      	str	r3, [r2, #32]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f8f3 	bl	8003cac <LPTIM_Disable>

  /* Reset TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_TIMOUT;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003ad4:	60da      	str	r2, [r3, #12]

  /* Disable Compare match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPM);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	609a      	str	r2, [r3, #8]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40010400 	.word	0x40010400

08003afc <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d10d      	bne.n	8003b2e <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d106      	bne.n	8003b2e <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2201      	movs	r2, #1
 8003b26:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f004 fe4d 	bl	80087c8 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d10d      	bne.n	8003b58 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d106      	bne.n	8003b58 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f86d 	bl	8003c32 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d10d      	bne.n	8003b82 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d106      	bne.n	8003b82 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2204      	movs	r2, #4
 8003b7a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f862 	bl	8003c46 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d10d      	bne.n	8003bac <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d106      	bne.n	8003bac <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2208      	movs	r2, #8
 8003ba4:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f857 	bl	8003c5a <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d10d      	bne.n	8003bd6 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d106      	bne.n	8003bd6 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2210      	movs	r2, #16
 8003bce:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f84c 	bl	8003c6e <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d10d      	bne.n	8003c00 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d106      	bne.n	8003c00 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f841 	bl	8003c82 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0a:	2b40      	cmp	r3, #64	; 0x40
 8003c0c:	d10d      	bne.n	8003c2a <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c18:	2b40      	cmp	r3, #64	; 0x40
 8003c1a:	d106      	bne.n	8003c2a <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2240      	movs	r2, #64	; 0x40
 8003c22:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f836 	bl	8003c96 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *lptim)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb8:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)lptim->Instance)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4b61      	ldr	r3, [pc, #388]	; (8003e48 <LPTIM_Disable+0x19c>)
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d000      	beq.n	8003cc8 <LPTIM_Disable+0x1c>
  {
     case LPTIM1_BASE:
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
       break;
     default:
       break;
 8003cc6:	e006      	b.n	8003cd6 <LPTIM_Disable+0x2a>
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003cc8:	4b60      	ldr	r3, [pc, #384]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 8003cd4:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = lptim->Instance->IER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	623b      	str	r3, [r7, #32]
  tmpCFGR = lptim->Instance->CFGR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	61fb      	str	r3, [r7, #28]
  tmpCMP = lptim->Instance->CMP;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	61bb      	str	r3, [r7, #24]
  tmpARR = lptim->Instance->ARR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	617b      	str	r3, [r7, #20]
  tmpOR = lptim->Instance->OR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	613b      	str	r3, [r7, #16]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)lptim->Instance)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b50      	ldr	r3, [pc, #320]	; (8003e48 <LPTIM_Disable+0x19c>)
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d000      	beq.n	8003d0c <LPTIM_Disable+0x60>
     case LPTIM1_BASE:
       __HAL_RCC_LPTIM1_FORCE_RESET();
       __HAL_RCC_LPTIM1_RELEASE_RESET();
       break;
     default:
       break;
 8003d0a:	e00c      	b.n	8003d26 <LPTIM_Disable+0x7a>
       __HAL_RCC_LPTIM1_FORCE_RESET();
 8003d0c:	4b4f      	ldr	r3, [pc, #316]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	4a4e      	ldr	r2, [pc, #312]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003d12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d16:	6393      	str	r3, [r2, #56]	; 0x38
       __HAL_RCC_LPTIM1_RELEASE_RESET();
 8003d18:	4b4c      	ldr	r3, [pc, #304]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	4a4b      	ldr	r2, [pc, #300]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003d1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d22:	6393      	str	r3, [r2, #56]	; 0x38
       break;
 8003d24:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
  uint32_t Ref_Time;
  uint32_t Time_Elapsed;

  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <LPTIM_Disable+0x86>
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d06f      	beq.n	8003e12 <LPTIM_Disable+0x166>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)lptim->Instance)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	4b43      	ldr	r3, [pc, #268]	; (8003e48 <LPTIM_Disable+0x19c>)
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d000      	beq.n	8003d40 <LPTIM_Disable+0x94>
    {
       case LPTIM1_BASE:
         __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
         break;
       default:
         break;
 8003d3e:	e008      	b.n	8003d52 <LPTIM_Disable+0xa6>
         __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8003d40:	4b42      	ldr	r3, [pc, #264]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	4a41      	ldr	r2, [pc, #260]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003d48:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
         break;
 8003d50:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d023      	beq.n	8003da0 <LPTIM_Disable+0xf4>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	611a      	str	r2, [r3, #16]
      lptim->Instance->CMP = tmpCMP;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	615a      	str	r2, [r3, #20]
      /* Polling on CMP write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 8003d70:	f7fc fab6 	bl	80002e0 <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8003d76:	f7fc fab3 	bl	80002e0 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	60bb      	str	r3, [r7, #8]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_CMPOK))) && (Time_Elapsed <= TIMEOUT));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d003      	beq.n	8003d98 <LPTIM_Disable+0xec>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d96:	d9ee      	bls.n	8003d76 <LPTIM_Disable+0xca>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_CMPOK);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d023      	beq.n	8003dee <LPTIM_Disable+0x142>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0201 	orr.w	r2, r2, #1
 8003db4:	611a      	str	r2, [r3, #16]
      lptim->Instance->ARR = tmpARR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	619a      	str	r2, [r3, #24]
      /* Polling on ARR write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 8003dbe:	f7fc fa8f 	bl	80002e0 <HAL_GetTick>
 8003dc2:	60f8      	str	r0, [r7, #12]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8003dc4:	f7fc fa8c 	bl	80002e0 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	60bb      	str	r3, [r7, #8]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_ARROK))) && (Time_Elapsed <= TIMEOUT));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b10      	cmp	r3, #16
 8003ddc:	d003      	beq.n	8003de6 <LPTIM_Disable+0x13a>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003de4:	d9ee      	bls.n	8003dc4 <LPTIM_Disable+0x118>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_ARROK);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2210      	movs	r2, #16
 8003dec:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)lptim->Instance)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <LPTIM_Disable+0x19c>)
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d000      	beq.n	8003dfc <LPTIM_Disable+0x150>
    {
       case LPTIM1_BASE:
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
         break;
       default:
         break;
 8003dfa:	e00b      	b.n	8003e14 <LPTIM_Disable+0x168>
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e06:	4911      	ldr	r1, [pc, #68]	; (8003e4c <LPTIM_Disable+0x1a0>)
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
         break;
 8003e10:	e000      	b.n	8003e14 <LPTIM_Disable+0x168>
    }
  }
 8003e12:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  lptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0201 	bic.w	r2, r2, #1
 8003e22:	611a      	str	r2, [r3, #16]
  lptim->Instance->IER = tmpIER;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6a3a      	ldr	r2, [r7, #32]
 8003e2a:	609a      	str	r2, [r3, #8]
  lptim->Instance->CFGR = tmpCFGR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	60da      	str	r2, [r3, #12]
  lptim->Instance->OR = tmpOR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e3c:	b662      	cpsie	i

  __enable_irq();
}
 8003e3e:	bf00      	nop
 8003e40:	3728      	adds	r7, #40	; 0x28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40007c00 	.word	0x40007c00
 8003e4c:	40021000 	.word	0x40021000

08003e50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d141      	bne.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e5e:	4b4b      	ldr	r3, [pc, #300]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6a:	d131      	bne.n	8003ed0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e6c:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e72:	4a46      	ldr	r2, [pc, #280]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e7c:	4b43      	ldr	r3, [pc, #268]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e84:	4a41      	ldr	r2, [pc, #260]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e8c:	4b40      	ldr	r3, [pc, #256]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2232      	movs	r2, #50	; 0x32
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	4a3f      	ldr	r2, [pc, #252]	; (8003f94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	0c9b      	lsrs	r3, r3, #18
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ea2:	e002      	b.n	8003eaa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eaa:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb6:	d102      	bne.n	8003ebe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f2      	bne.n	8003ea4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ebe:	4b33      	ldr	r3, [pc, #204]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eca:	d158      	bne.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e057      	b.n	8003f80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ed0:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed6:	4a2d      	ldr	r2, [pc, #180]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003edc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ee0:	e04d      	b.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee8:	d141      	bne.n	8003f6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eea:	4b28      	ldr	r3, [pc, #160]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef6:	d131      	bne.n	8003f5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ef8:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003efe:	4a23      	ldr	r2, [pc, #140]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f08:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f10:	4a1e      	ldr	r2, [pc, #120]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f18:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2232      	movs	r2, #50	; 0x32
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	4a1c      	ldr	r2, [pc, #112]	; (8003f94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	0c9b      	lsrs	r3, r3, #18
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f2e:	e002      	b.n	8003f36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f42:	d102      	bne.n	8003f4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f2      	bne.n	8003f30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f4a:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f56:	d112      	bne.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e011      	b.n	8003f80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f62:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f6c:	e007      	b.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f6e:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f76:	4a05      	ldr	r2, [pc, #20]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40007000 	.word	0x40007000
 8003f90:	20000064 	.word	0x20000064
 8003f94:	431bde83 	.word	0x431bde83

08003f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e308      	b.n	80045bc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d075      	beq.n	80040a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb6:	4ba3      	ldr	r3, [pc, #652]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fc0:	4ba0      	ldr	r3, [pc, #640]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0303 	and.w	r3, r3, #3
 8003fc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b0c      	cmp	r3, #12
 8003fce:	d102      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x3e>
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d002      	beq.n	8003fdc <HAL_RCC_OscConfig+0x44>
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d10b      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fdc:	4b99      	ldr	r3, [pc, #612]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d05b      	beq.n	80040a0 <HAL_RCC_OscConfig+0x108>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d157      	bne.n	80040a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e2e3      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffc:	d106      	bne.n	800400c <HAL_RCC_OscConfig+0x74>
 8003ffe:	4b91      	ldr	r3, [pc, #580]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a90      	ldr	r2, [pc, #576]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	e01d      	b.n	8004048 <HAL_RCC_OscConfig+0xb0>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004014:	d10c      	bne.n	8004030 <HAL_RCC_OscConfig+0x98>
 8004016:	4b8b      	ldr	r3, [pc, #556]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a8a      	ldr	r2, [pc, #552]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 800401c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	4b88      	ldr	r3, [pc, #544]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a87      	ldr	r2, [pc, #540]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	e00b      	b.n	8004048 <HAL_RCC_OscConfig+0xb0>
 8004030:	4b84      	ldr	r3, [pc, #528]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a83      	ldr	r2, [pc, #524]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	4b81      	ldr	r3, [pc, #516]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a80      	ldr	r2, [pc, #512]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d013      	beq.n	8004078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fc f946 	bl	80002e0 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004058:	f7fc f942 	bl	80002e0 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b64      	cmp	r3, #100	; 0x64
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e2a8      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800406a:	4b76      	ldr	r3, [pc, #472]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0xc0>
 8004076:	e014      	b.n	80040a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fc f932 	bl	80002e0 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004080:	f7fc f92e 	bl	80002e0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b64      	cmp	r3, #100	; 0x64
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e294      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004092:	4b6c      	ldr	r3, [pc, #432]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0xe8>
 800409e:	e000      	b.n	80040a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d075      	beq.n	800419a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ae:	4b65      	ldr	r3, [pc, #404]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040b8:	4b62      	ldr	r3, [pc, #392]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b0c      	cmp	r3, #12
 80040c6:	d102      	bne.n	80040ce <HAL_RCC_OscConfig+0x136>
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d002      	beq.n	80040d4 <HAL_RCC_OscConfig+0x13c>
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d11f      	bne.n	8004114 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d4:	4b5b      	ldr	r3, [pc, #364]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_OscConfig+0x154>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e267      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ec:	4b55      	ldr	r3, [pc, #340]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	061b      	lsls	r3, r3, #24
 80040fa:	4952      	ldr	r1, [pc, #328]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004100:	4b51      	ldr	r3, [pc, #324]	; (8004248 <HAL_RCC_OscConfig+0x2b0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f7fc f89f 	bl	8000248 <HAL_InitTick>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d043      	beq.n	8004198 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e253      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d023      	beq.n	8004164 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800411c:	4b49      	ldr	r3, [pc, #292]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a48      	ldr	r2, [pc, #288]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fc f8da 	bl	80002e0 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004130:	f7fc f8d6 	bl	80002e0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e23c      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004142:	4b40      	ldr	r3, [pc, #256]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414e:	4b3d      	ldr	r3, [pc, #244]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	061b      	lsls	r3, r3, #24
 800415c:	4939      	ldr	r1, [pc, #228]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]
 8004162:	e01a      	b.n	800419a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004164:	4b37      	ldr	r3, [pc, #220]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a36      	ldr	r2, [pc, #216]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 800416a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800416e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fc f8b6 	bl	80002e0 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004178:	f7fc f8b2 	bl	80002e0 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e218      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800418a:	4b2e      	ldr	r3, [pc, #184]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x1e0>
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004198:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d03c      	beq.n	8004220 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01c      	beq.n	80041e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ae:	4b25      	ldr	r3, [pc, #148]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b4:	4a23      	ldr	r2, [pc, #140]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041be:	f7fc f88f 	bl	80002e0 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c6:	f7fc f88b 	bl	80002e0 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e1f1      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041d8:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80041da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0ef      	beq.n	80041c6 <HAL_RCC_OscConfig+0x22e>
 80041e6:	e01b      	b.n	8004220 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e8:	4b16      	ldr	r3, [pc, #88]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80041ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ee:	4a15      	ldr	r2, [pc, #84]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f8:	f7fc f872 	bl	80002e0 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004200:	f7fc f86e 	bl	80002e0 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e1d4      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004212:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1ef      	bne.n	8004200 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80ab 	beq.w	8004384 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422e:	2300      	movs	r3, #0
 8004230:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004232:	4b04      	ldr	r3, [pc, #16]	; (8004244 <HAL_RCC_OscConfig+0x2ac>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_RCC_OscConfig+0x2b4>
 800423e:	2301      	movs	r3, #1
 8004240:	e005      	b.n	800424e <HAL_RCC_OscConfig+0x2b6>
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000
 8004248:	20000000 	.word	0x20000000
 800424c:	2300      	movs	r3, #0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00d      	beq.n	800426e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004252:	4baf      	ldr	r3, [pc, #700]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004256:	4aae      	ldr	r2, [pc, #696]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425c:	6593      	str	r3, [r2, #88]	; 0x58
 800425e:	4bac      	ldr	r3, [pc, #688]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800426a:	2301      	movs	r3, #1
 800426c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426e:	4ba9      	ldr	r3, [pc, #676]	; (8004514 <HAL_RCC_OscConfig+0x57c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d118      	bne.n	80042ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800427a:	4ba6      	ldr	r3, [pc, #664]	; (8004514 <HAL_RCC_OscConfig+0x57c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4aa5      	ldr	r2, [pc, #660]	; (8004514 <HAL_RCC_OscConfig+0x57c>)
 8004280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004286:	f7fc f82b 	bl	80002e0 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428e:	f7fc f827 	bl	80002e0 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e18d      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a0:	4b9c      	ldr	r3, [pc, #624]	; (8004514 <HAL_RCC_OscConfig+0x57c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f0      	beq.n	800428e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d108      	bne.n	80042c6 <HAL_RCC_OscConfig+0x32e>
 80042b4:	4b96      	ldr	r3, [pc, #600]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	4a95      	ldr	r2, [pc, #596]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042c4:	e024      	b.n	8004310 <HAL_RCC_OscConfig+0x378>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b05      	cmp	r3, #5
 80042cc:	d110      	bne.n	80042f0 <HAL_RCC_OscConfig+0x358>
 80042ce:	4b90      	ldr	r3, [pc, #576]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d4:	4a8e      	ldr	r2, [pc, #568]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042d6:	f043 0304 	orr.w	r3, r3, #4
 80042da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042de:	4b8c      	ldr	r3, [pc, #560]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e4:	4a8a      	ldr	r2, [pc, #552]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042ee:	e00f      	b.n	8004310 <HAL_RCC_OscConfig+0x378>
 80042f0:	4b87      	ldr	r3, [pc, #540]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f6:	4a86      	ldr	r2, [pc, #536]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004300:	4b83      	ldr	r3, [pc, #524]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	4a82      	ldr	r2, [pc, #520]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004308:	f023 0304 	bic.w	r3, r3, #4
 800430c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d016      	beq.n	8004346 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fb ffe2 	bl	80002e0 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800431e:	e00a      	b.n	8004336 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	f7fb ffde 	bl	80002e0 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	; 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e142      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004336:	4b76      	ldr	r3, [pc, #472]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0ed      	beq.n	8004320 <HAL_RCC_OscConfig+0x388>
 8004344:	e015      	b.n	8004372 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004346:	f7fb ffcb 	bl	80002e0 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800434c:	e00a      	b.n	8004364 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434e:	f7fb ffc7 	bl	80002e0 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	f241 3288 	movw	r2, #5000	; 0x1388
 800435c:	4293      	cmp	r3, r2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e12b      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004364:	4b6a      	ldr	r3, [pc, #424]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1ed      	bne.n	800434e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004372:	7ffb      	ldrb	r3, [r7, #31]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d105      	bne.n	8004384 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004378:	4b65      	ldr	r3, [pc, #404]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	4a64      	ldr	r2, [pc, #400]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800437e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004382:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d03c      	beq.n	800440a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01c      	beq.n	80043d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004398:	4b5d      	ldr	r3, [pc, #372]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800439a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800439e:	4a5c      	ldr	r2, [pc, #368]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a8:	f7fb ff9a 	bl	80002e0 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043b0:	f7fb ff96 	bl	80002e0 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e0fc      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043c2:	4b53      	ldr	r3, [pc, #332]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80043c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0ef      	beq.n	80043b0 <HAL_RCC_OscConfig+0x418>
 80043d0:	e01b      	b.n	800440a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043d2:	4b4f      	ldr	r3, [pc, #316]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80043d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043d8:	4a4d      	ldr	r2, [pc, #308]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e2:	f7fb ff7d 	bl	80002e0 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043ea:	f7fb ff79 	bl	80002e0 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e0df      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043fc:	4b44      	ldr	r3, [pc, #272]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80043fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1ef      	bne.n	80043ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80d3 	beq.w	80045ba <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004414:	4b3e      	ldr	r3, [pc, #248]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 030c 	and.w	r3, r3, #12
 800441c:	2b0c      	cmp	r3, #12
 800441e:	f000 808d 	beq.w	800453c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d15a      	bne.n	80044e0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442a:	4b39      	ldr	r3, [pc, #228]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a38      	ldr	r2, [pc, #224]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004430:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004436:	f7fb ff53 	bl	80002e0 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800443e:	f7fb ff4f 	bl	80002e0 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e0b5      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004450:	4b2f      	ldr	r3, [pc, #188]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f0      	bne.n	800443e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800445c:	4b2c      	ldr	r3, [pc, #176]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	4b2d      	ldr	r3, [pc, #180]	; (8004518 <HAL_RCC_OscConfig+0x580>)
 8004462:	4013      	ands	r3, r2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6a11      	ldr	r1, [r2, #32]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800446c:	3a01      	subs	r2, #1
 800446e:	0112      	lsls	r2, r2, #4
 8004470:	4311      	orrs	r1, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004476:	0212      	lsls	r2, r2, #8
 8004478:	4311      	orrs	r1, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800447e:	0852      	lsrs	r2, r2, #1
 8004480:	3a01      	subs	r2, #1
 8004482:	0552      	lsls	r2, r2, #21
 8004484:	4311      	orrs	r1, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800448a:	0852      	lsrs	r2, r2, #1
 800448c:	3a01      	subs	r2, #1
 800448e:	0652      	lsls	r2, r2, #25
 8004490:	4311      	orrs	r1, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004496:	06d2      	lsls	r2, r2, #27
 8004498:	430a      	orrs	r2, r1
 800449a:	491d      	ldr	r1, [pc, #116]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800449c:	4313      	orrs	r3, r2
 800449e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a0:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1a      	ldr	r2, [pc, #104]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044ac:	4b18      	ldr	r3, [pc, #96]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	4a17      	ldr	r2, [pc, #92]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b8:	f7fb ff12 	bl	80002e0 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c0:	f7fb ff0e 	bl	80002e0 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e074      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d2:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x528>
 80044de:	e06c      	b.n	80045ba <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80044ec:	4b08      	ldr	r3, [pc, #32]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4a07      	ldr	r2, [pc, #28]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044f2:	f023 0303 	bic.w	r3, r3, #3
 80044f6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4a04      	ldr	r2, [pc, #16]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044fe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004506:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fb feea 	bl	80002e0 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800450e:	e00e      	b.n	800452e <HAL_RCC_OscConfig+0x596>
 8004510:	40021000 	.word	0x40021000
 8004514:	40007000 	.word	0x40007000
 8004518:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800451c:	f7fb fee0 	bl	80002e0 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e046      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800452e:	4b25      	ldr	r3, [pc, #148]	; (80045c4 <HAL_RCC_OscConfig+0x62c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x584>
 800453a:	e03e      	b.n	80045ba <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e039      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004548:	4b1e      	ldr	r3, [pc, #120]	; (80045c4 <HAL_RCC_OscConfig+0x62c>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f003 0203 	and.w	r2, r3, #3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	429a      	cmp	r2, r3
 800455a:	d12c      	bne.n	80045b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	3b01      	subs	r3, #1
 8004568:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456a:	429a      	cmp	r2, r3
 800456c:	d123      	bne.n	80045b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800457a:	429a      	cmp	r2, r3
 800457c:	d11b      	bne.n	80045b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800458a:	429a      	cmp	r2, r3
 800458c:	d113      	bne.n	80045b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	3b01      	subs	r3, #1
 800459c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800459e:	429a      	cmp	r2, r3
 80045a0:	d109      	bne.n	80045b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ac:	085b      	lsrs	r3, r3, #1
 80045ae:	3b01      	subs	r3, #1
 80045b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d001      	beq.n	80045ba <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40021000 	.word	0x40021000

080045c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e11e      	b.n	800481e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045e0:	4b91      	ldr	r3, [pc, #580]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d910      	bls.n	8004610 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b8e      	ldr	r3, [pc, #568]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 020f 	bic.w	r2, r3, #15
 80045f6:	498c      	ldr	r1, [pc, #560]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	4b8a      	ldr	r3, [pc, #552]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e106      	b.n	800481e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d073      	beq.n	8004704 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b03      	cmp	r3, #3
 8004622:	d129      	bne.n	8004678 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004624:	4b81      	ldr	r3, [pc, #516]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0f4      	b.n	800481e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004634:	f000 f970 	bl	8004918 <RCC_GetSysClockFreqFromPLLSource>
 8004638:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4a7c      	ldr	r2, [pc, #496]	; (8004830 <HAL_RCC_ClockConfig+0x268>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d93f      	bls.n	80046c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004642:	4b7a      	ldr	r3, [pc, #488]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004656:	2b00      	cmp	r3, #0
 8004658:	d033      	beq.n	80046c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800465e:	2b00      	cmp	r3, #0
 8004660:	d12f      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004662:	4b72      	ldr	r3, [pc, #456]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800466a:	4a70      	ldr	r2, [pc, #448]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 800466c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004670:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004672:	2380      	movs	r3, #128	; 0x80
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	e024      	b.n	80046c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b02      	cmp	r3, #2
 800467e:	d107      	bne.n	8004690 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004680:	4b6a      	ldr	r3, [pc, #424]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d109      	bne.n	80046a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0c6      	b.n	800481e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004690:	4b66      	ldr	r3, [pc, #408]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0be      	b.n	800481e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80046a0:	f000 f8ce 	bl	8004840 <HAL_RCC_GetSysClockFreq>
 80046a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4a61      	ldr	r2, [pc, #388]	; (8004830 <HAL_RCC_ClockConfig+0x268>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d909      	bls.n	80046c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046ae:	4b5f      	ldr	r3, [pc, #380]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046b6:	4a5d      	ldr	r2, [pc, #372]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80046b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80046be:	2380      	movs	r3, #128	; 0x80
 80046c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046c2:	4b5a      	ldr	r3, [pc, #360]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f023 0203 	bic.w	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4957      	ldr	r1, [pc, #348]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d4:	f7fb fe04 	bl	80002e0 <HAL_GetTick>
 80046d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046da:	e00a      	b.n	80046f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046dc:	f7fb fe00 	bl	80002e0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e095      	b.n	800481e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f2:	4b4e      	ldr	r3, [pc, #312]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 020c 	and.w	r2, r3, #12
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	429a      	cmp	r2, r3
 8004702:	d1eb      	bne.n	80046dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d023      	beq.n	8004758 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800471c:	4b43      	ldr	r3, [pc, #268]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a42      	ldr	r2, [pc, #264]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004722:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004726:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d007      	beq.n	8004744 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004734:	4b3d      	ldr	r3, [pc, #244]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800473c:	4a3b      	ldr	r2, [pc, #236]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 800473e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004742:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004744:	4b39      	ldr	r3, [pc, #228]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4936      	ldr	r1, [pc, #216]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
 8004756:	e008      	b.n	800476a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b80      	cmp	r3, #128	; 0x80
 800475c:	d105      	bne.n	800476a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800475e:	4b33      	ldr	r3, [pc, #204]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	4a32      	ldr	r2, [pc, #200]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 8004764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004768:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800476a:	4b2f      	ldr	r3, [pc, #188]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d21d      	bcs.n	80047b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004778:	4b2b      	ldr	r3, [pc, #172]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f023 020f 	bic.w	r2, r3, #15
 8004780:	4929      	ldr	r1, [pc, #164]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	4313      	orrs	r3, r2
 8004786:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004788:	f7fb fdaa 	bl	80002e0 <HAL_GetTick>
 800478c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004790:	f7fb fda6 	bl	80002e0 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	; 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e03b      	b.n	800481e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b20      	ldr	r3, [pc, #128]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d1ed      	bne.n	8004790 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c0:	4b1a      	ldr	r3, [pc, #104]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4917      	ldr	r1, [pc, #92]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d009      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047de:	4b13      	ldr	r3, [pc, #76]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	490f      	ldr	r1, [pc, #60]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047f2:	f000 f825 	bl	8004840 <HAL_RCC_GetSysClockFreq>
 80047f6:	4601      	mov	r1, r0
 80047f8:	4b0c      	ldr	r3, [pc, #48]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	4a0c      	ldr	r2, [pc, #48]	; (8004834 <HAL_RCC_ClockConfig+0x26c>)
 8004804:	5cd3      	ldrb	r3, [r2, r3]
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	fa21 f303 	lsr.w	r3, r1, r3
 800480e:	4a0a      	ldr	r2, [pc, #40]	; (8004838 <HAL_RCC_ClockConfig+0x270>)
 8004810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <HAL_RCC_ClockConfig+0x274>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7fb fd16 	bl	8000248 <HAL_InitTick>
 800481c:	4603      	mov	r3, r0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40022000 	.word	0x40022000
 800482c:	40021000 	.word	0x40021000
 8004830:	04c4b400 	.word	0x04c4b400
 8004834:	0800beb8 	.word	0x0800beb8
 8004838:	20000064 	.word	0x20000064
 800483c:	20000000 	.word	0x20000000

08004840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004846:	4b2c      	ldr	r3, [pc, #176]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 030c 	and.w	r3, r3, #12
 800484e:	2b04      	cmp	r3, #4
 8004850:	d102      	bne.n	8004858 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004852:	4b2a      	ldr	r3, [pc, #168]	; (80048fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	e047      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004858:	4b27      	ldr	r3, [pc, #156]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b08      	cmp	r3, #8
 8004862:	d102      	bne.n	800486a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004864:	4b25      	ldr	r3, [pc, #148]	; (80048fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	e03e      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800486a:	4b23      	ldr	r3, [pc, #140]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b0c      	cmp	r3, #12
 8004874:	d136      	bne.n	80048e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004876:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004880:	4b1d      	ldr	r3, [pc, #116]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	3301      	adds	r3, #1
 800488c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b03      	cmp	r3, #3
 8004892:	d10c      	bne.n	80048ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004894:	4a19      	ldr	r2, [pc, #100]	; (80048fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	4a16      	ldr	r2, [pc, #88]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800489e:	68d2      	ldr	r2, [r2, #12]
 80048a0:	0a12      	lsrs	r2, r2, #8
 80048a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	617b      	str	r3, [r7, #20]
      break;
 80048ac:	e00c      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048ae:	4a13      	ldr	r2, [pc, #76]	; (80048fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b6:	4a10      	ldr	r2, [pc, #64]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048b8:	68d2      	ldr	r2, [r2, #12]
 80048ba:	0a12      	lsrs	r2, r2, #8
 80048bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048c0:	fb02 f303 	mul.w	r3, r2, r3
 80048c4:	617b      	str	r3, [r7, #20]
      break;
 80048c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048c8:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	0e5b      	lsrs	r3, r3, #25
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	3301      	adds	r3, #1
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	e001      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048e8:	693b      	ldr	r3, [r7, #16]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40021000 	.word	0x40021000
 80048fc:	00f42400 	.word	0x00f42400

08004900 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004904:	4b03      	ldr	r3, [pc, #12]	; (8004914 <HAL_RCC_GetHCLKFreq+0x14>)
 8004906:	681b      	ldr	r3, [r3, #0]
}
 8004908:	4618      	mov	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000064 	.word	0x20000064

08004918 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800491e:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	3301      	adds	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b03      	cmp	r3, #3
 800493a:	d10c      	bne.n	8004956 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800493c:	4a17      	ldr	r2, [pc, #92]	; (800499c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	fbb2 f3f3 	udiv	r3, r2, r3
 8004944:	4a14      	ldr	r2, [pc, #80]	; (8004998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004946:	68d2      	ldr	r2, [r2, #12]
 8004948:	0a12      	lsrs	r2, r2, #8
 800494a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800494e:	fb02 f303 	mul.w	r3, r2, r3
 8004952:	617b      	str	r3, [r7, #20]
    break;
 8004954:	e00c      	b.n	8004970 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004956:	4a11      	ldr	r2, [pc, #68]	; (800499c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	fbb2 f3f3 	udiv	r3, r2, r3
 800495e:	4a0e      	ldr	r2, [pc, #56]	; (8004998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004960:	68d2      	ldr	r2, [r2, #12]
 8004962:	0a12      	lsrs	r2, r2, #8
 8004964:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004968:	fb02 f303 	mul.w	r3, r2, r3
 800496c:	617b      	str	r3, [r7, #20]
    break;
 800496e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004970:	4b09      	ldr	r3, [pc, #36]	; (8004998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	0e5b      	lsrs	r3, r3, #25
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	3301      	adds	r3, #1
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	fbb2 f3f3 	udiv	r3, r2, r3
 8004988:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800498a:	687b      	ldr	r3, [r7, #4]
}
 800498c:	4618      	mov	r0, r3
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	40021000 	.word	0x40021000
 800499c:	00f42400 	.word	0x00f42400

080049a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049a8:	2300      	movs	r3, #0
 80049aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049ac:	2300      	movs	r3, #0
 80049ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 8098 	beq.w	8004aee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049be:	2300      	movs	r3, #0
 80049c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c2:	4b43      	ldr	r3, [pc, #268]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10d      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ce:	4b40      	ldr	r3, [pc, #256]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d2:	4a3f      	ldr	r2, [pc, #252]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d8:	6593      	str	r3, [r2, #88]	; 0x58
 80049da:	4b3d      	ldr	r3, [pc, #244]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e6:	2301      	movs	r3, #1
 80049e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ea:	4b3a      	ldr	r3, [pc, #232]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a39      	ldr	r2, [pc, #228]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049f6:	f7fb fc73 	bl	80002e0 <HAL_GetTick>
 80049fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049fc:	e009      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049fe:	f7fb fc6f 	bl	80002e0 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d902      	bls.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	74fb      	strb	r3, [r7, #19]
        break;
 8004a10:	e005      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a12:	4b30      	ldr	r3, [pc, #192]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0ef      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a1e:	7cfb      	ldrb	r3, [r7, #19]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d159      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a24:	4b2a      	ldr	r3, [pc, #168]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01e      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d019      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a40:	4b23      	ldr	r3, [pc, #140]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a4c:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a52:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a5c:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a62:	4a1b      	ldr	r2, [pc, #108]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a6c:	4a18      	ldr	r2, [pc, #96]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d016      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7e:	f7fb fc2f 	bl	80002e0 <HAL_GetTick>
 8004a82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a84:	e00b      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a86:	f7fb fc2b 	bl	80002e0 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d902      	bls.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	74fb      	strb	r3, [r7, #19]
            break;
 8004a9c:	e006      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0ec      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004aac:	7cfb      	ldrb	r3, [r7, #19]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10b      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ab2:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	4903      	ldr	r1, [pc, #12]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ac8:	e008      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004aca:	7cfb      	ldrb	r3, [r7, #19]
 8004acc:	74bb      	strb	r3, [r7, #18]
 8004ace:	e005      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad8:	7cfb      	ldrb	r3, [r7, #19]
 8004ada:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004adc:	7c7b      	ldrb	r3, [r7, #17]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d105      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae2:	4ba6      	ldr	r3, [pc, #664]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	4aa5      	ldr	r2, [pc, #660]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004afa:	4ba0      	ldr	r3, [pc, #640]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b00:	f023 0203 	bic.w	r2, r3, #3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	499c      	ldr	r1, [pc, #624]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b1c:	4b97      	ldr	r3, [pc, #604]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b22:	f023 020c 	bic.w	r2, r3, #12
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	4994      	ldr	r1, [pc, #592]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b3e:	4b8f      	ldr	r3, [pc, #572]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	498b      	ldr	r1, [pc, #556]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b60:	4b86      	ldr	r3, [pc, #536]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	4983      	ldr	r1, [pc, #524]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b82:	4b7e      	ldr	r3, [pc, #504]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	497a      	ldr	r1, [pc, #488]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00a      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ba4:	4b75      	ldr	r3, [pc, #468]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	4972      	ldr	r1, [pc, #456]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bc6:	4b6d      	ldr	r3, [pc, #436]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	4969      	ldr	r1, [pc, #420]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004be8:	4b64      	ldr	r3, [pc, #400]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	4961      	ldr	r1, [pc, #388]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c0a:	4b5c      	ldr	r3, [pc, #368]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	4958      	ldr	r1, [pc, #352]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d015      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c2c:	4b53      	ldr	r3, [pc, #332]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	4950      	ldr	r1, [pc, #320]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c4a:	d105      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c4c:	4b4b      	ldr	r3, [pc, #300]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	4a4a      	ldr	r2, [pc, #296]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d015      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c64:	4b45      	ldr	r3, [pc, #276]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	4942      	ldr	r1, [pc, #264]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c82:	d105      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c84:	4b3d      	ldr	r3, [pc, #244]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4a3c      	ldr	r2, [pc, #240]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c8e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d015      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c9c:	4b37      	ldr	r3, [pc, #220]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	4934      	ldr	r1, [pc, #208]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cba:	d105      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cbc:	4b2f      	ldr	r3, [pc, #188]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4a2e      	ldr	r2, [pc, #184]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d015      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cd4:	4b29      	ldr	r3, [pc, #164]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce2:	4926      	ldr	r1, [pc, #152]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf2:	d105      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf4:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	4a20      	ldr	r2, [pc, #128]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cfe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d015      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	4918      	ldr	r1, [pc, #96]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d2a:	d105      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d2c:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4a12      	ldr	r2, [pc, #72]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d36:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d015      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d44:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d52:	490a      	ldr	r1, [pc, #40]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d62:	d105      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d64:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4a04      	ldr	r2, [pc, #16]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d70:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000

08004d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e01d      	b.n	8004dce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f006 fc00 	bl	800b5ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f000 fd5c 	bl	800587c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <HAL_TIM_Base_Start_IT+0x50>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b06      	cmp	r3, #6
 8004e00:	d00b      	beq.n	8004e1a <HAL_TIM_Base_Start_IT+0x42>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e08:	d007      	beq.n	8004e1a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	00010007 	.word	0x00010007

08004e2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0201 	bic.w	r2, r2, #1
 8004e42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6a1a      	ldr	r2, [r3, #32]
 8004e4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10f      	bne.n	8004e74 <HAL_TIM_Base_Stop_IT+0x48>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6a1a      	ldr	r2, [r3, #32]
 8004e5a:	f244 4344 	movw	r3, #17476	; 0x4444
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d107      	bne.n	8004e74 <HAL_TIM_Base_Stop_IT+0x48>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e01d      	b.n	8004ed0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d106      	bne.n	8004eae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f006 fd13 	bl	800b8d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	f000 fcdb 	bl	800587c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	6839      	ldr	r1, [r7, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f001 fa99 	bl	8006422 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1e      	ldr	r2, [pc, #120]	; (8004f70 <HAL_TIM_PWM_Start+0x98>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d013      	beq.n	8004f22 <HAL_TIM_PWM_Start+0x4a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <HAL_TIM_PWM_Start+0x9c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00e      	beq.n	8004f22 <HAL_TIM_PWM_Start+0x4a>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1b      	ldr	r2, [pc, #108]	; (8004f78 <HAL_TIM_PWM_Start+0xa0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d009      	beq.n	8004f22 <HAL_TIM_PWM_Start+0x4a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1a      	ldr	r2, [pc, #104]	; (8004f7c <HAL_TIM_PWM_Start+0xa4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d004      	beq.n	8004f22 <HAL_TIM_PWM_Start+0x4a>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a18      	ldr	r2, [pc, #96]	; (8004f80 <HAL_TIM_PWM_Start+0xa8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d101      	bne.n	8004f26 <HAL_TIM_PWM_Start+0x4e>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <HAL_TIM_PWM_Start+0x50>
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <HAL_TIM_PWM_Start+0xac>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b06      	cmp	r3, #6
 8004f4c:	d00b      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x8e>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f54:	d007      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0201 	orr.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	40013400 	.word	0x40013400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800
 8004f84:	00010007 	.word	0x00010007

08004f88 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2200      	movs	r2, #0
 8004f98:	6839      	ldr	r1, [r7, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f001 fa41 	bl	8006422 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a2a      	ldr	r2, [pc, #168]	; (8005050 <HAL_TIM_PWM_Stop+0xc8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_TIM_PWM_Stop+0x4a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a29      	ldr	r2, [pc, #164]	; (8005054 <HAL_TIM_PWM_Stop+0xcc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_TIM_PWM_Stop+0x4a>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a27      	ldr	r2, [pc, #156]	; (8005058 <HAL_TIM_PWM_Stop+0xd0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_TIM_PWM_Stop+0x4a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a26      	ldr	r2, [pc, #152]	; (800505c <HAL_TIM_PWM_Stop+0xd4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_TIM_PWM_Stop+0x4a>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a24      	ldr	r2, [pc, #144]	; (8005060 <HAL_TIM_PWM_Stop+0xd8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_PWM_Stop+0x4e>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <HAL_TIM_PWM_Stop+0x50>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d017      	beq.n	800500c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6a1a      	ldr	r2, [r3, #32]
 8004fe2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10f      	bne.n	800500c <HAL_TIM_PWM_Stop+0x84>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6a1a      	ldr	r2, [r3, #32]
 8004ff2:	f244 4344 	movw	r3, #17476	; 0x4444
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d107      	bne.n	800500c <HAL_TIM_PWM_Stop+0x84>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800500a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6a1a      	ldr	r2, [r3, #32]
 8005012:	f241 1311 	movw	r3, #4369	; 0x1111
 8005016:	4013      	ands	r3, r2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10f      	bne.n	800503c <HAL_TIM_PWM_Stop+0xb4>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6a1a      	ldr	r2, [r3, #32]
 8005022:	f244 4344 	movw	r3, #17476	; 0x4444
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d107      	bne.n	800503c <HAL_TIM_PWM_Stop+0xb4>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40012c00 	.word	0x40012c00
 8005054:	40013400 	.word	0x40013400
 8005058:	40014000 	.word	0x40014000
 800505c:	40014400 	.word	0x40014400
 8005060:	40014800 	.word	0x40014800

08005064 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e01d      	b.n	80050b2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f006 fc7c 	bl	800b988 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f000 fbea 	bl	800587c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d122      	bne.n	8005116 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d11b      	bne.n	8005116 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f06f 0202 	mvn.w	r2, #2
 80050e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fb9f 	bl	8005840 <HAL_TIM_IC_CaptureCallback>
 8005102:	e005      	b.n	8005110 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fb91 	bl	800582c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fba2 	bl	8005854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b04      	cmp	r3, #4
 8005122:	d122      	bne.n	800516a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b04      	cmp	r3, #4
 8005130:	d11b      	bne.n	800516a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f06f 0204 	mvn.w	r2, #4
 800513a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fb75 	bl	8005840 <HAL_TIM_IC_CaptureCallback>
 8005156:	e005      	b.n	8005164 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fb67 	bl	800582c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fb78 	bl	8005854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b08      	cmp	r3, #8
 8005176:	d122      	bne.n	80051be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b08      	cmp	r3, #8
 8005184:	d11b      	bne.n	80051be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f06f 0208 	mvn.w	r2, #8
 800518e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2204      	movs	r2, #4
 8005194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fb4b 	bl	8005840 <HAL_TIM_IC_CaptureCallback>
 80051aa:	e005      	b.n	80051b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fb3d 	bl	800582c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fb4e 	bl	8005854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d122      	bne.n	8005212 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	d11b      	bne.n	8005212 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f06f 0210 	mvn.w	r2, #16
 80051e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2208      	movs	r2, #8
 80051e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fb21 	bl	8005840 <HAL_TIM_IC_CaptureCallback>
 80051fe:	e005      	b.n	800520c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fb13 	bl	800582c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fb24 	bl	8005854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b01      	cmp	r3, #1
 800521e:	d10e      	bne.n	800523e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b01      	cmp	r3, #1
 800522c:	d107      	bne.n	800523e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f06f 0201 	mvn.w	r2, #1
 8005236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f003 fa49 	bl	80086d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005248:	2b80      	cmp	r3, #128	; 0x80
 800524a:	d10e      	bne.n	800526a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005256:	2b80      	cmp	r3, #128	; 0x80
 8005258:	d107      	bne.n	800526a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f001 fa09 	bl	800667c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005278:	d10e      	bne.n	8005298 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005284:	2b80      	cmp	r3, #128	; 0x80
 8005286:	d107      	bne.n	8005298 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f001 f9fc 	bl	8006690 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a2:	2b40      	cmp	r3, #64	; 0x40
 80052a4:	d10e      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d107      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fad2 	bl	8005868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	d10e      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d107      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0220 	mvn.w	r2, #32
 80052e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f001 f9bc 	bl	8006668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052fe:	d10f      	bne.n	8005320 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800530a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800530e:	d107      	bne.n	8005320 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f001 f9c2 	bl	80066a4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800532a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800532e:	d10f      	bne.n	8005350 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800533a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800533e:	d107      	bne.n	8005350 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f001 f9b4 	bl	80066b8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800535e:	d10f      	bne.n	8005380 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800536a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800536e:	d107      	bne.n	8005380 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f001 f9a6 	bl	80066cc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800538a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800538e:	d10f      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800539a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800539e:	d107      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80053a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f001 f998 	bl	80066e0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e08a      	b.n	80054e8 <HAL_TIM_IC_ConfigChannel+0x130>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2202      	movs	r2, #2
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d11b      	bne.n	8005420 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6819      	ldr	r1, [r3, #0]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f000 fe76 	bl	80060e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699a      	ldr	r2, [r3, #24]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 020c 	bic.w	r2, r2, #12
 800540a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6999      	ldr	r1, [r3, #24]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	619a      	str	r2, [r3, #24]
 800541e:	e05a      	b.n	80054d6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b04      	cmp	r3, #4
 8005424:	d11c      	bne.n	8005460 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	6819      	ldr	r1, [r3, #0]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f000 feee 	bl	8006216 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699a      	ldr	r2, [r3, #24]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005448:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6999      	ldr	r1, [r3, #24]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	021a      	lsls	r2, r3, #8
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	619a      	str	r2, [r3, #24]
 800545e:	e03a      	b.n	80054d6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b08      	cmp	r3, #8
 8005464:	d11b      	bne.n	800549e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	6819      	ldr	r1, [r3, #0]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f000 ff3b 	bl	80062f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 020c 	bic.w	r2, r2, #12
 8005488:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69d9      	ldr	r1, [r3, #28]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	61da      	str	r2, [r3, #28]
 800549c:	e01b      	b.n	80054d6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	6819      	ldr	r1, [r3, #0]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f000 ff5b 	bl	8006368 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69da      	ldr	r2, [r3, #28]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054c0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69d9      	ldr	r1, [r3, #28]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	021a      	lsls	r2, r3, #8
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005506:	2302      	movs	r3, #2
 8005508:	e105      	b.n	8005716 <HAL_TIM_PWM_ConfigChannel+0x226>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b14      	cmp	r3, #20
 800551e:	f200 80f0 	bhi.w	8005702 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	0800557d 	.word	0x0800557d
 800552c:	08005703 	.word	0x08005703
 8005530:	08005703 	.word	0x08005703
 8005534:	08005703 	.word	0x08005703
 8005538:	080055bd 	.word	0x080055bd
 800553c:	08005703 	.word	0x08005703
 8005540:	08005703 	.word	0x08005703
 8005544:	08005703 	.word	0x08005703
 8005548:	080055ff 	.word	0x080055ff
 800554c:	08005703 	.word	0x08005703
 8005550:	08005703 	.word	0x08005703
 8005554:	08005703 	.word	0x08005703
 8005558:	0800563f 	.word	0x0800563f
 800555c:	08005703 	.word	0x08005703
 8005560:	08005703 	.word	0x08005703
 8005564:	08005703 	.word	0x08005703
 8005568:	08005681 	.word	0x08005681
 800556c:	08005703 	.word	0x08005703
 8005570:	08005703 	.word	0x08005703
 8005574:	08005703 	.word	0x08005703
 8005578:	080056c1 	.word	0x080056c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fa0a 	bl	800599c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0208 	orr.w	r2, r2, #8
 8005596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0204 	bic.w	r2, r2, #4
 80055a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6999      	ldr	r1, [r3, #24]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	619a      	str	r2, [r3, #24]
      break;
 80055ba:	e0a3      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fa7a 	bl	8005abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6999      	ldr	r1, [r3, #24]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	021a      	lsls	r2, r3, #8
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	619a      	str	r2, [r3, #24]
      break;
 80055fc:	e082      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fae3 	bl	8005bd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0208 	orr.w	r2, r2, #8
 8005618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0204 	bic.w	r2, r2, #4
 8005628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69d9      	ldr	r1, [r3, #28]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	61da      	str	r2, [r3, #28]
      break;
 800563c:	e062      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fb4b 	bl	8005ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69d9      	ldr	r1, [r3, #28]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	021a      	lsls	r2, r3, #8
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	61da      	str	r2, [r3, #28]
      break;
 800567e:	e041      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fbb4 	bl	8005df4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0208 	orr.w	r2, r2, #8
 800569a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0204 	bic.w	r2, r2, #4
 80056aa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80056be:	e021      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fbf8 	bl	8005ebc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	021a      	lsls	r2, r3, #8
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005700:	e000      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005702:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop

08005720 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005734:	2302      	movs	r3, #2
 8005736:	e031      	b.n	800579c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005748:	6839      	ldr	r1, [r7, #0]
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fc1c 	bl	8005f88 <TIM_SlaveTimer_SetConfig>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e018      	b.n	800579c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005778:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005788:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b0c      	cmp	r3, #12
 80057b6:	d831      	bhi.n	800581c <HAL_TIM_ReadCapturedValue+0x78>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057f5 	.word	0x080057f5
 80057c4:	0800581d 	.word	0x0800581d
 80057c8:	0800581d 	.word	0x0800581d
 80057cc:	0800581d 	.word	0x0800581d
 80057d0:	080057ff 	.word	0x080057ff
 80057d4:	0800581d 	.word	0x0800581d
 80057d8:	0800581d 	.word	0x0800581d
 80057dc:	0800581d 	.word	0x0800581d
 80057e0:	08005809 	.word	0x08005809
 80057e4:	0800581d 	.word	0x0800581d
 80057e8:	0800581d 	.word	0x0800581d
 80057ec:	0800581d 	.word	0x0800581d
 80057f0:	08005813 	.word	0x08005813
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fa:	60fb      	str	r3, [r7, #12]

      break;
 80057fc:	e00f      	b.n	800581e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	60fb      	str	r3, [r7, #12]

      break;
 8005806:	e00a      	b.n	800581e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580e:	60fb      	str	r3, [r7, #12]

      break;
 8005810:	e005      	b.n	800581e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	60fb      	str	r3, [r7, #12]

      break;
 800581a:	e000      	b.n	800581e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800581c:	bf00      	nop
  }

  return tmpreg;
 800581e:	68fb      	ldr	r3, [r7, #12]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a3c      	ldr	r2, [pc, #240]	; (8005980 <TIM_Base_SetConfig+0x104>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00f      	beq.n	80058b4 <TIM_Base_SetConfig+0x38>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589a:	d00b      	beq.n	80058b4 <TIM_Base_SetConfig+0x38>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a39      	ldr	r2, [pc, #228]	; (8005984 <TIM_Base_SetConfig+0x108>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <TIM_Base_SetConfig+0x38>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a38      	ldr	r2, [pc, #224]	; (8005988 <TIM_Base_SetConfig+0x10c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_Base_SetConfig+0x38>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a37      	ldr	r2, [pc, #220]	; (800598c <TIM_Base_SetConfig+0x110>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d108      	bne.n	80058c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a2d      	ldr	r2, [pc, #180]	; (8005980 <TIM_Base_SetConfig+0x104>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01b      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d4:	d017      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a2a      	ldr	r2, [pc, #168]	; (8005984 <TIM_Base_SetConfig+0x108>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a29      	ldr	r2, [pc, #164]	; (8005988 <TIM_Base_SetConfig+0x10c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00f      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a28      	ldr	r2, [pc, #160]	; (800598c <TIM_Base_SetConfig+0x110>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00b      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a27      	ldr	r2, [pc, #156]	; (8005990 <TIM_Base_SetConfig+0x114>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a26      	ldr	r2, [pc, #152]	; (8005994 <TIM_Base_SetConfig+0x118>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a25      	ldr	r2, [pc, #148]	; (8005998 <TIM_Base_SetConfig+0x11c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d108      	bne.n	8005918 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800590c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a10      	ldr	r2, [pc, #64]	; (8005980 <TIM_Base_SetConfig+0x104>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00f      	beq.n	8005964 <TIM_Base_SetConfig+0xe8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a11      	ldr	r2, [pc, #68]	; (800598c <TIM_Base_SetConfig+0x110>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00b      	beq.n	8005964 <TIM_Base_SetConfig+0xe8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a10      	ldr	r2, [pc, #64]	; (8005990 <TIM_Base_SetConfig+0x114>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d007      	beq.n	8005964 <TIM_Base_SetConfig+0xe8>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a0f      	ldr	r2, [pc, #60]	; (8005994 <TIM_Base_SetConfig+0x118>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_Base_SetConfig+0xe8>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a0e      	ldr	r2, [pc, #56]	; (8005998 <TIM_Base_SetConfig+0x11c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d103      	bne.n	800596c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	615a      	str	r2, [r3, #20]
}
 8005972:	bf00      	nop
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800
 800598c:	40013400 	.word	0x40013400
 8005990:	40014000 	.word	0x40014000
 8005994:	40014400 	.word	0x40014400
 8005998:	40014800 	.word	0x40014800

0800599c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	f023 0201 	bic.w	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0303 	bic.w	r3, r3, #3
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f023 0302 	bic.w	r3, r3, #2
 80059e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a2c      	ldr	r2, [pc, #176]	; (8005aa8 <TIM_OC1_SetConfig+0x10c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00f      	beq.n	8005a1c <TIM_OC1_SetConfig+0x80>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a2b      	ldr	r2, [pc, #172]	; (8005aac <TIM_OC1_SetConfig+0x110>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00b      	beq.n	8005a1c <TIM_OC1_SetConfig+0x80>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a2a      	ldr	r2, [pc, #168]	; (8005ab0 <TIM_OC1_SetConfig+0x114>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d007      	beq.n	8005a1c <TIM_OC1_SetConfig+0x80>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a29      	ldr	r2, [pc, #164]	; (8005ab4 <TIM_OC1_SetConfig+0x118>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <TIM_OC1_SetConfig+0x80>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a28      	ldr	r2, [pc, #160]	; (8005ab8 <TIM_OC1_SetConfig+0x11c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d10c      	bne.n	8005a36 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f023 0308 	bic.w	r3, r3, #8
 8005a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f023 0304 	bic.w	r3, r3, #4
 8005a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1b      	ldr	r2, [pc, #108]	; (8005aa8 <TIM_OC1_SetConfig+0x10c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00f      	beq.n	8005a5e <TIM_OC1_SetConfig+0xc2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a1a      	ldr	r2, [pc, #104]	; (8005aac <TIM_OC1_SetConfig+0x110>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00b      	beq.n	8005a5e <TIM_OC1_SetConfig+0xc2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a19      	ldr	r2, [pc, #100]	; (8005ab0 <TIM_OC1_SetConfig+0x114>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d007      	beq.n	8005a5e <TIM_OC1_SetConfig+0xc2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a18      	ldr	r2, [pc, #96]	; (8005ab4 <TIM_OC1_SetConfig+0x118>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_OC1_SetConfig+0xc2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a17      	ldr	r2, [pc, #92]	; (8005ab8 <TIM_OC1_SetConfig+0x11c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d111      	bne.n	8005a82 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	621a      	str	r2, [r3, #32]
}
 8005a9c:	bf00      	nop
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	40012c00 	.word	0x40012c00
 8005aac:	40013400 	.word	0x40013400
 8005ab0:	40014000 	.word	0x40014000
 8005ab4:	40014400 	.word	0x40014400
 8005ab8:	40014800 	.word	0x40014800

08005abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	f023 0210 	bic.w	r2, r3, #16
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f023 0320 	bic.w	r3, r3, #32
 8005b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a28      	ldr	r2, [pc, #160]	; (8005bbc <TIM_OC2_SetConfig+0x100>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <TIM_OC2_SetConfig+0x6c>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a27      	ldr	r2, [pc, #156]	; (8005bc0 <TIM_OC2_SetConfig+0x104>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d10d      	bne.n	8005b44 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a1d      	ldr	r2, [pc, #116]	; (8005bbc <TIM_OC2_SetConfig+0x100>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00f      	beq.n	8005b6c <TIM_OC2_SetConfig+0xb0>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a1c      	ldr	r2, [pc, #112]	; (8005bc0 <TIM_OC2_SetConfig+0x104>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00b      	beq.n	8005b6c <TIM_OC2_SetConfig+0xb0>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a1b      	ldr	r2, [pc, #108]	; (8005bc4 <TIM_OC2_SetConfig+0x108>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d007      	beq.n	8005b6c <TIM_OC2_SetConfig+0xb0>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a1a      	ldr	r2, [pc, #104]	; (8005bc8 <TIM_OC2_SetConfig+0x10c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d003      	beq.n	8005b6c <TIM_OC2_SetConfig+0xb0>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <TIM_OC2_SetConfig+0x110>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d113      	bne.n	8005b94 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	621a      	str	r2, [r3, #32]
}
 8005bae:	bf00      	nop
 8005bb0:	371c      	adds	r7, #28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40013400 	.word	0x40013400
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40014400 	.word	0x40014400
 8005bcc:	40014800 	.word	0x40014800

08005bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0303 	bic.w	r3, r3, #3
 8005c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a27      	ldr	r2, [pc, #156]	; (8005ccc <TIM_OC3_SetConfig+0xfc>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d003      	beq.n	8005c3a <TIM_OC3_SetConfig+0x6a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a26      	ldr	r2, [pc, #152]	; (8005cd0 <TIM_OC3_SetConfig+0x100>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d10d      	bne.n	8005c56 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a1c      	ldr	r2, [pc, #112]	; (8005ccc <TIM_OC3_SetConfig+0xfc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00f      	beq.n	8005c7e <TIM_OC3_SetConfig+0xae>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a1b      	ldr	r2, [pc, #108]	; (8005cd0 <TIM_OC3_SetConfig+0x100>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00b      	beq.n	8005c7e <TIM_OC3_SetConfig+0xae>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a1a      	ldr	r2, [pc, #104]	; (8005cd4 <TIM_OC3_SetConfig+0x104>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d007      	beq.n	8005c7e <TIM_OC3_SetConfig+0xae>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a19      	ldr	r2, [pc, #100]	; (8005cd8 <TIM_OC3_SetConfig+0x108>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d003      	beq.n	8005c7e <TIM_OC3_SetConfig+0xae>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a18      	ldr	r2, [pc, #96]	; (8005cdc <TIM_OC3_SetConfig+0x10c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d113      	bne.n	8005ca6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	621a      	str	r2, [r3, #32]
}
 8005cc0:	bf00      	nop
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	40012c00 	.word	0x40012c00
 8005cd0:	40013400 	.word	0x40013400
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	40014400 	.word	0x40014400
 8005cdc:	40014800 	.word	0x40014800

08005ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	031b      	lsls	r3, r3, #12
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a28      	ldr	r2, [pc, #160]	; (8005de0 <TIM_OC4_SetConfig+0x100>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_OC4_SetConfig+0x6c>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a27      	ldr	r2, [pc, #156]	; (8005de4 <TIM_OC4_SetConfig+0x104>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d10d      	bne.n	8005d68 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	031b      	lsls	r3, r3, #12
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <TIM_OC4_SetConfig+0x100>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00f      	beq.n	8005d90 <TIM_OC4_SetConfig+0xb0>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a1c      	ldr	r2, [pc, #112]	; (8005de4 <TIM_OC4_SetConfig+0x104>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00b      	beq.n	8005d90 <TIM_OC4_SetConfig+0xb0>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a1b      	ldr	r2, [pc, #108]	; (8005de8 <TIM_OC4_SetConfig+0x108>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d007      	beq.n	8005d90 <TIM_OC4_SetConfig+0xb0>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a1a      	ldr	r2, [pc, #104]	; (8005dec <TIM_OC4_SetConfig+0x10c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_OC4_SetConfig+0xb0>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a19      	ldr	r2, [pc, #100]	; (8005df0 <TIM_OC4_SetConfig+0x110>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d113      	bne.n	8005db8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d96:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d9e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	019b      	lsls	r3, r3, #6
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	019b      	lsls	r3, r3, #6
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40013400 	.word	0x40013400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40014800 	.word	0x40014800

08005df4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	041b      	lsls	r3, r3, #16
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a17      	ldr	r2, [pc, #92]	; (8005ea8 <TIM_OC5_SetConfig+0xb4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00f      	beq.n	8005e6e <TIM_OC5_SetConfig+0x7a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a16      	ldr	r2, [pc, #88]	; (8005eac <TIM_OC5_SetConfig+0xb8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00b      	beq.n	8005e6e <TIM_OC5_SetConfig+0x7a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <TIM_OC5_SetConfig+0xbc>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <TIM_OC5_SetConfig+0x7a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a14      	ldr	r2, [pc, #80]	; (8005eb4 <TIM_OC5_SetConfig+0xc0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_OC5_SetConfig+0x7a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <TIM_OC5_SetConfig+0xc4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d109      	bne.n	8005e82 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	021b      	lsls	r3, r3, #8
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	621a      	str	r2, [r3, #32]
}
 8005e9c:	bf00      	nop
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	40012c00 	.word	0x40012c00
 8005eac:	40013400 	.word	0x40013400
 8005eb0:	40014000 	.word	0x40014000
 8005eb4:	40014400 	.word	0x40014400
 8005eb8:	40014800 	.word	0x40014800

08005ebc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	051b      	lsls	r3, r3, #20
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a18      	ldr	r2, [pc, #96]	; (8005f74 <TIM_OC6_SetConfig+0xb8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00f      	beq.n	8005f38 <TIM_OC6_SetConfig+0x7c>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a17      	ldr	r2, [pc, #92]	; (8005f78 <TIM_OC6_SetConfig+0xbc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00b      	beq.n	8005f38 <TIM_OC6_SetConfig+0x7c>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a16      	ldr	r2, [pc, #88]	; (8005f7c <TIM_OC6_SetConfig+0xc0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d007      	beq.n	8005f38 <TIM_OC6_SetConfig+0x7c>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a15      	ldr	r2, [pc, #84]	; (8005f80 <TIM_OC6_SetConfig+0xc4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_OC6_SetConfig+0x7c>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a14      	ldr	r2, [pc, #80]	; (8005f84 <TIM_OC6_SetConfig+0xc8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d109      	bne.n	8005f4c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	029b      	lsls	r3, r3, #10
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	40013400 	.word	0x40013400
 8005f7c:	40014000 	.word	0x40014000
 8005f80:	40014400 	.word	0x40014400
 8005f84:	40014800 	.word	0x40014800

08005f88 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fb6:	f023 0307 	bic.w	r3, r3, #7
 8005fba:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2b60      	cmp	r3, #96	; 0x60
 8005fd4:	d06d      	beq.n	80060b2 <TIM_SlaveTimer_SetConfig+0x12a>
 8005fd6:	2b60      	cmp	r3, #96	; 0x60
 8005fd8:	d80f      	bhi.n	8005ffa <TIM_SlaveTimer_SetConfig+0x72>
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d073      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	d804      	bhi.n	8005fec <TIM_SlaveTimer_SetConfig+0x64>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d06f      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
 8005fe6:	2b10      	cmp	r3, #16
 8005fe8:	d06d      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8005fea:	e06d      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d028      	beq.n	8006042 <TIM_SlaveTimer_SetConfig+0xba>
 8005ff0:	2b50      	cmp	r3, #80	; 0x50
 8005ff2:	d054      	beq.n	800609e <TIM_SlaveTimer_SetConfig+0x116>
 8005ff4:	2b30      	cmp	r3, #48	; 0x30
 8005ff6:	d066      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8005ff8:	e066      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8005ffa:	4a36      	ldr	r2, [pc, #216]	; (80060d4 <TIM_SlaveTimer_SetConfig+0x14c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d062      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
 8006000:	4a34      	ldr	r2, [pc, #208]	; (80060d4 <TIM_SlaveTimer_SetConfig+0x14c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d808      	bhi.n	8006018 <TIM_SlaveTimer_SetConfig+0x90>
 8006006:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800600a:	d05c      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
 800600c:	4a32      	ldr	r2, [pc, #200]	; (80060d8 <TIM_SlaveTimer_SetConfig+0x150>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d059      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
 8006012:	2b70      	cmp	r3, #112	; 0x70
 8006014:	d00a      	beq.n	800602c <TIM_SlaveTimer_SetConfig+0xa4>
      break;
 8006016:	e057      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8006018:	4a30      	ldr	r2, [pc, #192]	; (80060dc <TIM_SlaveTimer_SetConfig+0x154>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d053      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
 800601e:	4a30      	ldr	r2, [pc, #192]	; (80060e0 <TIM_SlaveTimer_SetConfig+0x158>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d050      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
 8006024:	4a2f      	ldr	r2, [pc, #188]	; (80060e4 <TIM_SlaveTimer_SetConfig+0x15c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d04d      	beq.n	80060c6 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 800602a:	e04d      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_ETR_SetConfig(htim->Instance,
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6818      	ldr	r0, [r3, #0]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	68d9      	ldr	r1, [r3, #12]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f000 f9d1 	bl	80063e2 <TIM_ETR_SetConfig>
      break;
 8006040:	e042      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x140>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b05      	cmp	r3, #5
 8006048:	d004      	beq.n	8006054 <TIM_SlaveTimer_SetConfig+0xcc>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006052:	d101      	bne.n	8006058 <TIM_SlaveTimer_SetConfig+0xd0>
        return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e038      	b.n	80060ca <TIM_SlaveTimer_SetConfig+0x142>
      tmpccer = htim->Instance->CCER;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6a1a      	ldr	r2, [r3, #32]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0201 	bic.w	r2, r2, #1
 800606e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800607e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	621a      	str	r2, [r3, #32]
      break;
 800609c:	e014      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	6899      	ldr	r1, [r3, #8]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	461a      	mov	r2, r3
 80060ac:	f000 f884 	bl	80061b8 <TIM_TI1_ConfigInputStage>
      break;
 80060b0:	e00a      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	6899      	ldr	r1, [r3, #8]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	461a      	mov	r2, r3
 80060c0:	f000 f8e6 	bl	8006290 <TIM_TI2_ConfigInputStage>
      break;
 80060c4:	e000      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x140>
      break;
 80060c6:	bf00      	nop
  }
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	00100030 	.word	0x00100030
 80060d8:	00100020 	.word	0x00100020
 80060dc:	00100060 	.word	0x00100060
 80060e0:	00100070 	.word	0x00100070
 80060e4:	00100040 	.word	0x00100040

080060e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f023 0201 	bic.w	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4a24      	ldr	r2, [pc, #144]	; (80061a4 <TIM_TI1_SetConfig+0xbc>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <TIM_TI1_SetConfig+0x56>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611c:	d00f      	beq.n	800613e <TIM_TI1_SetConfig+0x56>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4a21      	ldr	r2, [pc, #132]	; (80061a8 <TIM_TI1_SetConfig+0xc0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00b      	beq.n	800613e <TIM_TI1_SetConfig+0x56>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4a20      	ldr	r2, [pc, #128]	; (80061ac <TIM_TI1_SetConfig+0xc4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d007      	beq.n	800613e <TIM_TI1_SetConfig+0x56>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4a1f      	ldr	r2, [pc, #124]	; (80061b0 <TIM_TI1_SetConfig+0xc8>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d003      	beq.n	800613e <TIM_TI1_SetConfig+0x56>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4a1e      	ldr	r2, [pc, #120]	; (80061b4 <TIM_TI1_SetConfig+0xcc>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d101      	bne.n	8006142 <TIM_TI1_SetConfig+0x5a>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <TIM_TI1_SetConfig+0x5c>
 8006142:	2300      	movs	r3, #0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d008      	beq.n	800615a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f023 0303 	bic.w	r3, r3, #3
 800614e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e003      	b.n	8006162 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	b2db      	uxtb	r3, r3
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f023 030a 	bic.w	r3, r3, #10
 800617c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f003 030a 	and.w	r3, r3, #10
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40012c00 	.word	0x40012c00
 80061a8:	40000400 	.word	0x40000400
 80061ac:	40000800 	.word	0x40000800
 80061b0:	40013400 	.word	0x40013400
 80061b4:	40014000 	.word	0x40014000

080061b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f023 0201 	bic.w	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f023 030a 	bic.w	r3, r3, #10
 80061f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006216:	b480      	push	{r7}
 8006218:	b087      	sub	sp, #28
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607a      	str	r2, [r7, #4]
 8006222:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	f023 0210 	bic.w	r2, r3, #16
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006242:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	021b      	lsls	r3, r3, #8
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006254:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	031b      	lsls	r3, r3, #12
 800625a:	b29b      	uxth	r3, r3
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	4313      	orrs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006268:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	621a      	str	r2, [r3, #32]
}
 8006284:	bf00      	nop
 8006286:	371c      	adds	r7, #28
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f023 0210 	bic.w	r2, r3, #16
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	031b      	lsls	r3, r3, #12
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	621a      	str	r2, [r3, #32]
}
 80062e4:	bf00      	nop
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f023 0303 	bic.w	r3, r3, #3
 800631c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800632c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	b2db      	uxtb	r3, r3
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006340:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	621a      	str	r2, [r3, #32]
}
 800635c:	bf00      	nop
 800635e:	371c      	adds	r7, #28
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006394:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	031b      	lsls	r3, r3, #12
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80063ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	031b      	lsls	r3, r3, #12
 80063c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	621a      	str	r2, [r3, #32]
}
 80063d6:	bf00      	nop
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b087      	sub	sp, #28
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	607a      	str	r2, [r7, #4]
 80063ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	021a      	lsls	r2, r3, #8
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	431a      	orrs	r2, r3
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	4313      	orrs	r3, r2
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	609a      	str	r2, [r3, #8]
}
 8006416:	bf00      	nop
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006422:	b480      	push	{r7}
 8006424:	b087      	sub	sp, #28
 8006426:	af00      	add	r7, sp, #0
 8006428:	60f8      	str	r0, [r7, #12]
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f003 031f 	and.w	r3, r3, #31
 8006434:	2201      	movs	r2, #1
 8006436:	fa02 f303 	lsl.w	r3, r2, r3
 800643a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a1a      	ldr	r2, [r3, #32]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	43db      	mvns	r3, r3
 8006444:	401a      	ands	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1a      	ldr	r2, [r3, #32]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	fa01 f303 	lsl.w	r3, r1, r3
 800645a:	431a      	orrs	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	621a      	str	r2, [r3, #32]
}
 8006460:	bf00      	nop
 8006462:	371c      	adds	r7, #28
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006480:	2302      	movs	r3, #2
 8006482:	e047      	b.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1d      	ldr	r2, [pc, #116]	; (8006520 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d004      	beq.n	80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1c      	ldr	r2, [pc, #112]	; (8006524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d108      	bne.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80064d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064e6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	40012c00 	.word	0x40012c00
 8006524:	40013400 	.word	0x40013400

08006528 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006540:	2302      	movs	r3, #2
 8006542:	e087      	b.n	8006654 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	4313      	orrs	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	041b      	lsls	r3, r3, #16
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a27      	ldr	r2, [pc, #156]	; (8006660 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d004      	beq.n	80065d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a25      	ldr	r2, [pc, #148]	; (8006664 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d106      	bne.n	80065e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1e      	ldr	r2, [pc, #120]	; (8006660 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d004      	beq.n	80065f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d126      	bne.n	8006642 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	051b      	lsls	r3, r3, #20
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a0e      	ldr	r2, [pc, #56]	; (8006660 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d004      	beq.n	8006634 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a0d      	ldr	r2, [pc, #52]	; (8006664 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d106      	bne.n	8006642 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	40012c00 	.word	0x40012c00
 8006664:	40013400 	.word	0x40013400

08006668 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <Set_Can_Bytes>:
#include "main.h"
#include "canconfig.h"


void Set_Can_Bytes(uint32_t *pos, uint32_t message)
{
 80066f4:	b590      	push	{r4, r7, lr}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
	//Can_Config_Bytes[message][*pos];

	uint32_t transmit=0;
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]

	switch(Can_Config_Datas[message][*pos])
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	49a0      	ldr	r1, [pc, #640]	; (8006988 <Set_Can_Bytes+0x294>)
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	00d2      	lsls	r2, r2, #3
 800670c:	440a      	add	r2, r1
 800670e:	4413      	add	r3, r2
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	3b01      	subs	r3, #1
 8006714:	2b12      	cmp	r3, #18
 8006716:	f200 8100 	bhi.w	800691a <Set_Can_Bytes+0x226>
 800671a:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <Set_Can_Bytes+0x2c>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	0800676d 	.word	0x0800676d
 8006724:	08006775 	.word	0x08006775
 8006728:	0800677d 	.word	0x0800677d
 800672c:	08006785 	.word	0x08006785
 8006730:	0800678d 	.word	0x0800678d
 8006734:	08006795 	.word	0x08006795
 8006738:	08006923 	.word	0x08006923
 800673c:	08006923 	.word	0x08006923
 8006740:	08006923 	.word	0x08006923
 8006744:	0800679d 	.word	0x0800679d
 8006748:	080067d9 	.word	0x080067d9
 800674c:	08006815 	.word	0x08006815
 8006750:	08006851 	.word	0x08006851
 8006754:	080068df 	.word	0x080068df
 8006758:	080068e9 	.word	0x080068e9
 800675c:	080068f3 	.word	0x080068f3
 8006760:	080068fd 	.word	0x080068fd
 8006764:	08006907 	.word	0x08006907
 8006768:	08006911 	.word	0x08006911
	{
	case MESS_U5I0:
		transmit=1000;
 800676c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006770:	617b      	str	r3, [r7, #20]
		break;
 8006772:	e0d7      	b.n	8006924 <Set_Can_Bytes+0x230>

	case MESS_U5I1:
		transmit=1000;
 8006774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006778:	617b      	str	r3, [r7, #20]
		break;
 800677a:	e0d3      	b.n	8006924 <Set_Can_Bytes+0x230>

	case MESS_U6I0:
		transmit=1000;
 800677c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006780:	617b      	str	r3, [r7, #20]
		break;
 8006782:	e0cf      	b.n	8006924 <Set_Can_Bytes+0x230>

	case MESS_U6I1:
		transmit=1000;
 8006784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006788:	617b      	str	r3, [r7, #20]
		break;
 800678a:	e0cb      	b.n	8006924 <Set_Can_Bytes+0x230>

	case MESS_U7I0:
		transmit=1000;
 800678c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006790:	617b      	str	r3, [r7, #20]
		break;
 8006792:	e0c7      	b.n	8006924 <Set_Can_Bytes+0x230>

	case MESS_U7I1:
		transmit=1000;
 8006794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006798:	617b      	str	r3, [r7, #20]
		break;
 800679a:	e0c3      	b.n	8006924 <Set_Can_Bytes+0x230>
	case MESS_U7T:

		break;

	case MESS_U5V:
		switch(Can_Config_Bytes[message][*pos])
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	497a      	ldr	r1, [pc, #488]	; (800698c <Set_Can_Bytes+0x298>)
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	00d2      	lsls	r2, r2, #3
 80067a6:	440a      	add	r2, r1
 80067a8:	4413      	add	r3, r2
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d002      	beq.n	80067b6 <Set_Can_Bytes+0xc2>
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d008      	beq.n	80067c6 <Set_Can_Bytes+0xd2>
 80067b4:	e00b      	b.n	80067ce <Set_Can_Bytes+0xda>
		{
		case 1:
			transmit=(U5V_real/1000); //transmit number in V
 80067b6:	4b76      	ldr	r3, [pc, #472]	; (8006990 <Set_Can_Bytes+0x29c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a76      	ldr	r2, [pc, #472]	; (8006994 <Set_Can_Bytes+0x2a0>)
 80067bc:	fba2 2303 	umull	r2, r3, r2, r3
 80067c0:	099b      	lsrs	r3, r3, #6
 80067c2:	617b      	str	r3, [r7, #20]
			break;
 80067c4:	e007      	b.n	80067d6 <Set_Can_Bytes+0xe2>
		case 2:
			transmit=U5V_real; //transmit number in mV
 80067c6:	4b72      	ldr	r3, [pc, #456]	; (8006990 <Set_Can_Bytes+0x29c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	617b      	str	r3, [r7, #20]
			break;
 80067cc:	e003      	b.n	80067d6 <Set_Can_Bytes+0xe2>
		default:
			Set_Error(ERR_MESS_INVALID_BYTES);
 80067ce:	2061      	movs	r0, #97	; 0x61
 80067d0:	f003 fa7c 	bl	8009ccc <Set_Error>
			break;
 80067d4:	bf00      	nop
		}
		break;
 80067d6:	e0a5      	b.n	8006924 <Set_Can_Bytes+0x230>

	case MESS_U6V:
		switch(Can_Config_Bytes[message][*pos])
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	496b      	ldr	r1, [pc, #428]	; (800698c <Set_Can_Bytes+0x298>)
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	00d2      	lsls	r2, r2, #3
 80067e2:	440a      	add	r2, r1
 80067e4:	4413      	add	r3, r2
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d002      	beq.n	80067f2 <Set_Can_Bytes+0xfe>
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d008      	beq.n	8006802 <Set_Can_Bytes+0x10e>
 80067f0:	e00b      	b.n	800680a <Set_Can_Bytes+0x116>
		{
		case 1:
			transmit=(U6V_real/1000); //transmit number in V
 80067f2:	4b69      	ldr	r3, [pc, #420]	; (8006998 <Set_Can_Bytes+0x2a4>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a67      	ldr	r2, [pc, #412]	; (8006994 <Set_Can_Bytes+0x2a0>)
 80067f8:	fba2 2303 	umull	r2, r3, r2, r3
 80067fc:	099b      	lsrs	r3, r3, #6
 80067fe:	617b      	str	r3, [r7, #20]
			break;
 8006800:	e007      	b.n	8006812 <Set_Can_Bytes+0x11e>
		case 2:
			transmit=U6V_real; //transmit number in mV
 8006802:	4b65      	ldr	r3, [pc, #404]	; (8006998 <Set_Can_Bytes+0x2a4>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	617b      	str	r3, [r7, #20]
			break;
 8006808:	e003      	b.n	8006812 <Set_Can_Bytes+0x11e>
		default:
			Set_Error(ERR_MESS_INVALID_BYTES);
 800680a:	2061      	movs	r0, #97	; 0x61
 800680c:	f003 fa5e 	bl	8009ccc <Set_Error>
			break;
 8006810:	bf00      	nop
		}
		break;
 8006812:	e087      	b.n	8006924 <Set_Can_Bytes+0x230>

	case MESS_U7V:
		switch(Can_Config_Bytes[message][*pos])
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	495c      	ldr	r1, [pc, #368]	; (800698c <Set_Can_Bytes+0x298>)
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	00d2      	lsls	r2, r2, #3
 800681e:	440a      	add	r2, r1
 8006820:	4413      	add	r3, r2
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d002      	beq.n	800682e <Set_Can_Bytes+0x13a>
 8006828:	2b02      	cmp	r3, #2
 800682a:	d008      	beq.n	800683e <Set_Can_Bytes+0x14a>
 800682c:	e00b      	b.n	8006846 <Set_Can_Bytes+0x152>
		{
		case 1:
			transmit=(U7V_real/1000); //transmit number in V
 800682e:	4b5b      	ldr	r3, [pc, #364]	; (800699c <Set_Can_Bytes+0x2a8>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a58      	ldr	r2, [pc, #352]	; (8006994 <Set_Can_Bytes+0x2a0>)
 8006834:	fba2 2303 	umull	r2, r3, r2, r3
 8006838:	099b      	lsrs	r3, r3, #6
 800683a:	617b      	str	r3, [r7, #20]
			break;
 800683c:	e007      	b.n	800684e <Set_Can_Bytes+0x15a>
		case 2:
			transmit=U7V_real; //transmit number in mV
 800683e:	4b57      	ldr	r3, [pc, #348]	; (800699c <Set_Can_Bytes+0x2a8>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	617b      	str	r3, [r7, #20]
			break;
 8006844:	e003      	b.n	800684e <Set_Can_Bytes+0x15a>
		default:
			Set_Error(ERR_MESS_INVALID_BYTES);
 8006846:	2061      	movs	r0, #97	; 0x61
 8006848:	f003 fa40 	bl	8009ccc <Set_Error>
			break;
 800684c:	bf00      	nop
		}
		break;
 800684e:	e069      	b.n	8006924 <Set_Can_Bytes+0x230>

	case MESS_DI:
		switch(Can_Config_Bytes[message][*pos])
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	494d      	ldr	r1, [pc, #308]	; (800698c <Set_Can_Bytes+0x298>)
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	00d2      	lsls	r2, r2, #3
 800685a:	440a      	add	r2, r1
 800685c:	4413      	add	r3, r2
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d137      	bne.n	80068d4 <Set_Can_Bytes+0x1e0>
		{
		case 1:
			//DIO4 still not working, but we send whatever it says anyway
			transmit=(HAL_GPIO_ReadPin(DIO3.PORT, DIO3.PIN)<<0)|(HAL_GPIO_ReadPin(DIO4.PORT, DIO4.PIN)<<1)|(HAL_GPIO_ReadPin(DIO5.PORT, DIO5.PIN)<<2)|(HAL_GPIO_ReadPin(DIO6.PORT, DIO6.PIN)<<3)|(HAL_GPIO_ReadPin(DIO15.PORT, DIO15.PIN)<<4);
 8006864:	4b4e      	ldr	r3, [pc, #312]	; (80069a0 <Set_Can_Bytes+0x2ac>)
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	4b4d      	ldr	r3, [pc, #308]	; (80069a0 <Set_Can_Bytes+0x2ac>)
 800686a:	889b      	ldrh	r3, [r3, #4]
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f7fc ffe4 	bl	800383c <HAL_GPIO_ReadPin>
 8006874:	4603      	mov	r3, r0
 8006876:	461c      	mov	r4, r3
 8006878:	4b4a      	ldr	r3, [pc, #296]	; (80069a4 <Set_Can_Bytes+0x2b0>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	4b49      	ldr	r3, [pc, #292]	; (80069a4 <Set_Can_Bytes+0x2b0>)
 800687e:	889b      	ldrh	r3, [r3, #4]
 8006880:	4619      	mov	r1, r3
 8006882:	4610      	mov	r0, r2
 8006884:	f7fc ffda 	bl	800383c <HAL_GPIO_ReadPin>
 8006888:	4603      	mov	r3, r0
 800688a:	005b      	lsls	r3, r3, #1
 800688c:	431c      	orrs	r4, r3
 800688e:	4b46      	ldr	r3, [pc, #280]	; (80069a8 <Set_Can_Bytes+0x2b4>)
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	4b45      	ldr	r3, [pc, #276]	; (80069a8 <Set_Can_Bytes+0x2b4>)
 8006894:	889b      	ldrh	r3, [r3, #4]
 8006896:	4619      	mov	r1, r3
 8006898:	4610      	mov	r0, r2
 800689a:	f7fc ffcf 	bl	800383c <HAL_GPIO_ReadPin>
 800689e:	4603      	mov	r3, r0
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	431c      	orrs	r4, r3
 80068a4:	4b41      	ldr	r3, [pc, #260]	; (80069ac <Set_Can_Bytes+0x2b8>)
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	4b40      	ldr	r3, [pc, #256]	; (80069ac <Set_Can_Bytes+0x2b8>)
 80068aa:	889b      	ldrh	r3, [r3, #4]
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f7fc ffc4 	bl	800383c <HAL_GPIO_ReadPin>
 80068b4:	4603      	mov	r3, r0
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	431c      	orrs	r4, r3
 80068ba:	4b3d      	ldr	r3, [pc, #244]	; (80069b0 <Set_Can_Bytes+0x2bc>)
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	4b3c      	ldr	r3, [pc, #240]	; (80069b0 <Set_Can_Bytes+0x2bc>)
 80068c0:	889b      	ldrh	r3, [r3, #4]
 80068c2:	4619      	mov	r1, r3
 80068c4:	4610      	mov	r0, r2
 80068c6:	f7fc ffb9 	bl	800383c <HAL_GPIO_ReadPin>
 80068ca:	4603      	mov	r3, r0
 80068cc:	011b      	lsls	r3, r3, #4
 80068ce:	4323      	orrs	r3, r4
 80068d0:	617b      	str	r3, [r7, #20]
			break;
 80068d2:	e003      	b.n	80068dc <Set_Can_Bytes+0x1e8>
		default:
			Set_Error(ERR_MESS_INVALID_BYTES);
 80068d4:	2061      	movs	r0, #97	; 0x61
 80068d6:	f003 f9f9 	bl	8009ccc <Set_Error>
			break;
 80068da:	bf00      	nop
		}
		break;
 80068dc:	e022      	b.n	8006924 <Set_Can_Bytes+0x230>

	//for these we have the same transmit regardless of how many bytes it will use; this means it is easy to overflow if one byte is used, but we want to send smaller frequencies (up to 255Hz) on one byte
	//this also means there is no warning for wrong number of bytes though
	case MESS_PWM0_Freq:
		transmit=Calculate_PWM_Freq(0);
 80068de:	2000      	movs	r0, #0
 80068e0:	f004 fca6 	bl	800b230 <Calculate_PWM_Freq>
 80068e4:	6178      	str	r0, [r7, #20]
		break;
 80068e6:	e01d      	b.n	8006924 <Set_Can_Bytes+0x230>
	case MESS_PWM0_DC:
		transmit=Calculate_PWM_DC(0);
 80068e8:	2000      	movs	r0, #0
 80068ea:	f004 fc31 	bl	800b150 <Calculate_PWM_DC>
 80068ee:	6178      	str	r0, [r7, #20]
		break;
 80068f0:	e018      	b.n	8006924 <Set_Can_Bytes+0x230>
	case MESS_PWM3_Freq:
		transmit=Calculate_PWM_Freq(3);
 80068f2:	2003      	movs	r0, #3
 80068f4:	f004 fc9c 	bl	800b230 <Calculate_PWM_Freq>
 80068f8:	6178      	str	r0, [r7, #20]
		break;
 80068fa:	e013      	b.n	8006924 <Set_Can_Bytes+0x230>
	case MESS_PWM3_DC:
		transmit=Calculate_PWM_DC(3);
 80068fc:	2003      	movs	r0, #3
 80068fe:	f004 fc27 	bl	800b150 <Calculate_PWM_DC>
 8006902:	6178      	str	r0, [r7, #20]
		break;
 8006904:	e00e      	b.n	8006924 <Set_Can_Bytes+0x230>
	case MESS_PWM4_Freq:
		transmit=Calculate_PWM_Freq(4);
 8006906:	2004      	movs	r0, #4
 8006908:	f004 fc92 	bl	800b230 <Calculate_PWM_Freq>
 800690c:	6178      	str	r0, [r7, #20]
		break;
 800690e:	e009      	b.n	8006924 <Set_Can_Bytes+0x230>
	case MESS_PWM4_DC:
		transmit=Calculate_PWM_DC(4);
 8006910:	2004      	movs	r0, #4
 8006912:	f004 fc1d 	bl	800b150 <Calculate_PWM_DC>
 8006916:	6178      	str	r0, [r7, #20]
		break;
 8006918:	e004      	b.n	8006924 <Set_Can_Bytes+0x230>

	default:
		Set_Error(ERR_MESS_UNDEFINED);
 800691a:	2062      	movs	r0, #98	; 0x62
 800691c:	f003 f9d6 	bl	8009ccc <Set_Error>
		break;
 8006920:	e000      	b.n	8006924 <Set_Can_Bytes+0x230>
		break;
 8006922:	bf00      	nop
	}

	uint32_t temp_pos = *pos;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<Can_Config_Bytes[message][temp_pos]; i++)
 800692a:	2300      	movs	r3, #0
 800692c:	613b      	str	r3, [r7, #16]
 800692e:	e01c      	b.n	800696a <Set_Can_Bytes+0x276>
	{
		//fill the least significant byte first
		CANTxData[temp_pos+(Can_Config_Bytes[message][temp_pos]-i-1)] = transmit>>(i*8) & 0xFF;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	fa22 f103 	lsr.w	r1, r2, r3
 800693a:	4a14      	ldr	r2, [pc, #80]	; (800698c <Set_Can_Bytes+0x298>)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	441a      	add	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4413      	add	r3, r2
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad2      	subs	r2, r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	3b01      	subs	r3, #1
 8006954:	b2c9      	uxtb	r1, r1
 8006956:	4a17      	ldr	r2, [pc, #92]	; (80069b4 <Set_Can_Bytes+0x2c0>)
 8006958:	54d1      	strb	r1, [r2, r3]
		//TODO: seems sometimes transmit value is corrrupted when writing to flash, after I have sending without errors check if that is a thing still

		*pos+=1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	601a      	str	r2, [r3, #0]
	for(uint32_t i=0; i<Can_Config_Bytes[message][temp_pos]; i++)
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	3301      	adds	r3, #1
 8006968:	613b      	str	r3, [r7, #16]
 800696a:	4a08      	ldr	r2, [pc, #32]	; (800698c <Set_Can_Bytes+0x298>)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	441a      	add	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	4293      	cmp	r3, r2
 800697e:	d3d7      	bcc.n	8006930 <Set_Can_Bytes+0x23c>
	}

}
 8006980:	bf00      	nop
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	bd90      	pop	{r4, r7, pc}
 8006988:	20000178 	.word	0x20000178
 800698c:	200002d0 	.word	0x200002d0
 8006990:	20000af0 	.word	0x20000af0
 8006994:	10624dd3 	.word	0x10624dd3
 8006998:	20000904 	.word	0x20000904
 800699c:	200006fc 	.word	0x200006fc
 80069a0:	0800be60 	.word	0x0800be60
 80069a4:	0800be68 	.word	0x0800be68
 80069a8:	0800be70 	.word	0x0800be70
 80069ac:	0800be78 	.word	0x0800be78
 80069b0:	0800be80 	.word	0x0800be80
 80069b4:	200008ec 	.word	0x200008ec

080069b8 <Acknowledge>:


uint32_t ack_k=0;

void Acknowledge(uint8_t cmd)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08c      	sub	sp, #48	; 0x30
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	71fb      	strb	r3, [r7, #7]
	FDCAN_TxHeaderTypeDef TxHeader;

	TxHeader.Identifier = CANID_ACK;
 80069c2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80069c6:	60fb      	str	r3, [r7, #12]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80069c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069cc:	61bb      	str	r3, [r7, #24]

	CANTxData[0]=ID;
 80069ce:	4b2a      	ldr	r3, [pc, #168]	; (8006a78 <Acknowledge+0xc0>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	701a      	strb	r2, [r3, #0]
	CANTxData[1]=cmd;
 80069d4:	4a28      	ldr	r2, [pc, #160]	; (8006a78 <Acknowledge+0xc0>)
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	7053      	strb	r3, [r2, #1]
	CANTxData[2]=(ack_k>>24)*0xFF;
 80069da:	4b28      	ldr	r3, [pc, #160]	; (8006a7c <Acknowledge+0xc4>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	0e1b      	lsrs	r3, r3, #24
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	425b      	negs	r3, r3
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	4b24      	ldr	r3, [pc, #144]	; (8006a78 <Acknowledge+0xc0>)
 80069e8:	709a      	strb	r2, [r3, #2]
	CANTxData[3]=(ack_k>>16)*0xFF;
 80069ea:	4b24      	ldr	r3, [pc, #144]	; (8006a7c <Acknowledge+0xc4>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	0c1b      	lsrs	r3, r3, #16
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	425b      	negs	r3, r3
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	4b20      	ldr	r3, [pc, #128]	; (8006a78 <Acknowledge+0xc0>)
 80069f8:	70da      	strb	r2, [r3, #3]
	CANTxData[4]=(ack_k>>8)*0xFF;
 80069fa:	4b20      	ldr	r3, [pc, #128]	; (8006a7c <Acknowledge+0xc4>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	0a1b      	lsrs	r3, r3, #8
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	425b      	negs	r3, r3
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	4b1c      	ldr	r3, [pc, #112]	; (8006a78 <Acknowledge+0xc0>)
 8006a08:	711a      	strb	r2, [r3, #4]
	CANTxData[5]=ack_k&0xFF;
 8006a0a:	4b1c      	ldr	r3, [pc, #112]	; (8006a7c <Acknowledge+0xc4>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	4b19      	ldr	r3, [pc, #100]	; (8006a78 <Acknowledge+0xc0>)
 8006a12:	715a      	strb	r2, [r3, #5]
	CANTxData[6]=cmd;
 8006a14:	4a18      	ldr	r2, [pc, #96]	; (8006a78 <Acknowledge+0xc0>)
 8006a16:	79fb      	ldrb	r3, [r7, #7]
 8006a18:	7193      	strb	r3, [r2, #6]
	CANTxData[7]=0xFF;
 8006a1a:	4b17      	ldr	r3, [pc, #92]	; (8006a78 <Acknowledge+0xc0>)
 8006a1c:	22ff      	movs	r2, #255	; 0xff
 8006a1e:	71da      	strb	r2, [r3, #7]

	TxHeader.IdType = FDCAN_STANDARD_ID;
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8006a24:	2300      	movs	r3, #0
 8006a26:	617b      	str	r3, [r7, #20]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61fb      	str	r3, [r7, #28]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	623b      	str	r3, [r7, #32]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8006a30:	2300      	movs	r3, #0
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8006a34:	2300      	movs	r3, #0
 8006a36:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.MessageMarker = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) < 1)
 8006a3c:	bf00      	nop
 8006a3e:	4810      	ldr	r0, [pc, #64]	; (8006a80 <Acknowledge+0xc8>)
 8006a40:	f7fb ffac 	bl	800299c <HAL_FDCAN_GetTxFifoFreeLevel>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0f9      	beq.n	8006a3e <Acknowledge+0x86>
		//TODO: think if this is the best way to handle this
		//Error_Handler();
		//return;
	}

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 8006a4a:	f107 030c 	add.w	r3, r7, #12
 8006a4e:	4a0a      	ldr	r2, [pc, #40]	; (8006a78 <Acknowledge+0xc0>)
 8006a50:	4619      	mov	r1, r3
 8006a52:	480b      	ldr	r0, [pc, #44]	; (8006a80 <Acknowledge+0xc8>)
 8006a54:	f7fb fe84 	bl	8002760 <HAL_FDCAN_AddMessageToTxFifoQ>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <Acknowledge+0xae>
	{
		Set_Error(ERR_SEND_FAILED);
 8006a5e:	2006      	movs	r0, #6
 8006a60:	f003 f934 	bl	8009ccc <Set_Error>
 8006a64:	e004      	b.n	8006a70 <Acknowledge+0xb8>
		return;
	}

	ack_k++;
 8006a66:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <Acknowledge+0xc4>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	4a03      	ldr	r2, [pc, #12]	; (8006a7c <Acknowledge+0xc4>)
 8006a6e:	6013      	str	r3, [r2, #0]
}
 8006a70:	3730      	adds	r7, #48	; 0x30
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	200008ec 	.word	0x200008ec
 8006a7c:	20000084 	.word	0x20000084
 8006a80:	20000420 	.word	0x20000420

08006a84 <Save_Config>:

extern TIM_HandleTypeDef htim15;

void Save_Config()
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
	Config_Write_Flash();
 8006a88:	f000 fe10 	bl	80076ac <Config_Write_Flash>

	Config_Read_Flash();
 8006a8c:	f001 f938 	bl	8007d00 <Config_Read_Flash>

	Acknowledge(SAVE_CONFIGS);
 8006a90:	2080      	movs	r0, #128	; 0x80
 8006a92:	f7ff ff91 	bl	80069b8 <Acknowledge>
}
 8006a96:	bf00      	nop
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <Switch_Power>:


const pinPort *switches[] = {&U5IN0, &U5IN1, &U6IN0, &U6IN1, &U7IN0, &U7IN1};

void Switch_Power(uint8_t enableSwitching, uint8_t newState)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	460a      	mov	r2, r1
 8006aa6:	71fb      	strb	r3, [r7, #7]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	71bb      	strb	r3, [r7, #6]
	for(uint32_t i=0; i<5; i++)
 8006aac:	2300      	movs	r3, #0
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	e020      	b.n	8006af4 <Switch_Power+0x58>
	{
		if ((1<<i) & enableSwitching)
 8006ab2:	79fa      	ldrb	r2, [r7, #7]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	fa42 f303 	asr.w	r3, r2, r3
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d015      	beq.n	8006aee <Switch_Power+0x52>
		{
			HAL_GPIO_WritePin(switches[i]->PORT, switches[i]->PIN, ((1<<i)&newState)>>i);
 8006ac2:	4a11      	ldr	r2, [pc, #68]	; (8006b08 <Switch_Power+0x6c>)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aca:	6818      	ldr	r0, [r3, #0]
 8006acc:	4a0e      	ldr	r2, [pc, #56]	; (8006b08 <Switch_Power+0x6c>)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ad4:	8899      	ldrh	r1, [r3, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	409a      	lsls	r2, r3
 8006adc:	79bb      	ldrb	r3, [r7, #6]
 8006ade:	401a      	ands	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	fa42 f303 	asr.w	r3, r2, r3
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	461a      	mov	r2, r3
 8006aea:	f7fc febf 	bl	800386c <HAL_GPIO_WritePin>
	for(uint32_t i=0; i<5; i++)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3301      	adds	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d9db      	bls.n	8006ab2 <Switch_Power+0x16>
		}
	}

	Acknowledge(SWITCH_POWER);
 8006afa:	2001      	movs	r0, #1
 8006afc:	f7ff ff5c 	bl	80069b8 <Acknowledge>
}
 8006b00:	bf00      	nop
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	20000028 	.word	0x20000028

08006b0c <Switch_DC>:

void Switch_DC(uint8_t channelEN, uint8_t newDC[8])
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	4603      	mov	r3, r0
 8006b14:	6039      	str	r1, [r7, #0]
 8006b16:	71fb      	strb	r3, [r7, #7]
	uint32_t pos=3; //start at pos 3 and use a length 8 array so that we can just pass rx data
 8006b18:	2303      	movs	r3, #3
 8006b1a:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60bb      	str	r3, [r7, #8]
 8006b20:	e016      	b.n	8006b50 <Switch_DC+0x44>
	{
		if ((1<<i) & channelEN)
 8006b22:	79fa      	ldrb	r2, [r7, #7]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	fa42 f303 	asr.w	r3, r2, r3
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00b      	beq.n	8006b4a <Switch_DC+0x3e>
		{
			Write_PWM(i, newDC[pos]);
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	68b8      	ldr	r0, [r7, #8]
 8006b40:	f003 f972 	bl	8009e28 <Write_PWM>
			pos++;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3301      	adds	r3, #1
 8006b48:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	60bb      	str	r3, [r7, #8]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	d9e5      	bls.n	8006b22 <Switch_DC+0x16>
		}
	}

	Acknowledge(CHANGE_DC);
 8006b56:	2002      	movs	r0, #2
 8006b58:	f7ff ff2e 	bl	80069b8 <Acknowledge>
}
 8006b5c:	bf00      	nop
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <Buffer_Can_Message>:
extern uint8_t CanMessagesToSend;
extern uint8_t CanBufferReadPos;
extern uint8_t CanBufferWritePos;

void Buffer_Can_Message(uint8_t message)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	71fb      	strb	r3, [r7, #7]
	if(CanBuffer[CanBufferWritePos]!=255)
 8006b6e:	4b14      	ldr	r3, [pc, #80]	; (8006bc0 <Buffer_Can_Message+0x5c>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	4b13      	ldr	r3, [pc, #76]	; (8006bc4 <Buffer_Can_Message+0x60>)
 8006b76:	5c9b      	ldrb	r3, [r3, r2]
 8006b78:	2bff      	cmp	r3, #255	; 0xff
 8006b7a:	d002      	beq.n	8006b82 <Buffer_Can_Message+0x1e>
	{
		Set_Error(ERR_CAN_BUFFER_FULL);
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	f003 f8a5 	bl	8009ccc <Set_Error>
	}
	//overwrite unsent messages
	CanBuffer[CanBufferWritePos]=message;
 8006b82:	4b0f      	ldr	r3, [pc, #60]	; (8006bc0 <Buffer_Can_Message+0x5c>)
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	4619      	mov	r1, r3
 8006b88:	4a0e      	ldr	r2, [pc, #56]	; (8006bc4 <Buffer_Can_Message+0x60>)
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	5453      	strb	r3, [r2, r1]

	if(CanBufferWritePos>=30)
 8006b8e:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <Buffer_Can_Message+0x5c>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b1d      	cmp	r3, #29
 8006b94:	d903      	bls.n	8006b9e <Buffer_Can_Message+0x3a>
	{
		CanBufferWritePos=0;
 8006b96:	4b0a      	ldr	r3, [pc, #40]	; (8006bc0 <Buffer_Can_Message+0x5c>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	701a      	strb	r2, [r3, #0]
 8006b9c:	e005      	b.n	8006baa <Buffer_Can_Message+0x46>
	}
	else
	{
		CanBufferWritePos++;
 8006b9e:	4b08      	ldr	r3, [pc, #32]	; (8006bc0 <Buffer_Can_Message+0x5c>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	4b06      	ldr	r3, [pc, #24]	; (8006bc0 <Buffer_Can_Message+0x5c>)
 8006ba8:	701a      	strb	r2, [r3, #0]
	}
	CanMessagesToSend++;
 8006baa:	4b07      	ldr	r3, [pc, #28]	; (8006bc8 <Buffer_Can_Message+0x64>)
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <Buffer_Can_Message+0x64>)
 8006bb4:	701a      	strb	r2, [r3, #0]
}
 8006bb6:	bf00      	nop
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	200001b8 	.word	0x200001b8
 8006bc4:	20000040 	.word	0x20000040
 8006bc8:	2000068c 	.word	0x2000068c

08006bcc <Sample_Temperature_Voltage>:

extern uint32_t sample_temperature;
extern uint32_t sample_voltage;

void Sample_Temperature_Voltage(uint8_t temperature_samples, uint8_t voltage_samples)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	460a      	mov	r2, r1
 8006bd6:	71fb      	strb	r3, [r7, #7]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	71bb      	strb	r3, [r7, #6]
	sample_temperature+=temperature_samples;
 8006bdc:	79fa      	ldrb	r2, [r7, #7]
 8006bde:	4b08      	ldr	r3, [pc, #32]	; (8006c00 <Sample_Temperature_Voltage+0x34>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4413      	add	r3, r2
 8006be4:	4a06      	ldr	r2, [pc, #24]	; (8006c00 <Sample_Temperature_Voltage+0x34>)
 8006be6:	6013      	str	r3, [r2, #0]
	sample_voltage+=voltage_samples;
 8006be8:	79ba      	ldrb	r2, [r7, #6]
 8006bea:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <Sample_Temperature_Voltage+0x38>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4413      	add	r3, r2
 8006bf0:	4a04      	ldr	r2, [pc, #16]	; (8006c04 <Sample_Temperature_Voltage+0x38>)
 8006bf2:	6013      	str	r3, [r2, #0]
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	20000490 	.word	0x20000490
 8006c04:	20000098 	.word	0x20000098

08006c08 <Config_Message>:


void Config_Message(uint8_t message, uint8_t change, uint16_t data)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	71fb      	strb	r3, [r7, #7]
 8006c12:	460b      	mov	r3, r1
 8006c14:	71bb      	strb	r3, [r7, #6]
 8006c16:	4613      	mov	r3, r2
 8006c18:	80bb      	strh	r3, [r7, #4]
	if(message>7)
 8006c1a:	79fb      	ldrb	r3, [r7, #7]
 8006c1c:	2b07      	cmp	r3, #7
 8006c1e:	d903      	bls.n	8006c28 <Config_Message+0x20>
	{
		Set_Error(ERR_MODIFY_INVALID_MESSAGE);
 8006c20:	2021      	movs	r0, #33	; 0x21
 8006c22:	f003 f853 	bl	8009ccc <Set_Error>
		return;
 8006c26:	e035      	b.n	8006c94 <Config_Message+0x8c>
	}

	if(change<8)
 8006c28:	79bb      	ldrb	r3, [r7, #6]
 8006c2a:	2b07      	cmp	r3, #7
 8006c2c:	d80a      	bhi.n	8006c44 <Config_Message+0x3c>
	{
		Can_Config_Bytes[message][change]=data;
 8006c2e:	79fa      	ldrb	r2, [r7, #7]
 8006c30:	79bb      	ldrb	r3, [r7, #6]
 8006c32:	88b9      	ldrh	r1, [r7, #4]
 8006c34:	b2c8      	uxtb	r0, r1
 8006c36:	4919      	ldr	r1, [pc, #100]	; (8006c9c <Config_Message+0x94>)
 8006c38:	00d2      	lsls	r2, r2, #3
 8006c3a:	440a      	add	r2, r1
 8006c3c:	4413      	add	r3, r2
 8006c3e:	4602      	mov	r2, r0
 8006c40:	701a      	strb	r2, [r3, #0]
 8006c42:	e024      	b.n	8006c8e <Config_Message+0x86>
	}
	else if(change<16)
 8006c44:	79bb      	ldrb	r3, [r7, #6]
 8006c46:	2b0f      	cmp	r3, #15
 8006c48:	d80b      	bhi.n	8006c62 <Config_Message+0x5a>
	{
		Can_Config_Datas[message][change-8]=data;
 8006c4a:	79fa      	ldrb	r2, [r7, #7]
 8006c4c:	79bb      	ldrb	r3, [r7, #6]
 8006c4e:	3b08      	subs	r3, #8
 8006c50:	88b9      	ldrh	r1, [r7, #4]
 8006c52:	b2c8      	uxtb	r0, r1
 8006c54:	4912      	ldr	r1, [pc, #72]	; (8006ca0 <Config_Message+0x98>)
 8006c56:	00d2      	lsls	r2, r2, #3
 8006c58:	440a      	add	r2, r1
 8006c5a:	4413      	add	r3, r2
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	e015      	b.n	8006c8e <Config_Message+0x86>
	}
	else if(change==16)
 8006c62:	79bb      	ldrb	r3, [r7, #6]
 8006c64:	2b10      	cmp	r3, #16
 8006c66:	d105      	bne.n	8006c74 <Config_Message+0x6c>
	{
		Can_IDs[message]=data;
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	490e      	ldr	r1, [pc, #56]	; (8006ca4 <Config_Message+0x9c>)
 8006c6c:	88ba      	ldrh	r2, [r7, #4]
 8006c6e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8006c72:	e00c      	b.n	8006c8e <Config_Message+0x86>
	}
	else if(change==17)
 8006c74:	79bb      	ldrb	r3, [r7, #6]
 8006c76:	2b11      	cmp	r3, #17
 8006c78:	d105      	bne.n	8006c86 <Config_Message+0x7e>
	{
		Can_DLCs[message]=data;
 8006c7a:	79fb      	ldrb	r3, [r7, #7]
 8006c7c:	88ba      	ldrh	r2, [r7, #4]
 8006c7e:	b2d1      	uxtb	r1, r2
 8006c80:	4a09      	ldr	r2, [pc, #36]	; (8006ca8 <Config_Message+0xa0>)
 8006c82:	54d1      	strb	r1, [r2, r3]
 8006c84:	e003      	b.n	8006c8e <Config_Message+0x86>
	}
	else
	{
		Set_Error(ERR_MODIFY_INVALID_THING);
 8006c86:	2022      	movs	r0, #34	; 0x22
 8006c88:	f003 f820 	bl	8009ccc <Set_Error>
		return;
 8006c8c:	e002      	b.n	8006c94 <Config_Message+0x8c>
	}

	Acknowledge(CONFIG_MESSAGE);
 8006c8e:	2081      	movs	r0, #129	; 0x81
 8006c90:	f7ff fe92 	bl	80069b8 <Acknowledge>
}
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	200002d0 	.word	0x200002d0
 8006ca0:	20000178 	.word	0x20000178
 8006ca4:	2000084c 	.word	0x2000084c
 8006ca8:	200008f8 	.word	0x200008f8

08006cac <Config_Switch_Defaults>:

void Config_Switch_Defaults(uint8_t enableChanges, uint8_t newState)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	460a      	mov	r2, r1
 8006cb6:	71fb      	strb	r3, [r7, #7]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	71bb      	strb	r3, [r7, #6]
	for(uint32_t i=0; i<6; i++)
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	e02f      	b.n	8006d22 <Config_Switch_Defaults+0x76>
	{
		if (((enableChanges>>i)&0b1))
 8006cc2:	79fa      	ldrb	r2, [r7, #7]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	fa42 f303 	asr.w	r3, r2, r3
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d024      	beq.n	8006d1c <Config_Switch_Defaults+0x70>
		{
			if(((newState>>i)&0b1))
 8006cd2:	79ba      	ldrb	r2, [r7, #6]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	fa42 f303 	asr.w	r3, r2, r3
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00d      	beq.n	8006cfe <Config_Switch_Defaults+0x52>
			{
				Default_Switch_State|=(1<<i);
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cea:	b25a      	sxtb	r2, r3
 8006cec:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <Config_Switch_Defaults+0x8c>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	b25b      	sxtb	r3, r3
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	b25b      	sxtb	r3, r3
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	4b0f      	ldr	r3, [pc, #60]	; (8006d38 <Config_Switch_Defaults+0x8c>)
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	e00e      	b.n	8006d1c <Config_Switch_Defaults+0x70>
			}
			else
			{
				Default_Switch_State&=~(1<<i);
 8006cfe:	2201      	movs	r2, #1
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	fa02 f303 	lsl.w	r3, r2, r3
 8006d06:	b25b      	sxtb	r3, r3
 8006d08:	43db      	mvns	r3, r3
 8006d0a:	b25a      	sxtb	r2, r3
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <Config_Switch_Defaults+0x8c>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	b25b      	sxtb	r3, r3
 8006d12:	4013      	ands	r3, r2
 8006d14:	b25b      	sxtb	r3, r3
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <Config_Switch_Defaults+0x8c>)
 8006d1a:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<6; i++)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b05      	cmp	r3, #5
 8006d26:	d9cc      	bls.n	8006cc2 <Config_Switch_Defaults+0x16>
			}
		}
	}

	Acknowledge(CONFIG_SWITCHES_DEFAULT);
 8006d28:	2082      	movs	r0, #130	; 0x82
 8006d2a:	f7ff fe45 	bl	80069b8 <Acknowledge>
}
 8006d2e:	bf00      	nop
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000487 	.word	0x20000487

08006d3c <Config_Can_Sync>:

void Config_Can_Sync(uint8_t enableChanges, uint8_t newState)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	4603      	mov	r3, r0
 8006d44:	460a      	mov	r2, r1
 8006d46:	71fb      	strb	r3, [r7, #7]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	71bb      	strb	r3, [r7, #6]
	for(uint32_t i=0; i<8; i++)
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	e02f      	b.n	8006db2 <Config_Can_Sync+0x76>
	{
		if (((enableChanges>>i)&0b1))
 8006d52:	79fa      	ldrb	r2, [r7, #7]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	fa42 f303 	asr.w	r3, r2, r3
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d024      	beq.n	8006dac <Config_Can_Sync+0x70>
		{
			if(((newState>>i)&0b1))
 8006d62:	79ba      	ldrb	r2, [r7, #6]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	fa42 f303 	asr.w	r3, r2, r3
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00d      	beq.n	8006d8e <Config_Can_Sync+0x52>
			{
				Can_Sync_Enable|=(1<<i);
 8006d72:	2201      	movs	r2, #1
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7a:	b25a      	sxtb	r2, r3
 8006d7c:	4b12      	ldr	r3, [pc, #72]	; (8006dc8 <Config_Can_Sync+0x8c>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	b25b      	sxtb	r3, r3
 8006d82:	4313      	orrs	r3, r2
 8006d84:	b25b      	sxtb	r3, r3
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <Config_Can_Sync+0x8c>)
 8006d8a:	701a      	strb	r2, [r3, #0]
 8006d8c:	e00e      	b.n	8006dac <Config_Can_Sync+0x70>
			}
			else
			{
				Can_Sync_Enable&=~(1<<i);
 8006d8e:	2201      	movs	r2, #1
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	fa02 f303 	lsl.w	r3, r2, r3
 8006d96:	b25b      	sxtb	r3, r3
 8006d98:	43db      	mvns	r3, r3
 8006d9a:	b25a      	sxtb	r2, r3
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	; (8006dc8 <Config_Can_Sync+0x8c>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	b25b      	sxtb	r3, r3
 8006da2:	4013      	ands	r3, r2
 8006da4:	b25b      	sxtb	r3, r3
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	4b07      	ldr	r3, [pc, #28]	; (8006dc8 <Config_Can_Sync+0x8c>)
 8006daa:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3301      	adds	r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b07      	cmp	r3, #7
 8006db6:	d9cc      	bls.n	8006d52 <Config_Can_Sync+0x16>
			}
		}
	}

	Acknowledge(CONFIG_CAN_SYNC);
 8006db8:	2083      	movs	r0, #131	; 0x83
 8006dba:	f7ff fdfd 	bl	80069b8 <Acknowledge>
}
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	200004dc 	.word	0x200004dc

08006dcc <Config_Can_Timed>:

void Config_Can_Timed(uint8_t enableChanges, uint8_t newState)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	460a      	mov	r2, r1
 8006dd6:	71fb      	strb	r3, [r7, #7]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	71bb      	strb	r3, [r7, #6]
	for(uint32_t i=0; i<8; i++)
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	e02f      	b.n	8006e42 <Config_Can_Timed+0x76>
	{
		if (((enableChanges>>i)&0b1))
 8006de2:	79fa      	ldrb	r2, [r7, #7]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	fa42 f303 	asr.w	r3, r2, r3
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d024      	beq.n	8006e3c <Config_Can_Timed+0x70>
		{
			if(((newState>>i)&0b1))
 8006df2:	79ba      	ldrb	r2, [r7, #6]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	fa42 f303 	asr.w	r3, r2, r3
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00d      	beq.n	8006e1e <Config_Can_Timed+0x52>
			{
				Can_Timed_Enable|=(1<<i);
 8006e02:	2201      	movs	r2, #1
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0a:	b25a      	sxtb	r2, r3
 8006e0c:	4b12      	ldr	r3, [pc, #72]	; (8006e58 <Config_Can_Timed+0x8c>)
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	b25b      	sxtb	r3, r3
 8006e12:	4313      	orrs	r3, r2
 8006e14:	b25b      	sxtb	r3, r3
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	4b0f      	ldr	r3, [pc, #60]	; (8006e58 <Config_Can_Timed+0x8c>)
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	e00e      	b.n	8006e3c <Config_Can_Timed+0x70>
			}
			else
			{
				Can_Timed_Enable&=~(1<<i);
 8006e1e:	2201      	movs	r2, #1
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	fa02 f303 	lsl.w	r3, r2, r3
 8006e26:	b25b      	sxtb	r3, r3
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	b25a      	sxtb	r2, r3
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <Config_Can_Timed+0x8c>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	b25b      	sxtb	r3, r3
 8006e32:	4013      	ands	r3, r2
 8006e34:	b25b      	sxtb	r3, r3
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	4b07      	ldr	r3, [pc, #28]	; (8006e58 <Config_Can_Timed+0x8c>)
 8006e3a:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b07      	cmp	r3, #7
 8006e46:	d9cc      	bls.n	8006de2 <Config_Can_Timed+0x16>
			}
		}
	}

	Acknowledge(CONFIG_CAN_TIMED);
 8006e48:	2084      	movs	r0, #132	; 0x84
 8006e4a:	f7ff fdb5 	bl	80069b8 <Acknowledge>
}
 8006e4e:	bf00      	nop
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	200000f1 	.word	0x200000f1

08006e5c <Config_Can_Interval>:

void Config_Can_Interval(uint16_t newInterval)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	80fb      	strh	r3, [r7, #6]
	Can_Interval=newInterval;
 8006e66:	4a05      	ldr	r2, [pc, #20]	; (8006e7c <Config_Can_Interval+0x20>)
 8006e68:	88fb      	ldrh	r3, [r7, #6]
 8006e6a:	8013      	strh	r3, [r2, #0]

	Acknowledge(CONFIG_CAN_INTERVAL);
 8006e6c:	2085      	movs	r0, #133	; 0x85
 8006e6e:	f7ff fda3 	bl	80069b8 <Acknowledge>
}
 8006e72:	bf00      	nop
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	200000f4 	.word	0x200000f4

08006e80 <Config_Can_Sync_Delay>:

void Config_Can_Sync_Delay(uint16_t newDelay)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	80fb      	strh	r3, [r7, #6]
	Can_Sync_Delay=newDelay;
 8006e8a:	4a05      	ldr	r2, [pc, #20]	; (8006ea0 <Config_Can_Sync_Delay+0x20>)
 8006e8c:	88fb      	ldrh	r3, [r7, #6]
 8006e8e:	8013      	strh	r3, [r2, #0]

	Acknowledge(CONFIG_CAN_SYNC_DELAY);
 8006e90:	2086      	movs	r0, #134	; 0x86
 8006e92:	f7ff fd91 	bl	80069b8 <Acknowledge>
}
 8006e96:	bf00      	nop
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	2000041c 	.word	0x2000041c

08006ea4 <Config_Temperature_Voltage_Reading>:

void Config_Temperature_Voltage_Reading(uint16_t interval, uint8_t tempBurst, uint8_t voltBurst)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	4603      	mov	r3, r0
 8006eac:	80fb      	strh	r3, [r7, #6]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	717b      	strb	r3, [r7, #5]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	713b      	strb	r3, [r7, #4]
	if(tempBurst==255)
 8006eb6:	797b      	ldrb	r3, [r7, #5]
 8006eb8:	2bff      	cmp	r3, #255	; 0xff
 8006eba:	d106      	bne.n	8006eca <Config_Temperature_Voltage_Reading+0x26>
	{
		sample_temperature=255;
 8006ebc:	4b13      	ldr	r3, [pc, #76]	; (8006f0c <Config_Temperature_Voltage_Reading+0x68>)
 8006ebe:	22ff      	movs	r2, #255	; 0xff
 8006ec0:	601a      	str	r2, [r3, #0]
		SampleTemperatureBurst=0;
 8006ec2:	4b13      	ldr	r3, [pc, #76]	; (8006f10 <Config_Temperature_Voltage_Reading+0x6c>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	701a      	strb	r2, [r3, #0]
 8006ec8:	e005      	b.n	8006ed6 <Config_Temperature_Voltage_Reading+0x32>
	}
	else
	{
		sample_temperature=0;
 8006eca:	4b10      	ldr	r3, [pc, #64]	; (8006f0c <Config_Temperature_Voltage_Reading+0x68>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]
		SampleTemperatureBurst=tempBurst;
 8006ed0:	4a0f      	ldr	r2, [pc, #60]	; (8006f10 <Config_Temperature_Voltage_Reading+0x6c>)
 8006ed2:	797b      	ldrb	r3, [r7, #5]
 8006ed4:	7013      	strb	r3, [r2, #0]
	}

	if(voltBurst==255)
 8006ed6:	793b      	ldrb	r3, [r7, #4]
 8006ed8:	2bff      	cmp	r3, #255	; 0xff
 8006eda:	d106      	bne.n	8006eea <Config_Temperature_Voltage_Reading+0x46>
	{
		sample_voltage=255;
 8006edc:	4b0d      	ldr	r3, [pc, #52]	; (8006f14 <Config_Temperature_Voltage_Reading+0x70>)
 8006ede:	22ff      	movs	r2, #255	; 0xff
 8006ee0:	601a      	str	r2, [r3, #0]
		SampleVoltageBurst=0;
 8006ee2:	4b0d      	ldr	r3, [pc, #52]	; (8006f18 <Config_Temperature_Voltage_Reading+0x74>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	e005      	b.n	8006ef6 <Config_Temperature_Voltage_Reading+0x52>
	}
	else
	{
		sample_voltage=0;
 8006eea:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <Config_Temperature_Voltage_Reading+0x70>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]
		SampleVoltageBurst=voltBurst;
 8006ef0:	4a09      	ldr	r2, [pc, #36]	; (8006f18 <Config_Temperature_Voltage_Reading+0x74>)
 8006ef2:	793b      	ldrb	r3, [r7, #4]
 8006ef4:	7013      	strb	r3, [r2, #0]
	}

	SampleTemperatureVoltagePeriod=interval;
 8006ef6:	4a09      	ldr	r2, [pc, #36]	; (8006f1c <Config_Temperature_Voltage_Reading+0x78>)
 8006ef8:	88fb      	ldrh	r3, [r7, #6]
 8006efa:	8013      	strh	r3, [r2, #0]

	Acknowledge(CONFIG_CAN_TV_READING);
 8006efc:	2087      	movs	r0, #135	; 0x87
 8006efe:	f7ff fd5b 	bl	80069b8 <Acknowledge>
}
 8006f02:	bf00      	nop
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20000490 	.word	0x20000490
 8006f10:	200008e9 	.word	0x200008e9
 8006f14:	20000098 	.word	0x20000098
 8006f18:	200001b9 	.word	0x200001b9
 8006f1c:	20000954 	.word	0x20000954

08006f20 <Config_Default_DC>:

void Config_Default_DC(uint8_t channelEN, uint8_t newDC[8])
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	4603      	mov	r3, r0
 8006f28:	6039      	str	r1, [r7, #0]
 8006f2a:	71fb      	strb	r3, [r7, #7]
	uint32_t pos=3; //start at pos 3 and use a length 8 array so that we can just pass rx data
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 8006f30:	2300      	movs	r3, #0
 8006f32:	60bb      	str	r3, [r7, #8]
 8006f34:	e016      	b.n	8006f64 <Config_Default_DC+0x44>
	{
		if ((1<<i) & channelEN)
 8006f36:	79fa      	ldrb	r2, [r7, #7]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	fa42 f303 	asr.w	r3, r2, r3
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <Config_Default_DC+0x3e>
		{
			PWM_Pulses[i]=newDC[pos];
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	b299      	uxth	r1, r3
 8006f50:	4a09      	ldr	r2, [pc, #36]	; (8006f78 <Config_Default_DC+0x58>)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pos++;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	3301      	adds	r3, #1
 8006f62:	60bb      	str	r3, [r7, #8]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d9e5      	bls.n	8006f36 <Config_Default_DC+0x16>
		}
	}

	Acknowledge(CONFIG_DEFAULT_DC);
 8006f6a:	2088      	movs	r0, #136	; 0x88
 8006f6c:	f7ff fd24 	bl	80069b8 <Acknowledge>
}
 8006f70:	bf00      	nop
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	200007f8 	.word	0x200007f8

08006f7c <Config_PWM_Prescalers>:

void Config_PWM_Prescalers(uint8_t channelEN, uint8_t newPrescalers[8])
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	6039      	str	r1, [r7, #0]
 8006f86:	71fb      	strb	r3, [r7, #7]
	uint32_t pos=3; //start at pos 3 and use a length 8 array so that we can just pass rx data
 8006f88:	2303      	movs	r3, #3
 8006f8a:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60bb      	str	r3, [r7, #8]
 8006f90:	e016      	b.n	8006fc0 <Config_PWM_Prescalers+0x44>
	{
		if ((1<<i) & channelEN)
 8006f92:	79fa      	ldrb	r2, [r7, #7]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	fa42 f303 	asr.w	r3, r2, r3
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00b      	beq.n	8006fba <Config_PWM_Prescalers+0x3e>
		{
			PWM_Prescalers[i]=newPrescalers[pos];
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	b299      	uxth	r1, r3
 8006fac:	4a09      	ldr	r2, [pc, #36]	; (8006fd4 <Config_PWM_Prescalers+0x58>)
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pos++;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i<5; i++)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	60bb      	str	r3, [r7, #8]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d9e5      	bls.n	8006f92 <Config_PWM_Prescalers+0x16>
		}
	}

	Acknowledge(CONFIG_PWM_PRESCALERS);
 8006fc6:	2089      	movs	r0, #137	; 0x89
 8006fc8:	f7ff fcf6 	bl	80069b8 <Acknowledge>
}
 8006fcc:	bf00      	nop
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	20000578 	.word	0x20000578

08006fd8 <Config_DIO_Pins>:

void Config_DIO_Pins(uint8_t EN, uint8_t new_Din_EN, uint8_t new_PWM_Out_EN, uint8_t new_PWM_In_EN)
{
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	4623      	mov	r3, r4
 8006fe8:	71fb      	strb	r3, [r7, #7]
 8006fea:	4603      	mov	r3, r0
 8006fec:	71bb      	strb	r3, [r7, #6]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	717b      	strb	r3, [r7, #5]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	713b      	strb	r3, [r7, #4]
	for(uint32_t i=0; i<5; i++)
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	e081      	b.n	8007100 <Config_DIO_Pins+0x128>
	{
		if ((EN>>i)&1)
 8006ffc:	79fa      	ldrb	r2, [r7, #7]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	fa42 f303 	asr.w	r3, r2, r3
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d076      	beq.n	80070fa <Config_DIO_Pins+0x122>
		{
			Digital_In_EN &= ~(1<<i);
 800700c:	2201      	movs	r2, #1
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	fa02 f303 	lsl.w	r3, r2, r3
 8007014:	b25b      	sxtb	r3, r3
 8007016:	43db      	mvns	r3, r3
 8007018:	b25a      	sxtb	r2, r3
 800701a:	4b3f      	ldr	r3, [pc, #252]	; (8007118 <Config_DIO_Pins+0x140>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	b25b      	sxtb	r3, r3
 8007020:	4013      	ands	r3, r2
 8007022:	b25b      	sxtb	r3, r3
 8007024:	b2da      	uxtb	r2, r3
 8007026:	4b3c      	ldr	r3, [pc, #240]	; (8007118 <Config_DIO_Pins+0x140>)
 8007028:	701a      	strb	r2, [r3, #0]
			PWM_Out_EN &= ~(1<<i);
 800702a:	2201      	movs	r2, #1
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	fa02 f303 	lsl.w	r3, r2, r3
 8007032:	b25b      	sxtb	r3, r3
 8007034:	43db      	mvns	r3, r3
 8007036:	b25a      	sxtb	r2, r3
 8007038:	4b38      	ldr	r3, [pc, #224]	; (800711c <Config_DIO_Pins+0x144>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	b25b      	sxtb	r3, r3
 800703e:	4013      	ands	r3, r2
 8007040:	b25b      	sxtb	r3, r3
 8007042:	b2da      	uxtb	r2, r3
 8007044:	4b35      	ldr	r3, [pc, #212]	; (800711c <Config_DIO_Pins+0x144>)
 8007046:	701a      	strb	r2, [r3, #0]
			PWM_In_EN &= ~(1<<i);
 8007048:	2201      	movs	r2, #1
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	fa02 f303 	lsl.w	r3, r2, r3
 8007050:	b25b      	sxtb	r3, r3
 8007052:	43db      	mvns	r3, r3
 8007054:	b25a      	sxtb	r2, r3
 8007056:	4b32      	ldr	r3, [pc, #200]	; (8007120 <Config_DIO_Pins+0x148>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	b25b      	sxtb	r3, r3
 800705c:	4013      	ands	r3, r2
 800705e:	b25b      	sxtb	r3, r3
 8007060:	b2da      	uxtb	r2, r3
 8007062:	4b2f      	ldr	r3, [pc, #188]	; (8007120 <Config_DIO_Pins+0x148>)
 8007064:	701a      	strb	r2, [r3, #0]

			if ((new_Din_EN>>i)&1)
 8007066:	79ba      	ldrb	r2, [r7, #6]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	fa42 f303 	asr.w	r3, r2, r3
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d010      	beq.n	8007098 <Config_DIO_Pins+0xc0>
			{
				if (i != 1) //disable PB4 as input
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d03e      	beq.n	80070fa <Config_DIO_Pins+0x122>
				{
					Digital_In_EN |= (1<<i);
 800707c:	2201      	movs	r2, #1
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	fa02 f303 	lsl.w	r3, r2, r3
 8007084:	b25a      	sxtb	r2, r3
 8007086:	4b24      	ldr	r3, [pc, #144]	; (8007118 <Config_DIO_Pins+0x140>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	b25b      	sxtb	r3, r3
 800708c:	4313      	orrs	r3, r2
 800708e:	b25b      	sxtb	r3, r3
 8007090:	b2da      	uxtb	r2, r3
 8007092:	4b21      	ldr	r3, [pc, #132]	; (8007118 <Config_DIO_Pins+0x140>)
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	e030      	b.n	80070fa <Config_DIO_Pins+0x122>
				}
			}
			else if ((new_PWM_Out_EN>>i)&1)
 8007098:	797a      	ldrb	r2, [r7, #5]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	fa42 f303 	asr.w	r3, r2, r3
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00d      	beq.n	80070c4 <Config_DIO_Pins+0xec>
			{
				if (1)
				{
					PWM_Out_EN |= (1<<i);
 80070a8:	2201      	movs	r2, #1
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	fa02 f303 	lsl.w	r3, r2, r3
 80070b0:	b25a      	sxtb	r2, r3
 80070b2:	4b1a      	ldr	r3, [pc, #104]	; (800711c <Config_DIO_Pins+0x144>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	b25b      	sxtb	r3, r3
 80070b8:	4313      	orrs	r3, r2
 80070ba:	b25b      	sxtb	r3, r3
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	4b17      	ldr	r3, [pc, #92]	; (800711c <Config_DIO_Pins+0x144>)
 80070c0:	701a      	strb	r2, [r3, #0]
 80070c2:	e01a      	b.n	80070fa <Config_DIO_Pins+0x122>
				}
			}
			else if ((new_PWM_In_EN>>i)&1)
 80070c4:	793a      	ldrb	r2, [r7, #4]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	fa42 f303 	asr.w	r3, r2, r3
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d012      	beq.n	80070fa <Config_DIO_Pins+0x122>
			{
				if ( (i!=1) && (i!=2) ) //disable PB4 as input, PB5 doesn't have functionality as PWM input
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d00f      	beq.n	80070fa <Config_DIO_Pins+0x122>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d00c      	beq.n	80070fa <Config_DIO_Pins+0x122>
				{
					PWM_In_EN |= (1<<i);
 80070e0:	2201      	movs	r2, #1
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	fa02 f303 	lsl.w	r3, r2, r3
 80070e8:	b25a      	sxtb	r2, r3
 80070ea:	4b0d      	ldr	r3, [pc, #52]	; (8007120 <Config_DIO_Pins+0x148>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	b25b      	sxtb	r3, r3
 80070f0:	4313      	orrs	r3, r2
 80070f2:	b25b      	sxtb	r3, r3
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	4b0a      	ldr	r3, [pc, #40]	; (8007120 <Config_DIO_Pins+0x148>)
 80070f8:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<5; i++)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3301      	adds	r3, #1
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b04      	cmp	r3, #4
 8007104:	f67f af7a 	bls.w	8006ffc <Config_DIO_Pins+0x24>
				}
			}
		}
	}

	Acknowledge(CONFIG_DIO);
 8007108:	208a      	movs	r0, #138	; 0x8a
 800710a:	f7ff fc55 	bl	80069b8 <Acknowledge>
}
 800710e:	bf00      	nop
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	bd90      	pop	{r4, r7, pc}
 8007116:	bf00      	nop
 8007118:	200000f0 	.word	0x200000f0
 800711c:	200009bc 	.word	0x200009bc
 8007120:	20000486 	.word	0x20000486

08007124 <Config_Interrupt_Power>:

void Config_Interrupt_Power(uint8_t gpio, uint8_t Power_High_Falling, uint8_t Power_High_Rising, uint8_t Power_Low_Falling, uint8_t Power_Low_Rising)
{
 8007124:	b590      	push	{r4, r7, lr}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	4604      	mov	r4, r0
 800712c:	4608      	mov	r0, r1
 800712e:	4611      	mov	r1, r2
 8007130:	461a      	mov	r2, r3
 8007132:	4623      	mov	r3, r4
 8007134:	71fb      	strb	r3, [r7, #7]
 8007136:	4603      	mov	r3, r0
 8007138:	71bb      	strb	r3, [r7, #6]
 800713a:	460b      	mov	r3, r1
 800713c:	717b      	strb	r3, [r7, #5]
 800713e:	4613      	mov	r3, r2
 8007140:	713b      	strb	r3, [r7, #4]

	Digital_In_Interrupt_Power_High_Falling[gpio]=Power_High_Falling;
 8007142:	79fb      	ldrb	r3, [r7, #7]
 8007144:	490a      	ldr	r1, [pc, #40]	; (8007170 <Config_Interrupt_Power+0x4c>)
 8007146:	79ba      	ldrb	r2, [r7, #6]
 8007148:	54ca      	strb	r2, [r1, r3]
	Digital_In_Interrupt_Power_High_Rising[gpio]=Power_High_Rising;
 800714a:	79fb      	ldrb	r3, [r7, #7]
 800714c:	4909      	ldr	r1, [pc, #36]	; (8007174 <Config_Interrupt_Power+0x50>)
 800714e:	797a      	ldrb	r2, [r7, #5]
 8007150:	54ca      	strb	r2, [r1, r3]
	Digital_In_Interrupt_Power_Low_Falling[gpio]=Power_Low_Falling;
 8007152:	79fb      	ldrb	r3, [r7, #7]
 8007154:	4908      	ldr	r1, [pc, #32]	; (8007178 <Config_Interrupt_Power+0x54>)
 8007156:	793a      	ldrb	r2, [r7, #4]
 8007158:	54ca      	strb	r2, [r1, r3]
	Digital_In_Interrupt_Power_Low_Rising[gpio]=Power_Low_Rising;
 800715a:	79fb      	ldrb	r3, [r7, #7]
 800715c:	4907      	ldr	r1, [pc, #28]	; (800717c <Config_Interrupt_Power+0x58>)
 800715e:	7e3a      	ldrb	r2, [r7, #24]
 8007160:	54ca      	strb	r2, [r1, r3]

	Acknowledge(CONFIG_INTERRUPT_POWER);
 8007162:	208b      	movs	r0, #139	; 0x8b
 8007164:	f7ff fc28 	bl	80069b8 <Acknowledge>
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	bd90      	pop	{r4, r7, pc}
 8007170:	2000075c 	.word	0x2000075c
 8007174:	20000564 	.word	0x20000564
 8007178:	200008e4 	.word	0x200008e4
 800717c:	20000494 	.word	0x20000494

08007180 <Config_Interrupt_Can>:

void Config_Interrupt_Can(uint8_t gpio, uint8_t Can_Falling, uint8_t Can_Rising)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	4603      	mov	r3, r0
 8007188:	71fb      	strb	r3, [r7, #7]
 800718a:	460b      	mov	r3, r1
 800718c:	71bb      	strb	r3, [r7, #6]
 800718e:	4613      	mov	r3, r2
 8007190:	717b      	strb	r3, [r7, #5]
	Digital_In_Interrupt_Can_Falling[gpio]=Can_Falling;
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	4906      	ldr	r1, [pc, #24]	; (80071b0 <Config_Interrupt_Can+0x30>)
 8007196:	79ba      	ldrb	r2, [r7, #6]
 8007198:	54ca      	strb	r2, [r1, r3]
	Digital_In_Interrupt_Can_Rising[gpio]=Can_Rising;
 800719a:	79fb      	ldrb	r3, [r7, #7]
 800719c:	4905      	ldr	r1, [pc, #20]	; (80071b4 <Config_Interrupt_Can+0x34>)
 800719e:	797a      	ldrb	r2, [r7, #5]
 80071a0:	54ca      	strb	r2, [r1, r3]

	Acknowledge(CONFIG_INTERRUPT_CAN);
 80071a2:	208c      	movs	r0, #140	; 0x8c
 80071a4:	f7ff fc08 	bl	80069b8 <Acknowledge>
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	20000090 	.word	0x20000090
 80071b4:	2000009c 	.word	0x2000009c

080071b8 <Config_Setup>:
#include "main.h"
#include "config.h"


void Config_Setup(void)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	af00      	add	r7, sp, #0
	if(Flash_Read(FLASH_PAGE_63)==0xFFFFFFFF) //initialize the flash to avoid errors
 80071bc:	4807      	ldr	r0, [pc, #28]	; (80071dc <Config_Setup+0x24>)
 80071be:	f001 f997 	bl	80084f0 <Flash_Read>
 80071c2:	4603      	mov	r3, r0
 80071c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c8:	d104      	bne.n	80071d4 <Config_Setup+0x1c>

		Config_1();

#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_0();
 80071ca:	f000 f809 	bl	80071e0 <Config_0>

#endif

		Config_Write_Flash();
 80071ce:	f000 fa6d 	bl	80076ac <Config_Write_Flash>
	}
	else //if flash is not blank read in values from flash
	{
		Config_Read_Flash();
	}
}
 80071d2:	e001      	b.n	80071d8 <Config_Setup+0x20>
		Config_Read_Flash();
 80071d4:	f000 fd94 	bl	8007d00 <Config_Read_Flash>
}
 80071d8:	bf00      	nop
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	0801f800 	.word	0x0801f800

080071e0 <Config_0>:


void Config_0(void)
{
 80071e0:	b4b0      	push	{r4, r5, r7}
 80071e2:	b0cd      	sub	sp, #308	; 0x134
 80071e4:	af00      	add	r7, sp, #0
	//TODO: check that these work properly
	warn_undervoltage_U5=18000;
 80071e6:	4b61      	ldr	r3, [pc, #388]	; (800736c <Config_0+0x18c>)
 80071e8:	f244 6250 	movw	r2, #18000	; 0x4650
 80071ec:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U5=28000;
 80071ee:	4b60      	ldr	r3, [pc, #384]	; (8007370 <Config_0+0x190>)
 80071f0:	f646 5260 	movw	r2, #28000	; 0x6d60
 80071f4:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U5=0;
 80071f6:	4b5f      	ldr	r3, [pc, #380]	; (8007374 <Config_0+0x194>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U5=1023;
 80071fc:	4b5e      	ldr	r3, [pc, #376]	; (8007378 <Config_0+0x198>)
 80071fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007202:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U5I0=0;
 8007204:	4b5d      	ldr	r3, [pc, #372]	; (800737c <Config_0+0x19c>)
 8007206:	2200      	movs	r2, #0
 8007208:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U5I0=1000;
 800720a:	4b5d      	ldr	r3, [pc, #372]	; (8007380 <Config_0+0x1a0>)
 800720c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007210:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U5I1=0;
 8007212:	4b5c      	ldr	r3, [pc, #368]	; (8007384 <Config_0+0x1a4>)
 8007214:	2200      	movs	r2, #0
 8007216:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U5I1=1000;
 8007218:	4b5b      	ldr	r3, [pc, #364]	; (8007388 <Config_0+0x1a8>)
 800721a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800721e:	801a      	strh	r2, [r3, #0]
	warn_undervoltage_U6=18000;
 8007220:	4b5a      	ldr	r3, [pc, #360]	; (800738c <Config_0+0x1ac>)
 8007222:	f244 6250 	movw	r2, #18000	; 0x4650
 8007226:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U6=28000;
 8007228:	4b59      	ldr	r3, [pc, #356]	; (8007390 <Config_0+0x1b0>)
 800722a:	f646 5260 	movw	r2, #28000	; 0x6d60
 800722e:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U6=0;
 8007230:	4b58      	ldr	r3, [pc, #352]	; (8007394 <Config_0+0x1b4>)
 8007232:	2200      	movs	r2, #0
 8007234:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U6=1023;
 8007236:	4b58      	ldr	r3, [pc, #352]	; (8007398 <Config_0+0x1b8>)
 8007238:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800723c:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U6I0=0;
 800723e:	4b57      	ldr	r3, [pc, #348]	; (800739c <Config_0+0x1bc>)
 8007240:	2200      	movs	r2, #0
 8007242:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U6I0=1000;
 8007244:	4b56      	ldr	r3, [pc, #344]	; (80073a0 <Config_0+0x1c0>)
 8007246:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800724a:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U6I1=0;
 800724c:	4b55      	ldr	r3, [pc, #340]	; (80073a4 <Config_0+0x1c4>)
 800724e:	2200      	movs	r2, #0
 8007250:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U6I1=1000;
 8007252:	4b55      	ldr	r3, [pc, #340]	; (80073a8 <Config_0+0x1c8>)
 8007254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007258:	801a      	strh	r2, [r3, #0]
	warn_undervoltage_U7=18000;
 800725a:	4b54      	ldr	r3, [pc, #336]	; (80073ac <Config_0+0x1cc>)
 800725c:	f244 6250 	movw	r2, #18000	; 0x4650
 8007260:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U7=28000;
 8007262:	4b53      	ldr	r3, [pc, #332]	; (80073b0 <Config_0+0x1d0>)
 8007264:	f646 5260 	movw	r2, #28000	; 0x6d60
 8007268:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U7=0;
 800726a:	4b52      	ldr	r3, [pc, #328]	; (80073b4 <Config_0+0x1d4>)
 800726c:	2200      	movs	r2, #0
 800726e:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U7=1023;
 8007270:	4b51      	ldr	r3, [pc, #324]	; (80073b8 <Config_0+0x1d8>)
 8007272:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007276:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U7I0=0;
 8007278:	4b50      	ldr	r3, [pc, #320]	; (80073bc <Config_0+0x1dc>)
 800727a:	2200      	movs	r2, #0
 800727c:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U7I0=1000;
 800727e:	4b50      	ldr	r3, [pc, #320]	; (80073c0 <Config_0+0x1e0>)
 8007280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007284:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U7I1=0;
 8007286:	4b4f      	ldr	r3, [pc, #316]	; (80073c4 <Config_0+0x1e4>)
 8007288:	2200      	movs	r2, #0
 800728a:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U7I1=1000;
 800728c:	4b4e      	ldr	r3, [pc, #312]	; (80073c8 <Config_0+0x1e8>)
 800728e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007292:	801a      	strh	r2, [r3, #0]
	PWM_Pulses[0] = 64; PWM_Pulses[1] = 96; PWM_Pulses[2] = 128; PWM_Pulses[3] = 160; PWM_Pulses[4] = 204;
	PWM_In_EN = 0b00000000;

#else //in this case we test digital inputs

	Digital_In_EN = 0b00011101; //bit for PB4 is 0 to ensure it isn't used as PB4 seemed to have hardware problems
 8007294:	4b4d      	ldr	r3, [pc, #308]	; (80073cc <Config_0+0x1ec>)
 8007296:	221d      	movs	r2, #29
 8007298:	701a      	strb	r2, [r3, #0]
	PWM_Out_EN = 0b00000000;
 800729a:	4b4d      	ldr	r3, [pc, #308]	; (80073d0 <Config_0+0x1f0>)
 800729c:	2200      	movs	r2, #0
 800729e:	701a      	strb	r2, [r3, #0]
	PWM_Prescalers[0] = 0; PWM_Prescalers[1] = 0; PWM_Prescalers[2] = 0; PWM_Prescalers[3] = 0; PWM_Prescalers[4] = 0;
 80072a0:	4b4c      	ldr	r3, [pc, #304]	; (80073d4 <Config_0+0x1f4>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	801a      	strh	r2, [r3, #0]
 80072a6:	4b4b      	ldr	r3, [pc, #300]	; (80073d4 <Config_0+0x1f4>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	805a      	strh	r2, [r3, #2]
 80072ac:	4b49      	ldr	r3, [pc, #292]	; (80073d4 <Config_0+0x1f4>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	809a      	strh	r2, [r3, #4]
 80072b2:	4b48      	ldr	r3, [pc, #288]	; (80073d4 <Config_0+0x1f4>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	80da      	strh	r2, [r3, #6]
 80072b8:	4b46      	ldr	r3, [pc, #280]	; (80073d4 <Config_0+0x1f4>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	811a      	strh	r2, [r3, #8]
	PWM_Pulses[0] = 0; PWM_Pulses[1] = 0; PWM_Pulses[2] = 0; PWM_Pulses[3] = 0; PWM_Pulses[4] = 0;
 80072be:	4b46      	ldr	r3, [pc, #280]	; (80073d8 <Config_0+0x1f8>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	801a      	strh	r2, [r3, #0]
 80072c4:	4b44      	ldr	r3, [pc, #272]	; (80073d8 <Config_0+0x1f8>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	805a      	strh	r2, [r3, #2]
 80072ca:	4b43      	ldr	r3, [pc, #268]	; (80073d8 <Config_0+0x1f8>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	809a      	strh	r2, [r3, #4]
 80072d0:	4b41      	ldr	r3, [pc, #260]	; (80073d8 <Config_0+0x1f8>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	80da      	strh	r2, [r3, #6]
 80072d6:	4b40      	ldr	r3, [pc, #256]	; (80073d8 <Config_0+0x1f8>)
 80072d8:	2200      	movs	r2, #0
 80072da:	811a      	strh	r2, [r3, #8]
	PWM_In_EN = 0b00000000;
 80072dc:	4b3f      	ldr	r3, [pc, #252]	; (80073dc <Config_0+0x1fc>)
 80072de:	2200      	movs	r2, #0
 80072e0:	701a      	strb	r2, [r3, #0]

#endif

	uint32_t temp_Digital_In_Interrupt_Can_Falling[5]={ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };
 80072e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
 80072ea:	605a      	str	r2, [r3, #4]
 80072ec:	609a      	str	r2, [r3, #8]
 80072ee:	60da      	str	r2, [r3, #12]
 80072f0:	611a      	str	r2, [r3, #16]
	uint32_t temp_Digital_In_Interrupt_Can_Rising[5]={ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };
 80072f2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80072f6:	2200      	movs	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	605a      	str	r2, [r3, #4]
 80072fc:	609a      	str	r2, [r3, #8]
 80072fe:	60da      	str	r2, [r3, #12]
 8007300:	611a      	str	r2, [r3, #16]
	uint32_t temp_Digital_In_Interrupt_Power_High_Rising[5]={ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };
 8007302:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	605a      	str	r2, [r3, #4]
 800730c:	609a      	str	r2, [r3, #8]
 800730e:	60da      	str	r2, [r3, #12]
 8007310:	611a      	str	r2, [r3, #16]
	uint32_t temp_Digital_In_Interrupt_Power_High_Falling[5]={ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };
 8007312:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007316:	2200      	movs	r2, #0
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	605a      	str	r2, [r3, #4]
 800731c:	609a      	str	r2, [r3, #8]
 800731e:	60da      	str	r2, [r3, #12]
 8007320:	611a      	str	r2, [r3, #16]
	uint32_t temp_Digital_In_Interrupt_PWM_Rising[5]={ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };
 8007322:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	605a      	str	r2, [r3, #4]
 800732c:	609a      	str	r2, [r3, #8]
 800732e:	60da      	str	r2, [r3, #12]
 8007330:	611a      	str	r2, [r3, #16]
	uint32_t temp_Digital_In_Interrupt_PWM_Falling[5]={ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };
 8007332:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	605a      	str	r2, [r3, #4]
 800733c:	609a      	str	r2, [r3, #8]
 800733e:	60da      	str	r2, [r3, #12]
 8007340:	611a      	str	r2, [r3, #16]
	uint32_t temp_Digital_In_Interrupt_Power_Low_Rising[5]={ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };
 8007342:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007346:	2200      	movs	r2, #0
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	605a      	str	r2, [r3, #4]
 800734c:	609a      	str	r2, [r3, #8]
 800734e:	60da      	str	r2, [r3, #12]
 8007350:	611a      	str	r2, [r3, #16]
	uint32_t temp_Digital_In_Interrupt_Power_Low_Falling[5]={ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };
 8007352:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	605a      	str	r2, [r3, #4]
 800735c:	609a      	str	r2, [r3, #8]
 800735e:	60da      	str	r2, [r3, #12]
 8007360:	611a      	str	r2, [r3, #16]
	for(uint32_t i=0; i<5; i++)
 8007362:	2300      	movs	r3, #0
 8007364:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007368:	e0b7      	b.n	80074da <Config_0+0x2fa>
 800736a:	bf00      	nop
 800736c:	200008f4 	.word	0x200008f4
 8007370:	20000958 	.word	0x20000958
 8007374:	20000910 	.word	0x20000910
 8007378:	20000700 	.word	0x20000700
 800737c:	200001fc 	.word	0x200001fc
 8007380:	200005c8 	.word	0x200005c8
 8007384:	20000956 	.word	0x20000956
 8007388:	20000a4c 	.word	0x20000a4c
 800738c:	20000572 	.word	0x20000572
 8007390:	200009be 	.word	0x200009be
 8007394:	2000095a 	.word	0x2000095a
 8007398:	20000560 	.word	0x20000560
 800739c:	20000ae8 	.word	0x20000ae8
 80073a0:	20000220 	.word	0x20000220
 80073a4:	200008e0 	.word	0x200008e0
 80073a8:	20000844 	.word	0x20000844
 80073ac:	200000ee 	.word	0x200000ee
 80073b0:	20000570 	.word	0x20000570
 80073b4:	20000638 	.word	0x20000638
 80073b8:	20000222 	.word	0x20000222
 80073bc:	20000908 	.word	0x20000908
 80073c0:	2000063a 	.word	0x2000063a
 80073c4:	200000f2 	.word	0x200000f2
 80073c8:	20000484 	.word	0x20000484
 80073cc:	200000f0 	.word	0x200000f0
 80073d0:	200009bc 	.word	0x200009bc
 80073d4:	20000578 	.word	0x20000578
 80073d8:	200007f8 	.word	0x200007f8
 80073dc:	20000486 	.word	0x20000486
	{
		Digital_In_Interrupt_Can_Falling[i]=temp_Digital_In_Interrupt_Can_Falling[i];
 80073e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073ea:	4413      	add	r3, r2
 80073ec:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80073f0:	b2d9      	uxtb	r1, r3
 80073f2:	4a96      	ldr	r2, [pc, #600]	; (800764c <Config_0+0x46c>)
 80073f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f8:	4413      	add	r3, r2
 80073fa:	460a      	mov	r2, r1
 80073fc:	701a      	strb	r2, [r3, #0]
		Digital_In_Interrupt_Can_Rising[i]=temp_Digital_In_Interrupt_Can_Rising[i];
 80073fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007408:	4413      	add	r3, r2
 800740a:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800740e:	b2d9      	uxtb	r1, r3
 8007410:	4a8f      	ldr	r2, [pc, #572]	; (8007650 <Config_0+0x470>)
 8007412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007416:	4413      	add	r3, r2
 8007418:	460a      	mov	r2, r1
 800741a:	701a      	strb	r2, [r3, #0]
		Digital_In_Interrupt_Power_High_Falling[i]=temp_Digital_In_Interrupt_Power_High_Falling[i];
 800741c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007426:	4413      	add	r3, r2
 8007428:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 800742c:	b2d9      	uxtb	r1, r3
 800742e:	4a89      	ldr	r2, [pc, #548]	; (8007654 <Config_0+0x474>)
 8007430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007434:	4413      	add	r3, r2
 8007436:	460a      	mov	r2, r1
 8007438:	701a      	strb	r2, [r3, #0]
		Digital_In_Interrupt_Power_High_Rising[i]=temp_Digital_In_Interrupt_Power_High_Rising[i];
 800743a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007444:	4413      	add	r3, r2
 8007446:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800744a:	b2d9      	uxtb	r1, r3
 800744c:	4a82      	ldr	r2, [pc, #520]	; (8007658 <Config_0+0x478>)
 800744e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007452:	4413      	add	r3, r2
 8007454:	460a      	mov	r2, r1
 8007456:	701a      	strb	r2, [r3, #0]
		Digital_In_Interrupt_Power_Low_Falling[i]=temp_Digital_In_Interrupt_Power_Low_Falling[i];
 8007458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007462:	4413      	add	r3, r2
 8007464:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8007468:	b2d9      	uxtb	r1, r3
 800746a:	4a7c      	ldr	r2, [pc, #496]	; (800765c <Config_0+0x47c>)
 800746c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007470:	4413      	add	r3, r2
 8007472:	460a      	mov	r2, r1
 8007474:	701a      	strb	r2, [r3, #0]
		Digital_In_Interrupt_Power_Low_Rising[i]=temp_Digital_In_Interrupt_Power_Low_Rising[i];
 8007476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007480:	4413      	add	r3, r2
 8007482:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8007486:	b2d9      	uxtb	r1, r3
 8007488:	4a75      	ldr	r2, [pc, #468]	; (8007660 <Config_0+0x480>)
 800748a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800748e:	4413      	add	r3, r2
 8007490:	460a      	mov	r2, r1
 8007492:	701a      	strb	r2, [r3, #0]
		Digital_In_Interrupt_PWM_Falling[i]=temp_Digital_In_Interrupt_PWM_Falling[i];
 8007494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800749e:	4413      	add	r3, r2
 80074a0:	f853 3c84 	ldr.w	r3, [r3, #-132]
 80074a4:	b2d9      	uxtb	r1, r3
 80074a6:	4a6f      	ldr	r2, [pc, #444]	; (8007664 <Config_0+0x484>)
 80074a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ac:	4413      	add	r3, r2
 80074ae:	460a      	mov	r2, r1
 80074b0:	701a      	strb	r2, [r3, #0]
		Digital_In_Interrupt_PWM_Rising[i]=temp_Digital_In_Interrupt_PWM_Rising[i];
 80074b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074bc:	4413      	add	r3, r2
 80074be:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80074c2:	b2d9      	uxtb	r1, r3
 80074c4:	4a68      	ldr	r2, [pc, #416]	; (8007668 <Config_0+0x488>)
 80074c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ca:	4413      	add	r3, r2
 80074cc:	460a      	mov	r2, r1
 80074ce:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<5; i++)
 80074d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d4:	3301      	adds	r3, #1
 80074d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80074da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074de:	2b04      	cmp	r3, #4
 80074e0:	f67f af7e 	bls.w	80073e0 <Config_0+0x200>
	}

	Default_Switch_State = 0b00000000;
 80074e4:	4b61      	ldr	r3, [pc, #388]	; (800766c <Config_0+0x48c>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	701a      	strb	r2, [r3, #0]

	Can_IDs[0] = 0x0F; Can_IDs[1] = 0x10; Can_IDs[2] = 0x11; Can_IDs[3] = 0x12; Can_IDs[4] = 0x13; Can_IDs[5] = 0x14; Can_IDs[6] = 0x15; Can_IDs[7] = 0x16;
 80074ea:	4b61      	ldr	r3, [pc, #388]	; (8007670 <Config_0+0x490>)
 80074ec:	220f      	movs	r2, #15
 80074ee:	801a      	strh	r2, [r3, #0]
 80074f0:	4b5f      	ldr	r3, [pc, #380]	; (8007670 <Config_0+0x490>)
 80074f2:	2210      	movs	r2, #16
 80074f4:	805a      	strh	r2, [r3, #2]
 80074f6:	4b5e      	ldr	r3, [pc, #376]	; (8007670 <Config_0+0x490>)
 80074f8:	2211      	movs	r2, #17
 80074fa:	809a      	strh	r2, [r3, #4]
 80074fc:	4b5c      	ldr	r3, [pc, #368]	; (8007670 <Config_0+0x490>)
 80074fe:	2212      	movs	r2, #18
 8007500:	80da      	strh	r2, [r3, #6]
 8007502:	4b5b      	ldr	r3, [pc, #364]	; (8007670 <Config_0+0x490>)
 8007504:	2213      	movs	r2, #19
 8007506:	811a      	strh	r2, [r3, #8]
 8007508:	4b59      	ldr	r3, [pc, #356]	; (8007670 <Config_0+0x490>)
 800750a:	2214      	movs	r2, #20
 800750c:	815a      	strh	r2, [r3, #10]
 800750e:	4b58      	ldr	r3, [pc, #352]	; (8007670 <Config_0+0x490>)
 8007510:	2215      	movs	r2, #21
 8007512:	819a      	strh	r2, [r3, #12]
 8007514:	4b56      	ldr	r3, [pc, #344]	; (8007670 <Config_0+0x490>)
 8007516:	2216      	movs	r2, #22
 8007518:	81da      	strh	r2, [r3, #14]
	Can_DLCs[0] = 8; Can_DLCs[1] = 8; Can_DLCs[2] = 3; Can_DLCs[3] = 1; Can_DLCs[4] = 2; Can_DLCs[5] = 8; Can_DLCs[6] = 3; Can_DLCs[7] = 7;
 800751a:	4b56      	ldr	r3, [pc, #344]	; (8007674 <Config_0+0x494>)
 800751c:	2208      	movs	r2, #8
 800751e:	701a      	strb	r2, [r3, #0]
 8007520:	4b54      	ldr	r3, [pc, #336]	; (8007674 <Config_0+0x494>)
 8007522:	2208      	movs	r2, #8
 8007524:	705a      	strb	r2, [r3, #1]
 8007526:	4b53      	ldr	r3, [pc, #332]	; (8007674 <Config_0+0x494>)
 8007528:	2203      	movs	r2, #3
 800752a:	709a      	strb	r2, [r3, #2]
 800752c:	4b51      	ldr	r3, [pc, #324]	; (8007674 <Config_0+0x494>)
 800752e:	2201      	movs	r2, #1
 8007530:	70da      	strb	r2, [r3, #3]
 8007532:	4b50      	ldr	r3, [pc, #320]	; (8007674 <Config_0+0x494>)
 8007534:	2202      	movs	r2, #2
 8007536:	711a      	strb	r2, [r3, #4]
 8007538:	4b4e      	ldr	r3, [pc, #312]	; (8007674 <Config_0+0x494>)
 800753a:	2208      	movs	r2, #8
 800753c:	715a      	strb	r2, [r3, #5]
 800753e:	4b4d      	ldr	r3, [pc, #308]	; (8007674 <Config_0+0x494>)
 8007540:	2203      	movs	r2, #3
 8007542:	719a      	strb	r2, [r3, #6]
 8007544:	4b4b      	ldr	r3, [pc, #300]	; (8007674 <Config_0+0x494>)
 8007546:	2207      	movs	r2, #7
 8007548:	71da      	strb	r2, [r3, #7]

	uint8_t temp_Can_Config_Bytes[8][8]={	{ 1, 1, 1, 1, 1, 1, 1, 1 },
 800754a:	4b4b      	ldr	r3, [pc, #300]	; (8007678 <Config_0+0x498>)
 800754c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8007550:	461d      	mov	r5, r3
 8007552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800755a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800755c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800755e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007562:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
											{ 1, 1, 1, 0, 0, 0, 0, 0 },
											{ 2, 0, 0, 0, 0, 0, 0, 0 },
											{ 2, 0, 1, 1, 1, 2, 0, 1 },
											{ 0, 0, 0, 0, 0, 0, 0, 0 },
											{ 1, 2, 0, 2, 0, 2, 0, 0 }	};
	uint8_t temp_Can_Config_Datas[8][8]={	{ 1, 1, 1, 1, 1, 1, 1, 1 },
 8007566:	1d3b      	adds	r3, r7, #4
 8007568:	4a44      	ldr	r2, [pc, #272]	; (800767c <Config_0+0x49c>)
 800756a:	461c      	mov	r4, r3
 800756c:	4615      	mov	r5, r2
 800756e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800757a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800757e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
											{ MESS_U5V, MESS_U6V, MESS_U7V, 0, 0, 0, 0, 0 },
											{ MESS_U5V, 0, 0, 0, 0, 0, 0, 0 },
											{ MESS_PWM0_Freq, 0, MESS_PWM0_DC, MESS_PWM3_Freq, MESS_PWM3_DC, MESS_PWM4_Freq, 0, MESS_PWM4_DC },
											{ 0, 0, 0, 0, 0, 0, 0, 0 },
											{ MESS_DI, MESS_U5V, 0, MESS_U6V, 0, MESS_U7V, 0, 0 }	};
	for(uint32_t i=0; i<8; i++)
 8007582:	2300      	movs	r3, #0
 8007584:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007588:	e039      	b.n	80075fe <Config_0+0x41e>
	{
		for(uint32_t j=0; j<8; j++)
 800758a:	2300      	movs	r3, #0
 800758c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007590:	e02c      	b.n	80075ec <Config_0+0x40c>
		{
			Can_Config_Bytes[i][j]=temp_Can_Config_Bytes[i][j];
 8007592:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800759c:	441a      	add	r2, r3
 800759e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80075a2:	4413      	add	r3, r2
 80075a4:	3bec      	subs	r3, #236	; 0xec
 80075a6:	7819      	ldrb	r1, [r3, #0]
 80075a8:	4a35      	ldr	r2, [pc, #212]	; (8007680 <Config_0+0x4a0>)
 80075aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	441a      	add	r2, r3
 80075b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80075b6:	4413      	add	r3, r2
 80075b8:	460a      	mov	r2, r1
 80075ba:	701a      	strb	r2, [r3, #0]
			Can_Config_Datas[i][j]=temp_Can_Config_Datas[i][j];
 80075bc:	1d3a      	adds	r2, r7, #4
 80075be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	441a      	add	r2, r3
 80075c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80075ca:	4413      	add	r3, r2
 80075cc:	7819      	ldrb	r1, [r3, #0]
 80075ce:	4a2d      	ldr	r2, [pc, #180]	; (8007684 <Config_0+0x4a4>)
 80075d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	441a      	add	r2, r3
 80075d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80075dc:	4413      	add	r3, r2
 80075de:	460a      	mov	r2, r1
 80075e0:	701a      	strb	r2, [r3, #0]
		for(uint32_t j=0; j<8; j++)
 80075e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80075e6:	3301      	adds	r3, #1
 80075e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80075ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80075f0:	2b07      	cmp	r3, #7
 80075f2:	d9ce      	bls.n	8007592 <Config_0+0x3b2>
	for(uint32_t i=0; i<8; i++)
 80075f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075f8:	3301      	adds	r3, #1
 80075fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80075fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007602:	2b07      	cmp	r3, #7
 8007604:	d9c1      	bls.n	800758a <Config_0+0x3aa>
		}
	}
	Can_Sync_Enable = 0b00100000;
 8007606:	4b20      	ldr	r3, [pc, #128]	; (8007688 <Config_0+0x4a8>)
 8007608:	2220      	movs	r2, #32
 800760a:	701a      	strb	r2, [r3, #0]
	Can_Timed_Enable = 0b10000000;
 800760c:	4b1f      	ldr	r3, [pc, #124]	; (800768c <Config_0+0x4ac>)
 800760e:	2280      	movs	r2, #128	; 0x80
 8007610:	701a      	strb	r2, [r3, #0]
	Can_Interval=1000;
 8007612:	4b1f      	ldr	r3, [pc, #124]	; (8007690 <Config_0+0x4b0>)
 8007614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007618:	801a      	strh	r2, [r3, #0]
	Can_Sync_Delay=0; //500 corresponds to 5ms delay
 800761a:	4b1e      	ldr	r3, [pc, #120]	; (8007694 <Config_0+0x4b4>)
 800761c:	2200      	movs	r2, #0
 800761e:	801a      	strh	r2, [r3, #0]

	sample_temperature=0; //these are only saved to allow configuration of continous temperature/voltage reading
 8007620:	4b1d      	ldr	r3, [pc, #116]	; (8007698 <Config_0+0x4b8>)
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
	sample_voltage=0;
 8007626:	4b1d      	ldr	r3, [pc, #116]	; (800769c <Config_0+0x4bc>)
 8007628:	2200      	movs	r2, #0
 800762a:	601a      	str	r2, [r3, #0]
	SampleTemperatureVoltagePeriod=10; //1ms is a good compromise for now with temperature and whatnot, can test higher numbers if too hot
 800762c:	4b1c      	ldr	r3, [pc, #112]	; (80076a0 <Config_0+0x4c0>)
 800762e:	220a      	movs	r2, #10
 8007630:	801a      	strh	r2, [r3, #0]
	SampleTemperatureBurst=0;
 8007632:	4b1c      	ldr	r3, [pc, #112]	; (80076a4 <Config_0+0x4c4>)
 8007634:	2200      	movs	r2, #0
 8007636:	701a      	strb	r2, [r3, #0]
	SampleVoltageBurst=0;
 8007638:	4b1b      	ldr	r3, [pc, #108]	; (80076a8 <Config_0+0x4c8>)
 800763a:	2200      	movs	r2, #0
 800763c:	701a      	strb	r2, [r3, #0]
}
 800763e:	bf00      	nop
 8007640:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007644:	46bd      	mov	sp, r7
 8007646:	bcb0      	pop	{r4, r5, r7}
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20000090 	.word	0x20000090
 8007650:	2000009c 	.word	0x2000009c
 8007654:	2000075c 	.word	0x2000075c
 8007658:	20000564 	.word	0x20000564
 800765c:	200008e4 	.word	0x200008e4
 8007660:	20000494 	.word	0x20000494
 8007664:	200000e8 	.word	0x200000e8
 8007668:	20000488 	.word	0x20000488
 800766c:	20000487 	.word	0x20000487
 8007670:	2000084c 	.word	0x2000084c
 8007674:	200008f8 	.word	0x200008f8
 8007678:	0800bdb0 	.word	0x0800bdb0
 800767c:	0800bdf0 	.word	0x0800bdf0
 8007680:	200002d0 	.word	0x200002d0
 8007684:	20000178 	.word	0x20000178
 8007688:	200004dc 	.word	0x200004dc
 800768c:	200000f1 	.word	0x200000f1
 8007690:	200000f4 	.word	0x200000f4
 8007694:	2000041c 	.word	0x2000041c
 8007698:	20000490 	.word	0x20000490
 800769c:	20000098 	.word	0x20000098
 80076a0:	20000954 	.word	0x20000954
 80076a4:	200008e9 	.word	0x200008e9
 80076a8:	200001b9 	.word	0x200001b9

080076ac <Config_Write_Flash>:
	//TODO: setup code for each node that will be in the car
}


void Config_Write_Flash(void)
{
 80076ac:	b5b0      	push	{r4, r5, r7, lr}
 80076ae:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 80076b2:	af00      	add	r7, sp, #0
	uint32_t data[512] = {0};
 80076b4:	f107 0320 	add.w	r3, r7, #32
 80076b8:	4618      	mov	r0, r3
 80076ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076be:	461a      	mov	r2, r3
 80076c0:	2100      	movs	r1, #0
 80076c2:	f004 fb61 	bl	800bd88 <memset>

	//bytes: [underlimit high], [underlimit low], [overlimit high], [overlimit low]
	data[U5_VOLTAGE_WARNING_LIMIT_POS]=((warn_undervoltage_U5<<0)&0xFFFF)+((warn_overvoltage_U5<<16)&0xFFFF0000);
 80076c6:	4bb2      	ldr	r3, [pc, #712]	; (8007990 <Config_Write_Flash+0x2e4>)
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	4bb1      	ldr	r3, [pc, #708]	; (8007994 <Config_Write_Flash+0x2e8>)
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	041b      	lsls	r3, r3, #16
 80076d2:	441a      	add	r2, r3
 80076d4:	f107 0320 	add.w	r3, r7, #32
 80076d8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	data[U5_TEMPERATURE_WARNING_LIMIT_POS]=((warn_undertemperature_U5<<0)&0xFFFF)+((warn_overtemperature_U5<<16)&0xFFFF0000);
 80076dc:	4bae      	ldr	r3, [pc, #696]	; (8007998 <Config_Write_Flash+0x2ec>)
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	461a      	mov	r2, r3
 80076e2:	4bae      	ldr	r3, [pc, #696]	; (800799c <Config_Write_Flash+0x2f0>)
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	041b      	lsls	r3, r3, #16
 80076e8:	441a      	add	r2, r3
 80076ea:	f107 0320 	add.w	r3, r7, #32
 80076ee:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	data[U5_CURRENT_WARNING_LIMIT_I0_POS]=((warn_undercurrent_U5I0<<0)&0xFFFF)+((warn_overcurrent_U5I0<<16)&0xFFFF0000);
 80076f2:	4bab      	ldr	r3, [pc, #684]	; (80079a0 <Config_Write_Flash+0x2f4>)
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	4baa      	ldr	r3, [pc, #680]	; (80079a4 <Config_Write_Flash+0x2f8>)
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	041b      	lsls	r3, r3, #16
 80076fe:	441a      	add	r2, r3
 8007700:	f107 0320 	add.w	r3, r7, #32
 8007704:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	data[U5_CURRENT_WARNING_LIMIT_I1_POS]=((warn_undercurrent_U5I1<<0)&0xFFFF)+((warn_overcurrent_U5I1<<16)&0xFFFF0000);
 8007708:	4ba7      	ldr	r3, [pc, #668]	; (80079a8 <Config_Write_Flash+0x2fc>)
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	4ba7      	ldr	r3, [pc, #668]	; (80079ac <Config_Write_Flash+0x300>)
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	041b      	lsls	r3, r3, #16
 8007714:	441a      	add	r2, r3
 8007716:	f107 0320 	add.w	r3, r7, #32
 800771a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	data[U6_VOLTAGE_WARNING_LIMIT_POS]=((warn_undervoltage_U6<<0)&0xFFFF)+((warn_overvoltage_U6<<16)&0xFFFF0000);
 800771e:	4ba4      	ldr	r3, [pc, #656]	; (80079b0 <Config_Write_Flash+0x304>)
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	4ba3      	ldr	r3, [pc, #652]	; (80079b4 <Config_Write_Flash+0x308>)
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	041b      	lsls	r3, r3, #16
 800772a:	441a      	add	r2, r3
 800772c:	f107 0320 	add.w	r3, r7, #32
 8007730:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	data[U6_TEMPERATURE_WARNING_LIMIT_POS]=((warn_undertemperature_U6<<0)&0xFFFF)+((warn_overtemperature_U6<<16)&0xFFFF0000);
 8007734:	4ba0      	ldr	r3, [pc, #640]	; (80079b8 <Config_Write_Flash+0x30c>)
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	461a      	mov	r2, r3
 800773a:	4ba0      	ldr	r3, [pc, #640]	; (80079bc <Config_Write_Flash+0x310>)
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	041b      	lsls	r3, r3, #16
 8007740:	441a      	add	r2, r3
 8007742:	f107 0320 	add.w	r3, r7, #32
 8007746:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	data[U6_CURRENT_WARNING_LIMIT_I0_POS]=((warn_undercurrent_U6I0<<0)&0xFFFF)+((warn_overcurrent_U6I0<<16)&0xFFFF0000);
 800774a:	4b9d      	ldr	r3, [pc, #628]	; (80079c0 <Config_Write_Flash+0x314>)
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	4b9c      	ldr	r3, [pc, #624]	; (80079c4 <Config_Write_Flash+0x318>)
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	041b      	lsls	r3, r3, #16
 8007756:	441a      	add	r2, r3
 8007758:	f107 0320 	add.w	r3, r7, #32
 800775c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	data[U6_CURRENT_WARNING_LIMIT_I1_POS]=((warn_undercurrent_U6I1<<0)&0xFFFF)+((warn_overcurrent_U6I1<<16)&0xFFFF0000);
 8007760:	4b99      	ldr	r3, [pc, #612]	; (80079c8 <Config_Write_Flash+0x31c>)
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	4b99      	ldr	r3, [pc, #612]	; (80079cc <Config_Write_Flash+0x320>)
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	041b      	lsls	r3, r3, #16
 800776c:	441a      	add	r2, r3
 800776e:	f107 0320 	add.w	r3, r7, #32
 8007772:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	data[U7_VOLTAGE_WARNING_LIMIT_POS]=((warn_undervoltage_U7<<0)&0xFFFF)+((warn_overvoltage_U7<<16)&0xFFFF0000);
 8007776:	4b96      	ldr	r3, [pc, #600]	; (80079d0 <Config_Write_Flash+0x324>)
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	4b95      	ldr	r3, [pc, #596]	; (80079d4 <Config_Write_Flash+0x328>)
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	041b      	lsls	r3, r3, #16
 8007782:	441a      	add	r2, r3
 8007784:	f107 0320 	add.w	r3, r7, #32
 8007788:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	data[U7_TEMPERATURE_WARNING_LIMIT_POS]=((warn_undertemperature_U7<<0)&0xFFFF)+((warn_overtemperature_U7<<16)&0xFFFF0000);
 800778c:	4b92      	ldr	r3, [pc, #584]	; (80079d8 <Config_Write_Flash+0x32c>)
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	461a      	mov	r2, r3
 8007792:	4b92      	ldr	r3, [pc, #584]	; (80079dc <Config_Write_Flash+0x330>)
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	041b      	lsls	r3, r3, #16
 8007798:	441a      	add	r2, r3
 800779a:	f107 0320 	add.w	r3, r7, #32
 800779e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	data[U7_CURRENT_WARNING_LIMIT_I0_POS]=((warn_undercurrent_U7I0<<0)&0xFFFF)+((warn_overcurrent_U7I0<<16)&0xFFFF0000);
 80077a2:	4b8f      	ldr	r3, [pc, #572]	; (80079e0 <Config_Write_Flash+0x334>)
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	4b8e      	ldr	r3, [pc, #568]	; (80079e4 <Config_Write_Flash+0x338>)
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	041b      	lsls	r3, r3, #16
 80077ae:	441a      	add	r2, r3
 80077b0:	f107 0320 	add.w	r3, r7, #32
 80077b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	data[U7_CURRENT_WARNING_LIMIT_I1_POS]=((warn_undercurrent_U7I1<<0)&0xFFFF)+((warn_overcurrent_U7I1<<16)&0xFFFF0000);
 80077b8:	4b8b      	ldr	r3, [pc, #556]	; (80079e8 <Config_Write_Flash+0x33c>)
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	461a      	mov	r2, r3
 80077be:	4b8b      	ldr	r3, [pc, #556]	; (80079ec <Config_Write_Flash+0x340>)
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	041b      	lsls	r3, r3, #16
 80077c4:	441a      	add	r2, r3
 80077c6:	f107 0320 	add.w	r3, r7, #32
 80077ca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	//bytes: [x], [x], [digital in interrupt enable], [digital in enable]
	data[DIGITAL_IN_0_POS]=(Digital_In_EN&0xFF)+((Digital_In_Interrupt_EN&0xFF)<<8);
 80077ce:	4b88      	ldr	r3, [pc, #544]	; (80079f0 <Config_Write_Flash+0x344>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	4b87      	ldr	r3, [pc, #540]	; (80079f4 <Config_Write_Flash+0x348>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	021b      	lsls	r3, r3, #8
 80077da:	4413      	add	r3, r2
 80077dc:	461a      	mov	r2, r3
 80077de:	f107 0320 	add.w	r3, r7, #32
 80077e2:	601a      	str	r2, [r3, #0]

	//oh boy
	data[DIGITAL_IN_1_POS+0]=((Digital_In_Interrupt_Can_Falling[0]&0xFF)<<0)+((Digital_In_Interrupt_Can_Falling[1]&0xFF)<<8)+((Digital_In_Interrupt_Can_Falling[2])<<16)+((Digital_In_Interrupt_Can_Falling[3]&0xFF)<<24);
 80077e4:	4b84      	ldr	r3, [pc, #528]	; (80079f8 <Config_Write_Flash+0x34c>)
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	461a      	mov	r2, r3
 80077ea:	4b83      	ldr	r3, [pc, #524]	; (80079f8 <Config_Write_Flash+0x34c>)
 80077ec:	785b      	ldrb	r3, [r3, #1]
 80077ee:	021b      	lsls	r3, r3, #8
 80077f0:	441a      	add	r2, r3
 80077f2:	4b81      	ldr	r3, [pc, #516]	; (80079f8 <Config_Write_Flash+0x34c>)
 80077f4:	789b      	ldrb	r3, [r3, #2]
 80077f6:	041b      	lsls	r3, r3, #16
 80077f8:	441a      	add	r2, r3
 80077fa:	4b7f      	ldr	r3, [pc, #508]	; (80079f8 <Config_Write_Flash+0x34c>)
 80077fc:	78db      	ldrb	r3, [r3, #3]
 80077fe:	061b      	lsls	r3, r3, #24
 8007800:	4413      	add	r3, r2
 8007802:	461a      	mov	r2, r3
 8007804:	f107 0320 	add.w	r3, r7, #32
 8007808:	605a      	str	r2, [r3, #4]
	data[DIGITAL_IN_1_POS+1]=((Digital_In_Interrupt_Can_Falling[4]&0xFF)<<0)+((Digital_In_Interrupt_Can_Rising[0]&0xFF)<<8)+((Digital_In_Interrupt_Can_Rising[1]&0xFF)<<16)+((Digital_In_Interrupt_Can_Rising[2]&0xFF)<<24);
 800780a:	4b7b      	ldr	r3, [pc, #492]	; (80079f8 <Config_Write_Flash+0x34c>)
 800780c:	791b      	ldrb	r3, [r3, #4]
 800780e:	461a      	mov	r2, r3
 8007810:	4b7a      	ldr	r3, [pc, #488]	; (80079fc <Config_Write_Flash+0x350>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	021b      	lsls	r3, r3, #8
 8007816:	441a      	add	r2, r3
 8007818:	4b78      	ldr	r3, [pc, #480]	; (80079fc <Config_Write_Flash+0x350>)
 800781a:	785b      	ldrb	r3, [r3, #1]
 800781c:	041b      	lsls	r3, r3, #16
 800781e:	441a      	add	r2, r3
 8007820:	4b76      	ldr	r3, [pc, #472]	; (80079fc <Config_Write_Flash+0x350>)
 8007822:	789b      	ldrb	r3, [r3, #2]
 8007824:	061b      	lsls	r3, r3, #24
 8007826:	4413      	add	r3, r2
 8007828:	461a      	mov	r2, r3
 800782a:	f107 0320 	add.w	r3, r7, #32
 800782e:	609a      	str	r2, [r3, #8]
	data[DIGITAL_IN_1_POS+2]=((Digital_In_Interrupt_Can_Rising[3]&0xFF)<<0)+((Digital_In_Interrupt_Can_Rising[4]&0xFF)<<8)+((Digital_In_Interrupt_Power_High_Rising[0]&0xFF)<<16)+((Digital_In_Interrupt_Power_High_Rising[1]&0xFF)<<24);
 8007830:	4b72      	ldr	r3, [pc, #456]	; (80079fc <Config_Write_Flash+0x350>)
 8007832:	78db      	ldrb	r3, [r3, #3]
 8007834:	461a      	mov	r2, r3
 8007836:	4b71      	ldr	r3, [pc, #452]	; (80079fc <Config_Write_Flash+0x350>)
 8007838:	791b      	ldrb	r3, [r3, #4]
 800783a:	021b      	lsls	r3, r3, #8
 800783c:	441a      	add	r2, r3
 800783e:	4b70      	ldr	r3, [pc, #448]	; (8007a00 <Config_Write_Flash+0x354>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	041b      	lsls	r3, r3, #16
 8007844:	441a      	add	r2, r3
 8007846:	4b6e      	ldr	r3, [pc, #440]	; (8007a00 <Config_Write_Flash+0x354>)
 8007848:	785b      	ldrb	r3, [r3, #1]
 800784a:	061b      	lsls	r3, r3, #24
 800784c:	4413      	add	r3, r2
 800784e:	461a      	mov	r2, r3
 8007850:	f107 0320 	add.w	r3, r7, #32
 8007854:	60da      	str	r2, [r3, #12]
	data[DIGITAL_IN_1_POS+3]=((Digital_In_Interrupt_Power_High_Rising[2]&0xFF)<<0)+((Digital_In_Interrupt_Power_High_Rising[3]&0xFF)<<8)+((Digital_In_Interrupt_Power_High_Rising[4]&0xFF)<<16)+((Digital_In_Interrupt_Power_High_Falling[0]&0xFF)<<24);
 8007856:	4b6a      	ldr	r3, [pc, #424]	; (8007a00 <Config_Write_Flash+0x354>)
 8007858:	789b      	ldrb	r3, [r3, #2]
 800785a:	461a      	mov	r2, r3
 800785c:	4b68      	ldr	r3, [pc, #416]	; (8007a00 <Config_Write_Flash+0x354>)
 800785e:	78db      	ldrb	r3, [r3, #3]
 8007860:	021b      	lsls	r3, r3, #8
 8007862:	441a      	add	r2, r3
 8007864:	4b66      	ldr	r3, [pc, #408]	; (8007a00 <Config_Write_Flash+0x354>)
 8007866:	791b      	ldrb	r3, [r3, #4]
 8007868:	041b      	lsls	r3, r3, #16
 800786a:	441a      	add	r2, r3
 800786c:	4b65      	ldr	r3, [pc, #404]	; (8007a04 <Config_Write_Flash+0x358>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	061b      	lsls	r3, r3, #24
 8007872:	4413      	add	r3, r2
 8007874:	461a      	mov	r2, r3
 8007876:	f107 0320 	add.w	r3, r7, #32
 800787a:	611a      	str	r2, [r3, #16]
	data[DIGITAL_IN_1_POS+4]=((Digital_In_Interrupt_Power_High_Falling[1]&0xFF)<<0)+((Digital_In_Interrupt_Power_High_Falling[2]&0xFF)<<8)+((Digital_In_Interrupt_Power_High_Falling[3]&0xFF)<<16)+((Digital_In_Interrupt_Power_High_Falling[4]&0xFF)<<24);
 800787c:	4b61      	ldr	r3, [pc, #388]	; (8007a04 <Config_Write_Flash+0x358>)
 800787e:	785b      	ldrb	r3, [r3, #1]
 8007880:	461a      	mov	r2, r3
 8007882:	4b60      	ldr	r3, [pc, #384]	; (8007a04 <Config_Write_Flash+0x358>)
 8007884:	789b      	ldrb	r3, [r3, #2]
 8007886:	021b      	lsls	r3, r3, #8
 8007888:	441a      	add	r2, r3
 800788a:	4b5e      	ldr	r3, [pc, #376]	; (8007a04 <Config_Write_Flash+0x358>)
 800788c:	78db      	ldrb	r3, [r3, #3]
 800788e:	041b      	lsls	r3, r3, #16
 8007890:	441a      	add	r2, r3
 8007892:	4b5c      	ldr	r3, [pc, #368]	; (8007a04 <Config_Write_Flash+0x358>)
 8007894:	791b      	ldrb	r3, [r3, #4]
 8007896:	061b      	lsls	r3, r3, #24
 8007898:	4413      	add	r3, r2
 800789a:	461a      	mov	r2, r3
 800789c:	f107 0320 	add.w	r3, r7, #32
 80078a0:	615a      	str	r2, [r3, #20]
	data[DIGITAL_IN_1_POS+5]=((Digital_In_Interrupt_PWM_Rising[0]&0xFF)<<0)+((Digital_In_Interrupt_PWM_Rising[1]&0xFF)<<8)+((Digital_In_Interrupt_PWM_Rising[2]&0xFF)<<16)+((Digital_In_Interrupt_PWM_Rising[3]&0xFF)<<24);
 80078a2:	4b59      	ldr	r3, [pc, #356]	; (8007a08 <Config_Write_Flash+0x35c>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	4b57      	ldr	r3, [pc, #348]	; (8007a08 <Config_Write_Flash+0x35c>)
 80078aa:	785b      	ldrb	r3, [r3, #1]
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	441a      	add	r2, r3
 80078b0:	4b55      	ldr	r3, [pc, #340]	; (8007a08 <Config_Write_Flash+0x35c>)
 80078b2:	789b      	ldrb	r3, [r3, #2]
 80078b4:	041b      	lsls	r3, r3, #16
 80078b6:	441a      	add	r2, r3
 80078b8:	4b53      	ldr	r3, [pc, #332]	; (8007a08 <Config_Write_Flash+0x35c>)
 80078ba:	78db      	ldrb	r3, [r3, #3]
 80078bc:	061b      	lsls	r3, r3, #24
 80078be:	4413      	add	r3, r2
 80078c0:	461a      	mov	r2, r3
 80078c2:	f107 0320 	add.w	r3, r7, #32
 80078c6:	619a      	str	r2, [r3, #24]
	data[DIGITAL_IN_1_POS+6]=((Digital_In_Interrupt_PWM_Rising[4]&0xFF)<<0)+((Digital_In_Interrupt_PWM_Falling[0]&0xFF)<<8)+((Digital_In_Interrupt_PWM_Falling[1]&0xFF)<<16)+((Digital_In_Interrupt_PWM_Falling[2]&0xFF)<<24);
 80078c8:	4b4f      	ldr	r3, [pc, #316]	; (8007a08 <Config_Write_Flash+0x35c>)
 80078ca:	791b      	ldrb	r3, [r3, #4]
 80078cc:	461a      	mov	r2, r3
 80078ce:	4b4f      	ldr	r3, [pc, #316]	; (8007a0c <Config_Write_Flash+0x360>)
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	021b      	lsls	r3, r3, #8
 80078d4:	441a      	add	r2, r3
 80078d6:	4b4d      	ldr	r3, [pc, #308]	; (8007a0c <Config_Write_Flash+0x360>)
 80078d8:	785b      	ldrb	r3, [r3, #1]
 80078da:	041b      	lsls	r3, r3, #16
 80078dc:	441a      	add	r2, r3
 80078de:	4b4b      	ldr	r3, [pc, #300]	; (8007a0c <Config_Write_Flash+0x360>)
 80078e0:	789b      	ldrb	r3, [r3, #2]
 80078e2:	061b      	lsls	r3, r3, #24
 80078e4:	4413      	add	r3, r2
 80078e6:	461a      	mov	r2, r3
 80078e8:	f107 0320 	add.w	r3, r7, #32
 80078ec:	61da      	str	r2, [r3, #28]
	data[DIGITAL_IN_1_POS+7]=((Digital_In_Interrupt_PWM_Falling[3]&0xFF)<<0)+((Digital_In_Interrupt_PWM_Falling[4]&0xFF)<<8)+((Digital_In_Interrupt_Power_Low_Rising[0]&0xFF)<<16)+((Digital_In_Interrupt_Power_Low_Rising[1]&0xFF)<<24);
 80078ee:	4b47      	ldr	r3, [pc, #284]	; (8007a0c <Config_Write_Flash+0x360>)
 80078f0:	78db      	ldrb	r3, [r3, #3]
 80078f2:	461a      	mov	r2, r3
 80078f4:	4b45      	ldr	r3, [pc, #276]	; (8007a0c <Config_Write_Flash+0x360>)
 80078f6:	791b      	ldrb	r3, [r3, #4]
 80078f8:	021b      	lsls	r3, r3, #8
 80078fa:	441a      	add	r2, r3
 80078fc:	4b44      	ldr	r3, [pc, #272]	; (8007a10 <Config_Write_Flash+0x364>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	041b      	lsls	r3, r3, #16
 8007902:	441a      	add	r2, r3
 8007904:	4b42      	ldr	r3, [pc, #264]	; (8007a10 <Config_Write_Flash+0x364>)
 8007906:	785b      	ldrb	r3, [r3, #1]
 8007908:	061b      	lsls	r3, r3, #24
 800790a:	4413      	add	r3, r2
 800790c:	461a      	mov	r2, r3
 800790e:	f107 0320 	add.w	r3, r7, #32
 8007912:	621a      	str	r2, [r3, #32]
	data[DIGITAL_IN_1_POS+8]=((Digital_In_Interrupt_Power_Low_Rising[2]&0xFF)<<0)+((Digital_In_Interrupt_Power_Low_Rising[3]&0xFF)<<8)+((Digital_In_Interrupt_Power_Low_Rising[4]&0xFF)<<16)+((Digital_In_Interrupt_Power_Low_Falling[0]&0xFF)<<24);
 8007914:	4b3e      	ldr	r3, [pc, #248]	; (8007a10 <Config_Write_Flash+0x364>)
 8007916:	789b      	ldrb	r3, [r3, #2]
 8007918:	461a      	mov	r2, r3
 800791a:	4b3d      	ldr	r3, [pc, #244]	; (8007a10 <Config_Write_Flash+0x364>)
 800791c:	78db      	ldrb	r3, [r3, #3]
 800791e:	021b      	lsls	r3, r3, #8
 8007920:	441a      	add	r2, r3
 8007922:	4b3b      	ldr	r3, [pc, #236]	; (8007a10 <Config_Write_Flash+0x364>)
 8007924:	791b      	ldrb	r3, [r3, #4]
 8007926:	041b      	lsls	r3, r3, #16
 8007928:	441a      	add	r2, r3
 800792a:	4b3a      	ldr	r3, [pc, #232]	; (8007a14 <Config_Write_Flash+0x368>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	061b      	lsls	r3, r3, #24
 8007930:	4413      	add	r3, r2
 8007932:	461a      	mov	r2, r3
 8007934:	f107 0320 	add.w	r3, r7, #32
 8007938:	625a      	str	r2, [r3, #36]	; 0x24
	data[DIGITAL_IN_1_POS+9]=((Digital_In_Interrupt_Power_Low_Falling[1]&0xFF)<<0)+((Digital_In_Interrupt_Power_Low_Falling[2]&0xFF)<<8)+((Digital_In_Interrupt_Power_Low_Falling[3]&0xFF)<<16)+((Digital_In_Interrupt_Power_Low_Falling[4]&0xFF)<<24);
 800793a:	4b36      	ldr	r3, [pc, #216]	; (8007a14 <Config_Write_Flash+0x368>)
 800793c:	785b      	ldrb	r3, [r3, #1]
 800793e:	461a      	mov	r2, r3
 8007940:	4b34      	ldr	r3, [pc, #208]	; (8007a14 <Config_Write_Flash+0x368>)
 8007942:	789b      	ldrb	r3, [r3, #2]
 8007944:	021b      	lsls	r3, r3, #8
 8007946:	441a      	add	r2, r3
 8007948:	4b32      	ldr	r3, [pc, #200]	; (8007a14 <Config_Write_Flash+0x368>)
 800794a:	78db      	ldrb	r3, [r3, #3]
 800794c:	041b      	lsls	r3, r3, #16
 800794e:	441a      	add	r2, r3
 8007950:	4b30      	ldr	r3, [pc, #192]	; (8007a14 <Config_Write_Flash+0x368>)
 8007952:	791b      	ldrb	r3, [r3, #4]
 8007954:	061b      	lsls	r3, r3, #24
 8007956:	4413      	add	r3, r2
 8007958:	461a      	mov	r2, r3
 800795a:	f107 0320 	add.w	r3, r7, #32
 800795e:	629a      	str	r2, [r3, #40]	; 0x28

	//bytes: [x], [x], [x], [x x U7/1 U7/0 U6/1 U6/0 U5/1 U5/0]
	data[DEFAULT_SWITCH_STATE_POS]=Default_Switch_State&0xFF;
 8007960:	4b2d      	ldr	r3, [pc, #180]	; (8007a18 <Config_Write_Flash+0x36c>)
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	461a      	mov	r2, r3
 8007966:	f107 0320 	add.w	r3, r7, #32
 800796a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	//bytes: [x], [x], [pwm input enable], [pwm output enable]
	data[PWM_EN_POS]=(PWM_Out_EN&0xFF)+((PWM_In_EN&0xFF)<<8);
 800796e:	4b2b      	ldr	r3, [pc, #172]	; (8007a1c <Config_Write_Flash+0x370>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	4b2a      	ldr	r3, [pc, #168]	; (8007a20 <Config_Write_Flash+0x374>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	021b      	lsls	r3, r3, #8
 800797a:	4413      	add	r3, r2
 800797c:	461a      	mov	r2, r3
 800797e:	f107 0320 	add.w	r3, r7, #32
 8007982:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	//bytes: [pwm prescaler high], [pwm prescaler low], [pwm DC high], [pwm DC low]; note that prescaler=32 is ~20kHz, so probably will never be more than one byte; also DC is currently set up so 255 = 100% and 0 = 0%; so is only one byte
	data[PWM_0_POS]=((PWM_Prescalers[0]&0xFFFF)<<16)+((PWM_Pulses[0]&0xFFFF)<<0);
 8007986:	4b27      	ldr	r3, [pc, #156]	; (8007a24 <Config_Write_Flash+0x378>)
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	041b      	lsls	r3, r3, #16
 800798c:	e04c      	b.n	8007a28 <Config_Write_Flash+0x37c>
 800798e:	bf00      	nop
 8007990:	200008f4 	.word	0x200008f4
 8007994:	20000958 	.word	0x20000958
 8007998:	20000910 	.word	0x20000910
 800799c:	20000700 	.word	0x20000700
 80079a0:	200001fc 	.word	0x200001fc
 80079a4:	200005c8 	.word	0x200005c8
 80079a8:	20000956 	.word	0x20000956
 80079ac:	20000a4c 	.word	0x20000a4c
 80079b0:	20000572 	.word	0x20000572
 80079b4:	200009be 	.word	0x200009be
 80079b8:	2000095a 	.word	0x2000095a
 80079bc:	20000560 	.word	0x20000560
 80079c0:	20000ae8 	.word	0x20000ae8
 80079c4:	20000220 	.word	0x20000220
 80079c8:	200008e0 	.word	0x200008e0
 80079cc:	20000844 	.word	0x20000844
 80079d0:	200000ee 	.word	0x200000ee
 80079d4:	20000570 	.word	0x20000570
 80079d8:	20000638 	.word	0x20000638
 80079dc:	20000222 	.word	0x20000222
 80079e0:	20000908 	.word	0x20000908
 80079e4:	2000063a 	.word	0x2000063a
 80079e8:	200000f2 	.word	0x200000f2
 80079ec:	20000484 	.word	0x20000484
 80079f0:	200000f0 	.word	0x200000f0
 80079f4:	200006f8 	.word	0x200006f8
 80079f8:	20000090 	.word	0x20000090
 80079fc:	2000009c 	.word	0x2000009c
 8007a00:	20000564 	.word	0x20000564
 8007a04:	2000075c 	.word	0x2000075c
 8007a08:	20000488 	.word	0x20000488
 8007a0c:	200000e8 	.word	0x200000e8
 8007a10:	20000494 	.word	0x20000494
 8007a14:	200008e4 	.word	0x200008e4
 8007a18:	20000487 	.word	0x20000487
 8007a1c:	200009bc 	.word	0x200009bc
 8007a20:	20000486 	.word	0x20000486
 8007a24:	20000578 	.word	0x20000578
 8007a28:	4aa4      	ldr	r2, [pc, #656]	; (8007cbc <Config_Write_Flash+0x610>)
 8007a2a:	8812      	ldrh	r2, [r2, #0]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	461a      	mov	r2, r3
 8007a30:	f107 0320 	add.w	r3, r7, #32
 8007a34:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	data[PWM_1_POS]=((PWM_Prescalers[1]&0xFFFF)<<16)+((PWM_Pulses[1]&0xFFFF)<<0);
 8007a38:	4ba1      	ldr	r3, [pc, #644]	; (8007cc0 <Config_Write_Flash+0x614>)
 8007a3a:	885b      	ldrh	r3, [r3, #2]
 8007a3c:	041b      	lsls	r3, r3, #16
 8007a3e:	4a9f      	ldr	r2, [pc, #636]	; (8007cbc <Config_Write_Flash+0x610>)
 8007a40:	8852      	ldrh	r2, [r2, #2]
 8007a42:	4413      	add	r3, r2
 8007a44:	461a      	mov	r2, r3
 8007a46:	f107 0320 	add.w	r3, r7, #32
 8007a4a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	data[PWM_2_POS]=((PWM_Prescalers[2]&0xFFFF)<<16)+((PWM_Pulses[2]&0xFFFF)<<0);
 8007a4e:	4b9c      	ldr	r3, [pc, #624]	; (8007cc0 <Config_Write_Flash+0x614>)
 8007a50:	889b      	ldrh	r3, [r3, #4]
 8007a52:	041b      	lsls	r3, r3, #16
 8007a54:	4a99      	ldr	r2, [pc, #612]	; (8007cbc <Config_Write_Flash+0x610>)
 8007a56:	8892      	ldrh	r2, [r2, #4]
 8007a58:	4413      	add	r3, r2
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f107 0320 	add.w	r3, r7, #32
 8007a60:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	data[PWM_3_POS]=((PWM_Prescalers[3]&0xFFFF)<<16)+((PWM_Pulses[3]&0xFFFF)<<0);
 8007a64:	4b96      	ldr	r3, [pc, #600]	; (8007cc0 <Config_Write_Flash+0x614>)
 8007a66:	88db      	ldrh	r3, [r3, #6]
 8007a68:	041b      	lsls	r3, r3, #16
 8007a6a:	4a94      	ldr	r2, [pc, #592]	; (8007cbc <Config_Write_Flash+0x610>)
 8007a6c:	88d2      	ldrh	r2, [r2, #6]
 8007a6e:	4413      	add	r3, r2
 8007a70:	461a      	mov	r2, r3
 8007a72:	f107 0320 	add.w	r3, r7, #32
 8007a76:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	data[PWM_4_POS]=((PWM_Prescalers[4]&0xFFFF)<<16)+((PWM_Pulses[4]&0xFFFF)<<0);
 8007a7a:	4b91      	ldr	r3, [pc, #580]	; (8007cc0 <Config_Write_Flash+0x614>)
 8007a7c:	891b      	ldrh	r3, [r3, #8]
 8007a7e:	041b      	lsls	r3, r3, #16
 8007a80:	4a8e      	ldr	r2, [pc, #568]	; (8007cbc <Config_Write_Flash+0x610>)
 8007a82:	8912      	ldrh	r2, [r2, #8]
 8007a84:	4413      	add	r3, r2
 8007a86:	461a      	mov	r2, r3
 8007a88:	f107 0320 	add.w	r3, r7, #32
 8007a8c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	uint32_t CanPos[8] = {CAN_ID_0_POS, CAN_ID_1_POS, CAN_ID_2_POS, CAN_ID_3_POS, CAN_ID_4_POS, CAN_ID_5_POS, CAN_ID_6_POS, CAN_ID_7_POS};
 8007a90:	463b      	mov	r3, r7
 8007a92:	4a8c      	ldr	r2, [pc, #560]	; (8007cc4 <Config_Write_Flash+0x618>)
 8007a94:	461c      	mov	r4, r3
 8007a96:	4615      	mov	r5, r2
 8007a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007aa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(uint32_t i=0; i<8; i++)
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8007aaa:	e019      	b.n	8007ae0 <Config_Write_Flash+0x434>
	{
		//bytes: [unused], [can dlc], [can id high], [can id low] x8 //any can id outside the valid range of 0 to 2047 should be treated as disabled
		data[CanPos[i]]=(0)+((Can_DLCs[i]&0xFF)<<16)+(Can_IDs[i]&0xFFFF);
 8007aac:	4a86      	ldr	r2, [pc, #536]	; (8007cc8 <Config_Write_Flash+0x61c>)
 8007aae:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8007ab2:	4413      	add	r3, r2
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	041b      	lsls	r3, r3, #16
 8007ab8:	4984      	ldr	r1, [pc, #528]	; (8007ccc <Config_Write_Flash+0x620>)
 8007aba:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8007abe:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8007ac2:	1899      	adds	r1, r3, r2
 8007ac4:	463b      	mov	r3, r7
 8007ac6:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8007aca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ace:	f107 0320 	add.w	r3, r7, #32
 8007ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint32_t i=0; i<8; i++)
 8007ad6:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8007ada:	3301      	adds	r3, #1
 8007adc:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8007ae0:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8007ae4:	2b07      	cmp	r3, #7
 8007ae6:	d9e1      	bls.n	8007aac <Config_Write_Flash+0x400>
	data[CAN_ID_4_POS]=(0)+(Can_DLCs[4]<<16)+(Can_IDs[4]&0xFFFF);
	data[CAN_ID_5_POS]=(0)+(Can_DLCs[5]<<16)+(Can_IDs[5]&0xFFFF);
	data[CAN_ID_6_POS]=(0)+(Can_DLCs[6]<<16)+(Can_IDs[6]&0xFFFF);
	data[CAN_ID_7_POS]=(0)+(Can_DLCs[7]<<16)+(Can_IDs[7]&0xFFFF);*/

	for(uint32_t i=0; i<8; i++)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 8007aee:	e0a0      	b.n	8007c32 <Config_Write_Flash+0x586>
	{
		//byte: [bytes of specific data]
		data[CAN_BYTES_1ST_POS+i*2]=Can_Config_Bytes[i][0]+(Can_Config_Bytes[i][1]<<8)+(Can_Config_Bytes[i][2]<<16)+(Can_Config_Bytes[i][3]<<24);
 8007af0:	4a77      	ldr	r2, [pc, #476]	; (8007cd0 <Config_Write_Flash+0x624>)
 8007af2:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007af6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8007afa:	4619      	mov	r1, r3
 8007afc:	4a74      	ldr	r2, [pc, #464]	; (8007cd0 <Config_Write_Flash+0x624>)
 8007afe:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	4413      	add	r3, r2
 8007b06:	785b      	ldrb	r3, [r3, #1]
 8007b08:	021b      	lsls	r3, r3, #8
 8007b0a:	18ca      	adds	r2, r1, r3
 8007b0c:	4970      	ldr	r1, [pc, #448]	; (8007cd0 <Config_Write_Flash+0x624>)
 8007b0e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	440b      	add	r3, r1
 8007b16:	789b      	ldrb	r3, [r3, #2]
 8007b18:	041b      	lsls	r3, r3, #16
 8007b1a:	441a      	add	r2, r3
 8007b1c:	496c      	ldr	r1, [pc, #432]	; (8007cd0 <Config_Write_Flash+0x624>)
 8007b1e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	440b      	add	r3, r1
 8007b26:	78db      	ldrb	r3, [r3, #3]
 8007b28:	061b      	lsls	r3, r3, #24
 8007b2a:	18d1      	adds	r1, r2, r3
 8007b2c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	f103 0213 	add.w	r2, r3, #19
 8007b36:	f107 0320 	add.w	r3, r7, #32
 8007b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		data[CAN_BYTES_1ST_POS+i*2+1]=Can_Config_Bytes[i][4]+(Can_Config_Bytes[i][5]<<8)+(Can_Config_Bytes[i][6]<<16)+(Can_Config_Bytes[i][7]<<24);
 8007b3e:	4a64      	ldr	r2, [pc, #400]	; (8007cd0 <Config_Write_Flash+0x624>)
 8007b40:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007b44:	00db      	lsls	r3, r3, #3
 8007b46:	4413      	add	r3, r2
 8007b48:	791b      	ldrb	r3, [r3, #4]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	4a60      	ldr	r2, [pc, #384]	; (8007cd0 <Config_Write_Flash+0x624>)
 8007b4e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	4413      	add	r3, r2
 8007b56:	795b      	ldrb	r3, [r3, #5]
 8007b58:	021b      	lsls	r3, r3, #8
 8007b5a:	18ca      	adds	r2, r1, r3
 8007b5c:	495c      	ldr	r1, [pc, #368]	; (8007cd0 <Config_Write_Flash+0x624>)
 8007b5e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	440b      	add	r3, r1
 8007b66:	799b      	ldrb	r3, [r3, #6]
 8007b68:	041b      	lsls	r3, r3, #16
 8007b6a:	441a      	add	r2, r3
 8007b6c:	4958      	ldr	r1, [pc, #352]	; (8007cd0 <Config_Write_Flash+0x624>)
 8007b6e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	440b      	add	r3, r1
 8007b76:	79db      	ldrb	r3, [r3, #7]
 8007b78:	061b      	lsls	r3, r3, #24
 8007b7a:	18d1      	adds	r1, r2, r3
 8007b7c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007b80:	330a      	adds	r3, #10
 8007b82:	005a      	lsls	r2, r3, #1
 8007b84:	f107 0320 	add.w	r3, r7, #32
 8007b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		//byte: [id of data to send]
		data[CAN_DATAS_1ST_POS+i*2]=Can_Config_Datas[i][0]+(Can_Config_Datas[i][1]<<8)+(Can_Config_Datas[i][2]<<16)+(Can_Config_Datas[i][3]<<24);
 8007b8c:	4a51      	ldr	r2, [pc, #324]	; (8007cd4 <Config_Write_Flash+0x628>)
 8007b8e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007b92:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8007b96:	4619      	mov	r1, r3
 8007b98:	4a4e      	ldr	r2, [pc, #312]	; (8007cd4 <Config_Write_Flash+0x628>)
 8007b9a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007b9e:	00db      	lsls	r3, r3, #3
 8007ba0:	4413      	add	r3, r2
 8007ba2:	785b      	ldrb	r3, [r3, #1]
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	18ca      	adds	r2, r1, r3
 8007ba8:	494a      	ldr	r1, [pc, #296]	; (8007cd4 <Config_Write_Flash+0x628>)
 8007baa:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	440b      	add	r3, r1
 8007bb2:	789b      	ldrb	r3, [r3, #2]
 8007bb4:	041b      	lsls	r3, r3, #16
 8007bb6:	441a      	add	r2, r3
 8007bb8:	4946      	ldr	r1, [pc, #280]	; (8007cd4 <Config_Write_Flash+0x628>)
 8007bba:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	440b      	add	r3, r1
 8007bc2:	78db      	ldrb	r3, [r3, #3]
 8007bc4:	061b      	lsls	r3, r3, #24
 8007bc6:	18d1      	adds	r1, r2, r3
 8007bc8:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	f103 0223 	add.w	r2, r3, #35	; 0x23
 8007bd2:	f107 0320 	add.w	r3, r7, #32
 8007bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		data[CAN_DATAS_1ST_POS+i*2+1]=Can_Config_Datas[i][4]+(Can_Config_Datas[i][5]<<8)+(Can_Config_Datas[i][6]<<16)+(Can_Config_Datas[i][7]<<24);
 8007bda:	4a3e      	ldr	r2, [pc, #248]	; (8007cd4 <Config_Write_Flash+0x628>)
 8007bdc:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007be0:	00db      	lsls	r3, r3, #3
 8007be2:	4413      	add	r3, r2
 8007be4:	791b      	ldrb	r3, [r3, #4]
 8007be6:	4619      	mov	r1, r3
 8007be8:	4a3a      	ldr	r2, [pc, #232]	; (8007cd4 <Config_Write_Flash+0x628>)
 8007bea:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	4413      	add	r3, r2
 8007bf2:	795b      	ldrb	r3, [r3, #5]
 8007bf4:	021b      	lsls	r3, r3, #8
 8007bf6:	18ca      	adds	r2, r1, r3
 8007bf8:	4936      	ldr	r1, [pc, #216]	; (8007cd4 <Config_Write_Flash+0x628>)
 8007bfa:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	440b      	add	r3, r1
 8007c02:	799b      	ldrb	r3, [r3, #6]
 8007c04:	041b      	lsls	r3, r3, #16
 8007c06:	441a      	add	r2, r3
 8007c08:	4932      	ldr	r1, [pc, #200]	; (8007cd4 <Config_Write_Flash+0x628>)
 8007c0a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007c0e:	00db      	lsls	r3, r3, #3
 8007c10:	440b      	add	r3, r1
 8007c12:	79db      	ldrb	r3, [r3, #7]
 8007c14:	061b      	lsls	r3, r3, #24
 8007c16:	18d1      	adds	r1, r2, r3
 8007c18:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007c1c:	3312      	adds	r3, #18
 8007c1e:	005a      	lsls	r2, r3, #1
 8007c20:	f107 0320 	add.w	r3, r7, #32
 8007c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint32_t i=0; i<8; i++)
 8007c28:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 8007c32:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8007c36:	2b07      	cmp	r3, #7
 8007c38:	f67f af5a 	bls.w	8007af0 <Config_Write_Flash+0x444>
	}
	//note that only two messages may be sent on sync, or 3 if absolutely no other messages are being sent (including errors)
	//bytes: [can interval (.1 ms) high], [can interval (.1 ms) low], [send can message on timer], [send can messages on sync]
	data[CAN_SEND_EN_POS]=((Can_Sync_Enable&0xFF)<<0)+((Can_Timed_Enable&0xFF)<<8)+((Can_Interval&0xFFFF)<<16);
 8007c3c:	4b26      	ldr	r3, [pc, #152]	; (8007cd8 <Config_Write_Flash+0x62c>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	4b26      	ldr	r3, [pc, #152]	; (8007cdc <Config_Write_Flash+0x630>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	021b      	lsls	r3, r3, #8
 8007c48:	441a      	add	r2, r3
 8007c4a:	4b25      	ldr	r3, [pc, #148]	; (8007ce0 <Config_Write_Flash+0x634>)
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	041b      	lsls	r3, r3, #16
 8007c50:	4413      	add	r3, r2
 8007c52:	461a      	mov	r2, r3
 8007c54:	f107 0320 	add.w	r3, r7, #32
 8007c58:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	//bytes: [can sync delay (10 us) high], [can sync delay (10 us) low], [x], [x]
	data[CAN_SYNC_DELAY_POS]=((Can_Sync_Delay&0xFFFF)<<16);
 8007c5c:	4b21      	ldr	r3, [pc, #132]	; (8007ce4 <Config_Write_Flash+0x638>)
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	041b      	lsls	r3, r3, #16
 8007c62:	461a      	mov	r2, r3
 8007c64:	f107 0320 	add.w	r3, r7, #32
 8007c68:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	//bytes: [temperature samples to take / continuous sampling], [voltage samples to take / continuous sampling], [temperature samples to take per interval], [voltage samples to take per inteval]
	data[TV_BURST_POS]=((sample_temperature&0xFF)<<0)+((sample_voltage&0xFF)<<8)+((SampleTemperatureBurst&0xFF)<<16)+((SampleVoltageBurst&0xFF)<<24);
 8007c6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ce8 <Config_Write_Flash+0x63c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	4b1e      	ldr	r3, [pc, #120]	; (8007cec <Config_Write_Flash+0x640>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	021b      	lsls	r3, r3, #8
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	4413      	add	r3, r2
 8007c7c:	4a1c      	ldr	r2, [pc, #112]	; (8007cf0 <Config_Write_Flash+0x644>)
 8007c7e:	7812      	ldrb	r2, [r2, #0]
 8007c80:	0412      	lsls	r2, r2, #16
 8007c82:	4413      	add	r3, r2
 8007c84:	4a1b      	ldr	r2, [pc, #108]	; (8007cf4 <Config_Write_Flash+0x648>)
 8007c86:	7812      	ldrb	r2, [r2, #0]
 8007c88:	0612      	lsls	r2, r2, #24
 8007c8a:	441a      	add	r2, r3
 8007c8c:	f107 0320 	add.w	r3, r7, #32
 8007c90:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	//bytes: [x], [x], [temperature/voltage sampling interval (.1 ms) high], [temperature/voltage sampling interval (.1 ms) low]
	data[TV_BURST_TIMING_POS]=((SampleTemperatureVoltagePeriod&0xFFFF)<<0);
 8007c94:	4b18      	ldr	r3, [pc, #96]	; (8007cf8 <Config_Write_Flash+0x64c>)
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	f107 0320 	add.w	r3, r7, #32
 8007c9e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	Flash_Write(FLASH_PAGE_63, 63, data, 512);
 8007ca2:	f107 0220 	add.w	r2, r7, #32
 8007ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007caa:	213f      	movs	r1, #63	; 0x3f
 8007cac:	4813      	ldr	r0, [pc, #76]	; (8007cfc <Config_Write_Flash+0x650>)
 8007cae:	f000 fb89 	bl	80083c4 <Flash_Write>
}
 8007cb2:	bf00      	nop
 8007cb4:	f607 0728 	addw	r7, r7, #2088	; 0x828
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bdb0      	pop	{r4, r5, r7, pc}
 8007cbc:	200007f8 	.word	0x200007f8
 8007cc0:	20000578 	.word	0x20000578
 8007cc4:	0800be30 	.word	0x0800be30
 8007cc8:	200008f8 	.word	0x200008f8
 8007ccc:	2000084c 	.word	0x2000084c
 8007cd0:	200002d0 	.word	0x200002d0
 8007cd4:	20000178 	.word	0x20000178
 8007cd8:	200004dc 	.word	0x200004dc
 8007cdc:	200000f1 	.word	0x200000f1
 8007ce0:	200000f4 	.word	0x200000f4
 8007ce4:	2000041c 	.word	0x2000041c
 8007ce8:	20000490 	.word	0x20000490
 8007cec:	20000098 	.word	0x20000098
 8007cf0:	200008e9 	.word	0x200008e9
 8007cf4:	200001b9 	.word	0x200001b9
 8007cf8:	20000954 	.word	0x20000954
 8007cfc:	0801f800 	.word	0x0801f800

08007d00 <Config_Read_Flash>:

void Config_Read_Flash(void)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b091      	sub	sp, #68	; 0x44
 8007d04:	af00      	add	r7, sp, #0
	warn_undervoltage_U5=((U5_VOLTAGE_WARNING_LIMIT>>0)&0xFFFF);
 8007d06:	4b8e      	ldr	r3, [pc, #568]	; (8007f40 <Config_Read_Flash+0x240>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	4b8d      	ldr	r3, [pc, #564]	; (8007f44 <Config_Read_Flash+0x244>)
 8007d0e:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U5=((U5_VOLTAGE_WARNING_LIMIT>>16)&0xFFFF);
 8007d10:	4b8b      	ldr	r3, [pc, #556]	; (8007f40 <Config_Read_Flash+0x240>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	0c1b      	lsrs	r3, r3, #16
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	4b8b      	ldr	r3, [pc, #556]	; (8007f48 <Config_Read_Flash+0x248>)
 8007d1a:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U5=((U5_TEMPERATURE_WARNING_LIMIT>>0)&0xFFFF);
 8007d1c:	4b8b      	ldr	r3, [pc, #556]	; (8007f4c <Config_Read_Flash+0x24c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	4b8b      	ldr	r3, [pc, #556]	; (8007f50 <Config_Read_Flash+0x250>)
 8007d24:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U5=((U5_TEMPERATURE_WARNING_LIMIT>>16)&0xFFFF);
 8007d26:	4b89      	ldr	r3, [pc, #548]	; (8007f4c <Config_Read_Flash+0x24c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	0c1b      	lsrs	r3, r3, #16
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	4b89      	ldr	r3, [pc, #548]	; (8007f54 <Config_Read_Flash+0x254>)
 8007d30:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U5I0=((U5_CURRENT_WARNING_LIMIT_I0>>0)&0xFFFF);
 8007d32:	4b89      	ldr	r3, [pc, #548]	; (8007f58 <Config_Read_Flash+0x258>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	4b88      	ldr	r3, [pc, #544]	; (8007f5c <Config_Read_Flash+0x25c>)
 8007d3a:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U5I0=((U5_CURRENT_WARNING_LIMIT_I0>>16)&0xFFFF);
 8007d3c:	4b86      	ldr	r3, [pc, #536]	; (8007f58 <Config_Read_Flash+0x258>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	0c1b      	lsrs	r3, r3, #16
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	4b86      	ldr	r3, [pc, #536]	; (8007f60 <Config_Read_Flash+0x260>)
 8007d46:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U5I1=((U5_CURRENT_WARNING_LIMIT_I1>>0)&0xFFFF);
 8007d48:	4b86      	ldr	r3, [pc, #536]	; (8007f64 <Config_Read_Flash+0x264>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	4b86      	ldr	r3, [pc, #536]	; (8007f68 <Config_Read_Flash+0x268>)
 8007d50:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U5I1=((U5_CURRENT_WARNING_LIMIT_I1>>16)&0xFFFF);
 8007d52:	4b84      	ldr	r3, [pc, #528]	; (8007f64 <Config_Read_Flash+0x264>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	0c1b      	lsrs	r3, r3, #16
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	4b84      	ldr	r3, [pc, #528]	; (8007f6c <Config_Read_Flash+0x26c>)
 8007d5c:	801a      	strh	r2, [r3, #0]
	warn_undervoltage_U6=((U6_VOLTAGE_WARNING_LIMIT>>0)&0xFFFF);
 8007d5e:	4b84      	ldr	r3, [pc, #528]	; (8007f70 <Config_Read_Flash+0x270>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	4b83      	ldr	r3, [pc, #524]	; (8007f74 <Config_Read_Flash+0x274>)
 8007d66:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U6=((U6_VOLTAGE_WARNING_LIMIT>>16)&0xFFFF);
 8007d68:	4b81      	ldr	r3, [pc, #516]	; (8007f70 <Config_Read_Flash+0x270>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	0c1b      	lsrs	r3, r3, #16
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	4b81      	ldr	r3, [pc, #516]	; (8007f78 <Config_Read_Flash+0x278>)
 8007d72:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U6=((U6_TEMPERATURE_WARNING_LIMIT>>0)&0xFFFF);
 8007d74:	4b81      	ldr	r3, [pc, #516]	; (8007f7c <Config_Read_Flash+0x27c>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	4b81      	ldr	r3, [pc, #516]	; (8007f80 <Config_Read_Flash+0x280>)
 8007d7c:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U6=((U6_TEMPERATURE_WARNING_LIMIT>>16)&0xFFFF);
 8007d7e:	4b7f      	ldr	r3, [pc, #508]	; (8007f7c <Config_Read_Flash+0x27c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	0c1b      	lsrs	r3, r3, #16
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	4b7f      	ldr	r3, [pc, #508]	; (8007f84 <Config_Read_Flash+0x284>)
 8007d88:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U6I0=((U6_CURRENT_WARNING_LIMIT_I0>>0)&0xFFFF);
 8007d8a:	4b7f      	ldr	r3, [pc, #508]	; (8007f88 <Config_Read_Flash+0x288>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	4b7e      	ldr	r3, [pc, #504]	; (8007f8c <Config_Read_Flash+0x28c>)
 8007d92:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U6I0=((U6_CURRENT_WARNING_LIMIT_I0>>16)&0xFFFF);
 8007d94:	4b7c      	ldr	r3, [pc, #496]	; (8007f88 <Config_Read_Flash+0x288>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	0c1b      	lsrs	r3, r3, #16
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	4b7c      	ldr	r3, [pc, #496]	; (8007f90 <Config_Read_Flash+0x290>)
 8007d9e:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U6I1=((U6_CURRENT_WARNING_LIMIT_I1>>0)&0xFFFF);
 8007da0:	4b7c      	ldr	r3, [pc, #496]	; (8007f94 <Config_Read_Flash+0x294>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	4b7c      	ldr	r3, [pc, #496]	; (8007f98 <Config_Read_Flash+0x298>)
 8007da8:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U6I1=((U6_CURRENT_WARNING_LIMIT_I1>>16)&0xFFFF);
 8007daa:	4b7a      	ldr	r3, [pc, #488]	; (8007f94 <Config_Read_Flash+0x294>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	0c1b      	lsrs	r3, r3, #16
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	4b7a      	ldr	r3, [pc, #488]	; (8007f9c <Config_Read_Flash+0x29c>)
 8007db4:	801a      	strh	r2, [r3, #0]
	warn_undervoltage_U7=((U7_VOLTAGE_WARNING_LIMIT>>0)&0xFFFF);
 8007db6:	4b7a      	ldr	r3, [pc, #488]	; (8007fa0 <Config_Read_Flash+0x2a0>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	4b79      	ldr	r3, [pc, #484]	; (8007fa4 <Config_Read_Flash+0x2a4>)
 8007dbe:	801a      	strh	r2, [r3, #0]
	warn_overvoltage_U7=((U7_VOLTAGE_WARNING_LIMIT>>16)&0xFFFF);
 8007dc0:	4b77      	ldr	r3, [pc, #476]	; (8007fa0 <Config_Read_Flash+0x2a0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	0c1b      	lsrs	r3, r3, #16
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	4b77      	ldr	r3, [pc, #476]	; (8007fa8 <Config_Read_Flash+0x2a8>)
 8007dca:	801a      	strh	r2, [r3, #0]
	warn_undertemperature_U7=((U7_TEMPERATURE_WARNING_LIMIT>>0)&0xFFFF);
 8007dcc:	4b77      	ldr	r3, [pc, #476]	; (8007fac <Config_Read_Flash+0x2ac>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	4b77      	ldr	r3, [pc, #476]	; (8007fb0 <Config_Read_Flash+0x2b0>)
 8007dd4:	801a      	strh	r2, [r3, #0]
	warn_overtemperature_U7=((U7_TEMPERATURE_WARNING_LIMIT>>16)&0xFFFF);
 8007dd6:	4b75      	ldr	r3, [pc, #468]	; (8007fac <Config_Read_Flash+0x2ac>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	0c1b      	lsrs	r3, r3, #16
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	4b75      	ldr	r3, [pc, #468]	; (8007fb4 <Config_Read_Flash+0x2b4>)
 8007de0:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U7I0=((U7_CURRENT_WARNING_LIMIT_I0>>0)&0xFFFF);
 8007de2:	4b75      	ldr	r3, [pc, #468]	; (8007fb8 <Config_Read_Flash+0x2b8>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	4b74      	ldr	r3, [pc, #464]	; (8007fbc <Config_Read_Flash+0x2bc>)
 8007dea:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U7I0=((U7_CURRENT_WARNING_LIMIT_I0>>16)&0xFFFF);
 8007dec:	4b72      	ldr	r3, [pc, #456]	; (8007fb8 <Config_Read_Flash+0x2b8>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	0c1b      	lsrs	r3, r3, #16
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	4b72      	ldr	r3, [pc, #456]	; (8007fc0 <Config_Read_Flash+0x2c0>)
 8007df6:	801a      	strh	r2, [r3, #0]
	warn_undercurrent_U7I1=((U7_CURRENT_WARNING_LIMIT_I1>>0)&0xFFFF);
 8007df8:	4b72      	ldr	r3, [pc, #456]	; (8007fc4 <Config_Read_Flash+0x2c4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	4b72      	ldr	r3, [pc, #456]	; (8007fc8 <Config_Read_Flash+0x2c8>)
 8007e00:	801a      	strh	r2, [r3, #0]
	warn_overcurrent_U7I1=((U7_CURRENT_WARNING_LIMIT_I1>>16)&0xFFFF); //TODO: something here stops can sending, not sure why
 8007e02:	4b70      	ldr	r3, [pc, #448]	; (8007fc4 <Config_Read_Flash+0x2c4>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	0c1b      	lsrs	r3, r3, #16
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	4b70      	ldr	r3, [pc, #448]	; (8007fcc <Config_Read_Flash+0x2cc>)
 8007e0c:	801a      	strh	r2, [r3, #0]

	Digital_In_EN = ((DIGITAL_IN_0>>0)&0b00011101); //bit for PB4 is 0 to ensure it isn't used as PB4 seemed to have hardware problems
 8007e0e:	4b70      	ldr	r3, [pc, #448]	; (8007fd0 <Config_Read_Flash+0x2d0>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	f003 031d 	and.w	r3, r3, #29
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	4b6e      	ldr	r3, [pc, #440]	; (8007fd4 <Config_Read_Flash+0x2d4>)
 8007e1c:	701a      	strb	r2, [r3, #0]
	Default_Switch_State=((DEFAULT_SWITCH_STATE>>0)&0b00111111);
 8007e1e:	4b6e      	ldr	r3, [pc, #440]	; (8007fd8 <Config_Read_Flash+0x2d8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	4b6c      	ldr	r3, [pc, #432]	; (8007fdc <Config_Read_Flash+0x2dc>)
 8007e2c:	701a      	strb	r2, [r3, #0]


	//oh boy
	Digital_In_Interrupt_Can_Falling[0]=((*(&DIGITAL_IN_1+0))>>0)&0xFF;
 8007e2e:	4b6c      	ldr	r3, [pc, #432]	; (8007fe0 <Config_Read_Flash+0x2e0>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	4b6b      	ldr	r3, [pc, #428]	; (8007fe4 <Config_Read_Flash+0x2e4>)
 8007e36:	701a      	strb	r2, [r3, #0]
	Digital_In_Interrupt_Can_Falling[1]=((*(&DIGITAL_IN_1+0))>>8)&0xFF;
 8007e38:	4b69      	ldr	r3, [pc, #420]	; (8007fe0 <Config_Read_Flash+0x2e0>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	0a1b      	lsrs	r3, r3, #8
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	4b68      	ldr	r3, [pc, #416]	; (8007fe4 <Config_Read_Flash+0x2e4>)
 8007e42:	705a      	strb	r2, [r3, #1]
	Digital_In_Interrupt_Can_Falling[2]=((*(&DIGITAL_IN_1+0))>>16)&0xFF;
 8007e44:	4b66      	ldr	r3, [pc, #408]	; (8007fe0 <Config_Read_Flash+0x2e0>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	0c1b      	lsrs	r3, r3, #16
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	4b65      	ldr	r3, [pc, #404]	; (8007fe4 <Config_Read_Flash+0x2e4>)
 8007e4e:	709a      	strb	r2, [r3, #2]
	Digital_In_Interrupt_Can_Falling[3]=((*(&DIGITAL_IN_1+0))>>24)&0xFF;
 8007e50:	4b63      	ldr	r3, [pc, #396]	; (8007fe0 <Config_Read_Flash+0x2e0>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	0e1b      	lsrs	r3, r3, #24
 8007e56:	b2da      	uxtb	r2, r3
 8007e58:	4b62      	ldr	r3, [pc, #392]	; (8007fe4 <Config_Read_Flash+0x2e4>)
 8007e5a:	70da      	strb	r2, [r3, #3]
	Digital_In_Interrupt_Can_Falling[4]=((*(&DIGITAL_IN_1+1))>>0)&0xFF;
 8007e5c:	4b62      	ldr	r3, [pc, #392]	; (8007fe8 <Config_Read_Flash+0x2e8>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	4b60      	ldr	r3, [pc, #384]	; (8007fe4 <Config_Read_Flash+0x2e4>)
 8007e64:	711a      	strb	r2, [r3, #4]
	Digital_In_Interrupt_Can_Rising[0]=((*(&DIGITAL_IN_1+1))>>8)&0xFF;
 8007e66:	4b60      	ldr	r3, [pc, #384]	; (8007fe8 <Config_Read_Flash+0x2e8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	0a1b      	lsrs	r3, r3, #8
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	4b5f      	ldr	r3, [pc, #380]	; (8007fec <Config_Read_Flash+0x2ec>)
 8007e70:	701a      	strb	r2, [r3, #0]
	Digital_In_Interrupt_Can_Rising[1]=((*(&DIGITAL_IN_1+1))>>16)&0xFF;
 8007e72:	4b5d      	ldr	r3, [pc, #372]	; (8007fe8 <Config_Read_Flash+0x2e8>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	0c1b      	lsrs	r3, r3, #16
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	4b5c      	ldr	r3, [pc, #368]	; (8007fec <Config_Read_Flash+0x2ec>)
 8007e7c:	705a      	strb	r2, [r3, #1]
	Digital_In_Interrupt_Can_Rising[2]=((*(&DIGITAL_IN_1+1))>>24)&0xFF;
 8007e7e:	4b5a      	ldr	r3, [pc, #360]	; (8007fe8 <Config_Read_Flash+0x2e8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	0e1b      	lsrs	r3, r3, #24
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	4b59      	ldr	r3, [pc, #356]	; (8007fec <Config_Read_Flash+0x2ec>)
 8007e88:	709a      	strb	r2, [r3, #2]
	Digital_In_Interrupt_Can_Rising[3]=((*(&DIGITAL_IN_1+2))>>0)&0xFF;
 8007e8a:	4b59      	ldr	r3, [pc, #356]	; (8007ff0 <Config_Read_Flash+0x2f0>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	4b56      	ldr	r3, [pc, #344]	; (8007fec <Config_Read_Flash+0x2ec>)
 8007e92:	70da      	strb	r2, [r3, #3]
	Digital_In_Interrupt_Can_Rising[4]=((*(&DIGITAL_IN_1+2))>>8)&0xFF;
 8007e94:	4b56      	ldr	r3, [pc, #344]	; (8007ff0 <Config_Read_Flash+0x2f0>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	0a1b      	lsrs	r3, r3, #8
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	4b53      	ldr	r3, [pc, #332]	; (8007fec <Config_Read_Flash+0x2ec>)
 8007e9e:	711a      	strb	r2, [r3, #4]

	Digital_In_Interrupt_Power_High_Rising[0]=((*(&DIGITAL_IN_1+2))>>16)&0xFF;
 8007ea0:	4b53      	ldr	r3, [pc, #332]	; (8007ff0 <Config_Read_Flash+0x2f0>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	0c1b      	lsrs	r3, r3, #16
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	4b52      	ldr	r3, [pc, #328]	; (8007ff4 <Config_Read_Flash+0x2f4>)
 8007eaa:	701a      	strb	r2, [r3, #0]
	Digital_In_Interrupt_Power_High_Rising[1]=((*(&DIGITAL_IN_1+2))>>24)&0xFF;
 8007eac:	4b50      	ldr	r3, [pc, #320]	; (8007ff0 <Config_Read_Flash+0x2f0>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	0e1b      	lsrs	r3, r3, #24
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	4b4f      	ldr	r3, [pc, #316]	; (8007ff4 <Config_Read_Flash+0x2f4>)
 8007eb6:	705a      	strb	r2, [r3, #1]
	Digital_In_Interrupt_Power_High_Rising[2]=((*(&DIGITAL_IN_1+3))>>0)&0xFF;
 8007eb8:	4b4f      	ldr	r3, [pc, #316]	; (8007ff8 <Config_Read_Flash+0x2f8>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	4b4d      	ldr	r3, [pc, #308]	; (8007ff4 <Config_Read_Flash+0x2f4>)
 8007ec0:	709a      	strb	r2, [r3, #2]
	Digital_In_Interrupt_Power_High_Rising[3]=((*(&DIGITAL_IN_1+3))>>8)&0xFF;
 8007ec2:	4b4d      	ldr	r3, [pc, #308]	; (8007ff8 <Config_Read_Flash+0x2f8>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	0a1b      	lsrs	r3, r3, #8
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	4b4a      	ldr	r3, [pc, #296]	; (8007ff4 <Config_Read_Flash+0x2f4>)
 8007ecc:	70da      	strb	r2, [r3, #3]
	Digital_In_Interrupt_Power_High_Rising[4]=((*(&DIGITAL_IN_1+3))>>16)&0xFF;
 8007ece:	4b4a      	ldr	r3, [pc, #296]	; (8007ff8 <Config_Read_Flash+0x2f8>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	0c1b      	lsrs	r3, r3, #16
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	4b47      	ldr	r3, [pc, #284]	; (8007ff4 <Config_Read_Flash+0x2f4>)
 8007ed8:	711a      	strb	r2, [r3, #4]
	Digital_In_Interrupt_Power_High_Falling[0]=((*(&DIGITAL_IN_1+3))>>24)&0xFF;
 8007eda:	4b47      	ldr	r3, [pc, #284]	; (8007ff8 <Config_Read_Flash+0x2f8>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	0e1b      	lsrs	r3, r3, #24
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	4b46      	ldr	r3, [pc, #280]	; (8007ffc <Config_Read_Flash+0x2fc>)
 8007ee4:	701a      	strb	r2, [r3, #0]
	Digital_In_Interrupt_Power_High_Falling[1]=((*(&DIGITAL_IN_1+4))>>0)&0xFF;
 8007ee6:	4b46      	ldr	r3, [pc, #280]	; (8008000 <Config_Read_Flash+0x300>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	4b43      	ldr	r3, [pc, #268]	; (8007ffc <Config_Read_Flash+0x2fc>)
 8007eee:	705a      	strb	r2, [r3, #1]
	Digital_In_Interrupt_Power_High_Falling[2]=((*(&DIGITAL_IN_1+4))>>8)&0xFF;
 8007ef0:	4b43      	ldr	r3, [pc, #268]	; (8008000 <Config_Read_Flash+0x300>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	0a1b      	lsrs	r3, r3, #8
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	4b40      	ldr	r3, [pc, #256]	; (8007ffc <Config_Read_Flash+0x2fc>)
 8007efa:	709a      	strb	r2, [r3, #2]
	Digital_In_Interrupt_Power_High_Falling[3]=((*(&DIGITAL_IN_1+4))>>16)&0xFF;
 8007efc:	4b40      	ldr	r3, [pc, #256]	; (8008000 <Config_Read_Flash+0x300>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	0c1b      	lsrs	r3, r3, #16
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	4b3d      	ldr	r3, [pc, #244]	; (8007ffc <Config_Read_Flash+0x2fc>)
 8007f06:	70da      	strb	r2, [r3, #3]
	Digital_In_Interrupt_Power_High_Falling[4]=((*(&DIGITAL_IN_1+4))>>24)&0xFF;
 8007f08:	4b3d      	ldr	r3, [pc, #244]	; (8008000 <Config_Read_Flash+0x300>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	0e1b      	lsrs	r3, r3, #24
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	4b3a      	ldr	r3, [pc, #232]	; (8007ffc <Config_Read_Flash+0x2fc>)
 8007f12:	711a      	strb	r2, [r3, #4]

	Digital_In_Interrupt_PWM_Rising[0]=((*(&DIGITAL_IN_1+5))>>0)&0xFF;
 8007f14:	4b3b      	ldr	r3, [pc, #236]	; (8008004 <Config_Read_Flash+0x304>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	4b3b      	ldr	r3, [pc, #236]	; (8008008 <Config_Read_Flash+0x308>)
 8007f1c:	701a      	strb	r2, [r3, #0]
	Digital_In_Interrupt_PWM_Rising[1]=((*(&DIGITAL_IN_1+5))>>8)&0xFF;
 8007f1e:	4b39      	ldr	r3, [pc, #228]	; (8008004 <Config_Read_Flash+0x304>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	0a1b      	lsrs	r3, r3, #8
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	4b38      	ldr	r3, [pc, #224]	; (8008008 <Config_Read_Flash+0x308>)
 8007f28:	705a      	strb	r2, [r3, #1]
	Digital_In_Interrupt_PWM_Rising[2]=((*(&DIGITAL_IN_1+5))>>16)&0xFF;
 8007f2a:	4b36      	ldr	r3, [pc, #216]	; (8008004 <Config_Read_Flash+0x304>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	0c1b      	lsrs	r3, r3, #16
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	4b35      	ldr	r3, [pc, #212]	; (8008008 <Config_Read_Flash+0x308>)
 8007f34:	709a      	strb	r2, [r3, #2]
	Digital_In_Interrupt_PWM_Rising[3]=((*(&DIGITAL_IN_1+5))>>24)&0xFF;
 8007f36:	4b33      	ldr	r3, [pc, #204]	; (8008004 <Config_Read_Flash+0x304>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	0e1b      	lsrs	r3, r3, #24
 8007f3c:	e066      	b.n	800800c <Config_Read_Flash+0x30c>
 8007f3e:	bf00      	nop
 8007f40:	0801f8d8 	.word	0x0801f8d8
 8007f44:	200008f4 	.word	0x200008f4
 8007f48:	20000958 	.word	0x20000958
 8007f4c:	0801f8dc 	.word	0x0801f8dc
 8007f50:	20000910 	.word	0x20000910
 8007f54:	20000700 	.word	0x20000700
 8007f58:	0801f8e0 	.word	0x0801f8e0
 8007f5c:	200001fc 	.word	0x200001fc
 8007f60:	200005c8 	.word	0x200005c8
 8007f64:	0801f8e4 	.word	0x0801f8e4
 8007f68:	20000956 	.word	0x20000956
 8007f6c:	20000a4c 	.word	0x20000a4c
 8007f70:	0801f8e8 	.word	0x0801f8e8
 8007f74:	20000572 	.word	0x20000572
 8007f78:	200009be 	.word	0x200009be
 8007f7c:	0801f8ec 	.word	0x0801f8ec
 8007f80:	2000095a 	.word	0x2000095a
 8007f84:	20000560 	.word	0x20000560
 8007f88:	0801f8f0 	.word	0x0801f8f0
 8007f8c:	20000ae8 	.word	0x20000ae8
 8007f90:	20000220 	.word	0x20000220
 8007f94:	0801f8f4 	.word	0x0801f8f4
 8007f98:	200008e0 	.word	0x200008e0
 8007f9c:	20000844 	.word	0x20000844
 8007fa0:	0801f8f8 	.word	0x0801f8f8
 8007fa4:	200000ee 	.word	0x200000ee
 8007fa8:	20000570 	.word	0x20000570
 8007fac:	0801f8fc 	.word	0x0801f8fc
 8007fb0:	20000638 	.word	0x20000638
 8007fb4:	20000222 	.word	0x20000222
 8007fb8:	0801f900 	.word	0x0801f900
 8007fbc:	20000908 	.word	0x20000908
 8007fc0:	2000063a 	.word	0x2000063a
 8007fc4:	0801f904 	.word	0x0801f904
 8007fc8:	200000f2 	.word	0x200000f2
 8007fcc:	20000484 	.word	0x20000484
 8007fd0:	0801f800 	.word	0x0801f800
 8007fd4:	200000f0 	.word	0x200000f0
 8007fd8:	0801f8cc 	.word	0x0801f8cc
 8007fdc:	20000487 	.word	0x20000487
 8007fe0:	0801f804 	.word	0x0801f804
 8007fe4:	20000090 	.word	0x20000090
 8007fe8:	0801f808 	.word	0x0801f808
 8007fec:	2000009c 	.word	0x2000009c
 8007ff0:	0801f80c 	.word	0x0801f80c
 8007ff4:	20000564 	.word	0x20000564
 8007ff8:	0801f810 	.word	0x0801f810
 8007ffc:	2000075c 	.word	0x2000075c
 8008000:	0801f814 	.word	0x0801f814
 8008004:	0801f818 	.word	0x0801f818
 8008008:	20000488 	.word	0x20000488
 800800c:	b2da      	uxtb	r2, r3
 800800e:	4b80      	ldr	r3, [pc, #512]	; (8008210 <Config_Read_Flash+0x510>)
 8008010:	70da      	strb	r2, [r3, #3]
	Digital_In_Interrupt_PWM_Rising[4]=((*(&DIGITAL_IN_1+6))>>0)&0xFF;
 8008012:	4b80      	ldr	r3, [pc, #512]	; (8008214 <Config_Read_Flash+0x514>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	b2da      	uxtb	r2, r3
 8008018:	4b7d      	ldr	r3, [pc, #500]	; (8008210 <Config_Read_Flash+0x510>)
 800801a:	711a      	strb	r2, [r3, #4]
	Digital_In_Interrupt_PWM_Falling[0]=((*(&DIGITAL_IN_1+6))>>8)&0xFF;
 800801c:	4b7d      	ldr	r3, [pc, #500]	; (8008214 <Config_Read_Flash+0x514>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	0a1b      	lsrs	r3, r3, #8
 8008022:	b2da      	uxtb	r2, r3
 8008024:	4b7c      	ldr	r3, [pc, #496]	; (8008218 <Config_Read_Flash+0x518>)
 8008026:	701a      	strb	r2, [r3, #0]
	Digital_In_Interrupt_PWM_Falling[1]=((*(&DIGITAL_IN_1+6))>>16)&0xFF;
 8008028:	4b7a      	ldr	r3, [pc, #488]	; (8008214 <Config_Read_Flash+0x514>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	0c1b      	lsrs	r3, r3, #16
 800802e:	b2da      	uxtb	r2, r3
 8008030:	4b79      	ldr	r3, [pc, #484]	; (8008218 <Config_Read_Flash+0x518>)
 8008032:	705a      	strb	r2, [r3, #1]
	Digital_In_Interrupt_PWM_Falling[2]=((*(&DIGITAL_IN_1+6))>>24)&0xFF;
 8008034:	4b77      	ldr	r3, [pc, #476]	; (8008214 <Config_Read_Flash+0x514>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	0e1b      	lsrs	r3, r3, #24
 800803a:	b2da      	uxtb	r2, r3
 800803c:	4b76      	ldr	r3, [pc, #472]	; (8008218 <Config_Read_Flash+0x518>)
 800803e:	709a      	strb	r2, [r3, #2]
	Digital_In_Interrupt_PWM_Falling[3]=((*(&DIGITAL_IN_1+7))>>0)&0xFF;
 8008040:	4b76      	ldr	r3, [pc, #472]	; (800821c <Config_Read_Flash+0x51c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	b2da      	uxtb	r2, r3
 8008046:	4b74      	ldr	r3, [pc, #464]	; (8008218 <Config_Read_Flash+0x518>)
 8008048:	70da      	strb	r2, [r3, #3]
	Digital_In_Interrupt_PWM_Falling[4]=((*(&DIGITAL_IN_1+7))>>8)&0xFF;
 800804a:	4b74      	ldr	r3, [pc, #464]	; (800821c <Config_Read_Flash+0x51c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	0a1b      	lsrs	r3, r3, #8
 8008050:	b2da      	uxtb	r2, r3
 8008052:	4b71      	ldr	r3, [pc, #452]	; (8008218 <Config_Read_Flash+0x518>)
 8008054:	711a      	strb	r2, [r3, #4]

	Digital_In_Interrupt_Power_Low_Rising[0]=((*(&DIGITAL_IN_1+7))>>16)&0xFF;
 8008056:	4b71      	ldr	r3, [pc, #452]	; (800821c <Config_Read_Flash+0x51c>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	0c1b      	lsrs	r3, r3, #16
 800805c:	b2da      	uxtb	r2, r3
 800805e:	4b70      	ldr	r3, [pc, #448]	; (8008220 <Config_Read_Flash+0x520>)
 8008060:	701a      	strb	r2, [r3, #0]
	Digital_In_Interrupt_Power_Low_Rising[1]=((*(&DIGITAL_IN_1+7))>>24)&0xFF;
 8008062:	4b6e      	ldr	r3, [pc, #440]	; (800821c <Config_Read_Flash+0x51c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	0e1b      	lsrs	r3, r3, #24
 8008068:	b2da      	uxtb	r2, r3
 800806a:	4b6d      	ldr	r3, [pc, #436]	; (8008220 <Config_Read_Flash+0x520>)
 800806c:	705a      	strb	r2, [r3, #1]
	Digital_In_Interrupt_Power_Low_Rising[2]=((*(&DIGITAL_IN_1+8))>>0)&0xFF;
 800806e:	4b6d      	ldr	r3, [pc, #436]	; (8008224 <Config_Read_Flash+0x524>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	b2da      	uxtb	r2, r3
 8008074:	4b6a      	ldr	r3, [pc, #424]	; (8008220 <Config_Read_Flash+0x520>)
 8008076:	709a      	strb	r2, [r3, #2]
	Digital_In_Interrupt_Power_Low_Rising[3]=((*(&DIGITAL_IN_1+8))>>8)&0xFF;
 8008078:	4b6a      	ldr	r3, [pc, #424]	; (8008224 <Config_Read_Flash+0x524>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	0a1b      	lsrs	r3, r3, #8
 800807e:	b2da      	uxtb	r2, r3
 8008080:	4b67      	ldr	r3, [pc, #412]	; (8008220 <Config_Read_Flash+0x520>)
 8008082:	70da      	strb	r2, [r3, #3]
	Digital_In_Interrupt_Power_Low_Rising[4]=((*(&DIGITAL_IN_1+8))>>16)&0xFF;
 8008084:	4b67      	ldr	r3, [pc, #412]	; (8008224 <Config_Read_Flash+0x524>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	0c1b      	lsrs	r3, r3, #16
 800808a:	b2da      	uxtb	r2, r3
 800808c:	4b64      	ldr	r3, [pc, #400]	; (8008220 <Config_Read_Flash+0x520>)
 800808e:	711a      	strb	r2, [r3, #4]
	Digital_In_Interrupt_Power_Low_Falling[0]=((*(&DIGITAL_IN_1+8))>>24)&0xFF;
 8008090:	4b64      	ldr	r3, [pc, #400]	; (8008224 <Config_Read_Flash+0x524>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	0e1b      	lsrs	r3, r3, #24
 8008096:	b2da      	uxtb	r2, r3
 8008098:	4b63      	ldr	r3, [pc, #396]	; (8008228 <Config_Read_Flash+0x528>)
 800809a:	701a      	strb	r2, [r3, #0]
	Digital_In_Interrupt_Power_Low_Falling[1]=((*(&DIGITAL_IN_1+9))>>0)&0xFF;
 800809c:	4b63      	ldr	r3, [pc, #396]	; (800822c <Config_Read_Flash+0x52c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	4b61      	ldr	r3, [pc, #388]	; (8008228 <Config_Read_Flash+0x528>)
 80080a4:	705a      	strb	r2, [r3, #1]
	Digital_In_Interrupt_Power_Low_Falling[2]=((*(&DIGITAL_IN_1+9))>>8)&0xFF;
 80080a6:	4b61      	ldr	r3, [pc, #388]	; (800822c <Config_Read_Flash+0x52c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	0a1b      	lsrs	r3, r3, #8
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	4b5e      	ldr	r3, [pc, #376]	; (8008228 <Config_Read_Flash+0x528>)
 80080b0:	709a      	strb	r2, [r3, #2]
	Digital_In_Interrupt_Power_Low_Falling[3]=((*(&DIGITAL_IN_1+9))>>16)&0xFF;
 80080b2:	4b5e      	ldr	r3, [pc, #376]	; (800822c <Config_Read_Flash+0x52c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	0c1b      	lsrs	r3, r3, #16
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	4b5b      	ldr	r3, [pc, #364]	; (8008228 <Config_Read_Flash+0x528>)
 80080bc:	70da      	strb	r2, [r3, #3]
	Digital_In_Interrupt_Power_Low_Falling[4]=((*(&DIGITAL_IN_1+9))>>24)&0xFF;
 80080be:	4b5b      	ldr	r3, [pc, #364]	; (800822c <Config_Read_Flash+0x52c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	0e1b      	lsrs	r3, r3, #24
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	4b58      	ldr	r3, [pc, #352]	; (8008228 <Config_Read_Flash+0x528>)
 80080c8:	711a      	strb	r2, [r3, #4]

	PWM_Out_EN = ((PWM_EN>>0)&0b00011111);
 80080ca:	4b59      	ldr	r3, [pc, #356]	; (8008230 <Config_Read_Flash+0x530>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	f003 031f 	and.w	r3, r3, #31
 80080d4:	b2da      	uxtb	r2, r3
 80080d6:	4b57      	ldr	r3, [pc, #348]	; (8008234 <Config_Read_Flash+0x534>)
 80080d8:	701a      	strb	r2, [r3, #0]
	PWM_Pulses[0] = ((PWM_0>>0)&0xFFFF);
 80080da:	4b57      	ldr	r3, [pc, #348]	; (8008238 <Config_Read_Flash+0x538>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	b29a      	uxth	r2, r3
 80080e0:	4b56      	ldr	r3, [pc, #344]	; (800823c <Config_Read_Flash+0x53c>)
 80080e2:	801a      	strh	r2, [r3, #0]
	PWM_Prescalers[0] = ((PWM_0>>16)&0xFFFF);
 80080e4:	4b54      	ldr	r3, [pc, #336]	; (8008238 <Config_Read_Flash+0x538>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	0c1b      	lsrs	r3, r3, #16
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	4b54      	ldr	r3, [pc, #336]	; (8008240 <Config_Read_Flash+0x540>)
 80080ee:	801a      	strh	r2, [r3, #0]
	PWM_Pulses[1] = ((PWM_1>>0)&0xFFFF);
 80080f0:	4b54      	ldr	r3, [pc, #336]	; (8008244 <Config_Read_Flash+0x544>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	4b51      	ldr	r3, [pc, #324]	; (800823c <Config_Read_Flash+0x53c>)
 80080f8:	805a      	strh	r2, [r3, #2]
	PWM_Prescalers[1] = ((PWM_1>>16)&0xFFFF);
 80080fa:	4b52      	ldr	r3, [pc, #328]	; (8008244 <Config_Read_Flash+0x544>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	0c1b      	lsrs	r3, r3, #16
 8008100:	b29a      	uxth	r2, r3
 8008102:	4b4f      	ldr	r3, [pc, #316]	; (8008240 <Config_Read_Flash+0x540>)
 8008104:	805a      	strh	r2, [r3, #2]
	PWM_Pulses[2] = ((PWM_2>>0)&0xFFFF);
 8008106:	4b50      	ldr	r3, [pc, #320]	; (8008248 <Config_Read_Flash+0x548>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	b29a      	uxth	r2, r3
 800810c:	4b4b      	ldr	r3, [pc, #300]	; (800823c <Config_Read_Flash+0x53c>)
 800810e:	809a      	strh	r2, [r3, #4]
	PWM_Prescalers[2] = ((PWM_2>>16)&0xFFFF);
 8008110:	4b4d      	ldr	r3, [pc, #308]	; (8008248 <Config_Read_Flash+0x548>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	0c1b      	lsrs	r3, r3, #16
 8008116:	b29a      	uxth	r2, r3
 8008118:	4b49      	ldr	r3, [pc, #292]	; (8008240 <Config_Read_Flash+0x540>)
 800811a:	809a      	strh	r2, [r3, #4]
	PWM_Pulses[3] = ((PWM_3>>0)&0xFFFF);
 800811c:	4b4b      	ldr	r3, [pc, #300]	; (800824c <Config_Read_Flash+0x54c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	b29a      	uxth	r2, r3
 8008122:	4b46      	ldr	r3, [pc, #280]	; (800823c <Config_Read_Flash+0x53c>)
 8008124:	80da      	strh	r2, [r3, #6]
	PWM_Prescalers[3] = ((PWM_3>>16)&0xFFFF);
 8008126:	4b49      	ldr	r3, [pc, #292]	; (800824c <Config_Read_Flash+0x54c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	0c1b      	lsrs	r3, r3, #16
 800812c:	b29a      	uxth	r2, r3
 800812e:	4b44      	ldr	r3, [pc, #272]	; (8008240 <Config_Read_Flash+0x540>)
 8008130:	80da      	strh	r2, [r3, #6]
	PWM_Pulses[4] = ((PWM_4>>0)&0xFFFF);
 8008132:	4b47      	ldr	r3, [pc, #284]	; (8008250 <Config_Read_Flash+0x550>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	b29a      	uxth	r2, r3
 8008138:	4b40      	ldr	r3, [pc, #256]	; (800823c <Config_Read_Flash+0x53c>)
 800813a:	811a      	strh	r2, [r3, #8]
	PWM_Prescalers[4] = ((PWM_4>>16)&0xFFFF);
 800813c:	4b44      	ldr	r3, [pc, #272]	; (8008250 <Config_Read_Flash+0x550>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	0c1b      	lsrs	r3, r3, #16
 8008142:	b29a      	uxth	r2, r3
 8008144:	4b3e      	ldr	r3, [pc, #248]	; (8008240 <Config_Read_Flash+0x540>)
 8008146:	811a      	strh	r2, [r3, #8]

	PWM_In_EN = ((PWM_EN>>8)&0b00011001); //ignore PB4 and PB5
 8008148:	4b39      	ldr	r3, [pc, #228]	; (8008230 <Config_Read_Flash+0x530>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	0a1b      	lsrs	r3, r3, #8
 800814e:	b2db      	uxtb	r3, r3
 8008150:	f003 0319 	and.w	r3, r3, #25
 8008154:	b2da      	uxtb	r2, r3
 8008156:	4b3f      	ldr	r3, [pc, #252]	; (8008254 <Config_Read_Flash+0x554>)
 8008158:	701a      	strb	r2, [r3, #0]

	uint32_t CanId[8] = {CAN_ID_0, CAN_ID_1, CAN_ID_2, CAN_ID_3, CAN_ID_4, CAN_ID_5, CAN_ID_6, CAN_ID_7};
 800815a:	4b3f      	ldr	r3, [pc, #252]	; (8008258 <Config_Read_Flash+0x558>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	607b      	str	r3, [r7, #4]
 8008160:	4b3e      	ldr	r3, [pc, #248]	; (800825c <Config_Read_Flash+0x55c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60bb      	str	r3, [r7, #8]
 8008166:	4b3e      	ldr	r3, [pc, #248]	; (8008260 <Config_Read_Flash+0x560>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	4b3d      	ldr	r3, [pc, #244]	; (8008264 <Config_Read_Flash+0x564>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	613b      	str	r3, [r7, #16]
 8008172:	4b3d      	ldr	r3, [pc, #244]	; (8008268 <Config_Read_Flash+0x568>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	617b      	str	r3, [r7, #20]
 8008178:	4b3c      	ldr	r3, [pc, #240]	; (800826c <Config_Read_Flash+0x56c>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	61bb      	str	r3, [r7, #24]
 800817e:	4b3c      	ldr	r3, [pc, #240]	; (8008270 <Config_Read_Flash+0x570>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	61fb      	str	r3, [r7, #28]
 8008184:	4b3b      	ldr	r3, [pc, #236]	; (8008274 <Config_Read_Flash+0x574>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	623b      	str	r3, [r7, #32]
	for(uint32_t i=0; i<8; i++)
 800818a:	2300      	movs	r3, #0
 800818c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800818e:	e01c      	b.n	80081ca <Config_Read_Flash+0x4ca>
	{
		Can_IDs[i]=((CanId[i]>>0)&0xFFFF);
 8008190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008198:	4413      	add	r3, r2
 800819a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800819e:	b299      	uxth	r1, r3
 80081a0:	4a35      	ldr	r2, [pc, #212]	; (8008278 <Config_Read_Flash+0x578>)
 80081a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Can_DLCs[i]=((CanId[i]>>16)&0xFF);
 80081a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80081b0:	4413      	add	r3, r2
 80081b2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80081b6:	0c1b      	lsrs	r3, r3, #16
 80081b8:	b2d9      	uxtb	r1, r3
 80081ba:	4a30      	ldr	r2, [pc, #192]	; (800827c <Config_Read_Flash+0x57c>)
 80081bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081be:	4413      	add	r3, r2
 80081c0:	460a      	mov	r2, r1
 80081c2:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 80081c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c6:	3301      	adds	r3, #1
 80081c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081cc:	2b07      	cmp	r3, #7
 80081ce:	d9df      	bls.n	8008190 <Config_Read_Flash+0x490>
	}

	for(uint32_t i=0; i<8; i++)
 80081d0:	2300      	movs	r3, #0
 80081d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80081d4:	e099      	b.n	800830a <Config_Read_Flash+0x60a>
	{
		uint32_t temp_can_bytes_0=*(&CAN_BYTES_1ST+i*2);
 80081d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d8:	00da      	lsls	r2, r3, #3
 80081da:	4b29      	ldr	r3, [pc, #164]	; (8008280 <Config_Read_Flash+0x580>)
 80081dc:	4413      	add	r3, r2
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t temp_can_bytes_1=*(&CAN_BYTES_1ST+i*2+1);
 80081e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	1d1a      	adds	r2, r3, #4
 80081e8:	4b25      	ldr	r3, [pc, #148]	; (8008280 <Config_Read_Flash+0x580>)
 80081ea:	4413      	add	r3, r2
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t temp_can_datas_0=*(&CAN_DATAS_1ST+i*2);
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	00da      	lsls	r2, r3, #3
 80081f4:	4b23      	ldr	r3, [pc, #140]	; (8008284 <Config_Read_Flash+0x584>)
 80081f6:	4413      	add	r3, r2
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t temp_can_datas_1=*(&CAN_DATAS_1ST+i*2+1);
 80081fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	1d1a      	adds	r2, r3, #4
 8008202:	4b20      	ldr	r3, [pc, #128]	; (8008284 <Config_Read_Flash+0x584>)
 8008204:	4413      	add	r3, r2
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	627b      	str	r3, [r7, #36]	; 0x24
		for(uint32_t j=0; j<4; j++)
 800820a:	2300      	movs	r3, #0
 800820c:	637b      	str	r3, [r7, #52]	; 0x34
 800820e:	e076      	b.n	80082fe <Config_Read_Flash+0x5fe>
 8008210:	20000488 	.word	0x20000488
 8008214:	0801f81c 	.word	0x0801f81c
 8008218:	200000e8 	.word	0x200000e8
 800821c:	0801f820 	.word	0x0801f820
 8008220:	20000494 	.word	0x20000494
 8008224:	0801f824 	.word	0x0801f824
 8008228:	200008e4 	.word	0x200008e4
 800822c:	0801f828 	.word	0x0801f828
 8008230:	0801f924 	.word	0x0801f924
 8008234:	200009bc 	.word	0x200009bc
 8008238:	0801f910 	.word	0x0801f910
 800823c:	200007f8 	.word	0x200007f8
 8008240:	20000578 	.word	0x20000578
 8008244:	0801f914 	.word	0x0801f914
 8008248:	0801f918 	.word	0x0801f918
 800824c:	0801f91c 	.word	0x0801f91c
 8008250:	0801f920 	.word	0x0801f920
 8008254:	20000486 	.word	0x20000486
 8008258:	0801f82c 	.word	0x0801f82c
 800825c:	0801f830 	.word	0x0801f830
 8008260:	0801f834 	.word	0x0801f834
 8008264:	0801f838 	.word	0x0801f838
 8008268:	0801f83c 	.word	0x0801f83c
 800826c:	0801f840 	.word	0x0801f840
 8008270:	0801f844 	.word	0x0801f844
 8008274:	0801f848 	.word	0x0801f848
 8008278:	2000084c 	.word	0x2000084c
 800827c:	200008f8 	.word	0x200008f8
 8008280:	0801f84c 	.word	0x0801f84c
 8008284:	0801f88c 	.word	0x0801f88c
		{
			Can_Config_Bytes[i][j]=(temp_can_bytes_0>>(8*j)) & 0xFF;
 8008288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800828e:	fa22 f303 	lsr.w	r3, r2, r3
 8008292:	b2d9      	uxtb	r1, r3
 8008294:	4a3c      	ldr	r2, [pc, #240]	; (8008388 <Config_Read_Flash+0x688>)
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	441a      	add	r2, r3
 800829c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829e:	4413      	add	r3, r2
 80082a0:	460a      	mov	r2, r1
 80082a2:	701a      	strb	r2, [r3, #0]
			Can_Config_Bytes[i][j+4]=(temp_can_bytes_1>>(8*j)) & 0xFF;
 80082a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082aa:	40da      	lsrs	r2, r3
 80082ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ae:	3304      	adds	r3, #4
 80082b0:	b2d0      	uxtb	r0, r2
 80082b2:	4935      	ldr	r1, [pc, #212]	; (8008388 <Config_Read_Flash+0x688>)
 80082b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082b6:	00d2      	lsls	r2, r2, #3
 80082b8:	440a      	add	r2, r1
 80082ba:	4413      	add	r3, r2
 80082bc:	4602      	mov	r2, r0
 80082be:	701a      	strb	r2, [r3, #0]
			Can_Config_Datas[i][j]=(temp_can_datas_0>>(8*j)) & 0xFF;
 80082c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082c6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ca:	b2d9      	uxtb	r1, r3
 80082cc:	4a2f      	ldr	r2, [pc, #188]	; (800838c <Config_Read_Flash+0x68c>)
 80082ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d0:	00db      	lsls	r3, r3, #3
 80082d2:	441a      	add	r2, r3
 80082d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d6:	4413      	add	r3, r2
 80082d8:	460a      	mov	r2, r1
 80082da:	701a      	strb	r2, [r3, #0]
			Can_Config_Datas[i][j+4]=(temp_can_datas_1>>(8*j)) & 0xFF;
 80082dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e2:	40da      	lsrs	r2, r3
 80082e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e6:	3304      	adds	r3, #4
 80082e8:	b2d0      	uxtb	r0, r2
 80082ea:	4928      	ldr	r1, [pc, #160]	; (800838c <Config_Read_Flash+0x68c>)
 80082ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082ee:	00d2      	lsls	r2, r2, #3
 80082f0:	440a      	add	r2, r1
 80082f2:	4413      	add	r3, r2
 80082f4:	4602      	mov	r2, r0
 80082f6:	701a      	strb	r2, [r3, #0]
		for(uint32_t j=0; j<4; j++)
 80082f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fa:	3301      	adds	r3, #1
 80082fc:	637b      	str	r3, [r7, #52]	; 0x34
 80082fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008300:	2b03      	cmp	r3, #3
 8008302:	d9c1      	bls.n	8008288 <Config_Read_Flash+0x588>
	for(uint32_t i=0; i<8; i++)
 8008304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008306:	3301      	adds	r3, #1
 8008308:	63bb      	str	r3, [r7, #56]	; 0x38
 800830a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830c:	2b07      	cmp	r3, #7
 800830e:	f67f af62 	bls.w	80081d6 <Config_Read_Flash+0x4d6>
		}
	}
	Can_Sync_Enable=(CAN_SEND_EN>>0)&0b11111111;
 8008312:	4b1f      	ldr	r3, [pc, #124]	; (8008390 <Config_Read_Flash+0x690>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	b2da      	uxtb	r2, r3
 8008318:	4b1e      	ldr	r3, [pc, #120]	; (8008394 <Config_Read_Flash+0x694>)
 800831a:	701a      	strb	r2, [r3, #0]
	Can_Timed_Enable=(CAN_SEND_EN>>8)&0b11111111;
 800831c:	4b1c      	ldr	r3, [pc, #112]	; (8008390 <Config_Read_Flash+0x690>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	0a1b      	lsrs	r3, r3, #8
 8008322:	b2da      	uxtb	r2, r3
 8008324:	4b1c      	ldr	r3, [pc, #112]	; (8008398 <Config_Read_Flash+0x698>)
 8008326:	701a      	strb	r2, [r3, #0]
	Can_Interval=(CAN_SEND_EN>>16)&0xFFFF;
 8008328:	4b19      	ldr	r3, [pc, #100]	; (8008390 <Config_Read_Flash+0x690>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	0c1b      	lsrs	r3, r3, #16
 800832e:	b29a      	uxth	r2, r3
 8008330:	4b1a      	ldr	r3, [pc, #104]	; (800839c <Config_Read_Flash+0x69c>)
 8008332:	801a      	strh	r2, [r3, #0]
	Can_Sync_Delay=(CAN_SYNC_DELAY>>16)*0xFFFF;
 8008334:	4b1a      	ldr	r3, [pc, #104]	; (80083a0 <Config_Read_Flash+0x6a0>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	0c1b      	lsrs	r3, r3, #16
 800833a:	b29b      	uxth	r3, r3
 800833c:	425b      	negs	r3, r3
 800833e:	b29a      	uxth	r2, r3
 8008340:	4b18      	ldr	r3, [pc, #96]	; (80083a4 <Config_Read_Flash+0x6a4>)
 8008342:	801a      	strh	r2, [r3, #0]

	sample_temperature = (TV_BURST>>0)&0xFF;
 8008344:	4b18      	ldr	r3, [pc, #96]	; (80083a8 <Config_Read_Flash+0x6a8>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	b2db      	uxtb	r3, r3
 800834a:	4a18      	ldr	r2, [pc, #96]	; (80083ac <Config_Read_Flash+0x6ac>)
 800834c:	6013      	str	r3, [r2, #0]
	sample_voltage = (TV_BURST>>8)&0xFF;
 800834e:	4b16      	ldr	r3, [pc, #88]	; (80083a8 <Config_Read_Flash+0x6a8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	0a1b      	lsrs	r3, r3, #8
 8008354:	b2db      	uxtb	r3, r3
 8008356:	4a16      	ldr	r2, [pc, #88]	; (80083b0 <Config_Read_Flash+0x6b0>)
 8008358:	6013      	str	r3, [r2, #0]
	SampleTemperatureBurst = (TV_BURST>>16)&0xFF;
 800835a:	4b13      	ldr	r3, [pc, #76]	; (80083a8 <Config_Read_Flash+0x6a8>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	0c1b      	lsrs	r3, r3, #16
 8008360:	b2da      	uxtb	r2, r3
 8008362:	4b14      	ldr	r3, [pc, #80]	; (80083b4 <Config_Read_Flash+0x6b4>)
 8008364:	701a      	strb	r2, [r3, #0]
	SampleVoltageBurst = (TV_BURST>>24)&0xFF;
 8008366:	4b10      	ldr	r3, [pc, #64]	; (80083a8 <Config_Read_Flash+0x6a8>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	0e1b      	lsrs	r3, r3, #24
 800836c:	b2da      	uxtb	r2, r3
 800836e:	4b12      	ldr	r3, [pc, #72]	; (80083b8 <Config_Read_Flash+0x6b8>)
 8008370:	701a      	strb	r2, [r3, #0]
	SampleTemperatureVoltagePeriod= (TV_BURST_TIMING>>0)&0xFFFF;
 8008372:	4b12      	ldr	r3, [pc, #72]	; (80083bc <Config_Read_Flash+0x6bc>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	b29a      	uxth	r2, r3
 8008378:	4b11      	ldr	r3, [pc, #68]	; (80083c0 <Config_Read_Flash+0x6c0>)
 800837a:	801a      	strh	r2, [r3, #0]
}
 800837c:	bf00      	nop
 800837e:	3744      	adds	r7, #68	; 0x44
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	200002d0 	.word	0x200002d0
 800838c:	20000178 	.word	0x20000178
 8008390:	0801f8d0 	.word	0x0801f8d0
 8008394:	200004dc 	.word	0x200004dc
 8008398:	200000f1 	.word	0x200000f1
 800839c:	200000f4 	.word	0x200000f4
 80083a0:	0801f8d4 	.word	0x0801f8d4
 80083a4:	2000041c 	.word	0x2000041c
 80083a8:	0801f908 	.word	0x0801f908
 80083ac:	20000490 	.word	0x20000490
 80083b0:	20000098 	.word	0x20000098
 80083b4:	200008e9 	.word	0x200008e9
 80083b8:	200001b9 	.word	0x200001b9
 80083bc:	0801f90c 	.word	0x0801f90c
 80083c0:	20000954 	.word	0x20000954

080083c4 <Flash_Write>:


void Flash_Write(uint32_t Flash_Address, uint32_t Page, uint32_t Flash_Data[512], int Data_Words)
{
 80083c4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80083c8:	b08c      	sub	sp, #48	; 0x30
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	607a      	str	r2, [r7, #4]
 80083d2:	603b      	str	r3, [r7, #0]
	FLASH_EraseInitTypeDef pEraseInit;
	uint32_t pError = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	613b      	str	r3, [r7, #16]

	pEraseInit.Page = Page;
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	61fb      	str	r3, [r7, #28]
	pEraseInit.NbPages = 1;
 80083dc:	2301      	movs	r3, #1
 80083de:	623b      	str	r3, [r7, #32]
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80083e0:	2300      	movs	r3, #0
 80083e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80083e4:	b672      	cpsid	i

	__disable_irq();
	if(HAL_FLASH_Unlock() != HAL_OK)
 80083e6:	f7fa fe9b 	bl	8003120 <HAL_FLASH_Unlock>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d002      	beq.n	80083f6 <Flash_Write+0x32>
  __ASM volatile ("cpsie i" : : : "memory");
 80083f0:	b662      	cpsie	i
	{
		__enable_irq();
		Error_Handler();
 80083f2:	f002 fe67 	bl	800b0c4 <Error_Handler>
	}

	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0) { }
 80083f6:	bf00      	nop
 80083f8:	4b3c      	ldr	r3, [pc, #240]	; (80084ec <Flash_Write+0x128>)
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008404:	d0f8      	beq.n	80083f8 <Flash_Write+0x34>

	if(HAL_FLASHEx_Erase(&pEraseInit, &pError) != HAL_OK)
 8008406:	f107 0210 	add.w	r2, r7, #16
 800840a:	f107 0314 	add.w	r3, r7, #20
 800840e:	4611      	mov	r1, r2
 8008410:	4618      	mov	r0, r3
 8008412:	f7fa ff6d 	bl	80032f0 <HAL_FLASHEx_Erase>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d009      	beq.n	8008430 <Flash_Write+0x6c>
 800841c:	b662      	cpsie	i
	{
		__enable_irq();
		while(1)
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 800841e:	2108      	movs	r1, #8
 8008420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008424:	f7fb fa3a 	bl	800389c <HAL_GPIO_TogglePin>
			HAL_Delay(33);
 8008428:	2021      	movs	r0, #33	; 0x21
 800842a:	f7f7 ff65 	bl	80002f8 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 800842e:	e7f6      	b.n	800841e <Flash_Write+0x5a>
		}
	}

	uint64_t data;
	for(int i=0; i<((Data_Words+1)/2); i++) //here we want integer division that rounds up instead of down
 8008430:	2300      	movs	r3, #0
 8008432:	627b      	str	r3, [r7, #36]	; 0x24
 8008434:	e042      	b.n	80084bc <Flash_Write+0xf8>
	{
		data=(uint64_t)Flash_Data[i*2];
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	00db      	lsls	r3, r3, #3
 800843a:	461a      	mov	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4413      	add	r3, r2
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f04f 0400 	mov.w	r4, #0
 8008446:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		if((i*2)+1<Data_Words)
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	3301      	adds	r3, #1
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	dd17      	ble.n	8008486 <Flash_Write+0xc2>
		{
			data+=((uint64_t)Flash_Data[i*2+1]<<32);
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	00db      	lsls	r3, r3, #3
 800845a:	3304      	adds	r3, #4
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	4413      	add	r3, r2
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4619      	mov	r1, r3
 8008464:	f04f 0200 	mov.w	r2, #0
 8008468:	f04f 0b00 	mov.w	fp, #0
 800846c:	f04f 0c00 	mov.w	ip, #0
 8008470:	468c      	mov	ip, r1
 8008472:	f04f 0b00 	mov.w	fp, #0
 8008476:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800847a:	eb1b 0301 	adds.w	r3, fp, r1
 800847e:	eb4c 0402 	adc.w	r4, ip, r2
 8008482:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		}

			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Flash_Address+i*0x08, data) != HAL_OK)
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	00db      	lsls	r3, r3, #3
 800848a:	461a      	mov	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	18d1      	adds	r1, r2, r3
 8008490:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008494:	2000      	movs	r0, #0
 8008496:	f7fa fded 	bl	8003074 <HAL_FLASH_Program>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <Flash_Write+0xe2>
 80084a0:	b662      	cpsie	i
			{
				__enable_irq();
				Error_Handler();
 80084a2:	f002 fe0f 	bl	800b0c4 <Error_Handler>
			}
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0) { }
 80084a6:	bf00      	nop
 80084a8:	4b10      	ldr	r3, [pc, #64]	; (80084ec <Flash_Write+0x128>)
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084b4:	d0f8      	beq.n	80084a8 <Flash_Write+0xe4>
	for(int i=0; i<((Data_Words+1)/2); i++) //here we want integer division that rounds up instead of down
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	3301      	adds	r3, #1
 80084ba:	627b      	str	r3, [r7, #36]	; 0x24
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	3301      	adds	r3, #1
 80084c0:	0fda      	lsrs	r2, r3, #31
 80084c2:	4413      	add	r3, r2
 80084c4:	105b      	asrs	r3, r3, #1
 80084c6:	461a      	mov	r2, r3
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	4293      	cmp	r3, r2
 80084cc:	dbb3      	blt.n	8008436 <Flash_Write+0x72>
	}

	if(HAL_FLASH_Lock() != HAL_OK)
 80084ce:	f7fa fe49 	bl	8003164 <HAL_FLASH_Lock>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <Flash_Write+0x11a>
 80084d8:	b662      	cpsie	i
	{
		__enable_irq();
		Error_Handler();
 80084da:	f002 fdf3 	bl	800b0c4 <Error_Handler>
 80084de:	b662      	cpsie	i
	}
	__enable_irq();
}
 80084e0:	bf00      	nop
 80084e2:	3730      	adds	r7, #48	; 0x30
 80084e4:	46bd      	mov	sp, r7
 80084e6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80084ea:	bf00      	nop
 80084ec:	40022000 	.word	0x40022000

080084f0 <Flash_Read>:

uint32_t Flash_Read(uint32_t Flash_Address)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
	return *(uint32_t*)Flash_Address;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <main>:
uint32_t GPIO_Interrupt_Read_Pos;
uint32_t GPIO_Timer_Ready = 1;


int main(void)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
	HAL_Init();
 800850e:	f7f7 fe83 	bl	8000218 <HAL_Init>

	SystemClock_Config();
 8008512:	f001 fd5d 	bl	8009fd0 <SystemClock_Config>

	Config_Setup();
 8008516:	f7fe fe4f 	bl	80071b8 <Config_Setup>

	MX_GPIO_Init();
 800851a:	f001 ffc3 	bl	800a4a4 <MX_GPIO_Init>
	MX_DMA_Init();
 800851e:	f001 ff8f 	bl	800a440 <MX_DMA_Init>
	MX_ADC1_Init();
 8008522:	f001 fdbb 	bl	800a09c <MX_ADC1_Init>
	MX_ADC2_Init();
 8008526:	f001 fe5f 	bl	800a1e8 <MX_ADC2_Init>
	MX_FDCAN_Init();
 800852a:	f001 fedd 	bl	800a2e8 <MX_FDCAN_Init>

	MX_TIM1_Init(); //""  ""
 800852e:	f002 f95b 	bl	800a7e8 <MX_TIM1_Init>
	MX_TIM6_Init(); //initialize unnecessary timers to avoid error handler being called when configuration is changed
 8008532:	f002 f97b 	bl	800a82c <MX_TIM6_Init>
	MX_TIM7_Init();
 8008536:	f002 f99d 	bl	800a874 <MX_TIM7_Init>
	MX_TIM15_Init();
 800853a:	f002 f9bd 	bl	800a8b8 <MX_TIM15_Init>
	MX_TIM16_Init(); //""  ""
 800853e:	f002 f9d9 	bl	800a8f4 <MX_TIM16_Init>

	MX_TIM17_Init();
 8008542:	f002 f9ff 	bl	800a944 <MX_TIM17_Init>
	MX_TIM3_Init();
 8008546:	f002 fb4b 	bl	800abe0 <MX_TIM3_Init>

	MX_TIM2_Init();
 800854a:	f002 fa69 	bl	800aa20 <MX_TIM2_Init>
	MX_TIM4_Init();
 800854e:	f002 fba3 	bl	800ac98 <MX_TIM4_Init>
	MX_TIM8_Init();
 8008552:	f002 fc81 	bl	800ae58 <MX_TIM8_Init>

	MX_LPTIM1_Init();
 8008556:	f002 fd87 	bl	800b068 <MX_LPTIM1_Init>

	//start everything that can generate interrupts after initialization is done
	HAL_TIM_Base_Start_IT(&htim1); //TODO: if regularly read voltage/temperature enabled
 800855a:	484d      	ldr	r0, [pc, #308]	; (8008690 <main+0x188>)
 800855c:	f7fc fc3c 	bl	8004dd8 <HAL_TIM_Base_Start_IT>
	if (Can_Timed_Enable) { HAL_TIM_Base_Start_IT(&htim6); }
 8008560:	4b4c      	ldr	r3, [pc, #304]	; (8008694 <main+0x18c>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <main+0x66>
 8008568:	484b      	ldr	r0, [pc, #300]	; (8008698 <main+0x190>)
 800856a:	f7fc fc35 	bl	8004dd8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800856e:	484b      	ldr	r0, [pc, #300]	; (800869c <main+0x194>)
 8008570:	f7fc fc32 	bl	8004dd8 <HAL_TIM_Base_Start_IT>

	//start pwm input channels if they are enabled
	if ((PWM_In_EN>>0)&1) { HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); }
 8008574:	4b4a      	ldr	r3, [pc, #296]	; (80086a0 <main+0x198>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b00      	cmp	r3, #0
 800857e:	d007      	beq.n	8008590 <main+0x88>
 8008580:	2100      	movs	r1, #0
 8008582:	4848      	ldr	r0, [pc, #288]	; (80086a4 <main+0x19c>)
 8008584:	f7fc fca8 	bl	8004ed8 <HAL_TIM_PWM_Start>
 8008588:	2104      	movs	r1, #4
 800858a:	4846      	ldr	r0, [pc, #280]	; (80086a4 <main+0x19c>)
 800858c:	f7fc fca4 	bl	8004ed8 <HAL_TIM_PWM_Start>
	if ((PWM_In_EN>>3)&1) { HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); }
 8008590:	4b43      	ldr	r3, [pc, #268]	; (80086a0 <main+0x198>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	08db      	lsrs	r3, r3, #3
 8008596:	b2db      	uxtb	r3, r3
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	2b00      	cmp	r3, #0
 800859e:	d007      	beq.n	80085b0 <main+0xa8>
 80085a0:	2104      	movs	r1, #4
 80085a2:	4841      	ldr	r0, [pc, #260]	; (80086a8 <main+0x1a0>)
 80085a4:	f7fc fc98 	bl	8004ed8 <HAL_TIM_PWM_Start>
 80085a8:	2100      	movs	r1, #0
 80085aa:	483f      	ldr	r0, [pc, #252]	; (80086a8 <main+0x1a0>)
 80085ac:	f7fc fc94 	bl	8004ed8 <HAL_TIM_PWM_Start>
	if ((PWM_In_EN>>4)&1) { HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2); HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); }
 80085b0:	4b3b      	ldr	r3, [pc, #236]	; (80086a0 <main+0x198>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	091b      	lsrs	r3, r3, #4
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d007      	beq.n	80085d0 <main+0xc8>
 80085c0:	2104      	movs	r1, #4
 80085c2:	483a      	ldr	r0, [pc, #232]	; (80086ac <main+0x1a4>)
 80085c4:	f7fc fc88 	bl	8004ed8 <HAL_TIM_PWM_Start>
 80085c8:	2100      	movs	r1, #0
 80085ca:	4838      	ldr	r0, [pc, #224]	; (80086ac <main+0x1a4>)
 80085cc:	f7fc fc84 	bl	8004ed8 <HAL_TIM_PWM_Start>

	//this timer starts the adc, so start it last
	HAL_TIM_Base_Start_IT(&htim15);
 80085d0:	4837      	ldr	r0, [pc, #220]	; (80086b0 <main+0x1a8>)
 80085d2:	f7fc fc01 	bl	8004dd8 <HAL_TIM_Base_Start_IT>

	while(1)
	{
		if(canErrorToTransmit && canSendErrorFlag)
 80085d6:	4b37      	ldr	r3, [pc, #220]	; (80086b4 <main+0x1ac>)
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00c      	beq.n	80085f8 <main+0xf0>
 80085de:	4b36      	ldr	r3, [pc, #216]	; (80086b8 <main+0x1b0>)
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d008      	beq.n	80085f8 <main+0xf0>
		{
			Send_Error();
 80085e6:	f001 fb9d 	bl	8009d24 <Send_Error>
			if(!canErrorToTransmit)
 80085ea:	4b32      	ldr	r3, [pc, #200]	; (80086b4 <main+0x1ac>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d102      	bne.n	80085f8 <main+0xf0>
			{
				canSendErrorFlag=0;
 80085f2:	4b31      	ldr	r3, [pc, #196]	; (80086b8 <main+0x1b0>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	701a      	strb	r2, [r3, #0]
			}
		}

		if(CanTimerFlag)
 80085f8:	4b30      	ldr	r3, [pc, #192]	; (80086bc <main+0x1b4>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d01a      	beq.n	8008636 <main+0x12e>
		{
			for(uint32_t i=0; i<8; i++)
 8008600:	2300      	movs	r3, #0
 8008602:	607b      	str	r3, [r7, #4]
 8008604:	e011      	b.n	800862a <main+0x122>
			{
				if ((Can_Timed_Enable>>i)&0b1)
 8008606:	4b23      	ldr	r3, [pc, #140]	; (8008694 <main+0x18c>)
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	fa42 f303 	asr.w	r3, r2, r3
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d004      	beq.n	8008624 <main+0x11c>
				{
					Buffer_Can_Message(i);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	4618      	mov	r0, r3
 8008620:	f7fe faa0 	bl	8006b64 <Buffer_Can_Message>
			for(uint32_t i=0; i<8; i++)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3301      	adds	r3, #1
 8008628:	607b      	str	r3, [r7, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b07      	cmp	r3, #7
 800862e:	d9ea      	bls.n	8008606 <main+0xfe>
				}
			}
			CanTimerFlag=0;
 8008630:	4b22      	ldr	r3, [pc, #136]	; (80086bc <main+0x1b4>)
 8008632:	2200      	movs	r2, #0
 8008634:	701a      	strb	r2, [r3, #0]
		}

		if (CanMessagesToSend)
 8008636:	4b22      	ldr	r3, [pc, #136]	; (80086c0 <main+0x1b8>)
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d0cb      	beq.n	80085d6 <main+0xce>
		{
			//only put one thing to the fifo at a time so that sync message can be put to the front of the fifo
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) > 2)
 800863e:	4821      	ldr	r0, [pc, #132]	; (80086c4 <main+0x1bc>)
 8008640:	f7fa f9ac 	bl	800299c <HAL_FDCAN_GetTxFifoFreeLevel>
 8008644:	4603      	mov	r3, r0
 8008646:	2b02      	cmp	r3, #2
 8008648:	d9c5      	bls.n	80085d6 <main+0xce>
			{
				Can_Send(CanBuffer[CanBufferReadPos]);
 800864a:	4b1f      	ldr	r3, [pc, #124]	; (80086c8 <main+0x1c0>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	4b1e      	ldr	r3, [pc, #120]	; (80086cc <main+0x1c4>)
 8008652:	5c9b      	ldrb	r3, [r3, r2]
 8008654:	4618      	mov	r0, r3
 8008656:	f000 ff83 	bl	8009560 <Can_Send>

				CanBuffer[CanBufferReadPos]=255;
 800865a:	4b1b      	ldr	r3, [pc, #108]	; (80086c8 <main+0x1c0>)
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	4b1a      	ldr	r3, [pc, #104]	; (80086cc <main+0x1c4>)
 8008662:	21ff      	movs	r1, #255	; 0xff
 8008664:	5499      	strb	r1, [r3, r2]
				CanMessagesToSend--;
 8008666:	4b16      	ldr	r3, [pc, #88]	; (80086c0 <main+0x1b8>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	3b01      	subs	r3, #1
 800866c:	b2da      	uxtb	r2, r3
 800866e:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <main+0x1b8>)
 8008670:	701a      	strb	r2, [r3, #0]
				if(CanBufferReadPos>=30)
 8008672:	4b15      	ldr	r3, [pc, #84]	; (80086c8 <main+0x1c0>)
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	2b1d      	cmp	r3, #29
 8008678:	d903      	bls.n	8008682 <main+0x17a>
				{
					CanBufferReadPos=0;
 800867a:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <main+0x1c0>)
 800867c:	2200      	movs	r2, #0
 800867e:	701a      	strb	r2, [r3, #0]
 8008680:	e7a9      	b.n	80085d6 <main+0xce>
				}
				else
				{
					CanBufferReadPos++;
 8008682:	4b11      	ldr	r3, [pc, #68]	; (80086c8 <main+0x1c0>)
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	3301      	adds	r3, #1
 8008688:	b2da      	uxtb	r2, r3
 800868a:	4b0f      	ldr	r3, [pc, #60]	; (80086c8 <main+0x1c0>)
 800868c:	701a      	strb	r2, [r3, #0]
		if(canErrorToTransmit && canSendErrorFlag)
 800868e:	e7a2      	b.n	80085d6 <main+0xce>
 8008690:	20000804 	.word	0x20000804
 8008694:	200000f1 	.word	0x200000f1
 8008698:	200007b8 	.word	0x200007b8
 800869c:	20000a90 	.word	0x20000a90
 80086a0:	20000486 	.word	0x20000486
 80086a4:	20000914 	.word	0x20000914
 80086a8:	200001bc 	.word	0x200001bc
 80086ac:	20000138 	.word	0x20000138
 80086b0:	20000310 	.word	0x20000310
 80086b4:	20000574 	.word	0x20000574
 80086b8:	200009c0 	.word	0x200009c0
 80086bc:	20000750 	.word	0x20000750
 80086c0:	2000068c 	.word	0x2000068c
 80086c4:	20000420 	.word	0x20000420
 80086c8:	20000846 	.word	0x20000846
 80086cc:	20000040 	.word	0x20000040

080086d0 <HAL_TIM_PeriodElapsedCallback>:
	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM15)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a2b      	ldr	r2, [pc, #172]	; (800878c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d10d      	bne.n	80086fe <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		HAL_TIM_Base_Stop_IT(&htim15);
 80086e2:	482b      	ldr	r0, [pc, #172]	; (8008790 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80086e4:	f7fc fba2 	bl	8004e2c <HAL_TIM_Base_Stop_IT>
	    if (HAL_ADCEx_MultiModeStart_DMA(&hadc1, ADCDualConvertedValues, 3) != HAL_OK)
 80086e8:	2203      	movs	r2, #3
 80086ea:	492a      	ldr	r1, [pc, #168]	; (8008794 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80086ec:	482a      	ldr	r0, [pc, #168]	; (8008798 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80086ee:	f7f9 f821 	bl	8001734 <HAL_ADCEx_MultiModeStart_DMA>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d045      	beq.n	8008784 <HAL_TIM_PeriodElapsedCallback+0xb4>
	    {
	    	Error_Handler();
 80086f8:	f002 fce4 	bl	800b0c4 <Error_Handler>
	}
	else
	{
		Error_Handler();
	}
}
 80086fc:	e042      	b.n	8008784 <HAL_TIM_PeriodElapsedCallback+0xb4>
	else if (htim->Instance == TIM16)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a26      	ldr	r2, [pc, #152]	; (800879c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d105      	bne.n	8008714 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_TIM_Base_Stop_IT(&htim16);
 8008708:	4825      	ldr	r0, [pc, #148]	; (80087a0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800870a:	f7fc fb8f 	bl	8004e2c <HAL_TIM_Base_Stop_IT>
		Can_Sync();
 800870e:	f000 ffb1 	bl	8009674 <Can_Sync>
}
 8008712:	e037      	b.n	8008784 <HAL_TIM_PeriodElapsedCallback+0xb4>
	else if (htim->Instance == TIM1)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a22      	ldr	r2, [pc, #136]	; (80087a4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d11e      	bne.n	800875c <HAL_TIM_PeriodElapsedCallback+0x8c>
		sample_temperature+=SampleTemperatureBurst;
 800871e:	4b22      	ldr	r3, [pc, #136]	; (80087a8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	4b21      	ldr	r3, [pc, #132]	; (80087ac <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4413      	add	r3, r2
 800872a:	4a20      	ldr	r2, [pc, #128]	; (80087ac <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800872c:	6013      	str	r3, [r2, #0]
		if(sample_temperature>255) //in this case sample_temperature should be continuous or it should be measured slower
 800872e:	4b1f      	ldr	r3, [pc, #124]	; (80087ac <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2bff      	cmp	r3, #255	; 0xff
 8008734:	d902      	bls.n	800873c <HAL_TIM_PeriodElapsedCallback+0x6c>
			Set_Error(WARN_TEMP_MEASURE_OVERFLOW);
 8008736:	20e1      	movs	r0, #225	; 0xe1
 8008738:	f001 fac8 	bl	8009ccc <Set_Error>
		sample_voltage+=SampleVoltageBurst;
 800873c:	4b1c      	ldr	r3, [pc, #112]	; (80087b0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	461a      	mov	r2, r3
 8008742:	4b1c      	ldr	r3, [pc, #112]	; (80087b4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4413      	add	r3, r2
 8008748:	4a1a      	ldr	r2, [pc, #104]	; (80087b4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800874a:	6013      	str	r3, [r2, #0]
		if(sample_voltage>255)
 800874c:	4b19      	ldr	r3, [pc, #100]	; (80087b4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2bff      	cmp	r3, #255	; 0xff
 8008752:	d917      	bls.n	8008784 <HAL_TIM_PeriodElapsedCallback+0xb4>
			Set_Error(WARN_VOLT_MEASURE_OVERFLOW);
 8008754:	20e2      	movs	r0, #226	; 0xe2
 8008756:	f001 fab9 	bl	8009ccc <Set_Error>
}
 800875a:	e013      	b.n	8008784 <HAL_TIM_PeriodElapsedCallback+0xb4>
	else if (htim->Instance == TIM7)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a15      	ldr	r2, [pc, #84]	; (80087b8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d103      	bne.n	800876e <HAL_TIM_PeriodElapsedCallback+0x9e>
		canSendErrorFlag=1;
 8008766:	4b15      	ldr	r3, [pc, #84]	; (80087bc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8008768:	2201      	movs	r2, #1
 800876a:	701a      	strb	r2, [r3, #0]
}
 800876c:	e00a      	b.n	8008784 <HAL_TIM_PeriodElapsedCallback+0xb4>
	else if (htim->Instance == TIM6)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a13      	ldr	r2, [pc, #76]	; (80087c0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d103      	bne.n	8008780 <HAL_TIM_PeriodElapsedCallback+0xb0>
		CanTimerFlag=1;
 8008778:	4b12      	ldr	r3, [pc, #72]	; (80087c4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800877a:	2201      	movs	r2, #1
 800877c:	701a      	strb	r2, [r3, #0]
}
 800877e:	e001      	b.n	8008784 <HAL_TIM_PeriodElapsedCallback+0xb4>
		Error_Handler();
 8008780:	f002 fca0 	bl	800b0c4 <Error_Handler>
}
 8008784:	bf00      	nop
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	40014000 	.word	0x40014000
 8008790:	20000310 	.word	0x20000310
 8008794:	20000704 	.word	0x20000704
 8008798:	200005cc 	.word	0x200005cc
 800879c:	40014400 	.word	0x40014400
 80087a0:	20000a50 	.word	0x20000a50
 80087a4:	40012c00 	.word	0x40012c00
 80087a8:	200008e9 	.word	0x200008e9
 80087ac:	20000490 	.word	0x20000490
 80087b0:	200001b9 	.word	0x200001b9
 80087b4:	20000098 	.word	0x20000098
 80087b8:	40001400 	.word	0x40001400
 80087bc:	200009c0 	.word	0x200009c0
 80087c0:	40001000 	.word	0x40001000
 80087c4:	20000750 	.word	0x20000750

080087c8 <HAL_LPTIM_CompareMatchCallback>:

extern const pinPort *switches[];

//TODO: this could be modified to not wait another ms if one input occurs halfway through the timer of another input HAL_LPTIM_ReadCounter(&lptim1)
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
	if (hlptim->Instance == LPTIM1)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4aae      	ldr	r2, [pc, #696]	; (8008a90 <HAL_LPTIM_CompareMatchCallback+0x2c8>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	f040 8155 	bne.w	8008a86 <HAL_LPTIM_CompareMatchCallback+0x2be>
	{
		if (HAL_LPTIM_TimeOut_Stop_IT(&hlptim1) != HAL_OK)
 80087dc:	48ad      	ldr	r0, [pc, #692]	; (8008a94 <HAL_LPTIM_CompareMatchCallback+0x2cc>)
 80087de:	f7fb f961 	bl	8003aa4 <HAL_LPTIM_TimeOut_Stop_IT>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d001      	beq.n	80087ec <HAL_LPTIM_CompareMatchCallback+0x24>
		{
			Error_Handler();
 80087e8:	f002 fc6c 	bl	800b0c4 <Error_Handler>
		}

		uint32_t pinState;

		switch(GPIO_Interrupt[GPIO_Interrupt_Read_Pos])
 80087ec:	4baa      	ldr	r3, [pc, #680]	; (8008a98 <HAL_LPTIM_CompareMatchCallback+0x2d0>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4aaa      	ldr	r2, [pc, #680]	; (8008a9c <HAL_LPTIM_CompareMatchCallback+0x2d4>)
 80087f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	d832      	bhi.n	8008860 <HAL_LPTIM_CompareMatchCallback+0x98>
 80087fa:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <HAL_LPTIM_CompareMatchCallback+0x38>)
 80087fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008800:	08008815 	.word	0x08008815
 8008804:	08008861 	.word	0x08008861
 8008808:	08008827 	.word	0x08008827
 800880c:	08008839 	.word	0x08008839
 8008810:	0800884b 	.word	0x0800884b
		{
		case 0:
			pinState = HAL_GPIO_ReadPin(DIO3.PORT, DIO3.PIN);
 8008814:	4ba2      	ldr	r3, [pc, #648]	; (8008aa0 <HAL_LPTIM_CompareMatchCallback+0x2d8>)
 8008816:	2208      	movs	r2, #8
 8008818:	4611      	mov	r1, r2
 800881a:	4618      	mov	r0, r3
 800881c:	f7fb f80e 	bl	800383c <HAL_GPIO_ReadPin>
 8008820:	4603      	mov	r3, r0
 8008822:	61fb      	str	r3, [r7, #28]
			break;
 8008824:	e021      	b.n	800886a <HAL_LPTIM_CompareMatchCallback+0xa2>
		case 2:
			pinState = HAL_GPIO_ReadPin(DIO5.PORT, DIO5.PIN);
 8008826:	4b9e      	ldr	r3, [pc, #632]	; (8008aa0 <HAL_LPTIM_CompareMatchCallback+0x2d8>)
 8008828:	2220      	movs	r2, #32
 800882a:	4611      	mov	r1, r2
 800882c:	4618      	mov	r0, r3
 800882e:	f7fb f805 	bl	800383c <HAL_GPIO_ReadPin>
 8008832:	4603      	mov	r3, r0
 8008834:	61fb      	str	r3, [r7, #28]
			break;
 8008836:	e018      	b.n	800886a <HAL_LPTIM_CompareMatchCallback+0xa2>
		case 3:
			pinState = HAL_GPIO_ReadPin(DIO6.PORT, DIO6.PIN);
 8008838:	4b99      	ldr	r3, [pc, #612]	; (8008aa0 <HAL_LPTIM_CompareMatchCallback+0x2d8>)
 800883a:	2240      	movs	r2, #64	; 0x40
 800883c:	4611      	mov	r1, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f7fa fffc 	bl	800383c <HAL_GPIO_ReadPin>
 8008844:	4603      	mov	r3, r0
 8008846:	61fb      	str	r3, [r7, #28]
			break;
 8008848:	e00f      	b.n	800886a <HAL_LPTIM_CompareMatchCallback+0xa2>
		case 4:
			pinState = HAL_GPIO_ReadPin(DIO15.PORT, DIO15.PIN);
 800884a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800884e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008852:	4611      	mov	r1, r2
 8008854:	4618      	mov	r0, r3
 8008856:	f7fa fff1 	bl	800383c <HAL_GPIO_ReadPin>
 800885a:	4603      	mov	r3, r0
 800885c:	61fb      	str	r3, [r7, #28]
			break;
 800885e:	e004      	b.n	800886a <HAL_LPTIM_CompareMatchCallback+0xa2>
		default:
			Set_Error(WARN_UNDEFINED_GPIO);
 8008860:	f240 1003 	movw	r0, #259	; 0x103
 8008864:	f001 fa32 	bl	8009ccc <Set_Error>
			break;
 8008868:	bf00      	nop
		}

		if(pinState != GPIO_States[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]])
 800886a:	4b8b      	ldr	r3, [pc, #556]	; (8008a98 <HAL_LPTIM_CompareMatchCallback+0x2d0>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a8b      	ldr	r2, [pc, #556]	; (8008a9c <HAL_LPTIM_CompareMatchCallback+0x2d4>)
 8008870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008874:	4a8b      	ldr	r2, [pc, #556]	; (8008aa4 <HAL_LPTIM_CompareMatchCallback+0x2dc>)
 8008876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800887a:	69fa      	ldr	r2, [r7, #28]
 800887c:	429a      	cmp	r2, r3
 800887e:	f000 80d3 	beq.w	8008a28 <HAL_LPTIM_CompareMatchCallback+0x260>
		{
			GPIO_States[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]]=pinState;
 8008882:	4b85      	ldr	r3, [pc, #532]	; (8008a98 <HAL_LPTIM_CompareMatchCallback+0x2d0>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a85      	ldr	r2, [pc, #532]	; (8008a9c <HAL_LPTIM_CompareMatchCallback+0x2d4>)
 8008888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800888c:	4985      	ldr	r1, [pc, #532]	; (8008aa4 <HAL_LPTIM_CompareMatchCallback+0x2dc>)
 800888e:	69fa      	ldr	r2, [r7, #28]
 8008890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			switch(pinState)
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d064      	beq.n	8008964 <HAL_LPTIM_CompareMatchCallback+0x19c>
 800889a:	2b01      	cmp	r3, #1
 800889c:	d000      	beq.n	80088a0 <HAL_LPTIM_CompareMatchCallback+0xd8>
//TODO: PWM

				break;
			default:
				//should never reach this point
				break;
 800889e:	e0c4      	b.n	8008a2a <HAL_LPTIM_CompareMatchCallback+0x262>
				for(uint32_t i=0; i<8; i++)
 80088a0:	2300      	movs	r3, #0
 80088a2:	61bb      	str	r3, [r7, #24]
 80088a4:	e016      	b.n	80088d4 <HAL_LPTIM_CompareMatchCallback+0x10c>
					if (Digital_In_Interrupt_Can_Rising[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]]>>i & 1)
 80088a6:	4b7c      	ldr	r3, [pc, #496]	; (8008a98 <HAL_LPTIM_CompareMatchCallback+0x2d0>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a7c      	ldr	r2, [pc, #496]	; (8008a9c <HAL_LPTIM_CompareMatchCallback+0x2d4>)
 80088ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088b0:	4a7d      	ldr	r2, [pc, #500]	; (8008aa8 <HAL_LPTIM_CompareMatchCallback+0x2e0>)
 80088b2:	5cd3      	ldrb	r3, [r2, r3]
 80088b4:	461a      	mov	r2, r3
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	fa42 f303 	asr.w	r3, r2, r3
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d004      	beq.n	80088ce <HAL_LPTIM_CompareMatchCallback+0x106>
						Can_Send(i);
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 fe49 	bl	8009560 <Can_Send>
				for(uint32_t i=0; i<8; i++)
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	3301      	adds	r3, #1
 80088d2:	61bb      	str	r3, [r7, #24]
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	2b07      	cmp	r3, #7
 80088d8:	d9e5      	bls.n	80088a6 <HAL_LPTIM_CompareMatchCallback+0xde>
				for(uint32_t i=0; i<6; i++)
 80088da:	2300      	movs	r3, #0
 80088dc:	617b      	str	r3, [r7, #20]
 80088de:	e03d      	b.n	800895c <HAL_LPTIM_CompareMatchCallback+0x194>
					if (Digital_In_Interrupt_Power_Low_Rising[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]]>>i & 1)
 80088e0:	4b6d      	ldr	r3, [pc, #436]	; (8008a98 <HAL_LPTIM_CompareMatchCallback+0x2d0>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a6d      	ldr	r2, [pc, #436]	; (8008a9c <HAL_LPTIM_CompareMatchCallback+0x2d4>)
 80088e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ea:	4a70      	ldr	r2, [pc, #448]	; (8008aac <HAL_LPTIM_CompareMatchCallback+0x2e4>)
 80088ec:	5cd3      	ldrb	r3, [r2, r3]
 80088ee:	461a      	mov	r2, r3
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	fa42 f303 	asr.w	r3, r2, r3
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00e      	beq.n	800891c <HAL_LPTIM_CompareMatchCallback+0x154>
						HAL_GPIO_WritePin(switches[i]->PORT, switches[i]->PIN, 0);
 80088fe:	4a6c      	ldr	r2, [pc, #432]	; (8008ab0 <HAL_LPTIM_CompareMatchCallback+0x2e8>)
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008906:	6818      	ldr	r0, [r3, #0]
 8008908:	4a69      	ldr	r2, [pc, #420]	; (8008ab0 <HAL_LPTIM_CompareMatchCallback+0x2e8>)
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008910:	889b      	ldrh	r3, [r3, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	4619      	mov	r1, r3
 8008916:	f7fa ffa9 	bl	800386c <HAL_GPIO_WritePin>
 800891a:	e01c      	b.n	8008956 <HAL_LPTIM_CompareMatchCallback+0x18e>
					else if (Digital_In_Interrupt_Power_High_Rising[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]]>>i & 1)
 800891c:	4b5e      	ldr	r3, [pc, #376]	; (8008a98 <HAL_LPTIM_CompareMatchCallback+0x2d0>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a5e      	ldr	r2, [pc, #376]	; (8008a9c <HAL_LPTIM_CompareMatchCallback+0x2d4>)
 8008922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008926:	4a63      	ldr	r2, [pc, #396]	; (8008ab4 <HAL_LPTIM_CompareMatchCallback+0x2ec>)
 8008928:	5cd3      	ldrb	r3, [r2, r3]
 800892a:	461a      	mov	r2, r3
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	fa42 f303 	asr.w	r3, r2, r3
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00d      	beq.n	8008956 <HAL_LPTIM_CompareMatchCallback+0x18e>
						HAL_GPIO_WritePin(switches[i]->PORT, switches[i]->PIN, 1);
 800893a:	4a5d      	ldr	r2, [pc, #372]	; (8008ab0 <HAL_LPTIM_CompareMatchCallback+0x2e8>)
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008942:	6818      	ldr	r0, [r3, #0]
 8008944:	4a5a      	ldr	r2, [pc, #360]	; (8008ab0 <HAL_LPTIM_CompareMatchCallback+0x2e8>)
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800894c:	889b      	ldrh	r3, [r3, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	4619      	mov	r1, r3
 8008952:	f7fa ff8b 	bl	800386c <HAL_GPIO_WritePin>
				for(uint32_t i=0; i<6; i++)
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	3301      	adds	r3, #1
 800895a:	617b      	str	r3, [r7, #20]
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	2b05      	cmp	r3, #5
 8008960:	d9be      	bls.n	80088e0 <HAL_LPTIM_CompareMatchCallback+0x118>
				break;
 8008962:	e062      	b.n	8008a2a <HAL_LPTIM_CompareMatchCallback+0x262>
				for(uint32_t i=0; i<8; i++)
 8008964:	2300      	movs	r3, #0
 8008966:	613b      	str	r3, [r7, #16]
 8008968:	e016      	b.n	8008998 <HAL_LPTIM_CompareMatchCallback+0x1d0>
					if (Digital_In_Interrupt_Can_Falling[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]]>>i & 1)
 800896a:	4b4b      	ldr	r3, [pc, #300]	; (8008a98 <HAL_LPTIM_CompareMatchCallback+0x2d0>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a4b      	ldr	r2, [pc, #300]	; (8008a9c <HAL_LPTIM_CompareMatchCallback+0x2d4>)
 8008970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008974:	4a50      	ldr	r2, [pc, #320]	; (8008ab8 <HAL_LPTIM_CompareMatchCallback+0x2f0>)
 8008976:	5cd3      	ldrb	r3, [r2, r3]
 8008978:	461a      	mov	r2, r3
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	fa42 f303 	asr.w	r3, r2, r3
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	2b00      	cmp	r3, #0
 8008986:	d004      	beq.n	8008992 <HAL_LPTIM_CompareMatchCallback+0x1ca>
						Buffer_Can_Message(i);
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	4618      	mov	r0, r3
 800898e:	f7fe f8e9 	bl	8006b64 <Buffer_Can_Message>
				for(uint32_t i=0; i<8; i++)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	3301      	adds	r3, #1
 8008996:	613b      	str	r3, [r7, #16]
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	2b07      	cmp	r3, #7
 800899c:	d9e5      	bls.n	800896a <HAL_LPTIM_CompareMatchCallback+0x1a2>
				for(uint32_t i=0; i<6; i++)
 800899e:	2300      	movs	r3, #0
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	e03d      	b.n	8008a20 <HAL_LPTIM_CompareMatchCallback+0x258>
					if (Digital_In_Interrupt_Power_Low_Falling[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]]>>i & 1)
 80089a4:	4b3c      	ldr	r3, [pc, #240]	; (8008a98 <HAL_LPTIM_CompareMatchCallback+0x2d0>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a3c      	ldr	r2, [pc, #240]	; (8008a9c <HAL_LPTIM_CompareMatchCallback+0x2d4>)
 80089aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ae:	4a43      	ldr	r2, [pc, #268]	; (8008abc <HAL_LPTIM_CompareMatchCallback+0x2f4>)
 80089b0:	5cd3      	ldrb	r3, [r2, r3]
 80089b2:	461a      	mov	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	fa42 f303 	asr.w	r3, r2, r3
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00e      	beq.n	80089e0 <HAL_LPTIM_CompareMatchCallback+0x218>
						HAL_GPIO_WritePin(switches[i]->PORT, switches[i]->PIN, 0);
 80089c2:	4a3b      	ldr	r2, [pc, #236]	; (8008ab0 <HAL_LPTIM_CompareMatchCallback+0x2e8>)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ca:	6818      	ldr	r0, [r3, #0]
 80089cc:	4a38      	ldr	r2, [pc, #224]	; (8008ab0 <HAL_LPTIM_CompareMatchCallback+0x2e8>)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089d4:	889b      	ldrh	r3, [r3, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	4619      	mov	r1, r3
 80089da:	f7fa ff47 	bl	800386c <HAL_GPIO_WritePin>
 80089de:	e01c      	b.n	8008a1a <HAL_LPTIM_CompareMatchCallback+0x252>
					else if (Digital_In_Interrupt_Power_High_Falling[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]]>>i & 1)
 80089e0:	4b2d      	ldr	r3, [pc, #180]	; (8008a98 <HAL_LPTIM_CompareMatchCallback+0x2d0>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a2d      	ldr	r2, [pc, #180]	; (8008a9c <HAL_LPTIM_CompareMatchCallback+0x2d4>)
 80089e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ea:	4a35      	ldr	r2, [pc, #212]	; (8008ac0 <HAL_LPTIM_CompareMatchCallback+0x2f8>)
 80089ec:	5cd3      	ldrb	r3, [r2, r3]
 80089ee:	461a      	mov	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	fa42 f303 	asr.w	r3, r2, r3
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00d      	beq.n	8008a1a <HAL_LPTIM_CompareMatchCallback+0x252>
						HAL_GPIO_WritePin(switches[i]->PORT, switches[i]->PIN, 1);
 80089fe:	4a2c      	ldr	r2, [pc, #176]	; (8008ab0 <HAL_LPTIM_CompareMatchCallback+0x2e8>)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a06:	6818      	ldr	r0, [r3, #0]
 8008a08:	4a29      	ldr	r2, [pc, #164]	; (8008ab0 <HAL_LPTIM_CompareMatchCallback+0x2e8>)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a10:	889b      	ldrh	r3, [r3, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	4619      	mov	r1, r3
 8008a16:	f7fa ff29 	bl	800386c <HAL_GPIO_WritePin>
				for(uint32_t i=0; i<6; i++)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b05      	cmp	r3, #5
 8008a24:	d9be      	bls.n	80089a4 <HAL_LPTIM_CompareMatchCallback+0x1dc>
				break;
 8008a26:	e000      	b.n	8008a2a <HAL_LPTIM_CompareMatchCallback+0x262>
			}
		}
 8008a28:	bf00      	nop

		GPIO_Current_Interrupts--;
 8008a2a:	4b26      	ldr	r3, [pc, #152]	; (8008ac4 <HAL_LPTIM_CompareMatchCallback+0x2fc>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	4a24      	ldr	r2, [pc, #144]	; (8008ac4 <HAL_LPTIM_CompareMatchCallback+0x2fc>)
 8008a32:	6013      	str	r3, [r2, #0]
		GPIO_Interrupt_Active[GPIO_Interrupt[GPIO_Interrupt_Read_Pos]]=0;
 8008a34:	4b18      	ldr	r3, [pc, #96]	; (8008a98 <HAL_LPTIM_CompareMatchCallback+0x2d0>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a18      	ldr	r2, [pc, #96]	; (8008a9c <HAL_LPTIM_CompareMatchCallback+0x2d4>)
 8008a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a3e:	4a22      	ldr	r2, [pc, #136]	; (8008ac8 <HAL_LPTIM_CompareMatchCallback+0x300>)
 8008a40:	2100      	movs	r1, #0
 8008a42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		GPIO_Interrupt_Read_Pos++;
 8008a46:	4b14      	ldr	r3, [pc, #80]	; (8008a98 <HAL_LPTIM_CompareMatchCallback+0x2d0>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	4a12      	ldr	r2, [pc, #72]	; (8008a98 <HAL_LPTIM_CompareMatchCallback+0x2d0>)
 8008a4e:	6013      	str	r3, [r2, #0]
		if (GPIO_Interrupt_Read_Pos>=5) { GPIO_Interrupt_Read_Pos=0; }
 8008a50:	4b11      	ldr	r3, [pc, #68]	; (8008a98 <HAL_LPTIM_CompareMatchCallback+0x2d0>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b04      	cmp	r3, #4
 8008a56:	d902      	bls.n	8008a5e <HAL_LPTIM_CompareMatchCallback+0x296>
 8008a58:	4b0f      	ldr	r3, [pc, #60]	; (8008a98 <HAL_LPTIM_CompareMatchCallback+0x2d0>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	601a      	str	r2, [r3, #0]

		if(GPIO_Current_Interrupts)
 8008a5e:	4b19      	ldr	r3, [pc, #100]	; (8008ac4 <HAL_LPTIM_CompareMatchCallback+0x2fc>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00c      	beq.n	8008a80 <HAL_LPTIM_CompareMatchCallback+0x2b8>
		{
			//start the timer again for the next channel
			if (HAL_LPTIM_TimeOut_Start_IT(&hlptim1, 13282, 13283) != HAL_OK) //~1ms debounce time
 8008a66:	f243 32e3 	movw	r2, #13283	; 0x33e3
 8008a6a:	f243 31e2 	movw	r1, #13282	; 0x33e2
 8008a6e:	4809      	ldr	r0, [pc, #36]	; (8008a94 <HAL_LPTIM_CompareMatchCallback+0x2cc>)
 8008a70:	f7fa ffd2 	bl	8003a18 <HAL_LPTIM_TimeOut_Start_IT>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d005      	beq.n	8008a86 <HAL_LPTIM_CompareMatchCallback+0x2be>
			{
				Error_Handler();
 8008a7a:	f002 fb23 	bl	800b0c4 <Error_Handler>
		else
		{
			GPIO_Timer_Ready=1;
		}
	}
}
 8008a7e:	e002      	b.n	8008a86 <HAL_LPTIM_CompareMatchCallback+0x2be>
			GPIO_Timer_Ready=1;
 8008a80:	4b12      	ldr	r3, [pc, #72]	; (8008acc <HAL_LPTIM_CompareMatchCallback+0x304>)
 8008a82:	2201      	movs	r2, #1
 8008a84:	601a      	str	r2, [r3, #0]
}
 8008a86:	bf00      	nop
 8008a88:	3720      	adds	r7, #32
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	40007c00 	.word	0x40007c00
 8008a94:	20000650 	.word	0x20000650
 8008a98:	20000a04 	.word	0x20000a04
 8008a9c:	2000063c 	.word	0x2000063c
 8008aa0:	48000400 	.word	0x48000400
 8008aa4:	20000ad0 	.word	0x20000ad0
 8008aa8:	2000009c 	.word	0x2000009c
 8008aac:	20000494 	.word	0x20000494
 8008ab0:	20000028 	.word	0x20000028
 8008ab4:	20000564 	.word	0x20000564
 8008ab8:	20000090 	.word	0x20000090
 8008abc:	200008e4 	.word	0x200008e4
 8008ac0:	2000075c 	.word	0x2000075c
 8008ac4:	20000ae4 	.word	0x20000ae4
 8008ac8:	200007a4 	.word	0x200007a4
 8008acc:	20000060 	.word	0x20000060

08008ad0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	80fb      	strh	r3, [r7, #6]
	uint32_t wrote=0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	60fb      	str	r3, [r7, #12]

	if(GPIO_Current_Interrupts)
 8008ade:	4b65      	ldr	r3, [pc, #404]	; (8008c74 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d055      	beq.n	8008b92 <HAL_GPIO_EXTI_Callback+0xc2>
	{
		switch (GPIO_Pin)
 8008ae6:	88fb      	ldrh	r3, [r7, #6]
 8008ae8:	2b20      	cmp	r3, #32
 8008aea:	d01b      	beq.n	8008b24 <HAL_GPIO_EXTI_Callback+0x54>
 8008aec:	2b20      	cmp	r3, #32
 8008aee:	dc02      	bgt.n	8008af6 <HAL_GPIO_EXTI_Callback+0x26>
 8008af0:	2b08      	cmp	r3, #8
 8008af2:	d006      	beq.n	8008b02 <HAL_GPIO_EXTI_Callback+0x32>
 8008af4:	e047      	b.n	8008b86 <HAL_GPIO_EXTI_Callback+0xb6>
 8008af6:	2b40      	cmp	r3, #64	; 0x40
 8008af8:	d025      	beq.n	8008b46 <HAL_GPIO_EXTI_Callback+0x76>
 8008afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008afe:	d032      	beq.n	8008b66 <HAL_GPIO_EXTI_Callback+0x96>
 8008b00:	e041      	b.n	8008b86 <HAL_GPIO_EXTI_Callback+0xb6>
		{
		case (1<<3):
			if (!GPIO_Interrupt_Active[0])
 8008b02:	4b5d      	ldr	r3, [pc, #372]	; (8008c78 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f040 8094 	bne.w	8008c34 <HAL_GPIO_EXTI_Callback+0x164>
			{
				GPIO_Interrupt_Active[0]=1;
 8008b0c:	4b5a      	ldr	r3, [pc, #360]	; (8008c78 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8008b0e:	2201      	movs	r2, #1
 8008b10:	601a      	str	r2, [r3, #0]
				GPIO_Interrupt[GPIO_Interrupt_Write_Pos]=0;
 8008b12:	4b5a      	ldr	r3, [pc, #360]	; (8008c7c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a5a      	ldr	r2, [pc, #360]	; (8008c80 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8008b18:	2100      	movs	r1, #0
 8008b1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				wrote=1;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	60fb      	str	r3, [r7, #12]
			}
			break;
 8008b22:	e087      	b.n	8008c34 <HAL_GPIO_EXTI_Callback+0x164>
		case (1<<5):
			if (!GPIO_Interrupt_Active[2])
 8008b24:	4b54      	ldr	r3, [pc, #336]	; (8008c78 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f040 8085 	bne.w	8008c38 <HAL_GPIO_EXTI_Callback+0x168>
			{
				GPIO_Interrupt_Active[2]=1;
 8008b2e:	4b52      	ldr	r3, [pc, #328]	; (8008c78 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8008b30:	2201      	movs	r2, #1
 8008b32:	609a      	str	r2, [r3, #8]
				GPIO_Interrupt[GPIO_Interrupt_Write_Pos]=2;
 8008b34:	4b51      	ldr	r3, [pc, #324]	; (8008c7c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a51      	ldr	r2, [pc, #324]	; (8008c80 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8008b3a:	2102      	movs	r1, #2
 8008b3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				wrote=1;
 8008b40:	2301      	movs	r3, #1
 8008b42:	60fb      	str	r3, [r7, #12]
			}
			break;
 8008b44:	e078      	b.n	8008c38 <HAL_GPIO_EXTI_Callback+0x168>
		case (1<<6):
			if (!GPIO_Interrupt_Active[3])
 8008b46:	4b4c      	ldr	r3, [pc, #304]	; (8008c78 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d176      	bne.n	8008c3c <HAL_GPIO_EXTI_Callback+0x16c>
			{
				GPIO_Interrupt_Active[3]=1;
 8008b4e:	4b4a      	ldr	r3, [pc, #296]	; (8008c78 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8008b50:	2201      	movs	r2, #1
 8008b52:	60da      	str	r2, [r3, #12]
				GPIO_Interrupt[GPIO_Interrupt_Write_Pos]=3;
 8008b54:	4b49      	ldr	r3, [pc, #292]	; (8008c7c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a49      	ldr	r2, [pc, #292]	; (8008c80 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8008b5a:	2103      	movs	r1, #3
 8008b5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				wrote=1;
 8008b60:	2301      	movs	r3, #1
 8008b62:	60fb      	str	r3, [r7, #12]
			}
			break;
 8008b64:	e06a      	b.n	8008c3c <HAL_GPIO_EXTI_Callback+0x16c>
		case (1<<15):
			if (!GPIO_Interrupt_Active[3])
 8008b66:	4b44      	ldr	r3, [pc, #272]	; (8008c78 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d168      	bne.n	8008c40 <HAL_GPIO_EXTI_Callback+0x170>
			{
				GPIO_Interrupt_Active[3]=1;
 8008b6e:	4b42      	ldr	r3, [pc, #264]	; (8008c78 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8008b70:	2201      	movs	r2, #1
 8008b72:	60da      	str	r2, [r3, #12]
				GPIO_Interrupt[GPIO_Interrupt_Write_Pos]=2;
 8008b74:	4b41      	ldr	r3, [pc, #260]	; (8008c7c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a41      	ldr	r2, [pc, #260]	; (8008c80 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8008b7a:	2102      	movs	r1, #2
 8008b7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				wrote=1;
 8008b80:	2301      	movs	r3, #1
 8008b82:	60fb      	str	r3, [r7, #12]
			}
			break;
 8008b84:	e05c      	b.n	8008c40 <HAL_GPIO_EXTI_Callback+0x170>
		default:
			Set_Error(WARN_UNDEFINED_GPIO);
 8008b86:	f240 1003 	movw	r0, #259	; 0x103
 8008b8a:	f001 f89f 	bl	8009ccc <Set_Error>
		break;
 8008b8e:	bf00      	nop
 8008b90:	e057      	b.n	8008c42 <HAL_GPIO_EXTI_Callback+0x172>
		}
	}
	else
	{
		wrote=1;
 8008b92:	2301      	movs	r3, #1
 8008b94:	60fb      	str	r3, [r7, #12]

		//this case should only execute when there are no pending GPIO interrupts
		switch (GPIO_Pin)
 8008b96:	88fb      	ldrh	r3, [r7, #6]
 8008b98:	2b20      	cmp	r3, #32
 8008b9a:	d014      	beq.n	8008bc6 <HAL_GPIO_EXTI_Callback+0xf6>
 8008b9c:	2b20      	cmp	r3, #32
 8008b9e:	dc02      	bgt.n	8008ba6 <HAL_GPIO_EXTI_Callback+0xd6>
 8008ba0:	2b08      	cmp	r3, #8
 8008ba2:	d006      	beq.n	8008bb2 <HAL_GPIO_EXTI_Callback+0xe2>
 8008ba4:	e02d      	b.n	8008c02 <HAL_GPIO_EXTI_Callback+0x132>
 8008ba6:	2b40      	cmp	r3, #64	; 0x40
 8008ba8:	d017      	beq.n	8008bda <HAL_GPIO_EXTI_Callback+0x10a>
 8008baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bae:	d01e      	beq.n	8008bee <HAL_GPIO_EXTI_Callback+0x11e>
 8008bb0:	e027      	b.n	8008c02 <HAL_GPIO_EXTI_Callback+0x132>
		{
		case (1<<3):
			GPIO_Interrupt_Active[0]=1;
 8008bb2:	4b31      	ldr	r3, [pc, #196]	; (8008c78 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	601a      	str	r2, [r3, #0]
			GPIO_Interrupt[GPIO_Interrupt_Write_Pos]=0;
 8008bb8:	4b30      	ldr	r3, [pc, #192]	; (8008c7c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a30      	ldr	r2, [pc, #192]	; (8008c80 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8008bc4:	e022      	b.n	8008c0c <HAL_GPIO_EXTI_Callback+0x13c>
		case (1<<5):
			GPIO_Interrupt_Active[2]=1;
 8008bc6:	4b2c      	ldr	r3, [pc, #176]	; (8008c78 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8008bc8:	2201      	movs	r2, #1
 8008bca:	609a      	str	r2, [r3, #8]
			GPIO_Interrupt[GPIO_Interrupt_Write_Pos]=2;
 8008bcc:	4b2b      	ldr	r3, [pc, #172]	; (8008c7c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a2b      	ldr	r2, [pc, #172]	; (8008c80 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8008bd2:	2102      	movs	r1, #2
 8008bd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8008bd8:	e018      	b.n	8008c0c <HAL_GPIO_EXTI_Callback+0x13c>
		case (1<<6):
			GPIO_Interrupt_Active[3]=1;
 8008bda:	4b27      	ldr	r3, [pc, #156]	; (8008c78 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8008bdc:	2201      	movs	r2, #1
 8008bde:	60da      	str	r2, [r3, #12]
			GPIO_Interrupt[GPIO_Interrupt_Write_Pos]=3;
 8008be0:	4b26      	ldr	r3, [pc, #152]	; (8008c7c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a26      	ldr	r2, [pc, #152]	; (8008c80 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8008be6:	2103      	movs	r1, #3
 8008be8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8008bec:	e00e      	b.n	8008c0c <HAL_GPIO_EXTI_Callback+0x13c>
		case (1<<15):
			GPIO_Interrupt_Active[4]=1;
 8008bee:	4b22      	ldr	r3, [pc, #136]	; (8008c78 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	611a      	str	r2, [r3, #16]
			GPIO_Interrupt[GPIO_Interrupt_Write_Pos]=15;
 8008bf4:	4b21      	ldr	r3, [pc, #132]	; (8008c7c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a21      	ldr	r2, [pc, #132]	; (8008c80 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8008bfa:	210f      	movs	r1, #15
 8008bfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8008c00:	e004      	b.n	8008c0c <HAL_GPIO_EXTI_Callback+0x13c>
		default:
			Set_Error(WARN_UNDEFINED_GPIO);
 8008c02:	f240 1003 	movw	r0, #259	; 0x103
 8008c06:	f001 f861 	bl	8009ccc <Set_Error>
		break;
 8008c0a:	bf00      	nop
		}

		if (GPIO_Timer_Ready)
 8008c0c:	4b1d      	ldr	r3, [pc, #116]	; (8008c84 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d016      	beq.n	8008c42 <HAL_GPIO_EXTI_Callback+0x172>
		{
			GPIO_Timer_Ready=0;
 8008c14:	4b1b      	ldr	r3, [pc, #108]	; (8008c84 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]
			if (HAL_LPTIM_TimeOut_Start_IT(&hlptim1, 13282, 13283) != HAL_OK) //~1ms debounce time
 8008c1a:	f243 32e3 	movw	r2, #13283	; 0x33e3
 8008c1e:	f243 31e2 	movw	r1, #13282	; 0x33e2
 8008c22:	4819      	ldr	r0, [pc, #100]	; (8008c88 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8008c24:	f7fa fef8 	bl	8003a18 <HAL_LPTIM_TimeOut_Start_IT>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d009      	beq.n	8008c42 <HAL_GPIO_EXTI_Callback+0x172>
			{
				Error_Handler();
 8008c2e:	f002 fa49 	bl	800b0c4 <Error_Handler>
 8008c32:	e006      	b.n	8008c42 <HAL_GPIO_EXTI_Callback+0x172>
			break;
 8008c34:	bf00      	nop
 8008c36:	e004      	b.n	8008c42 <HAL_GPIO_EXTI_Callback+0x172>
			break;
 8008c38:	bf00      	nop
 8008c3a:	e002      	b.n	8008c42 <HAL_GPIO_EXTI_Callback+0x172>
			break;
 8008c3c:	bf00      	nop
 8008c3e:	e000      	b.n	8008c42 <HAL_GPIO_EXTI_Callback+0x172>
			break;
 8008c40:	bf00      	nop
			}
		}
	}

	if(wrote)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d010      	beq.n	8008c6a <HAL_GPIO_EXTI_Callback+0x19a>
	{
		GPIO_Current_Interrupts++;
 8008c48:	4b0a      	ldr	r3, [pc, #40]	; (8008c74 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	4a09      	ldr	r2, [pc, #36]	; (8008c74 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8008c50:	6013      	str	r3, [r2, #0]
		GPIO_Interrupt_Write_Pos++;
 8008c52:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3301      	adds	r3, #1
 8008c58:	4a08      	ldr	r2, [pc, #32]	; (8008c7c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008c5a:	6013      	str	r3, [r2, #0]
		if (GPIO_Interrupt_Write_Pos>=5) { GPIO_Interrupt_Write_Pos=0; }
 8008c5c:	4b07      	ldr	r3, [pc, #28]	; (8008c7c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b04      	cmp	r3, #4
 8008c62:	d902      	bls.n	8008c6a <HAL_GPIO_EXTI_Callback+0x19a>
 8008c64:	4b05      	ldr	r3, [pc, #20]	; (8008c7c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	601a      	str	r2, [r3, #0]
	}
}
 8008c6a:	bf00      	nop
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000ae4 	.word	0x20000ae4
 8008c78:	200007a4 	.word	0x200007a4
 8008c7c:	200008dc 	.word	0x200008dc
 8008c80:	2000063c 	.word	0x2000063c
 8008c84:	20000060 	.word	0x20000060
 8008c88:	20000650 	.word	0x20000650

08008c8c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b0a0      	sub	sp, #128	; 0x80
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c9c:	f040 843d 	bne.w	800951a <HAL_ADC_ConvCpltCallback+0x88e>
	{
		uint32_t sampled = adc_selection;
 8008ca0:	4ba6      	ldr	r3, [pc, #664]	; (8008f3c <HAL_ADC_ConvCpltCallback+0x2b0>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	62fb      	str	r3, [r7, #44]	; 0x2c

		//we want the ability to not sample temperature and voltage as often as current, as sampling those heats up the switch
		//we also want to make sure that both current channels are sampled
		//TODO: change the constant 3 into however many switches are used; if only channel 0 is used then don't read current on channel 1
		//TODO: set voltage and temperature interrupts from timer, make timer configurable
		switch(adc_selection)
 8008ca6:	4ba5      	ldr	r3, [pc, #660]	; (8008f3c <HAL_ADC_ConvCpltCallback+0x2b0>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	f200 80b1 	bhi.w	8008e12 <HAL_ADC_ConvCpltCallback+0x186>
 8008cb0:	a201      	add	r2, pc, #4	; (adr r2, 8008cb8 <HAL_ADC_ConvCpltCallback+0x2c>)
 8008cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb6:	bf00      	nop
 8008cb8:	08008cc9 	.word	0x08008cc9
 8008cbc:	08008ced 	.word	0x08008ced
 8008cc0:	08008d8d 	.word	0x08008d8d
 8008cc4:	08008def 	.word	0x08008def
		{
		case 0: //we have just sampled current for channel 0, so sample current for channel 1
			HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 1);
 8008cc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fa fdca 	bl	800386c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 8008cd8:	4b99      	ldr	r3, [pc, #612]	; (8008f40 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8008cda:	2101      	movs	r1, #1
 8008cdc:	2200      	movs	r2, #0
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fa fdc4 	bl	800386c <HAL_GPIO_WritePin>
			adc_selection=1;
 8008ce4:	4b95      	ldr	r3, [pc, #596]	; (8008f3c <HAL_ADC_ConvCpltCallback+0x2b0>)
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	601a      	str	r2, [r3, #0]
			break;
 8008cea:	e095      	b.n	8008e18 <HAL_ADC_ConvCpltCallback+0x18c>
		case 1: //if temperature or voltage has been enabled sample those, otherwise start again with current for channel 0
			if (sample_temperature)
 8008cec:	4b95      	ldr	r3, [pc, #596]	; (8008f44 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d01a      	beq.n	8008d2a <HAL_ADC_ConvCpltCallback+0x9e>
			{
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 8008cf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fa fdb4 	bl	800386c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 1);
 8008d04:	4b8e      	ldr	r3, [pc, #568]	; (8008f40 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8008d06:	2101      	movs	r1, #1
 8008d08:	2201      	movs	r2, #1
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fa fdae 	bl	800386c <HAL_GPIO_WritePin>
				if (sample_temperature<255) { sample_temperature--; }
 8008d10:	4b8c      	ldr	r3, [pc, #560]	; (8008f44 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2bfe      	cmp	r3, #254	; 0xfe
 8008d16:	d804      	bhi.n	8008d22 <HAL_ADC_ConvCpltCallback+0x96>
 8008d18:	4b8a      	ldr	r3, [pc, #552]	; (8008f44 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	4a89      	ldr	r2, [pc, #548]	; (8008f44 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8008d20:	6013      	str	r3, [r2, #0]
				adc_selection=2;
 8008d22:	4b86      	ldr	r3, [pc, #536]	; (8008f3c <HAL_ADC_ConvCpltCallback+0x2b0>)
 8008d24:	2202      	movs	r2, #2
 8008d26:	601a      	str	r2, [r3, #0]
			{
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
				adc_selection=0;
			}
			break;
 8008d28:	e076      	b.n	8008e18 <HAL_ADC_ConvCpltCallback+0x18c>
			else if (sample_voltage)
 8008d2a:	4b87      	ldr	r3, [pc, #540]	; (8008f48 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d01a      	beq.n	8008d68 <HAL_ADC_ConvCpltCallback+0xdc>
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 1);
 8008d32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fa fd95 	bl	800386c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 1);
 8008d42:	4b7f      	ldr	r3, [pc, #508]	; (8008f40 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8008d44:	2101      	movs	r1, #1
 8008d46:	2201      	movs	r2, #1
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fa fd8f 	bl	800386c <HAL_GPIO_WritePin>
				if (sample_voltage<255) { sample_voltage--; }
 8008d4e:	4b7e      	ldr	r3, [pc, #504]	; (8008f48 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2bfe      	cmp	r3, #254	; 0xfe
 8008d54:	d804      	bhi.n	8008d60 <HAL_ADC_ConvCpltCallback+0xd4>
 8008d56:	4b7c      	ldr	r3, [pc, #496]	; (8008f48 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	4a7a      	ldr	r2, [pc, #488]	; (8008f48 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8008d5e:	6013      	str	r3, [r2, #0]
				adc_selection=3;
 8008d60:	4b76      	ldr	r3, [pc, #472]	; (8008f3c <HAL_ADC_ConvCpltCallback+0x2b0>)
 8008d62:	2203      	movs	r2, #3
 8008d64:	601a      	str	r2, [r3, #0]
			break;
 8008d66:	e057      	b.n	8008e18 <HAL_ADC_ConvCpltCallback+0x18c>
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 8008d68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d70:	2200      	movs	r2, #0
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fa fd7a 	bl	800386c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 8008d78:	4b71      	ldr	r3, [pc, #452]	; (8008f40 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8008d7a:	2101      	movs	r1, #1
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fa fd74 	bl	800386c <HAL_GPIO_WritePin>
				adc_selection=0;
 8008d84:	4b6d      	ldr	r3, [pc, #436]	; (8008f3c <HAL_ADC_ConvCpltCallback+0x2b0>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
			break;
 8008d8a:	e045      	b.n	8008e18 <HAL_ADC_ConvCpltCallback+0x18c>
		case 2: //if voltage has been enabled sample it, otherwise go back to current for channel 0
			if (sample_voltage)
 8008d8c:	4b6e      	ldr	r3, [pc, #440]	; (8008f48 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01a      	beq.n	8008dca <HAL_ADC_ConvCpltCallback+0x13e>
			{
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 1);
 8008d94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fa fd64 	bl	800386c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 1);
 8008da4:	4b66      	ldr	r3, [pc, #408]	; (8008f40 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8008da6:	2101      	movs	r1, #1
 8008da8:	2201      	movs	r2, #1
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fa fd5e 	bl	800386c <HAL_GPIO_WritePin>
				if (sample_voltage<255) { sample_voltage--; }
 8008db0:	4b65      	ldr	r3, [pc, #404]	; (8008f48 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2bfe      	cmp	r3, #254	; 0xfe
 8008db6:	d804      	bhi.n	8008dc2 <HAL_ADC_ConvCpltCallback+0x136>
 8008db8:	4b63      	ldr	r3, [pc, #396]	; (8008f48 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	4a62      	ldr	r2, [pc, #392]	; (8008f48 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8008dc0:	6013      	str	r3, [r2, #0]
				adc_selection=3;
 8008dc2:	4b5e      	ldr	r3, [pc, #376]	; (8008f3c <HAL_ADC_ConvCpltCallback+0x2b0>)
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	601a      	str	r2, [r3, #0]
			{
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
				adc_selection=0;
			}
			break;
 8008dc8:	e026      	b.n	8008e18 <HAL_ADC_ConvCpltCallback+0x18c>
				HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 8008dca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008dce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fa fd49 	bl	800386c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 8008dda:	4b59      	ldr	r3, [pc, #356]	; (8008f40 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8008ddc:	2101      	movs	r1, #1
 8008dde:	2200      	movs	r2, #0
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fa fd43 	bl	800386c <HAL_GPIO_WritePin>
				adc_selection=0;
 8008de6:	4b55      	ldr	r3, [pc, #340]	; (8008f3c <HAL_ADC_ConvCpltCallback+0x2b0>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]
			break;
 8008dec:	e014      	b.n	8008e18 <HAL_ADC_ConvCpltCallback+0x18c>
		case 3: //as voltage has just been sampled go back to current for channel 0
			HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 8008dee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008df2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008df6:	2200      	movs	r2, #0
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fa fd37 	bl	800386c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 8008dfe:	4b50      	ldr	r3, [pc, #320]	; (8008f40 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8008e00:	2101      	movs	r1, #1
 8008e02:	2200      	movs	r2, #0
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fa fd31 	bl	800386c <HAL_GPIO_WritePin>
			adc_selection=0;
 8008e0a:	4b4c      	ldr	r3, [pc, #304]	; (8008f3c <HAL_ADC_ConvCpltCallback+0x2b0>)
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	601a      	str	r2, [r3, #0]
			break;
 8008e10:	e002      	b.n	8008e18 <HAL_ADC_ConvCpltCallback+0x18c>
		default:
			Error_Handler();
 8008e12:	f002 f957 	bl	800b0c4 <Error_Handler>
			break;
 8008e16:	bf00      	nop
		}

		HAL_TIM_Base_Start_IT(&htim15);
 8008e18:	484c      	ldr	r0, [pc, #304]	; (8008f4c <HAL_ADC_ConvCpltCallback+0x2c0>)
 8008e1a:	f7fb ffdd 	bl	8004dd8 <HAL_TIM_Base_Start_IT>

		for(uint32_t i=0; i<3; i++)
 8008e1e:	2300      	movs	r3, #0
 8008e20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e22:	e049      	b.n	8008eb8 <HAL_ADC_ConvCpltCallback+0x22c>
		{
			slaveConvertedValue[i]=(ADCDualConvertedValues[i]>>16)&0xFFFF;
 8008e24:	4a4a      	ldr	r2, [pc, #296]	; (8008f50 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8008e26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e2c:	0c1a      	lsrs	r2, r3, #16
 8008e2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8008e36:	440b      	add	r3, r1
 8008e38:	f843 2c78 	str.w	r2, [r3, #-120]
			masterConvertedValue[i]=ADCDualConvertedValues[i]&0xFFFF;
 8008e3c:	4a44      	ldr	r2, [pc, #272]	; (8008f50 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8008e3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8008e4e:	440b      	add	r3, r1
 8008e50:	f843 2c6c 	str.w	r2, [r3, #-108]
			if(masterConvertedValue[i]>slaveConvertedValue[i])
 8008e54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 8008e62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8008e6a:	440b      	add	r3, r1
 8008e6c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d916      	bls.n	8008ea2 <HAL_ADC_ConvCpltCallback+0x216>
			{
				convertedValue[i]=masterConvertedValue[i]-slaveConvertedValue[i];
 8008e74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 8008e82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8008e8a:	440b      	add	r3, r1
 8008e8c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8008e90:	1ad2      	subs	r2, r2, r3
 8008e92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8008e9a:	440b      	add	r3, r1
 8008e9c:	f843 2c60 	str.w	r2, [r3, #-96]
 8008ea0:	e007      	b.n	8008eb2 <HAL_ADC_ConvCpltCallback+0x226>
			}
			else //this should only happen due to error in reading at low voltages
			{
				convertedValue[i]=0;
 8008ea2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008eaa:	4413      	add	r3, r2
 8008eac:	2200      	movs	r2, #0
 8008eae:	f843 2c60 	str.w	r2, [r3, #-96]
		for(uint32_t i=0; i<3; i++)
 8008eb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008eb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d9b2      	bls.n	8008e24 <HAL_ADC_ConvCpltCallback+0x198>
			}
		}

		if (HAL_ADCEx_MultiModeStop_DMA(&hadc1) != HAL_OK)
 8008ebe:	4825      	ldr	r0, [pc, #148]	; (8008f54 <HAL_ADC_ConvCpltCallback+0x2c8>)
 8008ec0:	f7f8 fcd6 	bl	8001870 <HAL_ADCEx_MultiModeStop_DMA>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <HAL_ADC_ConvCpltCallback+0x242>
		{
			Error_Handler();
 8008eca:	f002 f8fb 	bl	800b0c4 <Error_Handler>
		}

		//if not all switches are used this still does not take too much time and it is fine to write some extra 0s to variables
		switch(sampled)
 8008ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	f200 8317 	bhi.w	8009504 <HAL_ADC_ConvCpltCallback+0x878>
 8008ed6:	a201      	add	r2, pc, #4	; (adr r2, 8008edc <HAL_ADC_ConvCpltCallback+0x250>)
 8008ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008edc:	08008eed 	.word	0x08008eed
 8008ee0:	0800903f 	.word	0x0800903f
 8008ee4:	08009165 	.word	0x08009165
 8008ee8:	08009311 	.word	0x08009311
		{
		case 0:
			U5I0[I0_rolling_average_position]=convertedValue[0];
 8008eec:	4b1a      	ldr	r3, [pc, #104]	; (8008f58 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6a3a      	ldr	r2, [r7, #32]
 8008ef2:	491a      	ldr	r1, [pc, #104]	; (8008f5c <HAL_ADC_ConvCpltCallback+0x2d0>)
 8008ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U6I0[I0_rolling_average_position]=convertedValue[1];
 8008ef8:	4b17      	ldr	r3, [pc, #92]	; (8008f58 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008efe:	4918      	ldr	r1, [pc, #96]	; (8008f60 <HAL_ADC_ConvCpltCallback+0x2d4>)
 8008f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U7I0[I0_rolling_average_position]=convertedValue[2];
 8008f04:	4b14      	ldr	r3, [pc, #80]	; (8008f58 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f0a:	4916      	ldr	r1, [pc, #88]	; (8008f64 <HAL_ADC_ConvCpltCallback+0x2d8>)
 8008f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (I0_rolling_average_position == I_ROLLING_AVERAGE-1)
 8008f10:	4b11      	ldr	r3, [pc, #68]	; (8008f58 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b0f      	cmp	r3, #15
 8008f16:	d103      	bne.n	8008f20 <HAL_ADC_ConvCpltCallback+0x294>
			{
				I0_rolling_average_position=0;
 8008f18:	4b0f      	ldr	r3, [pc, #60]	; (8008f58 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	e004      	b.n	8008f2a <HAL_ADC_ConvCpltCallback+0x29e>
			}
			else
			{
				I0_rolling_average_position++;
 8008f20:	4b0d      	ldr	r3, [pc, #52]	; (8008f58 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3301      	adds	r3, #1
 8008f26:	4a0c      	ldr	r2, [pc, #48]	; (8008f58 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8008f28:	6013      	str	r3, [r2, #0]
			}

			uint32_t U5I0_raw=0; uint32_t U6I0_raw=0; uint32_t U7I0_raw=0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f2e:	2300      	movs	r3, #0
 8008f30:	677b      	str	r3, [r7, #116]	; 0x74
 8008f32:	2300      	movs	r3, #0
 8008f34:	673b      	str	r3, [r7, #112]	; 0x70
			for(uint32_t i=0; i<I_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 8008f36:	2300      	movs	r3, #0
 8008f38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f3a:	e02d      	b.n	8008f98 <HAL_ADC_ConvCpltCallback+0x30c>
 8008f3c:	20000848 	.word	0x20000848
 8008f40:	48000400 	.word	0x48000400
 8008f44:	20000490 	.word	0x20000490
 8008f48:	20000098 	.word	0x20000098
 8008f4c:	20000310 	.word	0x20000310
 8008f50:	20000704 	.word	0x20000704
 8008f54:	200005cc 	.word	0x200005cc
 8008f58:	20000900 	.word	0x20000900
 8008f5c:	200009c4 	.word	0x200009c4
 8008f60:	2000085c 	.word	0x2000085c
 8008f64:	20000588 	.word	0x20000588
			{
				U5I0_raw+=U5I0[i];
 8008f68:	4a92      	ldr	r2, [pc, #584]	; (80091b4 <HAL_ADC_ConvCpltCallback+0x528>)
 8008f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f72:	4413      	add	r3, r2
 8008f74:	67bb      	str	r3, [r7, #120]	; 0x78
				U6I0_raw+=U6I0[i];
 8008f76:	4a90      	ldr	r2, [pc, #576]	; (80091b8 <HAL_ADC_ConvCpltCallback+0x52c>)
 8008f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008f80:	4413      	add	r3, r2
 8008f82:	677b      	str	r3, [r7, #116]	; 0x74
				U7I0_raw+=U7I0[i];
 8008f84:	4a8d      	ldr	r2, [pc, #564]	; (80091bc <HAL_ADC_ConvCpltCallback+0x530>)
 8008f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f8c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008f8e:	4413      	add	r3, r2
 8008f90:	673b      	str	r3, [r7, #112]	; 0x70
			for(uint32_t i=0; i<I_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 8008f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f94:	3301      	adds	r3, #1
 8008f96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f9a:	2b0f      	cmp	r3, #15
 8008f9c:	d9e4      	bls.n	8008f68 <HAL_ADC_ConvCpltCallback+0x2dc>
			}
			U5I0_raw/=I_ROLLING_AVERAGE; U6I0_raw/=I_ROLLING_AVERAGE; U7I0_raw/=I_ROLLING_AVERAGE; //TODO: calculated U5I0_calculated from U5I0_raw
 8008f9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fa0:	091b      	lsrs	r3, r3, #4
 8008fa2:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fa6:	091b      	lsrs	r3, r3, #4
 8008fa8:	677b      	str	r3, [r7, #116]	; 0x74
 8008faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fac:	091b      	lsrs	r3, r3, #4
 8008fae:	673b      	str	r3, [r7, #112]	; 0x70
			U5I0_real=U5I0_raw; U6I0_real=U6I0_raw; U7I0_real=U7I0_raw; //TODO: warnings on over/undercurrent, overcurrent shutoff
 8008fb0:	4a83      	ldr	r2, [pc, #524]	; (80091c0 <HAL_ADC_ConvCpltCallback+0x534>)
 8008fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fb4:	6013      	str	r3, [r2, #0]
 8008fb6:	4a83      	ldr	r2, [pc, #524]	; (80091c4 <HAL_ADC_ConvCpltCallback+0x538>)
 8008fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	4a82      	ldr	r2, [pc, #520]	; (80091c8 <HAL_ADC_ConvCpltCallback+0x53c>)
 8008fbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fc0:	6013      	str	r3, [r2, #0]

			//TODO: check overcurrent and switch off immediately if too high

			//TODO: probably move this to main because it isn't so important
			//TODO: undercurrent warnings need to only happen when enabled, and logic for enabling them needs to exist
			if (U5I0_real>warn_overcurrent_U5I0)
 8008fc2:	4b82      	ldr	r3, [pc, #520]	; (80091cc <HAL_ADC_ConvCpltCallback+0x540>)
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	4b7d      	ldr	r3, [pc, #500]	; (80091c0 <HAL_ADC_ConvCpltCallback+0x534>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d202      	bcs.n	8008fd6 <HAL_ADC_ConvCpltCallback+0x34a>
			{
				Set_Error(WARN_OVERCURR_U5I0);
 8008fd0:	20c6      	movs	r0, #198	; 0xc6
 8008fd2:	f000 fe7b 	bl	8009ccc <Set_Error>
			}
			if (U5I0_real<warn_undercurrent_U5I0)
 8008fd6:	4b7e      	ldr	r3, [pc, #504]	; (80091d0 <HAL_ADC_ConvCpltCallback+0x544>)
 8008fd8:	881b      	ldrh	r3, [r3, #0]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	4b78      	ldr	r3, [pc, #480]	; (80091c0 <HAL_ADC_ConvCpltCallback+0x534>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d902      	bls.n	8008fea <HAL_ADC_ConvCpltCallback+0x35e>
			{
				Set_Error(WARN_UNDERCURR_U5I0);
 8008fe4:	20c5      	movs	r0, #197	; 0xc5
 8008fe6:	f000 fe71 	bl	8009ccc <Set_Error>
			}
			if (U6I0_real>warn_overcurrent_U6I0)
 8008fea:	4b7a      	ldr	r3, [pc, #488]	; (80091d4 <HAL_ADC_ConvCpltCallback+0x548>)
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	4b74      	ldr	r3, [pc, #464]	; (80091c4 <HAL_ADC_ConvCpltCallback+0x538>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d202      	bcs.n	8008ffe <HAL_ADC_ConvCpltCallback+0x372>
			{
				Set_Error(WARN_OVERCURR_U6I0);
 8008ff8:	20cf      	movs	r0, #207	; 0xcf
 8008ffa:	f000 fe67 	bl	8009ccc <Set_Error>
			}
			if (U6I0_real<warn_undercurrent_U6I0)
 8008ffe:	4b76      	ldr	r3, [pc, #472]	; (80091d8 <HAL_ADC_ConvCpltCallback+0x54c>)
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	461a      	mov	r2, r3
 8009004:	4b6f      	ldr	r3, [pc, #444]	; (80091c4 <HAL_ADC_ConvCpltCallback+0x538>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	429a      	cmp	r2, r3
 800900a:	d902      	bls.n	8009012 <HAL_ADC_ConvCpltCallback+0x386>
			{
				Set_Error(WARN_UNDERCURR_U6I0);
 800900c:	20ce      	movs	r0, #206	; 0xce
 800900e:	f000 fe5d 	bl	8009ccc <Set_Error>
			}
			if (U7I0_real>warn_overcurrent_U7I0)
 8009012:	4b72      	ldr	r3, [pc, #456]	; (80091dc <HAL_ADC_ConvCpltCallback+0x550>)
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	4b6b      	ldr	r3, [pc, #428]	; (80091c8 <HAL_ADC_ConvCpltCallback+0x53c>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	429a      	cmp	r2, r3
 800901e:	d202      	bcs.n	8009026 <HAL_ADC_ConvCpltCallback+0x39a>
			{
				Set_Error(WARN_OVERCURR_U7I0);
 8009020:	20d8      	movs	r0, #216	; 0xd8
 8009022:	f000 fe53 	bl	8009ccc <Set_Error>
			}
			if (U7I0_real<warn_undercurrent_U7I0)
 8009026:	4b6e      	ldr	r3, [pc, #440]	; (80091e0 <HAL_ADC_ConvCpltCallback+0x554>)
 8009028:	881b      	ldrh	r3, [r3, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	4b66      	ldr	r3, [pc, #408]	; (80091c8 <HAL_ADC_ConvCpltCallback+0x53c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	429a      	cmp	r2, r3
 8009032:	f240 826b 	bls.w	800950c <HAL_ADC_ConvCpltCallback+0x880>
			{
				Set_Error(WARN_UNDERCURR_U7I0);
 8009036:	20d7      	movs	r0, #215	; 0xd7
 8009038:	f000 fe48 	bl	8009ccc <Set_Error>
			}
			//TODO: test all these limits when I have power supply and power trimmer

			break;
 800903c:	e266      	b.n	800950c <HAL_ADC_ConvCpltCallback+0x880>
		case 1:
			U5I1[I1_rolling_average_position]=convertedValue[0];
 800903e:	4b69      	ldr	r3, [pc, #420]	; (80091e4 <HAL_ADC_ConvCpltCallback+0x558>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6a3a      	ldr	r2, [r7, #32]
 8009044:	4968      	ldr	r1, [pc, #416]	; (80091e8 <HAL_ADC_ConvCpltCallback+0x55c>)
 8009046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U6I1[I1_rolling_average_position]=convertedValue[1];
 800904a:	4b66      	ldr	r3, [pc, #408]	; (80091e4 <HAL_ADC_ConvCpltCallback+0x558>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009050:	4966      	ldr	r1, [pc, #408]	; (80091ec <HAL_ADC_ConvCpltCallback+0x560>)
 8009052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U7I1[I1_rolling_average_position]=convertedValue[2];
 8009056:	4b63      	ldr	r3, [pc, #396]	; (80091e4 <HAL_ADC_ConvCpltCallback+0x558>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800905c:	4964      	ldr	r1, [pc, #400]	; (80091f0 <HAL_ADC_ConvCpltCallback+0x564>)
 800905e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (I1_rolling_average_position == I_ROLLING_AVERAGE-1)
 8009062:	4b60      	ldr	r3, [pc, #384]	; (80091e4 <HAL_ADC_ConvCpltCallback+0x558>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b0f      	cmp	r3, #15
 8009068:	d103      	bne.n	8009072 <HAL_ADC_ConvCpltCallback+0x3e6>
			{
				I1_rolling_average_position=0;
 800906a:	4b5e      	ldr	r3, [pc, #376]	; (80091e4 <HAL_ADC_ConvCpltCallback+0x558>)
 800906c:	2200      	movs	r2, #0
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	e004      	b.n	800907c <HAL_ADC_ConvCpltCallback+0x3f0>
			}
			else
			{
				I1_rolling_average_position++;
 8009072:	4b5c      	ldr	r3, [pc, #368]	; (80091e4 <HAL_ADC_ConvCpltCallback+0x558>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3301      	adds	r3, #1
 8009078:	4a5a      	ldr	r2, [pc, #360]	; (80091e4 <HAL_ADC_ConvCpltCallback+0x558>)
 800907a:	6013      	str	r3, [r2, #0]
			}

			uint32_t U5I1_raw=0; uint32_t U6I1_raw=1; uint32_t U7I1_raw=0;
 800907c:	2300      	movs	r3, #0
 800907e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009080:	2301      	movs	r3, #1
 8009082:	667b      	str	r3, [r7, #100]	; 0x64
 8009084:	2300      	movs	r3, #0
 8009086:	663b      	str	r3, [r7, #96]	; 0x60
			for(uint32_t i=0; i<I_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 8009088:	2300      	movs	r3, #0
 800908a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800908c:	e017      	b.n	80090be <HAL_ADC_ConvCpltCallback+0x432>
			{
				U5I1_raw+=U5I1[i];
 800908e:	4a56      	ldr	r2, [pc, #344]	; (80091e8 <HAL_ADC_ConvCpltCallback+0x55c>)
 8009090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009096:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009098:	4413      	add	r3, r2
 800909a:	66bb      	str	r3, [r7, #104]	; 0x68
				U6I1_raw+=U6I1[i];
 800909c:	4a53      	ldr	r2, [pc, #332]	; (80091ec <HAL_ADC_ConvCpltCallback+0x560>)
 800909e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80090a6:	4413      	add	r3, r2
 80090a8:	667b      	str	r3, [r7, #100]	; 0x64
				U7I1_raw+=U7I1[i];
 80090aa:	4a51      	ldr	r2, [pc, #324]	; (80091f0 <HAL_ADC_ConvCpltCallback+0x564>)
 80090ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80090b4:	4413      	add	r3, r2
 80090b6:	663b      	str	r3, [r7, #96]	; 0x60
			for(uint32_t i=0; i<I_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 80090b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ba:	3301      	adds	r3, #1
 80090bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090c0:	2b0f      	cmp	r3, #15
 80090c2:	d9e4      	bls.n	800908e <HAL_ADC_ConvCpltCallback+0x402>
			}
			U5I1_raw/=I_ROLLING_AVERAGE; U6I1_raw/=I_ROLLING_AVERAGE; U7I1_raw/=I_ROLLING_AVERAGE; //TODO: calculated U5I0_calculated from U5I0_raw
 80090c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090c6:	091b      	lsrs	r3, r3, #4
 80090c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80090ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090cc:	091b      	lsrs	r3, r3, #4
 80090ce:	667b      	str	r3, [r7, #100]	; 0x64
 80090d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090d2:	091b      	lsrs	r3, r3, #4
 80090d4:	663b      	str	r3, [r7, #96]	; 0x60
			U5I1_real=U5I1_raw; U6I1_real=U6I1_raw; U7I1_real=U7I1_raw; //TODO: warnings on over/undercurrent, overcurrent shutoff
 80090d6:	4a47      	ldr	r2, [pc, #284]	; (80091f4 <HAL_ADC_ConvCpltCallback+0x568>)
 80090d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090da:	6013      	str	r3, [r2, #0]
 80090dc:	4a46      	ldr	r2, [pc, #280]	; (80091f8 <HAL_ADC_ConvCpltCallback+0x56c>)
 80090de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090e0:	6013      	str	r3, [r2, #0]
 80090e2:	4a46      	ldr	r2, [pc, #280]	; (80091fc <HAL_ADC_ConvCpltCallback+0x570>)
 80090e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090e6:	6013      	str	r3, [r2, #0]

			//TODO: check overcurrent and switch off immediately if too high

			//TODO: probably move this to main because it isn't so important
			if (U5I1_real>warn_overcurrent_U5I1)
 80090e8:	4b45      	ldr	r3, [pc, #276]	; (8009200 <HAL_ADC_ConvCpltCallback+0x574>)
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	461a      	mov	r2, r3
 80090ee:	4b41      	ldr	r3, [pc, #260]	; (80091f4 <HAL_ADC_ConvCpltCallback+0x568>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d202      	bcs.n	80090fc <HAL_ADC_ConvCpltCallback+0x470>
			{
				Set_Error(WARN_OVERCURR_U5I1);
 80090f6:	20c8      	movs	r0, #200	; 0xc8
 80090f8:	f000 fde8 	bl	8009ccc <Set_Error>
			}
			if (U5I1_real<warn_undercurrent_U5I1)
 80090fc:	4b41      	ldr	r3, [pc, #260]	; (8009204 <HAL_ADC_ConvCpltCallback+0x578>)
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	461a      	mov	r2, r3
 8009102:	4b3c      	ldr	r3, [pc, #240]	; (80091f4 <HAL_ADC_ConvCpltCallback+0x568>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d902      	bls.n	8009110 <HAL_ADC_ConvCpltCallback+0x484>
			{
				Set_Error(WARN_UNDERCURR_U5I1);
 800910a:	20c7      	movs	r0, #199	; 0xc7
 800910c:	f000 fdde 	bl	8009ccc <Set_Error>
			}
			if (U6I1_real>warn_overcurrent_U6I1)
 8009110:	4b3d      	ldr	r3, [pc, #244]	; (8009208 <HAL_ADC_ConvCpltCallback+0x57c>)
 8009112:	881b      	ldrh	r3, [r3, #0]
 8009114:	461a      	mov	r2, r3
 8009116:	4b38      	ldr	r3, [pc, #224]	; (80091f8 <HAL_ADC_ConvCpltCallback+0x56c>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d202      	bcs.n	8009124 <HAL_ADC_ConvCpltCallback+0x498>
			{
				Set_Error(WARN_OVERCURR_U6I1);
 800911e:	20d1      	movs	r0, #209	; 0xd1
 8009120:	f000 fdd4 	bl	8009ccc <Set_Error>
			}
			if (U6I1_real<warn_undercurrent_U6I1)
 8009124:	4b39      	ldr	r3, [pc, #228]	; (800920c <HAL_ADC_ConvCpltCallback+0x580>)
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	461a      	mov	r2, r3
 800912a:	4b33      	ldr	r3, [pc, #204]	; (80091f8 <HAL_ADC_ConvCpltCallback+0x56c>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	d902      	bls.n	8009138 <HAL_ADC_ConvCpltCallback+0x4ac>
			{
				Set_Error(WARN_UNDERCURR_U6I1);
 8009132:	20d0      	movs	r0, #208	; 0xd0
 8009134:	f000 fdca 	bl	8009ccc <Set_Error>
			}
			if (U7I1_real>warn_overcurrent_U7I1)
 8009138:	4b35      	ldr	r3, [pc, #212]	; (8009210 <HAL_ADC_ConvCpltCallback+0x584>)
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	461a      	mov	r2, r3
 800913e:	4b2f      	ldr	r3, [pc, #188]	; (80091fc <HAL_ADC_ConvCpltCallback+0x570>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	429a      	cmp	r2, r3
 8009144:	d202      	bcs.n	800914c <HAL_ADC_ConvCpltCallback+0x4c0>
			{
				Set_Error(WARN_OVERCURR_U7I1);
 8009146:	20da      	movs	r0, #218	; 0xda
 8009148:	f000 fdc0 	bl	8009ccc <Set_Error>
			}
			if (U7I1_real<warn_undercurrent_U7I1)
 800914c:	4b31      	ldr	r3, [pc, #196]	; (8009214 <HAL_ADC_ConvCpltCallback+0x588>)
 800914e:	881b      	ldrh	r3, [r3, #0]
 8009150:	461a      	mov	r2, r3
 8009152:	4b2a      	ldr	r3, [pc, #168]	; (80091fc <HAL_ADC_ConvCpltCallback+0x570>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	429a      	cmp	r2, r3
 8009158:	f240 81da 	bls.w	8009510 <HAL_ADC_ConvCpltCallback+0x884>
			{
				Set_Error(WARN_UNDERCURR_U7I1);
 800915c:	20d9      	movs	r0, #217	; 0xd9
 800915e:	f000 fdb5 	bl	8009ccc <Set_Error>
			}
			//TODO: test all these limits when I have power supply and power trimmer

			break;
 8009162:	e1d5      	b.n	8009510 <HAL_ADC_ConvCpltCallback+0x884>
		case 2:
			U5T[T_rolling_average_position]=convertedValue[0];
 8009164:	4b2c      	ldr	r3, [pc, #176]	; (8009218 <HAL_ADC_ConvCpltCallback+0x58c>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6a3a      	ldr	r2, [r7, #32]
 800916a:	492c      	ldr	r1, [pc, #176]	; (800921c <HAL_ADC_ConvCpltCallback+0x590>)
 800916c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U6T[T_rolling_average_position]=convertedValue[1];
 8009170:	4b29      	ldr	r3, [pc, #164]	; (8009218 <HAL_ADC_ConvCpltCallback+0x58c>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009176:	492a      	ldr	r1, [pc, #168]	; (8009220 <HAL_ADC_ConvCpltCallback+0x594>)
 8009178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U7T[T_rolling_average_position]=convertedValue[2];
 800917c:	4b26      	ldr	r3, [pc, #152]	; (8009218 <HAL_ADC_ConvCpltCallback+0x58c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009182:	4928      	ldr	r1, [pc, #160]	; (8009224 <HAL_ADC_ConvCpltCallback+0x598>)
 8009184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (T_rolling_average_position == T_ROLLING_AVERAGE-1)
 8009188:	4b23      	ldr	r3, [pc, #140]	; (8009218 <HAL_ADC_ConvCpltCallback+0x58c>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b0f      	cmp	r3, #15
 800918e:	d103      	bne.n	8009198 <HAL_ADC_ConvCpltCallback+0x50c>
			{
				T_rolling_average_position=0;
 8009190:	4b21      	ldr	r3, [pc, #132]	; (8009218 <HAL_ADC_ConvCpltCallback+0x58c>)
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	e004      	b.n	80091a2 <HAL_ADC_ConvCpltCallback+0x516>
			}
			else
			{
				T_rolling_average_position++;
 8009198:	4b1f      	ldr	r3, [pc, #124]	; (8009218 <HAL_ADC_ConvCpltCallback+0x58c>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3301      	adds	r3, #1
 800919e:	4a1e      	ldr	r2, [pc, #120]	; (8009218 <HAL_ADC_ConvCpltCallback+0x58c>)
 80091a0:	6013      	str	r3, [r2, #0]
			}

			uint32_t U5T_raw=0; uint32_t U6T_raw=1; uint32_t U7T_raw=0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80091a6:	2301      	movs	r3, #1
 80091a8:	657b      	str	r3, [r7, #84]	; 0x54
 80091aa:	2300      	movs	r3, #0
 80091ac:	653b      	str	r3, [r7, #80]	; 0x50
			for(uint32_t i=0; i<T_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 80091ae:	2300      	movs	r3, #0
 80091b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091b2:	e051      	b.n	8009258 <HAL_ADC_ConvCpltCallback+0x5cc>
 80091b4:	200009c4 	.word	0x200009c4
 80091b8:	2000085c 	.word	0x2000085c
 80091bc:	20000588 	.word	0x20000588
 80091c0:	20000584 	.word	0x20000584
 80091c4:	20000758 	.word	0x20000758
 80091c8:	20000354 	.word	0x20000354
 80091cc:	200005c8 	.word	0x200005c8
 80091d0:	200001fc 	.word	0x200001fc
 80091d4:	20000220 	.word	0x20000220
 80091d8:	20000ae8 	.word	0x20000ae8
 80091dc:	2000063a 	.word	0x2000063a
 80091e0:	20000908 	.word	0x20000908
 80091e4:	200006f4 	.word	0x200006f4
 80091e8:	20000710 	.word	0x20000710
 80091ec:	2000089c 	.word	0x2000089c
 80091f0:	20000358 	.word	0x20000358
 80091f4:	20000688 	.word	0x20000688
 80091f8:	20000aec 	.word	0x20000aec
 80091fc:	2000056c 	.word	0x2000056c
 8009200:	20000a4c 	.word	0x20000a4c
 8009204:	20000956 	.word	0x20000956
 8009208:	20000844 	.word	0x20000844
 800920c:	200008e0 	.word	0x200008e0
 8009210:	20000484 	.word	0x20000484
 8009214:	200000f2 	.word	0x200000f2
 8009218:	200000a4 	.word	0x200000a4
 800921c:	20000af4 	.word	0x20000af4
 8009220:	200000a8 	.word	0x200000a8
 8009224:	20000290 	.word	0x20000290
			{
				U5T_raw+=U5T[i];
 8009228:	4a59      	ldr	r2, [pc, #356]	; (8009390 <HAL_ADC_ConvCpltCallback+0x704>)
 800922a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800922c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009232:	4413      	add	r3, r2
 8009234:	65bb      	str	r3, [r7, #88]	; 0x58
				U6T_raw+=U6T[i];
 8009236:	4a57      	ldr	r2, [pc, #348]	; (8009394 <HAL_ADC_ConvCpltCallback+0x708>)
 8009238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800923a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800923e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009240:	4413      	add	r3, r2
 8009242:	657b      	str	r3, [r7, #84]	; 0x54
				U7T_raw+=U7T[i];
 8009244:	4a54      	ldr	r2, [pc, #336]	; (8009398 <HAL_ADC_ConvCpltCallback+0x70c>)
 8009246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800924c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800924e:	4413      	add	r3, r2
 8009250:	653b      	str	r3, [r7, #80]	; 0x50
			for(uint32_t i=0; i<T_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 8009252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009254:	3301      	adds	r3, #1
 8009256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800925a:	2b0f      	cmp	r3, #15
 800925c:	d9e4      	bls.n	8009228 <HAL_ADC_ConvCpltCallback+0x59c>
			}
			U5T_raw/=T_ROLLING_AVERAGE; U6T_raw/=T_ROLLING_AVERAGE; U7T_raw/=T_ROLLING_AVERAGE; //TODO: calculated U5I0_calculated from U5I0_raw
 800925e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009260:	091b      	lsrs	r3, r3, #4
 8009262:	65bb      	str	r3, [r7, #88]	; 0x58
 8009264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009266:	091b      	lsrs	r3, r3, #4
 8009268:	657b      	str	r3, [r7, #84]	; 0x54
 800926a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800926c:	091b      	lsrs	r3, r3, #4
 800926e:	653b      	str	r3, [r7, #80]	; 0x50
			U5T_real=Parse_Temperature(U5T_raw); U6T_real=Parse_Temperature(U6T_raw); U7T_real=Parse_Temperature(U7T_raw); //TODO: warnings on over/undercurrent, overcurrent shutoff
 8009270:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009272:	f001 ff53 	bl	800b11c <Parse_Temperature>
 8009276:	4602      	mov	r2, r0
 8009278:	4b48      	ldr	r3, [pc, #288]	; (800939c <HAL_ADC_ConvCpltCallback+0x710>)
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800927e:	f001 ff4d 	bl	800b11c <Parse_Temperature>
 8009282:	4602      	mov	r2, r0
 8009284:	4b46      	ldr	r3, [pc, #280]	; (80093a0 <HAL_ADC_ConvCpltCallback+0x714>)
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800928a:	f001 ff47 	bl	800b11c <Parse_Temperature>
 800928e:	4602      	mov	r2, r0
 8009290:	4b44      	ldr	r3, [pc, #272]	; (80093a4 <HAL_ADC_ConvCpltCallback+0x718>)
 8009292:	601a      	str	r2, [r3, #0]

			//TODO: probably move this to main because it isn't so important
			if (U5T_real>warn_overtemperature_U5)
 8009294:	4b44      	ldr	r3, [pc, #272]	; (80093a8 <HAL_ADC_ConvCpltCallback+0x71c>)
 8009296:	881b      	ldrh	r3, [r3, #0]
 8009298:	461a      	mov	r2, r3
 800929a:	4b40      	ldr	r3, [pc, #256]	; (800939c <HAL_ADC_ConvCpltCallback+0x710>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d202      	bcs.n	80092a8 <HAL_ADC_ConvCpltCallback+0x61c>
			{
				Set_Error(WARN_OVERTEMP_U5);
 80092a2:	20c4      	movs	r0, #196	; 0xc4
 80092a4:	f000 fd12 	bl	8009ccc <Set_Error>
			}
			if (U5T_real<warn_undertemperature_U5)
 80092a8:	4b40      	ldr	r3, [pc, #256]	; (80093ac <HAL_ADC_ConvCpltCallback+0x720>)
 80092aa:	881b      	ldrh	r3, [r3, #0]
 80092ac:	461a      	mov	r2, r3
 80092ae:	4b3b      	ldr	r3, [pc, #236]	; (800939c <HAL_ADC_ConvCpltCallback+0x710>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d902      	bls.n	80092bc <HAL_ADC_ConvCpltCallback+0x630>
			{
				Set_Error(WARN_UNDERTEMP_U5);
 80092b6:	20c3      	movs	r0, #195	; 0xc3
 80092b8:	f000 fd08 	bl	8009ccc <Set_Error>
			}
			if (U6T_real>warn_overtemperature_U6)
 80092bc:	4b3c      	ldr	r3, [pc, #240]	; (80093b0 <HAL_ADC_ConvCpltCallback+0x724>)
 80092be:	881b      	ldrh	r3, [r3, #0]
 80092c0:	461a      	mov	r2, r3
 80092c2:	4b37      	ldr	r3, [pc, #220]	; (80093a0 <HAL_ADC_ConvCpltCallback+0x714>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d202      	bcs.n	80092d0 <HAL_ADC_ConvCpltCallback+0x644>
			{
				Set_Error(WARN_OVERTEMP_U6);
 80092ca:	20cd      	movs	r0, #205	; 0xcd
 80092cc:	f000 fcfe 	bl	8009ccc <Set_Error>
			}
			if (U6T_real<warn_undertemperature_U6)
 80092d0:	4b38      	ldr	r3, [pc, #224]	; (80093b4 <HAL_ADC_ConvCpltCallback+0x728>)
 80092d2:	881b      	ldrh	r3, [r3, #0]
 80092d4:	461a      	mov	r2, r3
 80092d6:	4b32      	ldr	r3, [pc, #200]	; (80093a0 <HAL_ADC_ConvCpltCallback+0x714>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d902      	bls.n	80092e4 <HAL_ADC_ConvCpltCallback+0x658>
			{
				Set_Error(WARN_UNDERTEMP_U6);
 80092de:	20cc      	movs	r0, #204	; 0xcc
 80092e0:	f000 fcf4 	bl	8009ccc <Set_Error>
			}
			if (U7T_real>warn_overtemperature_U7)
 80092e4:	4b34      	ldr	r3, [pc, #208]	; (80093b8 <HAL_ADC_ConvCpltCallback+0x72c>)
 80092e6:	881b      	ldrh	r3, [r3, #0]
 80092e8:	461a      	mov	r2, r3
 80092ea:	4b2e      	ldr	r3, [pc, #184]	; (80093a4 <HAL_ADC_ConvCpltCallback+0x718>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d202      	bcs.n	80092f8 <HAL_ADC_ConvCpltCallback+0x66c>
			{
				Set_Error(WARN_OVERTEMP_U7);
 80092f2:	20d6      	movs	r0, #214	; 0xd6
 80092f4:	f000 fcea 	bl	8009ccc <Set_Error>
			}
			if (U7T_real<warn_undertemperature_U7)
 80092f8:	4b30      	ldr	r3, [pc, #192]	; (80093bc <HAL_ADC_ConvCpltCallback+0x730>)
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	461a      	mov	r2, r3
 80092fe:	4b29      	ldr	r3, [pc, #164]	; (80093a4 <HAL_ADC_ConvCpltCallback+0x718>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	429a      	cmp	r2, r3
 8009304:	f240 8106 	bls.w	8009514 <HAL_ADC_ConvCpltCallback+0x888>
			{
				Set_Error(WARN_UNDERTEMP_U7);
 8009308:	20d5      	movs	r0, #213	; 0xd5
 800930a:	f000 fcdf 	bl	8009ccc <Set_Error>
			}
			//TODO: test all these limits when I have power supply and power trimmer

			break;
 800930e:	e101      	b.n	8009514 <HAL_ADC_ConvCpltCallback+0x888>
		case 3:
			U5V[V_rolling_average_position]=convertedValue[0]; U5GNDV[V_rolling_average_position]=slaveConvertedValue[0];
 8009310:	4b2b      	ldr	r3, [pc, #172]	; (80093c0 <HAL_ADC_ConvCpltCallback+0x734>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6a3a      	ldr	r2, [r7, #32]
 8009316:	492b      	ldr	r1, [pc, #172]	; (80093c4 <HAL_ADC_ConvCpltCallback+0x738>)
 8009318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800931c:	4b28      	ldr	r3, [pc, #160]	; (80093c0 <HAL_ADC_ConvCpltCallback+0x734>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	4929      	ldr	r1, [pc, #164]	; (80093c8 <HAL_ADC_ConvCpltCallback+0x73c>)
 8009324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U6V[V_rolling_average_position]=convertedValue[1]; U6GNDV[V_rolling_average_position]=slaveConvertedValue[1];
 8009328:	4b25      	ldr	r3, [pc, #148]	; (80093c0 <HAL_ADC_ConvCpltCallback+0x734>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800932e:	4927      	ldr	r1, [pc, #156]	; (80093cc <HAL_ADC_ConvCpltCallback+0x740>)
 8009330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009334:	4b22      	ldr	r3, [pc, #136]	; (80093c0 <HAL_ADC_ConvCpltCallback+0x734>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	4925      	ldr	r1, [pc, #148]	; (80093d0 <HAL_ADC_ConvCpltCallback+0x744>)
 800933c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			U7V[V_rolling_average_position]=convertedValue[2]; U7GNDV[V_rolling_average_position]=slaveConvertedValue[2];
 8009340:	4b1f      	ldr	r3, [pc, #124]	; (80093c0 <HAL_ADC_ConvCpltCallback+0x734>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009346:	4923      	ldr	r1, [pc, #140]	; (80093d4 <HAL_ADC_ConvCpltCallback+0x748>)
 8009348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800934c:	4b1c      	ldr	r3, [pc, #112]	; (80093c0 <HAL_ADC_ConvCpltCallback+0x734>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	4921      	ldr	r1, [pc, #132]	; (80093d8 <HAL_ADC_ConvCpltCallback+0x74c>)
 8009354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (V_rolling_average_position == V_ROLLING_AVERAGE-1)
 8009358:	4b19      	ldr	r3, [pc, #100]	; (80093c0 <HAL_ADC_ConvCpltCallback+0x734>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b0f      	cmp	r3, #15
 800935e:	d103      	bne.n	8009368 <HAL_ADC_ConvCpltCallback+0x6dc>
			{
				V_rolling_average_position=0;
 8009360:	4b17      	ldr	r3, [pc, #92]	; (80093c0 <HAL_ADC_ConvCpltCallback+0x734>)
 8009362:	2200      	movs	r2, #0
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	e004      	b.n	8009372 <HAL_ADC_ConvCpltCallback+0x6e6>
			}
			else
			{
				V_rolling_average_position++;
 8009368:	4b15      	ldr	r3, [pc, #84]	; (80093c0 <HAL_ADC_ConvCpltCallback+0x734>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	3301      	adds	r3, #1
 800936e:	4a14      	ldr	r2, [pc, #80]	; (80093c0 <HAL_ADC_ConvCpltCallback+0x734>)
 8009370:	6013      	str	r3, [r2, #0]
			}

			uint32_t U5V_raw=0; uint32_t U6V_raw=0; uint32_t U7V_raw=0; uint32_t U5GNDV_raw=0; uint32_t U6GNDV_raw=0; uint32_t U7GNDV_raw=0;
 8009372:	2300      	movs	r3, #0
 8009374:	64bb      	str	r3, [r7, #72]	; 0x48
 8009376:	2300      	movs	r3, #0
 8009378:	647b      	str	r3, [r7, #68]	; 0x44
 800937a:	2300      	movs	r3, #0
 800937c:	643b      	str	r3, [r7, #64]	; 0x40
 800937e:	2300      	movs	r3, #0
 8009380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009382:	2300      	movs	r3, #0
 8009384:	63bb      	str	r3, [r7, #56]	; 0x38
 8009386:	2300      	movs	r3, #0
 8009388:	637b      	str	r3, [r7, #52]	; 0x34
			for(uint32_t i=0; i<V_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 800938a:	2300      	movs	r3, #0
 800938c:	633b      	str	r3, [r7, #48]	; 0x30
 800938e:	e052      	b.n	8009436 <HAL_ADC_ConvCpltCallback+0x7aa>
 8009390:	20000af4 	.word	0x20000af4
 8009394:	200000a8 	.word	0x200000a8
 8009398:	20000290 	.word	0x20000290
 800939c:	20000690 	.word	0x20000690
 80093a0:	2000090c 	.word	0x2000090c
 80093a4:	20000754 	.word	0x20000754
 80093a8:	20000700 	.word	0x20000700
 80093ac:	20000910 	.word	0x20000910
 80093b0:	20000560 	.word	0x20000560
 80093b4:	2000095a 	.word	0x2000095a
 80093b8:	20000222 	.word	0x20000222
 80093bc:	20000638 	.word	0x20000638
 80093c0:	20000a08 	.word	0x20000a08
 80093c4:	200004e0 	.word	0x200004e0
 80093c8:	200000f8 	.word	0x200000f8
 80093cc:	2000049c 	.word	0x2000049c
 80093d0:	20000764 	.word	0x20000764
 80093d4:	20000a0c 	.word	0x20000a0c
 80093d8:	2000039c 	.word	0x2000039c
			{
				U5V_raw+=U5V[i]; U5GNDV_raw+=U5GNDV[i];
 80093dc:	4a51      	ldr	r2, [pc, #324]	; (8009524 <HAL_ADC_ConvCpltCallback+0x898>)
 80093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093e6:	4413      	add	r3, r2
 80093e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80093ea:	4a4f      	ldr	r2, [pc, #316]	; (8009528 <HAL_ADC_ConvCpltCallback+0x89c>)
 80093ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093f4:	4413      	add	r3, r2
 80093f6:	63fb      	str	r3, [r7, #60]	; 0x3c
				U6V_raw+=U6V[i]; U6GNDV_raw+=U6GNDV[i];
 80093f8:	4a4c      	ldr	r2, [pc, #304]	; (800952c <HAL_ADC_ConvCpltCallback+0x8a0>)
 80093fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009402:	4413      	add	r3, r2
 8009404:	647b      	str	r3, [r7, #68]	; 0x44
 8009406:	4a4a      	ldr	r2, [pc, #296]	; (8009530 <HAL_ADC_ConvCpltCallback+0x8a4>)
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800940e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009410:	4413      	add	r3, r2
 8009412:	63bb      	str	r3, [r7, #56]	; 0x38
				U7V_raw+=U7V[i]; U7GNDV_raw+=U7GNDV[i];
 8009414:	4a47      	ldr	r2, [pc, #284]	; (8009534 <HAL_ADC_ConvCpltCallback+0x8a8>)
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800941c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800941e:	4413      	add	r3, r2
 8009420:	643b      	str	r3, [r7, #64]	; 0x40
 8009422:	4a45      	ldr	r2, [pc, #276]	; (8009538 <HAL_ADC_ConvCpltCallback+0x8ac>)
 8009424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800942a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800942c:	4413      	add	r3, r2
 800942e:	637b      	str	r3, [r7, #52]	; 0x34
			for(uint32_t i=0; i<V_ROLLING_AVERAGE; i++) //this has possibility to overflow if ROLLING_AVERAGE > 2^(32-10) (reading 10 bit value)
 8009430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009432:	3301      	adds	r3, #1
 8009434:	633b      	str	r3, [r7, #48]	; 0x30
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	2b0f      	cmp	r3, #15
 800943a:	d9cf      	bls.n	80093dc <HAL_ADC_ConvCpltCallback+0x750>
			}
			U5V_raw/=V_ROLLING_AVERAGE; U6V_raw/=V_ROLLING_AVERAGE; U7V_raw/=V_ROLLING_AVERAGE; U5GNDV_raw/=V_ROLLING_AVERAGE; U6GNDV_raw/=V_ROLLING_AVERAGE; U7GNDV_raw/=V_ROLLING_AVERAGE;
 800943c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800943e:	091b      	lsrs	r3, r3, #4
 8009440:	64bb      	str	r3, [r7, #72]	; 0x48
 8009442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009444:	091b      	lsrs	r3, r3, #4
 8009446:	647b      	str	r3, [r7, #68]	; 0x44
 8009448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800944a:	091b      	lsrs	r3, r3, #4
 800944c:	643b      	str	r3, [r7, #64]	; 0x40
 800944e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009450:	091b      	lsrs	r3, r3, #4
 8009452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	091b      	lsrs	r3, r3, #4
 8009458:	63bb      	str	r3, [r7, #56]	; 0x38
 800945a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800945c:	091b      	lsrs	r3, r3, #4
 800945e:	637b      	str	r3, [r7, #52]	; 0x34
			U5V_real=Parse_Voltage(U5V_raw, U5GNDV_raw); U6V_real=Parse_Voltage(U6V_raw, U6GNDV_raw); U7V_real=Parse_Voltage(U7V_raw, U7GNDV_raw);
 8009460:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009462:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009464:	f001 fe3c 	bl	800b0e0 <Parse_Voltage>
 8009468:	4602      	mov	r2, r0
 800946a:	4b34      	ldr	r3, [pc, #208]	; (800953c <HAL_ADC_ConvCpltCallback+0x8b0>)
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009470:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009472:	f001 fe35 	bl	800b0e0 <Parse_Voltage>
 8009476:	4602      	mov	r2, r0
 8009478:	4b31      	ldr	r3, [pc, #196]	; (8009540 <HAL_ADC_ConvCpltCallback+0x8b4>)
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800947e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009480:	f001 fe2e 	bl	800b0e0 <Parse_Voltage>
 8009484:	4602      	mov	r2, r0
 8009486:	4b2f      	ldr	r3, [pc, #188]	; (8009544 <HAL_ADC_ConvCpltCallback+0x8b8>)
 8009488:	601a      	str	r2, [r3, #0]

			//TODO: probably move this to main because it isn't so important
			if (U5V_real>warn_overvoltage_U5)
 800948a:	4b2f      	ldr	r3, [pc, #188]	; (8009548 <HAL_ADC_ConvCpltCallback+0x8bc>)
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	461a      	mov	r2, r3
 8009490:	4b2a      	ldr	r3, [pc, #168]	; (800953c <HAL_ADC_ConvCpltCallback+0x8b0>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	429a      	cmp	r2, r3
 8009496:	d202      	bcs.n	800949e <HAL_ADC_ConvCpltCallback+0x812>
			{
				Set_Error(WARN_OVERVOLT_U5);
 8009498:	20c2      	movs	r0, #194	; 0xc2
 800949a:	f000 fc17 	bl	8009ccc <Set_Error>
			}
			if (U5V_real<warn_undervoltage_U5)
 800949e:	4b2b      	ldr	r3, [pc, #172]	; (800954c <HAL_ADC_ConvCpltCallback+0x8c0>)
 80094a0:	881b      	ldrh	r3, [r3, #0]
 80094a2:	461a      	mov	r2, r3
 80094a4:	4b25      	ldr	r3, [pc, #148]	; (800953c <HAL_ADC_ConvCpltCallback+0x8b0>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d902      	bls.n	80094b2 <HAL_ADC_ConvCpltCallback+0x826>
			{
				Set_Error(WARN_UNDERVOLT_U5);
 80094ac:	20c1      	movs	r0, #193	; 0xc1
 80094ae:	f000 fc0d 	bl	8009ccc <Set_Error>
			}
			if (U6V_real>warn_overvoltage_U6)
 80094b2:	4b27      	ldr	r3, [pc, #156]	; (8009550 <HAL_ADC_ConvCpltCallback+0x8c4>)
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	461a      	mov	r2, r3
 80094b8:	4b21      	ldr	r3, [pc, #132]	; (8009540 <HAL_ADC_ConvCpltCallback+0x8b4>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d202      	bcs.n	80094c6 <HAL_ADC_ConvCpltCallback+0x83a>
			{
				Set_Error(WARN_OVERVOLT_U6);
 80094c0:	20cb      	movs	r0, #203	; 0xcb
 80094c2:	f000 fc03 	bl	8009ccc <Set_Error>
			}
			if (U6V_real<warn_undervoltage_U6)
 80094c6:	4b23      	ldr	r3, [pc, #140]	; (8009554 <HAL_ADC_ConvCpltCallback+0x8c8>)
 80094c8:	881b      	ldrh	r3, [r3, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	4b1c      	ldr	r3, [pc, #112]	; (8009540 <HAL_ADC_ConvCpltCallback+0x8b4>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d902      	bls.n	80094da <HAL_ADC_ConvCpltCallback+0x84e>
			{
				Set_Error(WARN_UNDERVOLT_U6);
 80094d4:	20ca      	movs	r0, #202	; 0xca
 80094d6:	f000 fbf9 	bl	8009ccc <Set_Error>
			}
			if (U7V_real>warn_overvoltage_U7)
 80094da:	4b1f      	ldr	r3, [pc, #124]	; (8009558 <HAL_ADC_ConvCpltCallback+0x8cc>)
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	4b18      	ldr	r3, [pc, #96]	; (8009544 <HAL_ADC_ConvCpltCallback+0x8b8>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d202      	bcs.n	80094ee <HAL_ADC_ConvCpltCallback+0x862>
			{
				Set_Error(WARN_OVERVOLT_U7);
 80094e8:	20d4      	movs	r0, #212	; 0xd4
 80094ea:	f000 fbef 	bl	8009ccc <Set_Error>
			}
			if (U7V_real<warn_undervoltage_U7)
 80094ee:	4b1b      	ldr	r3, [pc, #108]	; (800955c <HAL_ADC_ConvCpltCallback+0x8d0>)
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	461a      	mov	r2, r3
 80094f4:	4b13      	ldr	r3, [pc, #76]	; (8009544 <HAL_ADC_ConvCpltCallback+0x8b8>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d90d      	bls.n	8009518 <HAL_ADC_ConvCpltCallback+0x88c>
			{
				Set_Error(WARN_UNDERVOLT_U7);
 80094fc:	20d3      	movs	r0, #211	; 0xd3
 80094fe:	f000 fbe5 	bl	8009ccc <Set_Error>
			}
			//TODO: test all these limits when I have power supply and power trimmer
			break;
 8009502:	e009      	b.n	8009518 <HAL_ADC_ConvCpltCallback+0x88c>
		default:
			Error_Handler();
 8009504:	f001 fdde 	bl	800b0c4 <Error_Handler>
			break;
 8009508:	bf00      	nop
 800950a:	e006      	b.n	800951a <HAL_ADC_ConvCpltCallback+0x88e>
			break;
 800950c:	bf00      	nop
 800950e:	e004      	b.n	800951a <HAL_ADC_ConvCpltCallback+0x88e>
			break;
 8009510:	bf00      	nop
 8009512:	e002      	b.n	800951a <HAL_ADC_ConvCpltCallback+0x88e>
			break;
 8009514:	bf00      	nop
 8009516:	e000      	b.n	800951a <HAL_ADC_ConvCpltCallback+0x88e>
			break;
 8009518:	bf00      	nop
		}
	}
}
 800951a:	bf00      	nop
 800951c:	3780      	adds	r7, #128	; 0x80
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	200004e0 	.word	0x200004e0
 8009528:	200000f8 	.word	0x200000f8
 800952c:	2000049c 	.word	0x2000049c
 8009530:	20000764 	.word	0x20000764
 8009534:	20000a0c 	.word	0x20000a0c
 8009538:	2000039c 	.word	0x2000039c
 800953c:	20000af0 	.word	0x20000af0
 8009540:	20000904 	.word	0x20000904
 8009544:	200006fc 	.word	0x200006fc
 8009548:	20000958 	.word	0x20000958
 800954c:	200008f4 	.word	0x200008f4
 8009550:	200009be 	.word	0x200009be
 8009554:	20000572 	.word	0x20000572
 8009558:	20000570 	.word	0x20000570
 800955c:	200000ee 	.word	0x200000ee

08009560 <Can_Send>:


void Can_Send(uint8_t message)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b08e      	sub	sp, #56	; 0x38
 8009564:	af00      	add	r7, sp, #0
 8009566:	4603      	mov	r3, r0
 8009568:	71fb      	strb	r3, [r7, #7]
	if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) < 1)
 800956a:	483e      	ldr	r0, [pc, #248]	; (8009664 <Can_Send+0x104>)
 800956c:	f7f9 fa16 	bl	800299c <HAL_FDCAN_GetTxFifoFreeLevel>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d103      	bne.n	800957e <Can_Send+0x1e>
	{
		Set_Error(ERR_CAN_FIFO_FULL);
 8009576:	2002      	movs	r0, #2
 8009578:	f000 fba8 	bl	8009ccc <Set_Error>
		return;
 800957c:	e06f      	b.n	800965e <Can_Send+0xfe>
	}

	if(Can_IDs[message]>2047)
 800957e:	79fb      	ldrb	r3, [r7, #7]
 8009580:	4a39      	ldr	r2, [pc, #228]	; (8009668 <Can_Send+0x108>)
 8009582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800958a:	d303      	bcc.n	8009594 <Can_Send+0x34>
	{
		Set_Error(ERR_MESSAGE_DISABLED);
 800958c:	2003      	movs	r0, #3
 800958e:	f000 fb9d 	bl	8009ccc <Set_Error>
		return;
 8009592:	e064      	b.n	800965e <Can_Send+0xfe>
	}
	else if(Can_DLCs[message]==0)
 8009594:	79fb      	ldrb	r3, [r7, #7]
 8009596:	4a35      	ldr	r2, [pc, #212]	; (800966c <Can_Send+0x10c>)
 8009598:	5cd3      	ldrb	r3, [r2, r3]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d103      	bne.n	80095a6 <Can_Send+0x46>
	{
		Set_Error(ERR_DLC_0);
 800959e:	2004      	movs	r0, #4
 80095a0:	f000 fb94 	bl	8009ccc <Set_Error>
		return;
 80095a4:	e05b      	b.n	800965e <Can_Send+0xfe>
	}
	else if(Can_DLCs[message]>8)
 80095a6:	79fb      	ldrb	r3, [r7, #7]
 80095a8:	4a30      	ldr	r2, [pc, #192]	; (800966c <Can_Send+0x10c>)
 80095aa:	5cd3      	ldrb	r3, [r2, r3]
 80095ac:	2b08      	cmp	r3, #8
 80095ae:	d903      	bls.n	80095b8 <Can_Send+0x58>
	{
		Set_Error(ERR_DLC_LONG);
 80095b0:	2005      	movs	r0, #5
 80095b2:	f000 fb8b 	bl	8009ccc <Set_Error>
		return;
 80095b6:	e052      	b.n	800965e <Can_Send+0xfe>
	}

	FDCAN_TxHeaderTypeDef TxHeader;

	TxHeader.Identifier = Can_IDs[message];
 80095b8:	79fb      	ldrb	r3, [r7, #7]
 80095ba:	4a2b      	ldr	r2, [pc, #172]	; (8009668 <Can_Send+0x108>)
 80095bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095c0:	60fb      	str	r3, [r7, #12]
	TxHeader.DataLength = (Can_DLCs[message]<<16); //<<16 makes storing the number of bytes not require a switch statement for classic can
 80095c2:	79fb      	ldrb	r3, [r7, #7]
 80095c4:	4a29      	ldr	r2, [pc, #164]	; (800966c <Can_Send+0x10c>)
 80095c6:	5cd3      	ldrb	r3, [r2, r3]
 80095c8:	041b      	lsls	r3, r3, #16
 80095ca:	61bb      	str	r3, [r7, #24]

	//clear can tx data so that data from incorrectly configured message is 0
	for(uint32_t i=0; i<8; i++)
 80095cc:	2300      	movs	r3, #0
 80095ce:	637b      	str	r3, [r7, #52]	; 0x34
 80095d0:	e007      	b.n	80095e2 <Can_Send+0x82>
	{
		CANTxData[i]=0;
 80095d2:	4a27      	ldr	r2, [pc, #156]	; (8009670 <Can_Send+0x110>)
 80095d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d6:	4413      	add	r3, r2
 80095d8:	2200      	movs	r2, #0
 80095da:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 80095dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095de:	3301      	adds	r3, #1
 80095e0:	637b      	str	r3, [r7, #52]	; 0x34
 80095e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e4:	2b07      	cmp	r3, #7
 80095e6:	d9f4      	bls.n	80095d2 <Can_Send+0x72>
	}

	uint32_t pos=0;
 80095e8:	2300      	movs	r3, #0
 80095ea:	60bb      	str	r3, [r7, #8]
	for(uint32_t i=0; i<Can_DLCs[message]; i++) //max number of function calls is same as number of bytes
 80095ec:	2300      	movs	r3, #0
 80095ee:	633b      	str	r3, [r7, #48]	; 0x30
 80095f0:	e010      	b.n	8009614 <Can_Send+0xb4>
	{
		Set_Can_Bytes(&pos, message);
 80095f2:	79fa      	ldrb	r2, [r7, #7]
 80095f4:	f107 0308 	add.w	r3, r7, #8
 80095f8:	4611      	mov	r1, r2
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fd f87a 	bl	80066f4 <Set_Can_Bytes>
		if(pos>=Can_DLCs[message])
 8009600:	79fb      	ldrb	r3, [r7, #7]
 8009602:	4a1a      	ldr	r2, [pc, #104]	; (800966c <Can_Send+0x10c>)
 8009604:	5cd3      	ldrb	r3, [r2, r3]
 8009606:	461a      	mov	r2, r3
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	429a      	cmp	r2, r3
 800960c:	d90a      	bls.n	8009624 <Can_Send+0xc4>
	for(uint32_t i=0; i<Can_DLCs[message]; i++) //max number of function calls is same as number of bytes
 800960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009610:	3301      	adds	r3, #1
 8009612:	633b      	str	r3, [r7, #48]	; 0x30
 8009614:	79fb      	ldrb	r3, [r7, #7]
 8009616:	4a15      	ldr	r2, [pc, #84]	; (800966c <Can_Send+0x10c>)
 8009618:	5cd3      	ldrb	r3, [r2, r3]
 800961a:	461a      	mov	r2, r3
 800961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961e:	4293      	cmp	r3, r2
 8009620:	d3e7      	bcc.n	80095f2 <Can_Send+0x92>
 8009622:	e000      	b.n	8009626 <Can_Send+0xc6>
		{
			break;
 8009624:	bf00      	nop
		}
	}

	TxHeader.IdType = FDCAN_STANDARD_ID;
 8009626:	2300      	movs	r3, #0
 8009628:	613b      	str	r3, [r7, #16]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800962a:	2300      	movs	r3, #0
 800962c:	617b      	str	r3, [r7, #20]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800962e:	2300      	movs	r3, #0
 8009630:	61fb      	str	r3, [r7, #28]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8009632:	2300      	movs	r3, #0
 8009634:	623b      	str	r3, [r7, #32]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8009636:	2300      	movs	r3, #0
 8009638:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800963a:	2300      	movs	r3, #0
 800963c:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.MessageMarker = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 8009642:	f107 030c 	add.w	r3, r7, #12
 8009646:	4a0a      	ldr	r2, [pc, #40]	; (8009670 <Can_Send+0x110>)
 8009648:	4619      	mov	r1, r3
 800964a:	4806      	ldr	r0, [pc, #24]	; (8009664 <Can_Send+0x104>)
 800964c:	f7f9 f888 	bl	8002760 <HAL_FDCAN_AddMessageToTxFifoQ>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <Can_Send+0xfe>
	{
		Set_Error(ERR_SEND_FAILED);
 8009656:	2006      	movs	r0, #6
 8009658:	f000 fb38 	bl	8009ccc <Set_Error>
		return;
 800965c:	bf00      	nop
	}
}
 800965e:	3738      	adds	r7, #56	; 0x38
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	20000420 	.word	0x20000420
 8009668:	2000084c 	.word	0x2000084c
 800966c:	200008f8 	.word	0x200008f8
 8009670:	200008ec 	.word	0x200008ec

08009674 <Can_Sync>:

//for can sync we must send from the interrupt to ensure that we send the message quickly, but this means only 2 (or sometimes 3) messages may be sent without discarding messages
void Can_Sync(void)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<8; i++)
 800967a:	2300      	movs	r3, #0
 800967c:	607b      	str	r3, [r7, #4]
 800967e:	e017      	b.n	80096b0 <Can_Sync+0x3c>
	{
		if ((Can_Sync_Enable>>i)&0b1)
 8009680:	4b0f      	ldr	r3, [pc, #60]	; (80096c0 <Can_Sync+0x4c>)
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	461a      	mov	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	fa42 f303 	asr.w	r3, r2, r3
 800968c:	f003 0301 	and.w	r3, r3, #1
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00a      	beq.n	80096aa <Can_Sync+0x36>
		{
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) > 0)
 8009694:	480b      	ldr	r0, [pc, #44]	; (80096c4 <Can_Sync+0x50>)
 8009696:	f7f9 f981 	bl	800299c <HAL_FDCAN_GetTxFifoFreeLevel>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d004      	beq.n	80096aa <Can_Sync+0x36>
			{
				Can_Send(i);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7ff ff5b 	bl	8009560 <Can_Send>
	for(uint32_t i=0; i<8; i++)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	3301      	adds	r3, #1
 80096ae:	607b      	str	r3, [r7, #4]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b07      	cmp	r3, #7
 80096b4:	d9e4      	bls.n	8009680 <Can_Sync+0xc>
			}
		}
	}
}
 80096b6:	bf00      	nop
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	200004dc 	.word	0x200004dc
 80096c4:	20000420 	.word	0x20000420

080096c8 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80096c8:	b590      	push	{r4, r7, lr}
 80096ca:	b093      	sub	sp, #76	; 0x4c
 80096cc:	af02      	add	r7, sp, #8
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t CANRxData[8];

	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	f003 0301 	and.w	r3, r3, #1
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 82f3 	beq.w	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
	{
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, CANRxData) != HAL_OK)
 80096de:	f107 030c 	add.w	r3, r7, #12
 80096e2:	f107 0214 	add.w	r2, r7, #20
 80096e6:	2140      	movs	r1, #64	; 0x40
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f7f9 f87d 	bl	80027e8 <HAL_FDCAN_GetRxMessage>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <HAL_FDCAN_RxFifo0Callback+0x32>
		{
			Set_Error(ERR_RECIEVE_FAILED);
 80096f4:	2007      	movs	r0, #7
 80096f6:	f000 fae9 	bl	8009ccc <Set_Error>
		}

		//set any bytes not actaully read to 0 to prevent unknown values being in them
		for(uint32_t i=(RxHeader.DataLength>>16); i<8; i++)
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	0c1b      	lsrs	r3, r3, #16
 80096fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009700:	e008      	b.n	8009714 <HAL_FDCAN_RxFifo0Callback+0x4c>
		{
			CANRxData[i]=0;
 8009702:	f107 020c 	add.w	r2, r7, #12
 8009706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009708:	4413      	add	r3, r2
 800970a:	2200      	movs	r2, #0
 800970c:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=(RxHeader.DataLength>>16); i<8; i++)
 800970e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009710:	3301      	adds	r3, #1
 8009712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009716:	2b07      	cmp	r3, #7
 8009718:	d9f3      	bls.n	8009702 <HAL_FDCAN_RxFifo0Callback+0x3a>
		}

		if (RxHeader.Identifier == CANID_SYNC)
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2b80      	cmp	r3, #128	; 0x80
 800971e:	d10a      	bne.n	8009736 <HAL_FDCAN_RxFifo0Callback+0x6e>
		{
			if(Can_Sync_Delay)
 8009720:	4bdb      	ldr	r3, [pc, #876]	; (8009a90 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8009722:	881b      	ldrh	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d003      	beq.n	8009730 <HAL_FDCAN_RxFifo0Callback+0x68>
			{
				HAL_TIM_Base_Start_IT(&htim16);
 8009728:	48da      	ldr	r0, [pc, #872]	; (8009a94 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800972a:	f7fb fb55 	bl	8004dd8 <HAL_TIM_Base_Start_IT>
		else
		{
			Set_Error(ERR_RECIEVED_INVALID_ID);
		}
	}
}
 800972e:	e2c9      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
				Can_Sync();
 8009730:	f7ff ffa0 	bl	8009674 <Can_Sync>
}
 8009734:	e2c6      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
		else if (RxHeader.Identifier == CANID_CONFIG)
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800973c:	f040 829f 	bne.w	8009c7e <HAL_FDCAN_RxFifo0Callback+0x5b6>
			if(CANRxData[0] == ID)
 8009740:	7b3b      	ldrb	r3, [r7, #12]
 8009742:	2b00      	cmp	r3, #0
 8009744:	f040 829f 	bne.w	8009c86 <HAL_FDCAN_RxFifo0Callback+0x5be>
				switch(CANRxData[1])
 8009748:	7b7b      	ldrb	r3, [r7, #13]
 800974a:	3b01      	subs	r3, #1
 800974c:	2b8b      	cmp	r3, #139	; 0x8b
 800974e:	f200 8291 	bhi.w	8009c74 <HAL_FDCAN_RxFifo0Callback+0x5ac>
 8009752:	a201      	add	r2, pc, #4	; (adr r2, 8009758 <HAL_FDCAN_RxFifo0Callback+0x90>)
 8009754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009758:	08009989 	.word	0x08009989
 800975c:	080099a7 	.word	0x080099a7
 8009760:	080099ff 	.word	0x080099ff
 8009764:	08009a07 	.word	0x08009a07
 8009768:	08009a0f 	.word	0x08009a0f
 800976c:	08009a17 	.word	0x08009a17
 8009770:	08009a1f 	.word	0x08009a1f
 8009774:	08009a27 	.word	0x08009a27
 8009778:	08009a2f 	.word	0x08009a2f
 800977c:	08009a37 	.word	0x08009a37
 8009780:	08009a3f 	.word	0x08009a3f
 8009784:	08009c75 	.word	0x08009c75
 8009788:	08009c75 	.word	0x08009c75
 800978c:	08009c75 	.word	0x08009c75
 8009790:	08009c75 	.word	0x08009c75
 8009794:	08009c75 	.word	0x08009c75
 8009798:	08009c75 	.word	0x08009c75
 800979c:	08009c75 	.word	0x08009c75
 80097a0:	08009c75 	.word	0x08009c75
 80097a4:	08009c75 	.word	0x08009c75
 80097a8:	08009c75 	.word	0x08009c75
 80097ac:	08009c75 	.word	0x08009c75
 80097b0:	08009c75 	.word	0x08009c75
 80097b4:	08009c75 	.word	0x08009c75
 80097b8:	08009c75 	.word	0x08009c75
 80097bc:	08009c75 	.word	0x08009c75
 80097c0:	08009c75 	.word	0x08009c75
 80097c4:	08009c75 	.word	0x08009c75
 80097c8:	08009c75 	.word	0x08009c75
 80097cc:	08009c75 	.word	0x08009c75
 80097d0:	08009c75 	.word	0x08009c75
 80097d4:	08009c75 	.word	0x08009c75
 80097d8:	08009c75 	.word	0x08009c75
 80097dc:	08009c75 	.word	0x08009c75
 80097e0:	08009c75 	.word	0x08009c75
 80097e4:	08009c75 	.word	0x08009c75
 80097e8:	08009c75 	.word	0x08009c75
 80097ec:	08009c75 	.word	0x08009c75
 80097f0:	08009c75 	.word	0x08009c75
 80097f4:	08009c75 	.word	0x08009c75
 80097f8:	08009c75 	.word	0x08009c75
 80097fc:	08009c75 	.word	0x08009c75
 8009800:	08009c75 	.word	0x08009c75
 8009804:	08009c75 	.word	0x08009c75
 8009808:	08009c75 	.word	0x08009c75
 800980c:	08009c75 	.word	0x08009c75
 8009810:	08009c75 	.word	0x08009c75
 8009814:	08009c75 	.word	0x08009c75
 8009818:	08009c75 	.word	0x08009c75
 800981c:	08009c75 	.word	0x08009c75
 8009820:	08009c75 	.word	0x08009c75
 8009824:	08009c75 	.word	0x08009c75
 8009828:	08009c75 	.word	0x08009c75
 800982c:	08009c75 	.word	0x08009c75
 8009830:	08009c75 	.word	0x08009c75
 8009834:	08009c75 	.word	0x08009c75
 8009838:	08009c75 	.word	0x08009c75
 800983c:	08009c75 	.word	0x08009c75
 8009840:	08009c75 	.word	0x08009c75
 8009844:	08009c75 	.word	0x08009c75
 8009848:	08009c75 	.word	0x08009c75
 800984c:	08009c75 	.word	0x08009c75
 8009850:	08009c75 	.word	0x08009c75
 8009854:	08009c75 	.word	0x08009c75
 8009858:	08009c75 	.word	0x08009c75
 800985c:	08009c75 	.word	0x08009c75
 8009860:	08009c75 	.word	0x08009c75
 8009864:	08009c75 	.word	0x08009c75
 8009868:	08009c75 	.word	0x08009c75
 800986c:	08009c75 	.word	0x08009c75
 8009870:	08009c75 	.word	0x08009c75
 8009874:	08009c75 	.word	0x08009c75
 8009878:	08009c75 	.word	0x08009c75
 800987c:	08009c75 	.word	0x08009c75
 8009880:	08009c75 	.word	0x08009c75
 8009884:	08009c75 	.word	0x08009c75
 8009888:	08009c75 	.word	0x08009c75
 800988c:	08009c75 	.word	0x08009c75
 8009890:	08009c75 	.word	0x08009c75
 8009894:	08009c75 	.word	0x08009c75
 8009898:	08009c75 	.word	0x08009c75
 800989c:	08009c75 	.word	0x08009c75
 80098a0:	08009c75 	.word	0x08009c75
 80098a4:	08009c75 	.word	0x08009c75
 80098a8:	08009c75 	.word	0x08009c75
 80098ac:	08009c75 	.word	0x08009c75
 80098b0:	08009c75 	.word	0x08009c75
 80098b4:	08009c75 	.word	0x08009c75
 80098b8:	08009c75 	.word	0x08009c75
 80098bc:	08009c75 	.word	0x08009c75
 80098c0:	08009c75 	.word	0x08009c75
 80098c4:	08009c75 	.word	0x08009c75
 80098c8:	08009c75 	.word	0x08009c75
 80098cc:	08009c75 	.word	0x08009c75
 80098d0:	08009c75 	.word	0x08009c75
 80098d4:	08009c75 	.word	0x08009c75
 80098d8:	08009c75 	.word	0x08009c75
 80098dc:	08009c75 	.word	0x08009c75
 80098e0:	08009c75 	.word	0x08009c75
 80098e4:	08009c75 	.word	0x08009c75
 80098e8:	08009c75 	.word	0x08009c75
 80098ec:	08009c75 	.word	0x08009c75
 80098f0:	08009c75 	.word	0x08009c75
 80098f4:	08009c75 	.word	0x08009c75
 80098f8:	08009c75 	.word	0x08009c75
 80098fc:	08009c75 	.word	0x08009c75
 8009900:	08009c75 	.word	0x08009c75
 8009904:	08009c75 	.word	0x08009c75
 8009908:	08009c75 	.word	0x08009c75
 800990c:	08009c75 	.word	0x08009c75
 8009910:	08009c75 	.word	0x08009c75
 8009914:	08009c75 	.word	0x08009c75
 8009918:	08009c75 	.word	0x08009c75
 800991c:	08009c75 	.word	0x08009c75
 8009920:	08009c75 	.word	0x08009c75
 8009924:	08009c75 	.word	0x08009c75
 8009928:	08009c75 	.word	0x08009c75
 800992c:	08009c75 	.word	0x08009c75
 8009930:	08009c75 	.word	0x08009c75
 8009934:	08009c75 	.word	0x08009c75
 8009938:	08009c75 	.word	0x08009c75
 800993c:	08009c75 	.word	0x08009c75
 8009940:	08009c75 	.word	0x08009c75
 8009944:	08009c75 	.word	0x08009c75
 8009948:	08009c75 	.word	0x08009c75
 800994c:	08009c75 	.word	0x08009c75
 8009950:	08009c75 	.word	0x08009c75
 8009954:	08009a5d 	.word	0x08009a5d
 8009958:	08009a63 	.word	0x08009a63
 800995c:	08009a99 	.word	0x08009a99
 8009960:	08009ab7 	.word	0x08009ab7
 8009964:	08009ad5 	.word	0x08009ad5
 8009968:	08009af3 	.word	0x08009af3
 800996c:	08009b1b 	.word	0x08009b1b
 8009970:	08009b43 	.word	0x08009b43
 8009974:	08009b6f 	.word	0x08009b6f
 8009978:	08009bc5 	.word	0x08009bc5
 800997c:	08009c1b 	.word	0x08009c1b
 8009980:	08009c37 	.word	0x08009c37
 8009984:	08009c59 	.word	0x08009c59
					Switch_Power(CANRxData[2], CANRxData[3]);
 8009988:	7bbb      	ldrb	r3, [r7, #14]
 800998a:	7bfa      	ldrb	r2, [r7, #15]
 800998c:	4611      	mov	r1, r2
 800998e:	4618      	mov	r0, r3
 8009990:	f7fd f884 	bl	8006a9c <Switch_Power>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	0c1b      	lsrs	r3, r3, #16
 8009998:	2b03      	cmp	r3, #3
 800999a:	f200 8176 	bhi.w	8009c8a <HAL_FDCAN_RxFifo0Callback+0x5c2>
 800999e:	2009      	movs	r0, #9
 80099a0:	f000 f994 	bl	8009ccc <Set_Error>
					break;
 80099a4:	e171      	b.n	8009c8a <HAL_FDCAN_RxFifo0Callback+0x5c2>
					Switch_DC(CANRxData[2], CANRxData);
 80099a6:	7bbb      	ldrb	r3, [r7, #14]
 80099a8:	f107 020c 	add.w	r2, r7, #12
 80099ac:	4611      	mov	r1, r2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fd f8ac 	bl	8006b0c <Switch_DC>
					if ((RxHeader.DataLength>>16) < (3+((CANRxData[2]>>4)&1))+((CANRxData[2]>>3)&1)+((CANRxData[2]>>2)&1)+((CANRxData[2]>>1)&1)+((CANRxData[2]>>0)&1)) { Set_Error(ERR_COMMAND_SHORT); }
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	0c1b      	lsrs	r3, r3, #16
 80099b8:	7bba      	ldrb	r2, [r7, #14]
 80099ba:	0912      	lsrs	r2, r2, #4
 80099bc:	b2d2      	uxtb	r2, r2
 80099be:	f002 0201 	and.w	r2, r2, #1
 80099c2:	1cd1      	adds	r1, r2, #3
 80099c4:	7bba      	ldrb	r2, [r7, #14]
 80099c6:	08d2      	lsrs	r2, r2, #3
 80099c8:	b2d2      	uxtb	r2, r2
 80099ca:	f002 0201 	and.w	r2, r2, #1
 80099ce:	4411      	add	r1, r2
 80099d0:	7bba      	ldrb	r2, [r7, #14]
 80099d2:	0892      	lsrs	r2, r2, #2
 80099d4:	b2d2      	uxtb	r2, r2
 80099d6:	f002 0201 	and.w	r2, r2, #1
 80099da:	4411      	add	r1, r2
 80099dc:	7bba      	ldrb	r2, [r7, #14]
 80099de:	0852      	lsrs	r2, r2, #1
 80099e0:	b2d2      	uxtb	r2, r2
 80099e2:	f002 0201 	and.w	r2, r2, #1
 80099e6:	4411      	add	r1, r2
 80099e8:	7bba      	ldrb	r2, [r7, #14]
 80099ea:	f002 0201 	and.w	r2, r2, #1
 80099ee:	440a      	add	r2, r1
 80099f0:	4293      	cmp	r3, r2
 80099f2:	f080 814c 	bcs.w	8009c8e <HAL_FDCAN_RxFifo0Callback+0x5c6>
 80099f6:	2009      	movs	r0, #9
 80099f8:	f000 f968 	bl	8009ccc <Set_Error>
					break;
 80099fc:	e147      	b.n	8009c8e <HAL_FDCAN_RxFifo0Callback+0x5c6>
					Buffer_Can_Message(0);
 80099fe:	2000      	movs	r0, #0
 8009a00:	f7fd f8b0 	bl	8006b64 <Buffer_Can_Message>
					break;
 8009a04:	e15e      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Buffer_Can_Message(1);
 8009a06:	2001      	movs	r0, #1
 8009a08:	f7fd f8ac 	bl	8006b64 <Buffer_Can_Message>
					break;
 8009a0c:	e15a      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Buffer_Can_Message(2);
 8009a0e:	2002      	movs	r0, #2
 8009a10:	f7fd f8a8 	bl	8006b64 <Buffer_Can_Message>
					break;
 8009a14:	e156      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Buffer_Can_Message(3);
 8009a16:	2003      	movs	r0, #3
 8009a18:	f7fd f8a4 	bl	8006b64 <Buffer_Can_Message>
					break;
 8009a1c:	e152      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Buffer_Can_Message(4);
 8009a1e:	2004      	movs	r0, #4
 8009a20:	f7fd f8a0 	bl	8006b64 <Buffer_Can_Message>
					break;
 8009a24:	e14e      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Buffer_Can_Message(5);
 8009a26:	2005      	movs	r0, #5
 8009a28:	f7fd f89c 	bl	8006b64 <Buffer_Can_Message>
					break;
 8009a2c:	e14a      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Buffer_Can_Message(6);
 8009a2e:	2006      	movs	r0, #6
 8009a30:	f7fd f898 	bl	8006b64 <Buffer_Can_Message>
					break;
 8009a34:	e146      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Buffer_Can_Message(7);
 8009a36:	2007      	movs	r0, #7
 8009a38:	f7fd f894 	bl	8006b64 <Buffer_Can_Message>
					break;
 8009a3c:	e142      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Sample_Temperature_Voltage(CANRxData[2], CANRxData[3]);
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
 8009a40:	7bfa      	ldrb	r2, [r7, #15]
 8009a42:	4611      	mov	r1, r2
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7fd f8c1 	bl	8006bcc <Sample_Temperature_Voltage>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 8009a4a:	6a3b      	ldr	r3, [r7, #32]
 8009a4c:	0c1b      	lsrs	r3, r3, #16
 8009a4e:	2b03      	cmp	r3, #3
 8009a50:	f200 811f 	bhi.w	8009c92 <HAL_FDCAN_RxFifo0Callback+0x5ca>
 8009a54:	2009      	movs	r0, #9
 8009a56:	f000 f939 	bl	8009ccc <Set_Error>
					break;
 8009a5a:	e11a      	b.n	8009c92 <HAL_FDCAN_RxFifo0Callback+0x5ca>
					Save_Config();
 8009a5c:	f7fd f812 	bl	8006a84 <Save_Config>
					break;
 8009a60:	e130      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					Config_Message(CANRxData[2], CANRxData[3], (((uint16_t)CANRxData[4])<<8)+(((uint16_t)CANRxData[5])<<0));
 8009a62:	7bb8      	ldrb	r0, [r7, #14]
 8009a64:	7bf9      	ldrb	r1, [r7, #15]
 8009a66:	7c3b      	ldrb	r3, [r7, #16]
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	021b      	lsls	r3, r3, #8
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	7c7b      	ldrb	r3, [r7, #17]
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	4413      	add	r3, r2
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	461a      	mov	r2, r3
 8009a78:	f7fd f8c6 	bl	8006c08 <Config_Message>
					if ((RxHeader.DataLength>>16) < 6) { Set_Error(ERR_COMMAND_SHORT); }
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	0c1b      	lsrs	r3, r3, #16
 8009a80:	2b05      	cmp	r3, #5
 8009a82:	f200 8108 	bhi.w	8009c96 <HAL_FDCAN_RxFifo0Callback+0x5ce>
 8009a86:	2009      	movs	r0, #9
 8009a88:	f000 f920 	bl	8009ccc <Set_Error>
					break;
 8009a8c:	e103      	b.n	8009c96 <HAL_FDCAN_RxFifo0Callback+0x5ce>
 8009a8e:	bf00      	nop
 8009a90:	2000041c 	.word	0x2000041c
 8009a94:	20000a50 	.word	0x20000a50
					Config_Switch_Defaults(CANRxData[2], CANRxData[3]);
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
 8009a9a:	7bfa      	ldrb	r2, [r7, #15]
 8009a9c:	4611      	mov	r1, r2
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fd f904 	bl	8006cac <Config_Switch_Defaults>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	0c1b      	lsrs	r3, r3, #16
 8009aa8:	2b03      	cmp	r3, #3
 8009aaa:	f200 80f6 	bhi.w	8009c9a <HAL_FDCAN_RxFifo0Callback+0x5d2>
 8009aae:	2009      	movs	r0, #9
 8009ab0:	f000 f90c 	bl	8009ccc <Set_Error>
					break;
 8009ab4:	e0f1      	b.n	8009c9a <HAL_FDCAN_RxFifo0Callback+0x5d2>
					Config_Can_Sync(CANRxData[2], CANRxData[3]);
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
 8009ab8:	7bfa      	ldrb	r2, [r7, #15]
 8009aba:	4611      	mov	r1, r2
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7fd f93d 	bl	8006d3c <Config_Can_Sync>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	0c1b      	lsrs	r3, r3, #16
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	f200 80e9 	bhi.w	8009c9e <HAL_FDCAN_RxFifo0Callback+0x5d6>
 8009acc:	2009      	movs	r0, #9
 8009ace:	f000 f8fd 	bl	8009ccc <Set_Error>
					break;
 8009ad2:	e0e4      	b.n	8009c9e <HAL_FDCAN_RxFifo0Callback+0x5d6>
					Config_Can_Timed(CANRxData[2], CANRxData[3]);
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
 8009ad6:	7bfa      	ldrb	r2, [r7, #15]
 8009ad8:	4611      	mov	r1, r2
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fd f976 	bl	8006dcc <Config_Can_Timed>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	0c1b      	lsrs	r3, r3, #16
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	f200 80dc 	bhi.w	8009ca2 <HAL_FDCAN_RxFifo0Callback+0x5da>
 8009aea:	2009      	movs	r0, #9
 8009aec:	f000 f8ee 	bl	8009ccc <Set_Error>
					break;
 8009af0:	e0d7      	b.n	8009ca2 <HAL_FDCAN_RxFifo0Callback+0x5da>
					Config_Can_Interval((((uint16_t)CANRxData[2])<<8)+(((uint16_t)CANRxData[3])<<0));
 8009af2:	7bbb      	ldrb	r3, [r7, #14]
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	021b      	lsls	r3, r3, #8
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	4413      	add	r3, r2
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fd f9aa 	bl	8006e5c <Config_Can_Interval>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 8009b08:	6a3b      	ldr	r3, [r7, #32]
 8009b0a:	0c1b      	lsrs	r3, r3, #16
 8009b0c:	2b03      	cmp	r3, #3
 8009b0e:	f200 80ca 	bhi.w	8009ca6 <HAL_FDCAN_RxFifo0Callback+0x5de>
 8009b12:	2009      	movs	r0, #9
 8009b14:	f000 f8da 	bl	8009ccc <Set_Error>
					break;
 8009b18:	e0c5      	b.n	8009ca6 <HAL_FDCAN_RxFifo0Callback+0x5de>
					Config_Can_Sync_Delay((((uint16_t)CANRxData[2])<<8)+(((uint16_t)CANRxData[3])<<0));
 8009b1a:	7bbb      	ldrb	r3, [r7, #14]
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	021b      	lsls	r3, r3, #8
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	4413      	add	r3, r2
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fd f9a8 	bl	8006e80 <Config_Can_Sync_Delay>
					if ((RxHeader.DataLength>>16) < 4) { Set_Error(ERR_COMMAND_SHORT); }
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	0c1b      	lsrs	r3, r3, #16
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	f200 80b8 	bhi.w	8009caa <HAL_FDCAN_RxFifo0Callback+0x5e2>
 8009b3a:	2009      	movs	r0, #9
 8009b3c:	f000 f8c6 	bl	8009ccc <Set_Error>
					break;
 8009b40:	e0b3      	b.n	8009caa <HAL_FDCAN_RxFifo0Callback+0x5e2>
					Config_Temperature_Voltage_Reading((((uint16_t)CANRxData[2])<<8)+(((uint16_t)CANRxData[3])<<0), CANRxData[4], CANRxData[5]);
 8009b42:	7bbb      	ldrb	r3, [r7, #14]
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	021b      	lsls	r3, r3, #8
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	4413      	add	r3, r2
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	7c39      	ldrb	r1, [r7, #16]
 8009b54:	7c7a      	ldrb	r2, [r7, #17]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fd f9a4 	bl	8006ea4 <Config_Temperature_Voltage_Reading>
					if ((RxHeader.DataLength>>16) < 6) { Set_Error(ERR_COMMAND_SHORT); }
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	0c1b      	lsrs	r3, r3, #16
 8009b60:	2b05      	cmp	r3, #5
 8009b62:	f200 80a4 	bhi.w	8009cae <HAL_FDCAN_RxFifo0Callback+0x5e6>
 8009b66:	2009      	movs	r0, #9
 8009b68:	f000 f8b0 	bl	8009ccc <Set_Error>
					break;
 8009b6c:	e09f      	b.n	8009cae <HAL_FDCAN_RxFifo0Callback+0x5e6>
					Config_Default_DC(CANRxData[2], CANRxData);
 8009b6e:	7bbb      	ldrb	r3, [r7, #14]
 8009b70:	f107 020c 	add.w	r2, r7, #12
 8009b74:	4611      	mov	r1, r2
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7fd f9d2 	bl	8006f20 <Config_Default_DC>
					if ((RxHeader.DataLength>>16) < (3+((CANRxData[2]>>4)&1))+((CANRxData[2]>>3)&1)+((CANRxData[2]>>2)&1)+((CANRxData[2]>>1)&1)+((CANRxData[2]>>0)&1)) { Set_Error(ERR_COMMAND_SHORT); }
 8009b7c:	6a3b      	ldr	r3, [r7, #32]
 8009b7e:	0c1b      	lsrs	r3, r3, #16
 8009b80:	7bba      	ldrb	r2, [r7, #14]
 8009b82:	0912      	lsrs	r2, r2, #4
 8009b84:	b2d2      	uxtb	r2, r2
 8009b86:	f002 0201 	and.w	r2, r2, #1
 8009b8a:	1cd1      	adds	r1, r2, #3
 8009b8c:	7bba      	ldrb	r2, [r7, #14]
 8009b8e:	08d2      	lsrs	r2, r2, #3
 8009b90:	b2d2      	uxtb	r2, r2
 8009b92:	f002 0201 	and.w	r2, r2, #1
 8009b96:	4411      	add	r1, r2
 8009b98:	7bba      	ldrb	r2, [r7, #14]
 8009b9a:	0892      	lsrs	r2, r2, #2
 8009b9c:	b2d2      	uxtb	r2, r2
 8009b9e:	f002 0201 	and.w	r2, r2, #1
 8009ba2:	4411      	add	r1, r2
 8009ba4:	7bba      	ldrb	r2, [r7, #14]
 8009ba6:	0852      	lsrs	r2, r2, #1
 8009ba8:	b2d2      	uxtb	r2, r2
 8009baa:	f002 0201 	and.w	r2, r2, #1
 8009bae:	4411      	add	r1, r2
 8009bb0:	7bba      	ldrb	r2, [r7, #14]
 8009bb2:	f002 0201 	and.w	r2, r2, #1
 8009bb6:	440a      	add	r2, r1
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d27a      	bcs.n	8009cb2 <HAL_FDCAN_RxFifo0Callback+0x5ea>
 8009bbc:	2009      	movs	r0, #9
 8009bbe:	f000 f885 	bl	8009ccc <Set_Error>
					break;
 8009bc2:	e076      	b.n	8009cb2 <HAL_FDCAN_RxFifo0Callback+0x5ea>
					Config_PWM_Prescalers(CANRxData[2], CANRxData);
 8009bc4:	7bbb      	ldrb	r3, [r7, #14]
 8009bc6:	f107 020c 	add.w	r2, r7, #12
 8009bca:	4611      	mov	r1, r2
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fd f9d5 	bl	8006f7c <Config_PWM_Prescalers>
					if ((RxHeader.DataLength>>16) < (3+((CANRxData[2]>>4)&1))+((CANRxData[2]>>3)&1)+((CANRxData[2]>>2)&1)+((CANRxData[2]>>1)&1)+((CANRxData[2]>>0)&1)) { Set_Error(ERR_COMMAND_SHORT); }
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	0c1b      	lsrs	r3, r3, #16
 8009bd6:	7bba      	ldrb	r2, [r7, #14]
 8009bd8:	0912      	lsrs	r2, r2, #4
 8009bda:	b2d2      	uxtb	r2, r2
 8009bdc:	f002 0201 	and.w	r2, r2, #1
 8009be0:	1cd1      	adds	r1, r2, #3
 8009be2:	7bba      	ldrb	r2, [r7, #14]
 8009be4:	08d2      	lsrs	r2, r2, #3
 8009be6:	b2d2      	uxtb	r2, r2
 8009be8:	f002 0201 	and.w	r2, r2, #1
 8009bec:	4411      	add	r1, r2
 8009bee:	7bba      	ldrb	r2, [r7, #14]
 8009bf0:	0892      	lsrs	r2, r2, #2
 8009bf2:	b2d2      	uxtb	r2, r2
 8009bf4:	f002 0201 	and.w	r2, r2, #1
 8009bf8:	4411      	add	r1, r2
 8009bfa:	7bba      	ldrb	r2, [r7, #14]
 8009bfc:	0852      	lsrs	r2, r2, #1
 8009bfe:	b2d2      	uxtb	r2, r2
 8009c00:	f002 0201 	and.w	r2, r2, #1
 8009c04:	4411      	add	r1, r2
 8009c06:	7bba      	ldrb	r2, [r7, #14]
 8009c08:	f002 0201 	and.w	r2, r2, #1
 8009c0c:	440a      	add	r2, r1
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d251      	bcs.n	8009cb6 <HAL_FDCAN_RxFifo0Callback+0x5ee>
 8009c12:	2009      	movs	r0, #9
 8009c14:	f000 f85a 	bl	8009ccc <Set_Error>
					break;
 8009c18:	e04d      	b.n	8009cb6 <HAL_FDCAN_RxFifo0Callback+0x5ee>
					Config_DIO_Pins(CANRxData[2], CANRxData[3], CANRxData[4], CANRxData[5]);
 8009c1a:	7bb8      	ldrb	r0, [r7, #14]
 8009c1c:	7bf9      	ldrb	r1, [r7, #15]
 8009c1e:	7c3a      	ldrb	r2, [r7, #16]
 8009c20:	7c7b      	ldrb	r3, [r7, #17]
 8009c22:	f7fd f9d9 	bl	8006fd8 <Config_DIO_Pins>
					if ((RxHeader.DataLength>>16) < 6) { Set_Error(ERR_COMMAND_SHORT); }
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	0c1b      	lsrs	r3, r3, #16
 8009c2a:	2b05      	cmp	r3, #5
 8009c2c:	d845      	bhi.n	8009cba <HAL_FDCAN_RxFifo0Callback+0x5f2>
 8009c2e:	2009      	movs	r0, #9
 8009c30:	f000 f84c 	bl	8009ccc <Set_Error>
					break;
 8009c34:	e041      	b.n	8009cba <HAL_FDCAN_RxFifo0Callback+0x5f2>
					Config_Interrupt_Power(CANRxData[2], CANRxData[3], CANRxData[4], CANRxData[5], CANRxData[6]);
 8009c36:	7bb8      	ldrb	r0, [r7, #14]
 8009c38:	7bf9      	ldrb	r1, [r7, #15]
 8009c3a:	7c3a      	ldrb	r2, [r7, #16]
 8009c3c:	7c7c      	ldrb	r4, [r7, #17]
 8009c3e:	7cbb      	ldrb	r3, [r7, #18]
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	4623      	mov	r3, r4
 8009c44:	f7fd fa6e 	bl	8007124 <Config_Interrupt_Power>
					if ((RxHeader.DataLength>>16) < 7) { Set_Error(ERR_COMMAND_SHORT); }
 8009c48:	6a3b      	ldr	r3, [r7, #32]
 8009c4a:	0c1b      	lsrs	r3, r3, #16
 8009c4c:	2b06      	cmp	r3, #6
 8009c4e:	d836      	bhi.n	8009cbe <HAL_FDCAN_RxFifo0Callback+0x5f6>
 8009c50:	2009      	movs	r0, #9
 8009c52:	f000 f83b 	bl	8009ccc <Set_Error>
					break;
 8009c56:	e032      	b.n	8009cbe <HAL_FDCAN_RxFifo0Callback+0x5f6>
					Config_Interrupt_Can(CANRxData[2], CANRxData[3], CANRxData[4]);
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	7bf9      	ldrb	r1, [r7, #15]
 8009c5c:	7c3a      	ldrb	r2, [r7, #16]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fd fa8e 	bl	8007180 <Config_Interrupt_Can>
					if ((RxHeader.DataLength>>16) < 5) { Set_Error(ERR_COMMAND_SHORT); }
 8009c64:	6a3b      	ldr	r3, [r7, #32]
 8009c66:	0c1b      	lsrs	r3, r3, #16
 8009c68:	2b04      	cmp	r3, #4
 8009c6a:	d82a      	bhi.n	8009cc2 <HAL_FDCAN_RxFifo0Callback+0x5fa>
 8009c6c:	2009      	movs	r0, #9
 8009c6e:	f000 f82d 	bl	8009ccc <Set_Error>
					break;
 8009c72:	e026      	b.n	8009cc2 <HAL_FDCAN_RxFifo0Callback+0x5fa>
					Set_Error(ERR_INVALID_COMMAND);
 8009c74:	2008      	movs	r0, #8
 8009c76:	f000 f829 	bl	8009ccc <Set_Error>
					break;
 8009c7a:	bf00      	nop
 8009c7c:	e022      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
			Set_Error(ERR_RECIEVED_INVALID_ID);
 8009c7e:	200a      	movs	r0, #10
 8009c80:	f000 f824 	bl	8009ccc <Set_Error>
}
 8009c84:	e01e      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
			}
 8009c86:	bf00      	nop
 8009c88:	e01c      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009c8a:	bf00      	nop
 8009c8c:	e01a      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009c8e:	bf00      	nop
 8009c90:	e018      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009c92:	bf00      	nop
 8009c94:	e016      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009c96:	bf00      	nop
 8009c98:	e014      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009c9a:	bf00      	nop
 8009c9c:	e012      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009c9e:	bf00      	nop
 8009ca0:	e010      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009ca2:	bf00      	nop
 8009ca4:	e00e      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009ca6:	bf00      	nop
 8009ca8:	e00c      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009caa:	bf00      	nop
 8009cac:	e00a      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009cae:	bf00      	nop
 8009cb0:	e008      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009cb2:	bf00      	nop
 8009cb4:	e006      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009cb6:	bf00      	nop
 8009cb8:	e004      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009cba:	bf00      	nop
 8009cbc:	e002      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009cbe:	bf00      	nop
 8009cc0:	e000      	b.n	8009cc4 <HAL_FDCAN_RxFifo0Callback+0x5fc>
					break;
 8009cc2:	bf00      	nop
}
 8009cc4:	bf00      	nop
 8009cc6:	3744      	adds	r7, #68	; 0x44
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd90      	pop	{r4, r7, pc}

08009ccc <Set_Error>:


void Set_Error(uint32_t error)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
	canErrors[(error/32)]  |= (1<<(error%32));
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	095b      	lsrs	r3, r3, #5
 8009cd8:	4a10      	ldr	r2, [pc, #64]	; (8009d1c <Set_Error+0x50>)
 8009cda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009cde:	6879      	ldr	r1, [r7, #4]
 8009ce0:	f001 011f 	and.w	r1, r1, #31
 8009ce4:	2001      	movs	r0, #1
 8009ce6:	fa00 f101 	lsl.w	r1, r0, r1
 8009cea:	430a      	orrs	r2, r1
 8009cec:	490b      	ldr	r1, [pc, #44]	; (8009d1c <Set_Error+0x50>)
 8009cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	canErrorToTransmit |= (1<<(error/32));
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	095b      	lsrs	r3, r3, #5
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cfc:	b25a      	sxtb	r2, r3
 8009cfe:	4b08      	ldr	r3, [pc, #32]	; (8009d20 <Set_Error+0x54>)
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	b25b      	sxtb	r3, r3
 8009d04:	4313      	orrs	r3, r2
 8009d06:	b25b      	sxtb	r3, r3
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	4b05      	ldr	r3, [pc, #20]	; (8009d20 <Set_Error+0x54>)
 8009d0c:	701a      	strb	r2, [r3, #0]
}
 8009d0e:	bf00      	nop
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	20000200 	.word	0x20000200
 8009d20:	20000574 	.word	0x20000574

08009d24 <Send_Error>:

void Send_Error(void)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b08a      	sub	sp, #40	; 0x28
 8009d28:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<8; i++)
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d2e:	e06d      	b.n	8009e0c <Send_Error+0xe8>
	{
		if (canErrorToTransmit&(1<<i))
 8009d30:	4b39      	ldr	r3, [pc, #228]	; (8009e18 <Send_Error+0xf4>)
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	461a      	mov	r2, r3
 8009d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d38:	fa42 f303 	asr.w	r3, r2, r3
 8009d3c:	f003 0301 	and.w	r3, r3, #1
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d060      	beq.n	8009e06 <Send_Error+0xe2>
		{
			if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) > 0)
 8009d44:	4835      	ldr	r0, [pc, #212]	; (8009e1c <Send_Error+0xf8>)
 8009d46:	f7f8 fe29 	bl	800299c <HAL_FDCAN_GetTxFifoFreeLevel>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d05a      	beq.n	8009e06 <Send_Error+0xe2>
			{
				FDCAN_TxHeaderTypeDef TxHeader;

				TxHeader.Identifier = CANID_ERROR;
 8009d50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009d54:	603b      	str	r3, [r7, #0]
				TxHeader.DataLength = FDCAN_DLC_BYTES_6;
 8009d56:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8009d5a:	60fb      	str	r3, [r7, #12]

				CANTxData[0]=ID;
 8009d5c:	4b30      	ldr	r3, [pc, #192]	; (8009e20 <Send_Error+0xfc>)
 8009d5e:	2200      	movs	r2, #0
 8009d60:	701a      	strb	r2, [r3, #0]
				CANTxData[1]=i;
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	4b2e      	ldr	r3, [pc, #184]	; (8009e20 <Send_Error+0xfc>)
 8009d68:	705a      	strb	r2, [r3, #1]
				CANTxData[2]=(canErrors[i]>>24)&0xFF;
 8009d6a:	4a2e      	ldr	r2, [pc, #184]	; (8009e24 <Send_Error+0x100>)
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d72:	0e1b      	lsrs	r3, r3, #24
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	4b2a      	ldr	r3, [pc, #168]	; (8009e20 <Send_Error+0xfc>)
 8009d78:	709a      	strb	r2, [r3, #2]
				CANTxData[3]=(canErrors[i]>>16)&0xFF;
 8009d7a:	4a2a      	ldr	r2, [pc, #168]	; (8009e24 <Send_Error+0x100>)
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d82:	0c1b      	lsrs	r3, r3, #16
 8009d84:	b2da      	uxtb	r2, r3
 8009d86:	4b26      	ldr	r3, [pc, #152]	; (8009e20 <Send_Error+0xfc>)
 8009d88:	70da      	strb	r2, [r3, #3]
				CANTxData[4]=(canErrors[i]>>8)&0xFF;
 8009d8a:	4a26      	ldr	r2, [pc, #152]	; (8009e24 <Send_Error+0x100>)
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d92:	0a1b      	lsrs	r3, r3, #8
 8009d94:	b2da      	uxtb	r2, r3
 8009d96:	4b22      	ldr	r3, [pc, #136]	; (8009e20 <Send_Error+0xfc>)
 8009d98:	711a      	strb	r2, [r3, #4]
				CANTxData[5]=(canErrors[i]>>0)&0xFF;
 8009d9a:	4a22      	ldr	r2, [pc, #136]	; (8009e24 <Send_Error+0x100>)
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	4b1e      	ldr	r3, [pc, #120]	; (8009e20 <Send_Error+0xfc>)
 8009da6:	715a      	strb	r2, [r3, #5]

				TxHeader.IdType = FDCAN_STANDARD_ID;
 8009da8:	2300      	movs	r3, #0
 8009daa:	607b      	str	r3, [r7, #4]
				TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8009dac:	2300      	movs	r3, #0
 8009dae:	60bb      	str	r3, [r7, #8]
				TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8009db0:	2300      	movs	r3, #0
 8009db2:	613b      	str	r3, [r7, #16]
				TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8009db4:	2300      	movs	r3, #0
 8009db6:	617b      	str	r3, [r7, #20]
				TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8009db8:	2300      	movs	r3, #0
 8009dba:	61bb      	str	r3, [r7, #24]
				TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	61fb      	str	r3, [r7, #28]
				TxHeader.MessageMarker = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	623b      	str	r3, [r7, #32]

				if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 8009dc4:	463b      	mov	r3, r7
 8009dc6:	4a16      	ldr	r2, [pc, #88]	; (8009e20 <Send_Error+0xfc>)
 8009dc8:	4619      	mov	r1, r3
 8009dca:	4814      	ldr	r0, [pc, #80]	; (8009e1c <Send_Error+0xf8>)
 8009dcc:	f7f8 fcc8 	bl	8002760 <HAL_FDCAN_AddMessageToTxFifoQ>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <Send_Error+0xba>
				{
					Set_Error(ERR_SEND_FAILED);
 8009dd6:	2006      	movs	r0, #6
 8009dd8:	f7ff ff78 	bl	8009ccc <Set_Error>
 8009ddc:	e019      	b.n	8009e12 <Send_Error+0xee>
					return;
				}
				else
				{
					//if we sent the error message clear the error so that if it only occurs once the error is not sent continuously
					canErrors[i]=0;
 8009dde:	4a11      	ldr	r2, [pc, #68]	; (8009e24 <Send_Error+0x100>)
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	2100      	movs	r1, #0
 8009de4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					canErrorToTransmit &= ~(1<<i);
 8009de8:	2201      	movs	r2, #1
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	fa02 f303 	lsl.w	r3, r2, r3
 8009df0:	b25b      	sxtb	r3, r3
 8009df2:	43db      	mvns	r3, r3
 8009df4:	b25a      	sxtb	r2, r3
 8009df6:	4b08      	ldr	r3, [pc, #32]	; (8009e18 <Send_Error+0xf4>)
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	b25b      	sxtb	r3, r3
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	b25b      	sxtb	r3, r3
 8009e00:	b2da      	uxtb	r2, r3
 8009e02:	4b05      	ldr	r3, [pc, #20]	; (8009e18 <Send_Error+0xf4>)
 8009e04:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	3301      	adds	r3, #1
 8009e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	2b07      	cmp	r3, #7
 8009e10:	d98e      	bls.n	8009d30 <Send_Error+0xc>
				}
			}
		}
	}
}
 8009e12:	3728      	adds	r7, #40	; 0x28
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	20000574 	.word	0x20000574
 8009e1c:	20000420 	.word	0x20000420
 8009e20:	200008ec 	.word	0x200008ec
 8009e24:	20000200 	.word	0x20000200

08009e28 <Write_PWM>:

void Write_PWM(uint32_t DIO_channel, uint16_t pulse) //TODO: make sure the pwm signal works nicely in real life
{
 8009e28:	b5b0      	push	{r4, r5, r7, lr}
 8009e2a:	b09a      	sub	sp, #104	; 0x68
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	807b      	strh	r3, [r7, #2]
	if(PWM_Out_EN&(1<<DIO_channel))
 8009e34:	4b60      	ldr	r3, [pc, #384]	; (8009fb8 <Write_PWM+0x190>)
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	fa42 f303 	asr.w	r3, r2, r3
 8009e40:	f003 0301 	and.w	r3, r3, #1
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f000 80af 	beq.w	8009fa8 <Write_PWM+0x180>
	{
		TIM_HandleTypeDef htim = {0};
 8009e4a:	f107 0308 	add.w	r3, r7, #8
 8009e4e:	2240      	movs	r2, #64	; 0x40
 8009e50:	2100      	movs	r1, #0
 8009e52:	4618      	mov	r0, r3
 8009e54:	f001 ff98 	bl	800bd88 <memset>
		uint32_t channel = 0;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	667b      	str	r3, [r7, #100]	; 0x64
		TIM_OC_InitTypeDef sConfigOC = {0};
 8009e5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e60:	2200      	movs	r2, #0
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	605a      	str	r2, [r3, #4]
 8009e66:	609a      	str	r2, [r3, #8]
 8009e68:	60da      	str	r2, [r3, #12]
 8009e6a:	611a      	str	r2, [r3, #16]
 8009e6c:	615a      	str	r2, [r3, #20]
 8009e6e:	619a      	str	r2, [r3, #24]

		if(pulse>255) { pulse=255; }
 8009e70:	887b      	ldrh	r3, [r7, #2]
 8009e72:	2bff      	cmp	r3, #255	; 0xff
 8009e74:	d901      	bls.n	8009e7a <Write_PWM+0x52>
 8009e76:	23ff      	movs	r3, #255	; 0xff
 8009e78:	807b      	strh	r3, [r7, #2]

		switch(DIO_channel)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d862      	bhi.n	8009f46 <Write_PWM+0x11e>
 8009e80:	a201      	add	r2, pc, #4	; (adr r2, 8009e88 <Write_PWM+0x60>)
 8009e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e86:	bf00      	nop
 8009e88:	08009e9d 	.word	0x08009e9d
 8009e8c:	08009ebf 	.word	0x08009ebf
 8009e90:	08009ee1 	.word	0x08009ee1
 8009e94:	08009f03 	.word	0x08009f03
 8009e98:	08009f25 	.word	0x08009f25
		{
			case 0: //PB3
				htim = htim2;
 8009e9c:	4b47      	ldr	r3, [pc, #284]	; (8009fbc <Write_PWM+0x194>)
 8009e9e:	f107 0408 	add.w	r4, r7, #8
 8009ea2:	461d      	mov	r5, r3
 8009ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009eb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009eb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				channel = TIM_CHANNEL_2;
 8009eb8:	2304      	movs	r3, #4
 8009eba:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8009ebc:	e048      	b.n	8009f50 <Write_PWM+0x128>
			case 1: //PB4
				htim = htim3;
 8009ebe:	4b40      	ldr	r3, [pc, #256]	; (8009fc0 <Write_PWM+0x198>)
 8009ec0:	f107 0408 	add.w	r4, r7, #8
 8009ec4:	461d      	mov	r5, r3
 8009ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ed2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009ed6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				channel = TIM_CHANNEL_1;
 8009eda:	2300      	movs	r3, #0
 8009edc:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8009ede:	e037      	b.n	8009f50 <Write_PWM+0x128>
			case 2: //PB5
				htim = htim17;
 8009ee0:	4b38      	ldr	r3, [pc, #224]	; (8009fc4 <Write_PWM+0x19c>)
 8009ee2:	f107 0408 	add.w	r4, r7, #8
 8009ee6:	461d      	mov	r5, r3
 8009ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ef4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				channel = TIM_CHANNEL_1;
 8009efc:	2300      	movs	r3, #0
 8009efe:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8009f00:	e026      	b.n	8009f50 <Write_PWM+0x128>
			case 3: //PB6
				htim = htim4;
 8009f02:	4b31      	ldr	r3, [pc, #196]	; (8009fc8 <Write_PWM+0x1a0>)
 8009f04:	f107 0408 	add.w	r4, r7, #8
 8009f08:	461d      	mov	r5, r3
 8009f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009f1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				channel = TIM_CHANNEL_1;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8009f22:	e015      	b.n	8009f50 <Write_PWM+0x128>
			case 4: //PA15
				htim = htim8;
 8009f24:	4b29      	ldr	r3, [pc, #164]	; (8009fcc <Write_PWM+0x1a4>)
 8009f26:	f107 0408 	add.w	r4, r7, #8
 8009f2a:	461d      	mov	r5, r3
 8009f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009f3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				channel = TIM_CHANNEL_1;
 8009f40:	2300      	movs	r3, #0
 8009f42:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8009f44:	e004      	b.n	8009f50 <Write_PWM+0x128>
			default:
				Set_Error(WARN_PWM_INVALID_CHANNEL);
 8009f46:	f240 1001 	movw	r0, #257	; 0x101
 8009f4a:	f7ff febf 	bl	8009ccc <Set_Error>
 8009f4e:	e02f      	b.n	8009fb0 <Write_PWM+0x188>
				return;
		}

		if (HAL_TIM_PWM_Stop(&htim, channel) != HAL_OK)
 8009f50:	f107 0308 	add.w	r3, r7, #8
 8009f54:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fb f816 	bl	8004f88 <HAL_TIM_PWM_Stop>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <Write_PWM+0x13e>
		{
			Error_Handler();
 8009f62:	f001 f8af 	bl	800b0c4 <Error_Handler>
		}
		/*htim.Init.Period = 255;
		HAL_TIM_PWM_Init(&htim);*/
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009f66:	2360      	movs	r3, #96	; 0x60
 8009f68:	64bb      	str	r3, [r7, #72]	; 0x48
		sConfigOC.Pulse = pulse;
 8009f6a:	887b      	ldrh	r3, [r7, #2]
 8009f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	653b      	str	r3, [r7, #80]	; 0x50
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009f72:	2300      	movs	r3, #0
 8009f74:	65bb      	str	r3, [r7, #88]	; 0x58
		if (HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, channel) != HAL_OK)
 8009f76:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009f7a:	f107 0308 	add.w	r3, r7, #8
 8009f7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fb fab5 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <Write_PWM+0x168>
		{
			Error_Handler();
 8009f8c:	f001 f89a 	bl	800b0c4 <Error_Handler>
		}
		if (HAL_TIM_PWM_Start(&htim, channel) != HAL_OK)
 8009f90:	f107 0308 	add.w	r3, r7, #8
 8009f94:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fa ff9e 	bl	8004ed8 <HAL_TIM_PWM_Start>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d006      	beq.n	8009fb0 <Write_PWM+0x188>
		{
			Error_Handler();
 8009fa2:	f001 f88f 	bl	800b0c4 <Error_Handler>
 8009fa6:	e003      	b.n	8009fb0 <Write_PWM+0x188>
		}
	}
	else
	{
		Set_Error(WARN_PWM_NOT_ENABLED);
 8009fa8:	f44f 7082 	mov.w	r0, #260	; 0x104
 8009fac:	f7ff fe8e 	bl	8009ccc <Set_Error>
	}
}
 8009fb0:	3768      	adds	r7, #104	; 0x68
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	200009bc 	.word	0x200009bc
 8009fbc:	20000914 	.word	0x20000914
 8009fc0:	20000520 	.word	0x20000520
 8009fc4:	200003dc 	.word	0x200003dc
 8009fc8:	200001bc 	.word	0x200001bc
 8009fcc:	20000138 	.word	0x20000138

08009fd0 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b0a4      	sub	sp, #144	; 0x90
 8009fd4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009fd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009fda:	2238      	movs	r2, #56	; 0x38
 8009fdc:	2100      	movs	r1, #0
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f001 fed2 	bl	800bd88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009fe4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]
 8009fec:	605a      	str	r2, [r3, #4]
 8009fee:	609a      	str	r2, [r3, #8]
 8009ff0:	60da      	str	r2, [r3, #12]
 8009ff2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009ff4:	463b      	mov	r3, r7
 8009ff6:	2244      	movs	r2, #68	; 0x44
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f001 fec4 	bl	800bd88 <memset>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800a000:	2000      	movs	r0, #0
 800a002:	f7f9 ff25 	bl	8003e50 <HAL_PWREx_ControlVoltageScaling>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a006:	2301      	movs	r3, #1
 800a008:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800a00a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800a00e:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a010:	2302      	movs	r3, #2
 800a012:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a014:	2303      	movs	r3, #3
 800a016:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800a018:	2304      	movs	r3, #4
 800a01a:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800a01c:	2355      	movs	r3, #85	; 0x55
 800a01e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a022:	2302      	movs	r3, #2
 800a024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a028:	2302      	movs	r3, #2
 800a02a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a02e:	2302      	movs	r3, #2
 800a030:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a034:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a038:	4618      	mov	r0, r3
 800a03a:	f7f9 ffad 	bl	8003f98 <HAL_RCC_OscConfig>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <SystemClock_Config+0x78>
	{
		Error_Handler();
 800a044:	f001 f83e 	bl	800b0c4 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800a048:	230f      	movs	r3, #15
 800a04a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a04c:	2303      	movs	r3, #3
 800a04e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a050:	2300      	movs	r3, #0
 800a052:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a054:	2300      	movs	r3, #0
 800a056:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a058:	2300      	movs	r3, #0
 800a05a:	657b      	str	r3, [r7, #84]	; 0x54
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 800a05c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a060:	2108      	movs	r1, #8
 800a062:	4618      	mov	r0, r3
 800a064:	f7fa fab0 	bl	80045c8 <HAL_RCC_ClockConfig>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 800a06e:	f001 f829 	bl	800b0c4 <Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
 800a072:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800a076:	603b      	str	r3, [r7, #0]
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800a078:	2300      	movs	r3, #0
 800a07a:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800a07c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a080:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a082:	463b      	mov	r3, r7
 800a084:	4618      	mov	r0, r3
 800a086:	f7fa fc8b 	bl	80049a0 <HAL_RCCEx_PeriphCLKConfig>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 800a090:	f001 f818 	bl	800b0c4 <Error_Handler>
	}
}
 800a094:	bf00      	nop
 800a096:	3790      	adds	r7, #144	; 0x90
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b08c      	sub	sp, #48	; 0x30
 800a0a0:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode = {0};
 800a0a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	601a      	str	r2, [r3, #0]
 800a0aa:	605a      	str	r2, [r3, #4]
 800a0ac:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 800a0ae:	1d3b      	adds	r3, r7, #4
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f001 fe67 	bl	800bd88 <memset>

	hadc1.Instance = ADC1;
 800a0ba:	4b47      	ldr	r3, [pc, #284]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a0bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a0c0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a0c2:	4b45      	ldr	r3, [pc, #276]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800a0c8:	4b43      	ldr	r3, [pc, #268]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a0ca:	2208      	movs	r2, #8
 800a0cc:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a0ce:	4b42      	ldr	r3, [pc, #264]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 800a0d4:	4b40      	ldr	r3, [pc, #256]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800a0da:	4b3f      	ldr	r3, [pc, #252]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a0dc:	2201      	movs	r2, #1
 800a0de:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a0e0:	4b3d      	ldr	r3, [pc, #244]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a0e2:	2204      	movs	r2, #4
 800a0e4:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800a0e6:	4b3c      	ldr	r3, [pc, #240]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800a0ec:	4b3a      	ldr	r3, [pc, #232]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 3;
 800a0f2:	4b39      	ldr	r3, [pc, #228]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a0f4:	2203      	movs	r2, #3
 800a0f6:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = ENABLE;
 800a0f8:	4b37      	ldr	r3, [pc, #220]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a100:	4b35      	ldr	r3, [pc, #212]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a102:	2200      	movs	r2, #0
 800a104:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a106:	4b34      	ldr	r3, [pc, #208]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a108:	2200      	movs	r2, #0
 800a10a:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800a10c:	4b32      	ldr	r3, [pc, #200]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800a114:	4b30      	ldr	r3, [pc, #192]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a116:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a11a:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 800a11c:	4b2e      	ldr	r3, [pc, #184]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a124:	482c      	ldr	r0, [pc, #176]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a126:	f7f6 fb41 	bl	80007ac <HAL_ADC_Init>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <MX_ADC1_Init+0x98>
	{
		Error_Handler();
 800a130:	f000 ffc8 	bl	800b0c4 <Error_Handler>
	}

	multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800a134:	2306      	movs	r3, #6
 800a136:	627b      	str	r3, [r7, #36]	; 0x24
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 800a138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a13c:	62bb      	str	r3, [r7, #40]	; 0x28
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_12CYCLES;
 800a13e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 800a142:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800a144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a148:	4619      	mov	r1, r3
 800a14a:	4823      	ldr	r0, [pc, #140]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a14c:	f7f7 fc46 	bl	80019dc <HAL_ADCEx_MultiModeConfigChannel>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <MX_ADC1_Init+0xbe>
	{
		Error_Handler();
 800a156:	f000 ffb5 	bl	800b0c4 <Error_Handler>
	}


	sConfig.Channel = ADC_CHANNEL_1;
 800a15a:	4b20      	ldr	r3, [pc, #128]	; (800a1dc <MX_ADC1_Init+0x140>)
 800a15c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800a15e:	2312      	movs	r3, #18
 800a160:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800a162:	2307      	movs	r3, #7
 800a164:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a166:	237f      	movs	r3, #127	; 0x7f
 800a168:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a16a:	2304      	movs	r3, #4
 800a16c:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800a16e:	2300      	movs	r3, #0
 800a170:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a172:	1d3b      	adds	r3, r7, #4
 800a174:	4619      	mov	r1, r3
 800a176:	4818      	ldr	r0, [pc, #96]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a178:	f7f6 fcb4 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <MX_ADC1_Init+0xea>
	{
		Error_Handler();
 800a182:	f000 ff9f 	bl	800b0c4 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_2;
 800a186:	4b16      	ldr	r3, [pc, #88]	; (800a1e0 <MX_ADC1_Init+0x144>)
 800a188:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800a18a:	230c      	movs	r3, #12
 800a18c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a18e:	1d3b      	adds	r3, r7, #4
 800a190:	4619      	mov	r1, r3
 800a192:	4811      	ldr	r0, [pc, #68]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a194:	f7f6 fca6 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d001      	beq.n	800a1a2 <MX_ADC1_Init+0x106>
	{
		Error_Handler();
 800a19e:	f000 ff91 	bl	800b0c4 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_3;
 800a1a2:	4b10      	ldr	r3, [pc, #64]	; (800a1e4 <MX_ADC1_Init+0x148>)
 800a1a4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800a1a6:	2306      	movs	r3, #6
 800a1a8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a1aa:	1d3b      	adds	r3, r7, #4
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	480a      	ldr	r0, [pc, #40]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a1b0:	f7f6 fc98 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d001      	beq.n	800a1be <MX_ADC1_Init+0x122>
	{
		Error_Handler();
 800a1ba:	f000 ff83 	bl	800b0c4 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800a1be:	217f      	movs	r1, #127	; 0x7f
 800a1c0:	4805      	ldr	r0, [pc, #20]	; (800a1d8 <MX_ADC1_Init+0x13c>)
 800a1c2:	f7f7 fa55 	bl	8001670 <HAL_ADCEx_Calibration_Start>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d001      	beq.n	800a1d0 <MX_ADC1_Init+0x134>
	{
		Error_Handler();
 800a1cc:	f000 ff7a 	bl	800b0c4 <Error_Handler>
	}
}
 800a1d0:	bf00      	nop
 800a1d2:	3730      	adds	r7, #48	; 0x30
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	200005cc 	.word	0x200005cc
 800a1dc:	04300002 	.word	0x04300002
 800a1e0:	08600004 	.word	0x08600004
 800a1e4:	0c900008 	.word	0x0c900008

0800a1e8 <MX_ADC2_Init>:

static void MX_ADC2_Init(void)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b088      	sub	sp, #32
 800a1ec:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800a1ee:	463b      	mov	r3, r7
 800a1f0:	2220      	movs	r2, #32
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f001 fdc7 	bl	800bd88 <memset>

	hadc2.Instance = ADC2;
 800a1fa:	4b38      	ldr	r3, [pc, #224]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a1fc:	4a38      	ldr	r2, [pc, #224]	; (800a2e0 <MX_ADC2_Init+0xf8>)
 800a1fe:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a200:	4b36      	ldr	r3, [pc, #216]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a202:	2200      	movs	r2, #0
 800a204:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 800a206:	4b35      	ldr	r3, [pc, #212]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a208:	2208      	movs	r2, #8
 800a20a:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a20c:	4b33      	ldr	r3, [pc, #204]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a20e:	2200      	movs	r2, #0
 800a210:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 800a212:	4b32      	ldr	r3, [pc, #200]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a214:	2200      	movs	r2, #0
 800a216:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800a218:	4b30      	ldr	r3, [pc, #192]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a21a:	2201      	movs	r2, #1
 800a21c:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a21e:	4b2f      	ldr	r3, [pc, #188]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a220:	2204      	movs	r2, #4
 800a222:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800a224:	4b2d      	ldr	r3, [pc, #180]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a226:	2200      	movs	r2, #0
 800a228:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 800a22a:	4b2c      	ldr	r3, [pc, #176]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 3;
 800a230:	4b2a      	ldr	r3, [pc, #168]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a232:	2203      	movs	r2, #3
 800a234:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = ENABLE;
 800a236:	4b29      	ldr	r3, [pc, #164]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a238:	2201      	movs	r2, #1
 800a23a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.DMAContinuousRequests = ENABLE;
 800a23e:	4b27      	ldr	r3, [pc, #156]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a240:	2201      	movs	r2, #1
 800a242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800a246:	4b25      	ldr	r3, [pc, #148]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a24c:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 800a24e:	4b23      	ldr	r3, [pc, #140]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a250:	2200      	movs	r2, #0
 800a252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800a256:	4821      	ldr	r0, [pc, #132]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a258:	f7f6 faa8 	bl	80007ac <HAL_ADC_Init>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d001      	beq.n	800a266 <MX_ADC2_Init+0x7e>
	{
		Error_Handler();
 800a262:	f000 ff2f 	bl	800b0c4 <Error_Handler>
	}


	sConfig.Channel = ADC_CHANNEL_10;
 800a266:	4b1f      	ldr	r3, [pc, #124]	; (800a2e4 <MX_ADC2_Init+0xfc>)
 800a268:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800a26a:	2306      	movs	r3, #6
 800a26c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800a26e:	2307      	movs	r3, #7
 800a270:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a272:	237f      	movs	r3, #127	; 0x7f
 800a274:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a276:	2304      	movs	r3, #4
 800a278:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800a27a:	2300      	movs	r3, #0
 800a27c:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a27e:	463b      	mov	r3, r7
 800a280:	4619      	mov	r1, r3
 800a282:	4816      	ldr	r0, [pc, #88]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a284:	f7f6 fc2e 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d001      	beq.n	800a292 <MX_ADC2_Init+0xaa>
	{
		Error_Handler();
 800a28e:	f000 ff19 	bl	800b0c4 <Error_Handler>
	}

	sConfig.Rank = ADC_REGULAR_RANK_2;
 800a292:	230c      	movs	r3, #12
 800a294:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a296:	463b      	mov	r3, r7
 800a298:	4619      	mov	r1, r3
 800a29a:	4810      	ldr	r0, [pc, #64]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a29c:	f7f6 fc22 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <MX_ADC2_Init+0xc2>
	{
		Error_Handler();
 800a2a6:	f000 ff0d 	bl	800b0c4 <Error_Handler>
	}

	sConfig.Rank = ADC_REGULAR_RANK_3;
 800a2aa:	2312      	movs	r3, #18
 800a2ac:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a2ae:	463b      	mov	r3, r7
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	480a      	ldr	r0, [pc, #40]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a2b4:	f7f6 fc16 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d001      	beq.n	800a2c2 <MX_ADC2_Init+0xda>
	{
		Error_Handler();
 800a2be:	f000 ff01 	bl	800b0c4 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 800a2c2:	217f      	movs	r1, #127	; 0x7f
 800a2c4:	4805      	ldr	r0, [pc, #20]	; (800a2dc <MX_ADC2_Init+0xf4>)
 800a2c6:	f7f7 f9d3 	bl	8001670 <HAL_ADCEx_Calibration_Start>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d001      	beq.n	800a2d4 <MX_ADC2_Init+0xec>
	{
		Error_Handler();
 800a2d0:	f000 fef8 	bl	800b0c4 <Error_Handler>
	}
}
 800a2d4:	bf00      	nop
 800a2d6:	3720      	adds	r7, #32
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	20000224 	.word	0x20000224
 800a2e0:	50000100 	.word	0x50000100
 800a2e4:	2a000400 	.word	0x2a000400

0800a2e8 <MX_FDCAN_Init>:

static void MX_FDCAN_Init(void)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b088      	sub	sp, #32
 800a2ec:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef	sFilterConfig;

	hfdcan.Instance = FDCAN1;
 800a2ee:	4b52      	ldr	r3, [pc, #328]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a2f0:	4a52      	ldr	r2, [pc, #328]	; (800a43c <MX_FDCAN_Init+0x154>)
 800a2f2:	601a      	str	r2, [r3, #0]
	hfdcan.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800a2f4:	4b50      	ldr	r3, [pc, #320]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	605a      	str	r2, [r3, #4]
	hfdcan.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800a2fa:	4b4f      	ldr	r3, [pc, #316]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	609a      	str	r2, [r3, #8]
	hfdcan.Init.Mode = FDCAN_MODE_NORMAL;
 800a300:	4b4d      	ldr	r3, [pc, #308]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a302:	2200      	movs	r2, #0
 800a304:	60da      	str	r2, [r3, #12]
	hfdcan.Init.AutoRetransmission = DISABLE;
 800a306:	4b4c      	ldr	r3, [pc, #304]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a308:	2200      	movs	r2, #0
 800a30a:	741a      	strb	r2, [r3, #16]
	hfdcan.Init.TransmitPause = DISABLE;
 800a30c:	4b4a      	ldr	r3, [pc, #296]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a30e:	2200      	movs	r2, #0
 800a310:	745a      	strb	r2, [r3, #17]
	hfdcan.Init.ProtocolException = DISABLE;
 800a312:	4b49      	ldr	r3, [pc, #292]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a314:	2200      	movs	r2, #0
 800a316:	749a      	strb	r2, [r3, #18]
	hfdcan.Init.NominalPrescaler = 1;
 800a318:	4b47      	ldr	r3, [pc, #284]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a31a:	2201      	movs	r2, #1
 800a31c:	615a      	str	r2, [r3, #20]
	hfdcan.Init.NominalSyncJumpWidth = 1;
 800a31e:	4b46      	ldr	r3, [pc, #280]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a320:	2201      	movs	r2, #1
 800a322:	619a      	str	r2, [r3, #24]
	hfdcan.Init.NominalTimeSeg1 = 13;
 800a324:	4b44      	ldr	r3, [pc, #272]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a326:	220d      	movs	r2, #13
 800a328:	61da      	str	r2, [r3, #28]
	hfdcan.Init.NominalTimeSeg2 = 2;
 800a32a:	4b43      	ldr	r3, [pc, #268]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a32c:	2202      	movs	r2, #2
 800a32e:	621a      	str	r2, [r3, #32]
	hfdcan.Init.DataPrescaler = 1;
 800a330:	4b41      	ldr	r3, [pc, #260]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a332:	2201      	movs	r2, #1
 800a334:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan.Init.DataSyncJumpWidth = 1;
 800a336:	4b40      	ldr	r3, [pc, #256]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a338:	2201      	movs	r2, #1
 800a33a:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan.Init.DataTimeSeg1 = 1;
 800a33c:	4b3e      	ldr	r3, [pc, #248]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a33e:	2201      	movs	r2, #1
 800a340:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan.Init.DataTimeSeg2 = 1;
 800a342:	4b3d      	ldr	r3, [pc, #244]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a344:	2201      	movs	r2, #1
 800a346:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan.Init.StdFiltersNbr = 2;
 800a348:	4b3b      	ldr	r3, [pc, #236]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a34a:	2202      	movs	r2, #2
 800a34c:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan.Init.ExtFiltersNbr = 0;
 800a34e:	4b3a      	ldr	r3, [pc, #232]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a350:	2200      	movs	r2, #0
 800a352:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800a354:	4b38      	ldr	r3, [pc, #224]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a356:	2200      	movs	r2, #0
 800a358:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_FDCAN_Init(&hfdcan) != HAL_OK)
 800a35a:	4837      	ldr	r0, [pc, #220]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a35c:	f7f7 ffba 	bl	80022d4 <HAL_FDCAN_Init>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d001      	beq.n	800a36a <MX_FDCAN_Init+0x82>
	{
		Error_Handler();
 800a366:	f000 fead 	bl	800b0c4 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 800a36a:	2201      	movs	r2, #1
 800a36c:	2140      	movs	r1, #64	; 0x40
 800a36e:	4832      	ldr	r0, [pc, #200]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a370:	f7f8 f995 	bl	800269e <HAL_FDCAN_ConfigRxFifoOverwrite>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d001      	beq.n	800a37e <MX_FDCAN_Init+0x96>
	{
		Error_Handler();
 800a37a:	f000 fea3 	bl	800b0c4 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 800a37e:	2201      	movs	r2, #1
 800a380:	2141      	movs	r1, #65	; 0x41
 800a382:	482d      	ldr	r0, [pc, #180]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a384:	f7f8 f98b 	bl	800269e <HAL_FDCAN_ConfigRxFifoOverwrite>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <MX_FDCAN_Init+0xaa>
	{
		Error_Handler();
 800a38e:	f000 fe99 	bl	800b0c4 <Error_Handler>
	}

	//only accept config/request can messages and sync can messages
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800a392:	2300      	movs	r3, #0
 800a394:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 800a396:	2300      	movs	r3, #0
 800a398:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800a39a:	2302      	movs	r3, #2
 800a39c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_CONFIG;
 800a3a2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800a3a6:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 800a3a8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a3ac:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 800a3ae:	463b      	mov	r3, r7
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	4821      	ldr	r0, [pc, #132]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a3b4:	f7f8 f8e8 	bl	8002588 <HAL_FDCAN_ConfigFilter>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <MX_FDCAN_Init+0xda>
	{
		Error_Handler();
 800a3be:	f000 fe81 	bl	800b0c4 <Error_Handler>
	}

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 1;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800a3ca:	2302      	movs	r3, #2
 800a3cc:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_SYNC;
 800a3d2:	2380      	movs	r3, #128	; 0x80
 800a3d4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 800a3d6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a3da:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 800a3dc:	463b      	mov	r3, r7
 800a3de:	4619      	mov	r1, r3
 800a3e0:	4815      	ldr	r0, [pc, #84]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a3e2:	f7f8 f8d1 	bl	8002588 <HAL_FDCAN_ConfigFilter>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <MX_FDCAN_Init+0x108>
	{
		Error_Handler();
 800a3ec:	f000 fe6a 	bl	800b0c4 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	2102      	movs	r1, #2
 800a3fa:	480f      	ldr	r0, [pc, #60]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a3fc:	f7f8 f91e 	bl	800263c <HAL_FDCAN_ConfigGlobalFilter>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <MX_FDCAN_Init+0x122>
	{
		Error_Handler();
 800a406:	f000 fe5d 	bl	800b0c4 <Error_Handler>
	}

	if(HAL_FDCAN_Start(&hfdcan) != HAL_OK)
 800a40a:	480b      	ldr	r0, [pc, #44]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a40c:	f7f8 f980 	bl	8002710 <HAL_FDCAN_Start>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <MX_FDCAN_Init+0x132>
	{
		Error_Handler();
 800a416:	f000 fe55 	bl	800b0c4 <Error_Handler>
	}
	if(HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800a41a:	2200      	movs	r2, #0
 800a41c:	2101      	movs	r1, #1
 800a41e:	4806      	ldr	r0, [pc, #24]	; (800a438 <MX_FDCAN_Init+0x150>)
 800a420:	f7f8 face 	bl	80029c0 <HAL_FDCAN_ActivateNotification>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <MX_FDCAN_Init+0x146>
	{
		Error_Handler();
 800a42a:	f000 fe4b 	bl	800b0c4 <Error_Handler>
	}
}
 800a42e:	bf00      	nop
 800a430:	3718      	adds	r7, #24
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20000420 	.word	0x20000420
 800a43c:	40006400 	.word	0x40006400

0800a440 <MX_DMA_Init>:

static void MX_DMA_Init(void) 
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800a446:	4b16      	ldr	r3, [pc, #88]	; (800a4a0 <MX_DMA_Init+0x60>)
 800a448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a44a:	4a15      	ldr	r2, [pc, #84]	; (800a4a0 <MX_DMA_Init+0x60>)
 800a44c:	f043 0304 	orr.w	r3, r3, #4
 800a450:	6493      	str	r3, [r2, #72]	; 0x48
 800a452:	4b13      	ldr	r3, [pc, #76]	; (800a4a0 <MX_DMA_Init+0x60>)
 800a454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a456:	f003 0304 	and.w	r3, r3, #4
 800a45a:	607b      	str	r3, [r7, #4]
 800a45c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a45e:	4b10      	ldr	r3, [pc, #64]	; (800a4a0 <MX_DMA_Init+0x60>)
 800a460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a462:	4a0f      	ldr	r2, [pc, #60]	; (800a4a0 <MX_DMA_Init+0x60>)
 800a464:	f043 0301 	orr.w	r3, r3, #1
 800a468:	6493      	str	r3, [r2, #72]	; 0x48
 800a46a:	4b0d      	ldr	r3, [pc, #52]	; (800a4a0 <MX_DMA_Init+0x60>)
 800a46c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a46e:	f003 0301 	and.w	r3, r3, #1
 800a472:	603b      	str	r3, [r7, #0]
 800a474:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800a476:	2200      	movs	r2, #0
 800a478:	2100      	movs	r1, #0
 800a47a:	200b      	movs	r0, #11
 800a47c:	f7f7 fc29 	bl	8001cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a480:	200b      	movs	r0, #11
 800a482:	f7f7 fc40 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800a486:	2200      	movs	r2, #0
 800a488:	2100      	movs	r1, #0
 800a48a:	200c      	movs	r0, #12
 800a48c:	f7f7 fc21 	bl	8001cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a490:	200c      	movs	r0, #12
 800a492:	f7f7 fc38 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800a496:	bf00      	nop
 800a498:	3708      	adds	r7, #8
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	40021000 	.word	0x40021000

0800a4a4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b088      	sub	sp, #32
 800a4a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4aa:	f107 030c 	add.w	r3, r7, #12
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	605a      	str	r2, [r3, #4]
 800a4b4:	609a      	str	r2, [r3, #8]
 800a4b6:	60da      	str	r2, [r3, #12]
 800a4b8:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800a4ba:	4bb7      	ldr	r3, [pc, #732]	; (800a798 <MX_GPIO_Init+0x2f4>)
 800a4bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4be:	4ab6      	ldr	r2, [pc, #728]	; (800a798 <MX_GPIO_Init+0x2f4>)
 800a4c0:	f043 0301 	orr.w	r3, r3, #1
 800a4c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4c6:	4bb4      	ldr	r3, [pc, #720]	; (800a798 <MX_GPIO_Init+0x2f4>)
 800a4c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ca:	f003 0301 	and.w	r3, r3, #1
 800a4ce:	60bb      	str	r3, [r7, #8]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800a4d2:	4bb1      	ldr	r3, [pc, #708]	; (800a798 <MX_GPIO_Init+0x2f4>)
 800a4d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4d6:	4ab0      	ldr	r2, [pc, #704]	; (800a798 <MX_GPIO_Init+0x2f4>)
 800a4d8:	f043 0302 	orr.w	r3, r3, #2
 800a4dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4de:	4bae      	ldr	r3, [pc, #696]	; (800a798 <MX_GPIO_Init+0x2f4>)
 800a4e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4e2:	f003 0302 	and.w	r3, r3, #2
 800a4e6:	607b      	str	r3, [r7, #4]
 800a4e8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800a4ea:	4bab      	ldr	r3, [pc, #684]	; (800a798 <MX_GPIO_Init+0x2f4>)
 800a4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ee:	4aaa      	ldr	r2, [pc, #680]	; (800a798 <MX_GPIO_Init+0x2f4>)
 800a4f0:	f043 0320 	orr.w	r3, r3, #32
 800a4f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4f6:	4ba8      	ldr	r3, [pc, #672]	; (800a798 <MX_GPIO_Init+0x2f4>)
 800a4f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4fa:	f003 0320 	and.w	r3, r3, #32
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	683b      	ldr	r3, [r7, #0]

	//led pin, sel pins, and in pins should always be outputs
	//led pin and sel pins should always start low, in pins should start based on configuration
	HAL_GPIO_WritePin(LED.PORT, LED.PIN, 0);
 800a502:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a50a:	2200      	movs	r2, #0
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7f9 f9ad 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 800a512:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a51a:	2200      	movs	r2, #0
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7f9 f9a5 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 800a522:	4b9e      	ldr	r3, [pc, #632]	; (800a79c <MX_GPIO_Init+0x2f8>)
 800a524:	2101      	movs	r1, #1
 800a526:	2200      	movs	r2, #0
 800a528:	4618      	mov	r0, r3
 800a52a:	f7f9 f99f 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U5IN0.PORT, U5IN0.PIN, (Default_Switch_State>>0)&0b1);
 800a52e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a536:	4b9a      	ldr	r3, [pc, #616]	; (800a7a0 <MX_GPIO_Init+0x2fc>)
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	461a      	mov	r2, r3
 800a542:	f7f9 f993 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U5IN1.PORT, U5IN1.PIN, (Default_Switch_State>>1)&0b1);
 800a546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a54a:	2180      	movs	r1, #128	; 0x80
 800a54c:	4b94      	ldr	r3, [pc, #592]	; (800a7a0 <MX_GPIO_Init+0x2fc>)
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	085b      	lsrs	r3, r3, #1
 800a552:	b2db      	uxtb	r3, r3
 800a554:	f003 0301 	and.w	r3, r3, #1
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	461a      	mov	r2, r3
 800a55c:	f7f9 f986 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U6IN0.PORT, U6IN0.PIN, (Default_Switch_State>>2)&0b1);
 800a560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a564:	2140      	movs	r1, #64	; 0x40
 800a566:	4b8e      	ldr	r3, [pc, #568]	; (800a7a0 <MX_GPIO_Init+0x2fc>)
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	089b      	lsrs	r3, r3, #2
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	b2db      	uxtb	r3, r3
 800a574:	461a      	mov	r2, r3
 800a576:	f7f9 f979 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U6IN1.PORT, U6IN1.PIN, (Default_Switch_State>>3)&0b1);
 800a57a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a57e:	2120      	movs	r1, #32
 800a580:	4b87      	ldr	r3, [pc, #540]	; (800a7a0 <MX_GPIO_Init+0x2fc>)
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	08db      	lsrs	r3, r3, #3
 800a586:	b2db      	uxtb	r3, r3
 800a588:	f003 0301 	and.w	r3, r3, #1
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	461a      	mov	r2, r3
 800a590:	f7f9 f96c 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U7IN0.PORT, U7IN0.PIN, (Default_Switch_State>>4)&0b1);
 800a594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a598:	2110      	movs	r1, #16
 800a59a:	4b81      	ldr	r3, [pc, #516]	; (800a7a0 <MX_GPIO_Init+0x2fc>)
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	091b      	lsrs	r3, r3, #4
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	f7f9 f95f 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U7IN1.PORT, U7IN1.PIN, (Default_Switch_State>>5)&0b1);
 800a5ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a5b2:	2108      	movs	r1, #8
 800a5b4:	4b7a      	ldr	r3, [pc, #488]	; (800a7a0 <MX_GPIO_Init+0x2fc>)
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	095b      	lsrs	r3, r3, #5
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	f7f9 f952 	bl	800386c <HAL_GPIO_WritePin>

	//all outputs on portA assigned here
	GPIO_InitStruct.Pin = LED.PIN|SEL0.PIN|U5IN0.PIN|U5IN1.PIN|U6IN0.PIN|U6IN1.PIN|U7IN0.PIN|U7IN1.PIN;
 800a5c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	2280      	movs	r2, #128	; 0x80
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	2240      	movs	r2, #64	; 0x40
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	2220      	movs	r2, #32
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	2210      	movs	r2, #16
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	2208      	movs	r2, #8
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a600:	2300      	movs	r3, #0
 800a602:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a604:	2300      	movs	r3, #0
 800a606:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a608:	f107 030c 	add.w	r3, r7, #12
 800a60c:	4619      	mov	r1, r3
 800a60e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a612:	f7f8 ff91 	bl	8003538 <HAL_GPIO_Init>

	//all outputs on portB assigned here
	GPIO_InitStruct.Pin = SEL1.PIN;
 800a616:	2301      	movs	r3, #1
 800a618:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a61a:	2301      	movs	r3, #1
 800a61c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a622:	2300      	movs	r3, #0
 800a624:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a626:	f107 030c 	add.w	r3, r7, #12
 800a62a:	4619      	mov	r1, r3
 800a62c:	485b      	ldr	r0, [pc, #364]	; (800a79c <MX_GPIO_Init+0x2f8>)
 800a62e:	f7f8 ff83 	bl	8003538 <HAL_GPIO_Init>


	if(Digital_In_EN && (1<<0))
 800a632:	4b5c      	ldr	r3, [pc, #368]	; (800a7a4 <MX_GPIO_Init+0x300>)
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d012      	beq.n	800a660 <MX_GPIO_Init+0x1bc>
	{
		HAL_GPIO_WritePin(DIO3.PORT, DIO3.PIN, GPIO_PIN_RESET);
 800a63a:	4b58      	ldr	r3, [pc, #352]	; (800a79c <MX_GPIO_Init+0x2f8>)
 800a63c:	2108      	movs	r1, #8
 800a63e:	2200      	movs	r2, #0
 800a640:	4618      	mov	r0, r3
 800a642:	f7f9 f913 	bl	800386c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO3.PIN;
 800a646:	2308      	movs	r3, #8
 800a648:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800a64a:	4b57      	ldr	r3, [pc, #348]	; (800a7a8 <MX_GPIO_Init+0x304>)
 800a64c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a64e:	2300      	movs	r3, #0
 800a650:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO3.PORT, &GPIO_InitStruct);
 800a652:	4a52      	ldr	r2, [pc, #328]	; (800a79c <MX_GPIO_Init+0x2f8>)
 800a654:	f107 030c 	add.w	r3, r7, #12
 800a658:	4619      	mov	r1, r3
 800a65a:	4610      	mov	r0, r2
 800a65c:	f7f8 ff6c 	bl	8003538 <HAL_GPIO_Init>
	}

	if(Digital_In_EN && (1<<1))
 800a660:	4b50      	ldr	r3, [pc, #320]	; (800a7a4 <MX_GPIO_Init+0x300>)
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d012      	beq.n	800a68e <MX_GPIO_Init+0x1ea>
	{
		HAL_GPIO_WritePin(DIO4.PORT, DIO4.PIN, GPIO_PIN_RESET);
 800a668:	4b4c      	ldr	r3, [pc, #304]	; (800a79c <MX_GPIO_Init+0x2f8>)
 800a66a:	2110      	movs	r1, #16
 800a66c:	2200      	movs	r2, #0
 800a66e:	4618      	mov	r0, r3
 800a670:	f7f9 f8fc 	bl	800386c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO4.PIN;
 800a674:	2310      	movs	r3, #16
 800a676:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800a678:	4b4b      	ldr	r3, [pc, #300]	; (800a7a8 <MX_GPIO_Init+0x304>)
 800a67a:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a67c:	2300      	movs	r3, #0
 800a67e:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO4.PORT, &GPIO_InitStruct);
 800a680:	4a46      	ldr	r2, [pc, #280]	; (800a79c <MX_GPIO_Init+0x2f8>)
 800a682:	f107 030c 	add.w	r3, r7, #12
 800a686:	4619      	mov	r1, r3
 800a688:	4610      	mov	r0, r2
 800a68a:	f7f8 ff55 	bl	8003538 <HAL_GPIO_Init>
	}

	if(Digital_In_EN && (1<<2))
 800a68e:	4b45      	ldr	r3, [pc, #276]	; (800a7a4 <MX_GPIO_Init+0x300>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d012      	beq.n	800a6bc <MX_GPIO_Init+0x218>
	{
		HAL_GPIO_WritePin(DIO5.PORT, DIO5.PIN, GPIO_PIN_RESET);
 800a696:	4b41      	ldr	r3, [pc, #260]	; (800a79c <MX_GPIO_Init+0x2f8>)
 800a698:	2120      	movs	r1, #32
 800a69a:	2200      	movs	r2, #0
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7f9 f8e5 	bl	800386c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO5.PIN;
 800a6a2:	2320      	movs	r3, #32
 800a6a4:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800a6a6:	4b40      	ldr	r3, [pc, #256]	; (800a7a8 <MX_GPIO_Init+0x304>)
 800a6a8:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO5.PORT, &GPIO_InitStruct);
 800a6ae:	4a3b      	ldr	r2, [pc, #236]	; (800a79c <MX_GPIO_Init+0x2f8>)
 800a6b0:	f107 030c 	add.w	r3, r7, #12
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	4610      	mov	r0, r2
 800a6b8:	f7f8 ff3e 	bl	8003538 <HAL_GPIO_Init>
	}

	if(Digital_In_EN && (1<<3))
 800a6bc:	4b39      	ldr	r3, [pc, #228]	; (800a7a4 <MX_GPIO_Init+0x300>)
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d012      	beq.n	800a6ea <MX_GPIO_Init+0x246>
	{
		HAL_GPIO_WritePin(DIO6.PORT, DIO6.PIN, GPIO_PIN_RESET);
 800a6c4:	4b35      	ldr	r3, [pc, #212]	; (800a79c <MX_GPIO_Init+0x2f8>)
 800a6c6:	2140      	movs	r1, #64	; 0x40
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7f9 f8ce 	bl	800386c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO6.PIN;
 800a6d0:	2340      	movs	r3, #64	; 0x40
 800a6d2:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800a6d4:	4b34      	ldr	r3, [pc, #208]	; (800a7a8 <MX_GPIO_Init+0x304>)
 800a6d6:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO6.PORT, &GPIO_InitStruct);
 800a6dc:	4a2f      	ldr	r2, [pc, #188]	; (800a79c <MX_GPIO_Init+0x2f8>)
 800a6de:	f107 030c 	add.w	r3, r7, #12
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4610      	mov	r0, r2
 800a6e6:	f7f8 ff27 	bl	8003538 <HAL_GPIO_Init>
	}

	if(Digital_In_EN && (1<<4))
 800a6ea:	4b2e      	ldr	r3, [pc, #184]	; (800a7a4 <MX_GPIO_Init+0x300>)
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d016      	beq.n	800a720 <MX_GPIO_Init+0x27c>
	{
		HAL_GPIO_WritePin(DIO15.PORT, DIO15.PIN, GPIO_PIN_RESET);
 800a6f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a6f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7f9 f8b5 	bl	800386c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO15.PIN;
 800a702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a706:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800a708:	4b27      	ldr	r3, [pc, #156]	; (800a7a8 <MX_GPIO_Init+0x304>)
 800a70a:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a70c:	2300      	movs	r3, #0
 800a70e:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO15.PORT, &GPIO_InitStruct);
 800a710:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800a714:	f107 030c 	add.w	r3, r7, #12
 800a718:	4619      	mov	r1, r3
 800a71a:	4610      	mov	r0, r2
 800a71c:	f7f8 ff0c 	bl	8003538 <HAL_GPIO_Init>
	}

	if(Digital_In_EN && (1<<0)) { GPIO_States[0] = HAL_GPIO_ReadPin(DIO3.PORT, DIO3.PIN); }
 800a720:	4b20      	ldr	r3, [pc, #128]	; (800a7a4 <MX_GPIO_Init+0x300>)
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d009      	beq.n	800a73c <MX_GPIO_Init+0x298>
 800a728:	4b1c      	ldr	r3, [pc, #112]	; (800a79c <MX_GPIO_Init+0x2f8>)
 800a72a:	2208      	movs	r2, #8
 800a72c:	4611      	mov	r1, r2
 800a72e:	4618      	mov	r0, r3
 800a730:	f7f9 f884 	bl	800383c <HAL_GPIO_ReadPin>
 800a734:	4603      	mov	r3, r0
 800a736:	461a      	mov	r2, r3
 800a738:	4b1c      	ldr	r3, [pc, #112]	; (800a7ac <MX_GPIO_Init+0x308>)
 800a73a:	601a      	str	r2, [r3, #0]
	if(Digital_In_EN && (1<<2)) { GPIO_States[0] = HAL_GPIO_ReadPin(DIO5.PORT, DIO5.PIN); }
 800a73c:	4b19      	ldr	r3, [pc, #100]	; (800a7a4 <MX_GPIO_Init+0x300>)
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d009      	beq.n	800a758 <MX_GPIO_Init+0x2b4>
 800a744:	4b15      	ldr	r3, [pc, #84]	; (800a79c <MX_GPIO_Init+0x2f8>)
 800a746:	2220      	movs	r2, #32
 800a748:	4611      	mov	r1, r2
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7f9 f876 	bl	800383c <HAL_GPIO_ReadPin>
 800a750:	4603      	mov	r3, r0
 800a752:	461a      	mov	r2, r3
 800a754:	4b15      	ldr	r3, [pc, #84]	; (800a7ac <MX_GPIO_Init+0x308>)
 800a756:	601a      	str	r2, [r3, #0]
	if(Digital_In_EN && (1<<3)) { GPIO_States[0] = HAL_GPIO_ReadPin(DIO6.PORT, DIO6.PIN); }
 800a758:	4b12      	ldr	r3, [pc, #72]	; (800a7a4 <MX_GPIO_Init+0x300>)
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d009      	beq.n	800a774 <MX_GPIO_Init+0x2d0>
 800a760:	4b0e      	ldr	r3, [pc, #56]	; (800a79c <MX_GPIO_Init+0x2f8>)
 800a762:	2240      	movs	r2, #64	; 0x40
 800a764:	4611      	mov	r1, r2
 800a766:	4618      	mov	r0, r3
 800a768:	f7f9 f868 	bl	800383c <HAL_GPIO_ReadPin>
 800a76c:	4603      	mov	r3, r0
 800a76e:	461a      	mov	r2, r3
 800a770:	4b0e      	ldr	r3, [pc, #56]	; (800a7ac <MX_GPIO_Init+0x308>)
 800a772:	601a      	str	r2, [r3, #0]
	if(Digital_In_EN && (1<<4)) { GPIO_States[0] = HAL_GPIO_ReadPin(DIO15.PORT, DIO15.PIN); }
 800a774:	4b0b      	ldr	r3, [pc, #44]	; (800a7a4 <MX_GPIO_Init+0x300>)
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d019      	beq.n	800a7b0 <MX_GPIO_Init+0x30c>
 800a77c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a780:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a784:	4611      	mov	r1, r2
 800a786:	4618      	mov	r0, r3
 800a788:	f7f9 f858 	bl	800383c <HAL_GPIO_ReadPin>
 800a78c:	4603      	mov	r3, r0
 800a78e:	461a      	mov	r2, r3
 800a790:	4b06      	ldr	r3, [pc, #24]	; (800a7ac <MX_GPIO_Init+0x308>)
 800a792:	601a      	str	r2, [r3, #0]
 800a794:	e00c      	b.n	800a7b0 <MX_GPIO_Init+0x30c>
 800a796:	bf00      	nop
 800a798:	40021000 	.word	0x40021000
 800a79c:	48000400 	.word	0x48000400
 800a7a0:	20000487 	.word	0x20000487
 800a7a4:	200000f0 	.word	0x200000f0
 800a7a8:	10310000 	.word	0x10310000
 800a7ac:	20000ad0 	.word	0x20000ad0

	//interrupts for PB3, PB5, PB6, PA15; PB4 will maybe have a different interrupt enable
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	2009      	movs	r0, #9
 800a7b6:	f7f7 fa8c 	bl	8001cd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800a7ba:	2009      	movs	r0, #9
 800a7bc:	f7f7 faa3 	bl	8001d06 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	2017      	movs	r0, #23
 800a7c6:	f7f7 fa84 	bl	8001cd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a7ca:	2017      	movs	r0, #23
 800a7cc:	f7f7 fa9b 	bl	8001d06 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	2028      	movs	r0, #40	; 0x28
 800a7d6:	f7f7 fa7c 	bl	8001cd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a7da:	2028      	movs	r0, #40	; 0x28
 800a7dc:	f7f7 fa93 	bl	8001d06 <HAL_NVIC_EnableIRQ>
	//TODO: don't always call this
}
 800a7e0:	bf00      	nop
 800a7e2:	3720      	adds	r7, #32
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <MX_TIM1_Init>:


static void MX_TIM1_Init(void)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	af00      	add	r7, sp, #0
	htim1.Instance = TIM1;
 800a7ec:	4b0c      	ldr	r3, [pc, #48]	; (800a820 <MX_TIM1_Init+0x38>)
 800a7ee:	4a0d      	ldr	r2, [pc, #52]	; (800a824 <MX_TIM1_Init+0x3c>)
 800a7f0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 16999; //resolution in 100's of us
 800a7f2:	4b0b      	ldr	r3, [pc, #44]	; (800a820 <MX_TIM1_Init+0x38>)
 800a7f4:	f244 2267 	movw	r2, #16999	; 0x4267
 800a7f8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a7fa:	4b09      	ldr	r3, [pc, #36]	; (800a820 <MX_TIM1_Init+0x38>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = SampleTemperatureVoltagePeriod;
 800a800:	4b09      	ldr	r3, [pc, #36]	; (800a828 <MX_TIM1_Init+0x40>)
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	461a      	mov	r2, r3
 800a806:	4b06      	ldr	r3, [pc, #24]	; (800a820 <MX_TIM1_Init+0x38>)
 800a808:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim1) !=HAL_OK)
 800a80a:	4805      	ldr	r0, [pc, #20]	; (800a820 <MX_TIM1_Init+0x38>)
 800a80c:	f7fa fab8 	bl	8004d80 <HAL_TIM_Base_Init>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d001      	beq.n	800a81a <MX_TIM1_Init+0x32>
	{
		Error_Handler();
 800a816:	f000 fc55 	bl	800b0c4 <Error_Handler>
	}
}
 800a81a:	bf00      	nop
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	20000804 	.word	0x20000804
 800a824:	40012c00 	.word	0x40012c00
 800a828:	20000954 	.word	0x20000954

0800a82c <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	af00      	add	r7, sp, #0
	htim6.Instance = TIM6;
 800a830:	4b0d      	ldr	r3, [pc, #52]	; (800a868 <MX_TIM6_Init+0x3c>)
 800a832:	4a0e      	ldr	r2, [pc, #56]	; (800a86c <MX_TIM6_Init+0x40>)
 800a834:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 16999;
 800a836:	4b0c      	ldr	r3, [pc, #48]	; (800a868 <MX_TIM6_Init+0x3c>)
 800a838:	f244 2267 	movw	r2, #16999	; 0x4267
 800a83c:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a83e:	4b0a      	ldr	r3, [pc, #40]	; (800a868 <MX_TIM6_Init+0x3c>)
 800a840:	2200      	movs	r2, #0
 800a842:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = Can_Interval;
 800a844:	4b0a      	ldr	r3, [pc, #40]	; (800a870 <MX_TIM6_Init+0x44>)
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	461a      	mov	r2, r3
 800a84a:	4b07      	ldr	r3, [pc, #28]	; (800a868 <MX_TIM6_Init+0x3c>)
 800a84c:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a84e:	4b06      	ldr	r3, [pc, #24]	; (800a868 <MX_TIM6_Init+0x3c>)
 800a850:	2200      	movs	r2, #0
 800a852:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a854:	4804      	ldr	r0, [pc, #16]	; (800a868 <MX_TIM6_Init+0x3c>)
 800a856:	f7fa fa93 	bl	8004d80 <HAL_TIM_Base_Init>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d001      	beq.n	800a864 <MX_TIM6_Init+0x38>
	{
		Error_Handler();
 800a860:	f000 fc30 	bl	800b0c4 <Error_Handler>
	}
}
 800a864:	bf00      	nop
 800a866:	bd80      	pop	{r7, pc}
 800a868:	200007b8 	.word	0x200007b8
 800a86c:	40001000 	.word	0x40001000
 800a870:	200000f4 	.word	0x200000f4

0800a874 <MX_TIM7_Init>:

static void MX_TIM7_Init(void)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	af00      	add	r7, sp, #0
	htim7.Instance = TIM7;
 800a878:	4b0d      	ldr	r3, [pc, #52]	; (800a8b0 <MX_TIM7_Init+0x3c>)
 800a87a:	4a0e      	ldr	r2, [pc, #56]	; (800a8b4 <MX_TIM7_Init+0x40>)
 800a87c:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 16999;
 800a87e:	4b0c      	ldr	r3, [pc, #48]	; (800a8b0 <MX_TIM7_Init+0x3c>)
 800a880:	f244 2267 	movw	r2, #16999	; 0x4267
 800a884:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a886:	4b0a      	ldr	r3, [pc, #40]	; (800a8b0 <MX_TIM7_Init+0x3c>)
 800a888:	2200      	movs	r2, #0
 800a88a:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = ERROR_PERIOD_100US;
 800a88c:	4b08      	ldr	r3, [pc, #32]	; (800a8b0 <MX_TIM7_Init+0x3c>)
 800a88e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a892:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a894:	4b06      	ldr	r3, [pc, #24]	; (800a8b0 <MX_TIM7_Init+0x3c>)
 800a896:	2200      	movs	r2, #0
 800a898:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800a89a:	4805      	ldr	r0, [pc, #20]	; (800a8b0 <MX_TIM7_Init+0x3c>)
 800a89c:	f7fa fa70 	bl	8004d80 <HAL_TIM_Base_Init>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <MX_TIM7_Init+0x36>
	{
		Error_Handler();
 800a8a6:	f000 fc0d 	bl	800b0c4 <Error_Handler>
	}
}
 800a8aa:	bf00      	nop
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20000a90 	.word	0x20000a90
 800a8b4:	40001400 	.word	0x40001400

0800a8b8 <MX_TIM15_Init>:

static void MX_TIM15_Init(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	af00      	add	r7, sp, #0
	htim15.Instance = TIM15;
 800a8bc:	4b0b      	ldr	r3, [pc, #44]	; (800a8ec <MX_TIM15_Init+0x34>)
 800a8be:	4a0c      	ldr	r2, [pc, #48]	; (800a8f0 <MX_TIM15_Init+0x38>)
 800a8c0:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 16;
 800a8c2:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <MX_TIM15_Init+0x34>)
 800a8c4:	2210      	movs	r2, #16
 800a8c6:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a8c8:	4b08      	ldr	r3, [pc, #32]	; (800a8ec <MX_TIM15_Init+0x34>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 1000; //this corresponds to 100us, as going at max speed (20us) seems to be too fast
 800a8ce:	4b07      	ldr	r3, [pc, #28]	; (800a8ec <MX_TIM15_Init+0x34>)
 800a8d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a8d4:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800a8d6:	4805      	ldr	r0, [pc, #20]	; (800a8ec <MX_TIM15_Init+0x34>)
 800a8d8:	f7fa fa52 	bl	8004d80 <HAL_TIM_Base_Init>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <MX_TIM15_Init+0x2e>
	{
		Error_Handler();
 800a8e2:	f000 fbef 	bl	800b0c4 <Error_Handler>
	}
}
 800a8e6:	bf00      	nop
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20000310 	.word	0x20000310
 800a8f0:	40014000 	.word	0x40014000

0800a8f4 <MX_TIM16_Init>:

static void MX_TIM16_Init(void)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	af00      	add	r7, sp, #0
	htim16.Instance = TIM16;
 800a8f8:	4b0f      	ldr	r3, [pc, #60]	; (800a938 <MX_TIM16_Init+0x44>)
 800a8fa:	4a10      	ldr	r2, [pc, #64]	; (800a93c <MX_TIM16_Init+0x48>)
 800a8fc:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 1699; //10us resolution
 800a8fe:	4b0e      	ldr	r3, [pc, #56]	; (800a938 <MX_TIM16_Init+0x44>)
 800a900:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800a904:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a906:	4b0c      	ldr	r3, [pc, #48]	; (800a938 <MX_TIM16_Init+0x44>)
 800a908:	2200      	movs	r2, #0
 800a90a:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = Can_Sync_Delay;
 800a90c:	4b0c      	ldr	r3, [pc, #48]	; (800a940 <MX_TIM16_Init+0x4c>)
 800a90e:	881b      	ldrh	r3, [r3, #0]
 800a910:	461a      	mov	r2, r3
 800a912:	4b09      	ldr	r3, [pc, #36]	; (800a938 <MX_TIM16_Init+0x44>)
 800a914:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a916:	4b08      	ldr	r3, [pc, #32]	; (800a938 <MX_TIM16_Init+0x44>)
 800a918:	2200      	movs	r2, #0
 800a91a:	611a      	str	r2, [r3, #16]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a91c:	4b06      	ldr	r3, [pc, #24]	; (800a938 <MX_TIM16_Init+0x44>)
 800a91e:	2200      	movs	r2, #0
 800a920:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800a922:	4805      	ldr	r0, [pc, #20]	; (800a938 <MX_TIM16_Init+0x44>)
 800a924:	f7fa fa2c 	bl	8004d80 <HAL_TIM_Base_Init>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d001      	beq.n	800a932 <MX_TIM16_Init+0x3e>
	{
		Error_Handler();
 800a92e:	f000 fbc9 	bl	800b0c4 <Error_Handler>
	}
}
 800a932:	bf00      	nop
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20000a50 	.word	0x20000a50
 800a93c:	40014400 	.word	0x40014400
 800a940:	2000041c 	.word	0x2000041c

0800a944 <MX_TIM17_Init>:

static void MX_TIM17_Init(void)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b088      	sub	sp, #32
 800a948:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef sConfigOC = {0};
 800a94a:	1d3b      	adds	r3, r7, #4
 800a94c:	2200      	movs	r2, #0
 800a94e:	601a      	str	r2, [r3, #0]
 800a950:	605a      	str	r2, [r3, #4]
 800a952:	609a      	str	r2, [r3, #8]
 800a954:	60da      	str	r2, [r3, #12]
 800a956:	611a      	str	r2, [r3, #16]
 800a958:	615a      	str	r2, [r3, #20]
 800a95a:	619a      	str	r2, [r3, #24]

	htim17.Instance = TIM17;
 800a95c:	4b2b      	ldr	r3, [pc, #172]	; (800aa0c <MX_TIM17_Init+0xc8>)
 800a95e:	4a2c      	ldr	r2, [pc, #176]	; (800aa10 <MX_TIM17_Init+0xcc>)
 800a960:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = PWM_Prescalers[2];
 800a962:	4b2c      	ldr	r3, [pc, #176]	; (800aa14 <MX_TIM17_Init+0xd0>)
 800a964:	889b      	ldrh	r3, [r3, #4]
 800a966:	461a      	mov	r2, r3
 800a968:	4b28      	ldr	r3, [pc, #160]	; (800aa0c <MX_TIM17_Init+0xc8>)
 800a96a:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a96c:	4b27      	ldr	r3, [pc, #156]	; (800aa0c <MX_TIM17_Init+0xc8>)
 800a96e:	2200      	movs	r2, #0
 800a970:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 255; //pulse will be from 0 to 255
 800a972:	4b26      	ldr	r3, [pc, #152]	; (800aa0c <MX_TIM17_Init+0xc8>)
 800a974:	22ff      	movs	r2, #255	; 0xff
 800a976:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a978:	4b24      	ldr	r3, [pc, #144]	; (800aa0c <MX_TIM17_Init+0xc8>)
 800a97a:	2200      	movs	r2, #0
 800a97c:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 800a97e:	4b23      	ldr	r3, [pc, #140]	; (800aa0c <MX_TIM17_Init+0xc8>)
 800a980:	2200      	movs	r2, #0
 800a982:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a984:	4b21      	ldr	r3, [pc, #132]	; (800aa0c <MX_TIM17_Init+0xc8>)
 800a986:	2200      	movs	r2, #0
 800a988:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800a98a:	4820      	ldr	r0, [pc, #128]	; (800aa0c <MX_TIM17_Init+0xc8>)
 800a98c:	f7fa f9f8 	bl	8004d80 <HAL_TIM_Base_Init>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d001      	beq.n	800a99a <MX_TIM17_Init+0x56>
	{
		Error_Handler();
 800a996:	f000 fb95 	bl	800b0c4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800a99a:	481c      	ldr	r0, [pc, #112]	; (800aa0c <MX_TIM17_Init+0xc8>)
 800a99c:	f7fa fa71 	bl	8004e82 <HAL_TIM_PWM_Init>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d001      	beq.n	800a9aa <MX_TIM17_Init+0x66>
	{
		Error_Handler();
 800a9a6:	f000 fb8d 	bl	800b0c4 <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a9aa:	2360      	movs	r3, #96	; 0x60
 800a9ac:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = PWM_Pulses[2];
 800a9ae:	4b1a      	ldr	r3, [pc, #104]	; (800aa18 <MX_TIM17_Init+0xd4>)
 800a9b0:	889b      	ldrh	r3, [r3, #4]
 800a9b2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	613b      	str	r3, [r7, #16]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	617b      	str	r3, [r7, #20]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a9c8:	1d3b      	adds	r3, r7, #4
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	480f      	ldr	r0, [pc, #60]	; (800aa0c <MX_TIM17_Init+0xc8>)
 800a9d0:	f7fa fd8e 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d001      	beq.n	800a9de <MX_TIM17_Init+0x9a>
	{
		Error_Handler();
 800a9da:	f000 fb73 	bl	800b0c4 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim17);
 800a9de:	480b      	ldr	r0, [pc, #44]	; (800aa0c <MX_TIM17_Init+0xc8>)
 800a9e0:	f000 fe8e 	bl	800b700 <HAL_TIM_MspPostInit>

	if(PWM_Out_EN&(1<<2))
 800a9e4:	4b0d      	ldr	r3, [pc, #52]	; (800aa1c <MX_TIM17_Init+0xd8>)
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	f003 0304 	and.w	r3, r3, #4
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d008      	beq.n	800aa02 <MX_TIM17_Init+0xbe>
	{
		if (HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1) != HAL_OK)
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	4806      	ldr	r0, [pc, #24]	; (800aa0c <MX_TIM17_Init+0xc8>)
 800a9f4:	f7fa fa70 	bl	8004ed8 <HAL_TIM_PWM_Start>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d001      	beq.n	800aa02 <MX_TIM17_Init+0xbe>
		{
			Error_Handler();
 800a9fe:	f000 fb61 	bl	800b0c4 <Error_Handler>
		}
	}
}
 800aa02:	bf00      	nop
 800aa04:	3720      	adds	r7, #32
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	200003dc 	.word	0x200003dc
 800aa10:	40014800 	.word	0x40014800
 800aa14:	20000578 	.word	0x20000578
 800aa18:	200007f8 	.word	0x200007f8
 800aa1c:	200009bc 	.word	0x200009bc

0800aa20 <MX_TIM2_Init>:

static void MX_TIM2_Init()
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b094      	sub	sp, #80	; 0x50
 800aa24:	af00      	add	r7, sp, #0
	if (!((PWM_In_EN>>0)&1)) //default if pin is not used as pwm input
 800aa26:	4b69      	ldr	r3, [pc, #420]	; (800abcc <MX_TIM2_Init+0x1ac>)
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	f003 0301 	and.w	r3, r3, #1
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d14f      	bne.n	800aad2 <MX_TIM2_Init+0xb2>
	{
		TIM_OC_InitTypeDef sConfigOC = {0};
 800aa32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aa36:	2200      	movs	r2, #0
 800aa38:	601a      	str	r2, [r3, #0]
 800aa3a:	605a      	str	r2, [r3, #4]
 800aa3c:	609a      	str	r2, [r3, #8]
 800aa3e:	60da      	str	r2, [r3, #12]
 800aa40:	611a      	str	r2, [r3, #16]
 800aa42:	615a      	str	r2, [r3, #20]
 800aa44:	619a      	str	r2, [r3, #24]

		htim2.Instance = TIM2;
 800aa46:	4b62      	ldr	r3, [pc, #392]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800aa48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aa4c:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = PWM_Prescalers[0];
 800aa4e:	4b61      	ldr	r3, [pc, #388]	; (800abd4 <MX_TIM2_Init+0x1b4>)
 800aa50:	881b      	ldrh	r3, [r3, #0]
 800aa52:	461a      	mov	r2, r3
 800aa54:	4b5e      	ldr	r3, [pc, #376]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800aa56:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aa58:	4b5d      	ldr	r3, [pc, #372]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 255;
 800aa5e:	4b5c      	ldr	r3, [pc, #368]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800aa60:	22ff      	movs	r2, #255	; 0xff
 800aa62:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aa64:	4b5a      	ldr	r3, [pc, #360]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aa6a:	4b59      	ldr	r3, [pc, #356]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800aa70:	4857      	ldr	r0, [pc, #348]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800aa72:	f7fa fa06 	bl	8004e82 <HAL_TIM_PWM_Init>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d001      	beq.n	800aa80 <MX_TIM2_Init+0x60>
		{
			Error_Handler();
 800aa7c:	f000 fb22 	bl	800b0c4 <Error_Handler>
		}

		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800aa80:	2360      	movs	r3, #96	; 0x60
 800aa82:	637b      	str	r3, [r7, #52]	; 0x34
		sConfigOC.Pulse = PWM_Pulses[0];
 800aa84:	4b54      	ldr	r3, [pc, #336]	; (800abd8 <MX_TIM2_Init+0x1b8>)
 800aa86:	881b      	ldrh	r3, [r3, #0]
 800aa88:	63bb      	str	r3, [r7, #56]	; 0x38
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	647b      	str	r3, [r7, #68]	; 0x44
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800aa92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aa96:	2204      	movs	r2, #4
 800aa98:	4619      	mov	r1, r3
 800aa9a:	484d      	ldr	r0, [pc, #308]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800aa9c:	f7fa fd28 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d001      	beq.n	800aaaa <MX_TIM2_Init+0x8a>
		{
			Error_Handler();
 800aaa6:	f000 fb0d 	bl	800b0c4 <Error_Handler>
		}

		HAL_TIM_MspPostInit(&htim2);
 800aaaa:	4849      	ldr	r0, [pc, #292]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800aaac:	f000 fe28 	bl	800b700 <HAL_TIM_MspPostInit>

		if(PWM_Out_EN&(1<<0))
 800aab0:	4b4a      	ldr	r3, [pc, #296]	; (800abdc <MX_TIM2_Init+0x1bc>)
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	f003 0301 	and.w	r3, r3, #1
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f000 8083 	beq.w	800abc4 <MX_TIM2_Init+0x1a4>
		{
			if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 800aabe:	2104      	movs	r1, #4
 800aac0:	4843      	ldr	r0, [pc, #268]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800aac2:	f7fa fa09 	bl	8004ed8 <HAL_TIM_PWM_Start>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d07b      	beq.n	800abc4 <MX_TIM2_Init+0x1a4>
			{
				Error_Handler();
 800aacc:	f000 fafa 	bl	800b0c4 <Error_Handler>
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
		{
			Error_Handler();
		}
	}
}
 800aad0:	e078      	b.n	800abc4 <MX_TIM2_Init+0x1a4>
		TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800aad2:	f107 0320 	add.w	r3, r7, #32
 800aad6:	2200      	movs	r2, #0
 800aad8:	601a      	str	r2, [r3, #0]
 800aada:	605a      	str	r2, [r3, #4]
 800aadc:	609a      	str	r2, [r3, #8]
 800aade:	60da      	str	r2, [r3, #12]
 800aae0:	611a      	str	r2, [r3, #16]
		TIM_IC_InitTypeDef sConfigIC = {0};
 800aae2:	f107 0310 	add.w	r3, r7, #16
 800aae6:	2200      	movs	r2, #0
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	605a      	str	r2, [r3, #4]
 800aaec:	609a      	str	r2, [r3, #8]
 800aaee:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aaf0:	1d3b      	adds	r3, r7, #4
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	601a      	str	r2, [r3, #0]
 800aaf6:	605a      	str	r2, [r3, #4]
 800aaf8:	609a      	str	r2, [r3, #8]
		htim2.Instance = TIM2;
 800aafa:	4b35      	ldr	r3, [pc, #212]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800aafc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ab00:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = PWM_Prescalers[0];
 800ab02:	4b34      	ldr	r3, [pc, #208]	; (800abd4 <MX_TIM2_Init+0x1b4>)
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	461a      	mov	r2, r3
 800ab08:	4b31      	ldr	r3, [pc, #196]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800ab0a:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab0c:	4b30      	ldr	r3, [pc, #192]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 65535;
 800ab12:	4b2f      	ldr	r3, [pc, #188]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800ab14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab18:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ab1a:	4b2d      	ldr	r3, [pc, #180]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab20:	4b2b      	ldr	r3, [pc, #172]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800ab26:	482a      	ldr	r0, [pc, #168]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800ab28:	f7fa fa9c 	bl	8005064 <HAL_TIM_IC_Init>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d001      	beq.n	800ab36 <MX_TIM2_Init+0x116>
			Error_Handler();
 800ab32:	f000 fac7 	bl	800b0c4 <Error_Handler>
		sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800ab36:	2304      	movs	r3, #4
 800ab38:	623b      	str	r3, [r7, #32]
		sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800ab3a:	2360      	movs	r3, #96	; 0x60
 800ab3c:	627b      	str	r3, [r7, #36]	; 0x24
		sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800ab3e:	2302      	movs	r3, #2
 800ab40:	62bb      	str	r3, [r7, #40]	; 0x28
		sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800ab42:	2300      	movs	r3, #0
 800ab44:	62fb      	str	r3, [r7, #44]	; 0x2c
		sSlaveConfig.TriggerFilter = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800ab4a:	f107 0320 	add.w	r3, r7, #32
 800ab4e:	4619      	mov	r1, r3
 800ab50:	481f      	ldr	r0, [pc, #124]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800ab52:	f7fa fde5 	bl	8005720 <HAL_TIM_SlaveConfigSynchro>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d001      	beq.n	800ab60 <MX_TIM2_Init+0x140>
			Error_Handler();
 800ab5c:	f000 fab2 	bl	800b0c4 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ab60:	2300      	movs	r3, #0
 800ab62:	613b      	str	r3, [r7, #16]
		sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800ab64:	2302      	movs	r3, #2
 800ab66:	617b      	str	r3, [r7, #20]
		sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	61bb      	str	r3, [r7, #24]
		sConfigIC.ICFilter = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	61fb      	str	r3, [r7, #28]
		if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ab70:	f107 0310 	add.w	r3, r7, #16
 800ab74:	2200      	movs	r2, #0
 800ab76:	4619      	mov	r1, r3
 800ab78:	4815      	ldr	r0, [pc, #84]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800ab7a:	f7fa fc1d 	bl	80053b8 <HAL_TIM_IC_ConfigChannel>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d001      	beq.n	800ab88 <MX_TIM2_Init+0x168>
			Error_Handler();
 800ab84:	f000 fa9e 	bl	800b0c4 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800ab88:	2302      	movs	r3, #2
 800ab8a:	613b      	str	r3, [r7, #16]
		sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	617b      	str	r3, [r7, #20]
		if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ab90:	f107 0310 	add.w	r3, r7, #16
 800ab94:	2204      	movs	r2, #4
 800ab96:	4619      	mov	r1, r3
 800ab98:	480d      	ldr	r0, [pc, #52]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800ab9a:	f7fa fc0d 	bl	80053b8 <HAL_TIM_IC_ConfigChannel>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d001      	beq.n	800aba8 <MX_TIM2_Init+0x188>
			Error_Handler();
 800aba4:	f000 fa8e 	bl	800b0c4 <Error_Handler>
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aba8:	2300      	movs	r3, #0
 800abaa:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800abac:	2300      	movs	r3, #0
 800abae:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800abb0:	1d3b      	adds	r3, r7, #4
 800abb2:	4619      	mov	r1, r3
 800abb4:	4806      	ldr	r0, [pc, #24]	; (800abd0 <MX_TIM2_Init+0x1b0>)
 800abb6:	f7fb fc59 	bl	800646c <HAL_TIMEx_MasterConfigSynchronization>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d001      	beq.n	800abc4 <MX_TIM2_Init+0x1a4>
			Error_Handler();
 800abc0:	f000 fa80 	bl	800b0c4 <Error_Handler>
}
 800abc4:	bf00      	nop
 800abc6:	3750      	adds	r7, #80	; 0x50
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	20000486 	.word	0x20000486
 800abd0:	20000914 	.word	0x20000914
 800abd4:	20000578 	.word	0x20000578
 800abd8:	200007f8 	.word	0x200007f8
 800abdc:	200009bc 	.word	0x200009bc

0800abe0 <MX_TIM3_Init>:

static void MX_TIM3_Init()
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b088      	sub	sp, #32
 800abe4:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef sConfigOC = {0};
 800abe6:	1d3b      	adds	r3, r7, #4
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]
 800abec:	605a      	str	r2, [r3, #4]
 800abee:	609a      	str	r2, [r3, #8]
 800abf0:	60da      	str	r2, [r3, #12]
 800abf2:	611a      	str	r2, [r3, #16]
 800abf4:	615a      	str	r2, [r3, #20]
 800abf6:	619a      	str	r2, [r3, #24]

	htim3.Instance = TIM3;
 800abf8:	4b22      	ldr	r3, [pc, #136]	; (800ac84 <MX_TIM3_Init+0xa4>)
 800abfa:	4a23      	ldr	r2, [pc, #140]	; (800ac88 <MX_TIM3_Init+0xa8>)
 800abfc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = PWM_Prescalers[1];
 800abfe:	4b23      	ldr	r3, [pc, #140]	; (800ac8c <MX_TIM3_Init+0xac>)
 800ac00:	885b      	ldrh	r3, [r3, #2]
 800ac02:	461a      	mov	r2, r3
 800ac04:	4b1f      	ldr	r3, [pc, #124]	; (800ac84 <MX_TIM3_Init+0xa4>)
 800ac06:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac08:	4b1e      	ldr	r3, [pc, #120]	; (800ac84 <MX_TIM3_Init+0xa4>)
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 255;
 800ac0e:	4b1d      	ldr	r3, [pc, #116]	; (800ac84 <MX_TIM3_Init+0xa4>)
 800ac10:	22ff      	movs	r2, #255	; 0xff
 800ac12:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac14:	4b1b      	ldr	r3, [pc, #108]	; (800ac84 <MX_TIM3_Init+0xa4>)
 800ac16:	2200      	movs	r2, #0
 800ac18:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac1a:	4b1a      	ldr	r3, [pc, #104]	; (800ac84 <MX_TIM3_Init+0xa4>)
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800ac20:	4818      	ldr	r0, [pc, #96]	; (800ac84 <MX_TIM3_Init+0xa4>)
 800ac22:	f7fa f92e 	bl	8004e82 <HAL_TIM_PWM_Init>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d001      	beq.n	800ac30 <MX_TIM3_Init+0x50>
	{
		Error_Handler();
 800ac2c:	f000 fa4a 	bl	800b0c4 <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ac30:	2360      	movs	r3, #96	; 0x60
 800ac32:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = PWM_Pulses[1];
 800ac34:	4b16      	ldr	r3, [pc, #88]	; (800ac90 <MX_TIM3_Init+0xb0>)
 800ac36:	885b      	ldrh	r3, [r3, #2]
 800ac38:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ac42:	1d3b      	adds	r3, r7, #4
 800ac44:	2200      	movs	r2, #0
 800ac46:	4619      	mov	r1, r3
 800ac48:	480e      	ldr	r0, [pc, #56]	; (800ac84 <MX_TIM3_Init+0xa4>)
 800ac4a:	f7fa fc51 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <MX_TIM3_Init+0x78>
	{
		Error_Handler();
 800ac54:	f000 fa36 	bl	800b0c4 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim3);
 800ac58:	480a      	ldr	r0, [pc, #40]	; (800ac84 <MX_TIM3_Init+0xa4>)
 800ac5a:	f000 fd51 	bl	800b700 <HAL_TIM_MspPostInit>

	if(PWM_Out_EN&(1<<1))
 800ac5e:	4b0d      	ldr	r3, [pc, #52]	; (800ac94 <MX_TIM3_Init+0xb4>)
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	f003 0302 	and.w	r3, r3, #2
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d008      	beq.n	800ac7c <MX_TIM3_Init+0x9c>
	{
		if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	4805      	ldr	r0, [pc, #20]	; (800ac84 <MX_TIM3_Init+0xa4>)
 800ac6e:	f7fa f933 	bl	8004ed8 <HAL_TIM_PWM_Start>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d001      	beq.n	800ac7c <MX_TIM3_Init+0x9c>
		{
			Error_Handler();
 800ac78:	f000 fa24 	bl	800b0c4 <Error_Handler>
		}
	}
}
 800ac7c:	bf00      	nop
 800ac7e:	3720      	adds	r7, #32
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	20000520 	.word	0x20000520
 800ac88:	40000400 	.word	0x40000400
 800ac8c:	20000578 	.word	0x20000578
 800ac90:	200007f8 	.word	0x200007f8
 800ac94:	200009bc 	.word	0x200009bc

0800ac98 <MX_TIM4_Init>:

static void MX_TIM4_Init()
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b094      	sub	sp, #80	; 0x50
 800ac9c:	af00      	add	r7, sp, #0
	if (!((PWM_In_EN>>0)&1)) //default if pin is not used as pwm input
 800ac9e:	4b68      	ldr	r3, [pc, #416]	; (800ae40 <MX_TIM4_Init+0x1a8>)
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	f003 0301 	and.w	r3, r3, #1
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d14e      	bne.n	800ad48 <MX_TIM4_Init+0xb0>
	{
		TIM_OC_InitTypeDef sConfigOC = {0};
 800acaa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800acae:	2200      	movs	r2, #0
 800acb0:	601a      	str	r2, [r3, #0]
 800acb2:	605a      	str	r2, [r3, #4]
 800acb4:	609a      	str	r2, [r3, #8]
 800acb6:	60da      	str	r2, [r3, #12]
 800acb8:	611a      	str	r2, [r3, #16]
 800acba:	615a      	str	r2, [r3, #20]
 800acbc:	619a      	str	r2, [r3, #24]

		htim4.Instance = TIM4;
 800acbe:	4b61      	ldr	r3, [pc, #388]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800acc0:	4a61      	ldr	r2, [pc, #388]	; (800ae48 <MX_TIM4_Init+0x1b0>)
 800acc2:	601a      	str	r2, [r3, #0]
		htim4.Init.Prescaler = PWM_Prescalers[3];
 800acc4:	4b61      	ldr	r3, [pc, #388]	; (800ae4c <MX_TIM4_Init+0x1b4>)
 800acc6:	88db      	ldrh	r3, [r3, #6]
 800acc8:	461a      	mov	r2, r3
 800acca:	4b5e      	ldr	r3, [pc, #376]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800accc:	605a      	str	r2, [r3, #4]
		htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800acce:	4b5d      	ldr	r3, [pc, #372]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	609a      	str	r2, [r3, #8]
		htim4.Init.Period = 255;
 800acd4:	4b5b      	ldr	r3, [pc, #364]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800acd6:	22ff      	movs	r2, #255	; 0xff
 800acd8:	60da      	str	r2, [r3, #12]
		htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800acda:	4b5a      	ldr	r3, [pc, #360]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800acdc:	2200      	movs	r2, #0
 800acde:	611a      	str	r2, [r3, #16]
		htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ace0:	4b58      	ldr	r3, [pc, #352]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800ace6:	4857      	ldr	r0, [pc, #348]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800ace8:	f7fa f8cb 	bl	8004e82 <HAL_TIM_PWM_Init>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d001      	beq.n	800acf6 <MX_TIM4_Init+0x5e>
		{
			Error_Handler();
 800acf2:	f000 f9e7 	bl	800b0c4 <Error_Handler>
		}

		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800acf6:	2360      	movs	r3, #96	; 0x60
 800acf8:	637b      	str	r3, [r7, #52]	; 0x34
		sConfigOC.Pulse = PWM_Pulses[3];
 800acfa:	4b55      	ldr	r3, [pc, #340]	; (800ae50 <MX_TIM4_Init+0x1b8>)
 800acfc:	88db      	ldrh	r3, [r3, #6]
 800acfe:	63bb      	str	r3, [r7, #56]	; 0x38
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ad00:	2300      	movs	r3, #0
 800ad02:	63fb      	str	r3, [r7, #60]	; 0x3c
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ad04:	2300      	movs	r3, #0
 800ad06:	647b      	str	r3, [r7, #68]	; 0x44
		if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ad08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	4619      	mov	r1, r3
 800ad10:	484c      	ldr	r0, [pc, #304]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800ad12:	f7fa fbed 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d001      	beq.n	800ad20 <MX_TIM4_Init+0x88>
		{
			Error_Handler();
 800ad1c:	f000 f9d2 	bl	800b0c4 <Error_Handler>
		}

		HAL_TIM_MspPostInit(&htim4);
 800ad20:	4848      	ldr	r0, [pc, #288]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800ad22:	f000 fced 	bl	800b700 <HAL_TIM_MspPostInit>

		if(PWM_Out_EN&(1<<3))
 800ad26:	4b4b      	ldr	r3, [pc, #300]	; (800ae54 <MX_TIM4_Init+0x1bc>)
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	f003 0308 	and.w	r3, r3, #8
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f000 8081 	beq.w	800ae36 <MX_TIM4_Init+0x19e>
		{
			if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 800ad34:	2100      	movs	r1, #0
 800ad36:	4843      	ldr	r0, [pc, #268]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800ad38:	f7fa f8ce 	bl	8004ed8 <HAL_TIM_PWM_Start>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d079      	beq.n	800ae36 <MX_TIM4_Init+0x19e>
			{
				Error_Handler();
 800ad42:	f000 f9bf 	bl	800b0c4 <Error_Handler>
		if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
		{
			Error_Handler();
		}
	}
}
 800ad46:	e076      	b.n	800ae36 <MX_TIM4_Init+0x19e>
		TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800ad48:	f107 0320 	add.w	r3, r7, #32
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	601a      	str	r2, [r3, #0]
 800ad50:	605a      	str	r2, [r3, #4]
 800ad52:	609a      	str	r2, [r3, #8]
 800ad54:	60da      	str	r2, [r3, #12]
 800ad56:	611a      	str	r2, [r3, #16]
		TIM_IC_InitTypeDef sConfigIC = {0};
 800ad58:	f107 0310 	add.w	r3, r7, #16
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	601a      	str	r2, [r3, #0]
 800ad60:	605a      	str	r2, [r3, #4]
 800ad62:	609a      	str	r2, [r3, #8]
 800ad64:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ad66:	1d3b      	adds	r3, r7, #4
 800ad68:	2200      	movs	r2, #0
 800ad6a:	601a      	str	r2, [r3, #0]
 800ad6c:	605a      	str	r2, [r3, #4]
 800ad6e:	609a      	str	r2, [r3, #8]
		htim4.Instance = TIM4;
 800ad70:	4b34      	ldr	r3, [pc, #208]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800ad72:	4a35      	ldr	r2, [pc, #212]	; (800ae48 <MX_TIM4_Init+0x1b0>)
 800ad74:	601a      	str	r2, [r3, #0]
		htim4.Init.Prescaler = 999;
 800ad76:	4b33      	ldr	r3, [pc, #204]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800ad78:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ad7c:	605a      	str	r2, [r3, #4]
		htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad7e:	4b31      	ldr	r3, [pc, #196]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800ad80:	2200      	movs	r2, #0
 800ad82:	609a      	str	r2, [r3, #8]
		htim4.Init.Period = 65535;
 800ad84:	4b2f      	ldr	r3, [pc, #188]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800ad86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad8a:	60da      	str	r2, [r3, #12]
		htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ad8c:	4b2d      	ldr	r3, [pc, #180]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800ad8e:	2200      	movs	r2, #0
 800ad90:	611a      	str	r2, [r3, #16]
		htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ad92:	4b2c      	ldr	r3, [pc, #176]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800ad94:	2200      	movs	r2, #0
 800ad96:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800ad98:	482a      	ldr	r0, [pc, #168]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800ad9a:	f7fa f963 	bl	8005064 <HAL_TIM_IC_Init>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d001      	beq.n	800ada8 <MX_TIM4_Init+0x110>
			Error_Handler();
 800ada4:	f000 f98e 	bl	800b0c4 <Error_Handler>
		sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800ada8:	2304      	movs	r3, #4
 800adaa:	623b      	str	r3, [r7, #32]
		sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800adac:	2350      	movs	r3, #80	; 0x50
 800adae:	627b      	str	r3, [r7, #36]	; 0x24
		sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800adb0:	2300      	movs	r3, #0
 800adb2:	62bb      	str	r3, [r7, #40]	; 0x28
		sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800adb4:	2300      	movs	r3, #0
 800adb6:	62fb      	str	r3, [r7, #44]	; 0x2c
		sSlaveConfig.TriggerFilter = 0;
 800adb8:	2300      	movs	r3, #0
 800adba:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800adbc:	f107 0320 	add.w	r3, r7, #32
 800adc0:	4619      	mov	r1, r3
 800adc2:	4820      	ldr	r0, [pc, #128]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800adc4:	f7fa fcac 	bl	8005720 <HAL_TIM_SlaveConfigSynchro>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <MX_TIM4_Init+0x13a>
			Error_Handler();
 800adce:	f000 f979 	bl	800b0c4 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800add2:	2300      	movs	r3, #0
 800add4:	613b      	str	r3, [r7, #16]
		sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800add6:	2301      	movs	r3, #1
 800add8:	617b      	str	r3, [r7, #20]
		sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800adda:	2300      	movs	r3, #0
 800addc:	61bb      	str	r3, [r7, #24]
		sConfigIC.ICFilter = 0;
 800adde:	2300      	movs	r3, #0
 800ade0:	61fb      	str	r3, [r7, #28]
		if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ade2:	f107 0310 	add.w	r3, r7, #16
 800ade6:	2200      	movs	r2, #0
 800ade8:	4619      	mov	r1, r3
 800adea:	4816      	ldr	r0, [pc, #88]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800adec:	f7fa fae4 	bl	80053b8 <HAL_TIM_IC_ConfigChannel>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d001      	beq.n	800adfa <MX_TIM4_Init+0x162>
			Error_Handler();
 800adf6:	f000 f965 	bl	800b0c4 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800adfa:	2302      	movs	r3, #2
 800adfc:	613b      	str	r3, [r7, #16]
		sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800adfe:	2302      	movs	r3, #2
 800ae00:	617b      	str	r3, [r7, #20]
		if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ae02:	f107 0310 	add.w	r3, r7, #16
 800ae06:	2204      	movs	r2, #4
 800ae08:	4619      	mov	r1, r3
 800ae0a:	480e      	ldr	r0, [pc, #56]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800ae0c:	f7fa fad4 	bl	80053b8 <HAL_TIM_IC_ConfigChannel>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <MX_TIM4_Init+0x182>
			Error_Handler();
 800ae16:	f000 f955 	bl	800b0c4 <Error_Handler>
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800ae22:	1d3b      	adds	r3, r7, #4
 800ae24:	4619      	mov	r1, r3
 800ae26:	4807      	ldr	r0, [pc, #28]	; (800ae44 <MX_TIM4_Init+0x1ac>)
 800ae28:	f7fb fb20 	bl	800646c <HAL_TIMEx_MasterConfigSynchronization>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <MX_TIM4_Init+0x19e>
			Error_Handler();
 800ae32:	f000 f947 	bl	800b0c4 <Error_Handler>
}
 800ae36:	bf00      	nop
 800ae38:	3750      	adds	r7, #80	; 0x50
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	20000486 	.word	0x20000486
 800ae44:	200001bc 	.word	0x200001bc
 800ae48:	40000800 	.word	0x40000800
 800ae4c:	20000578 	.word	0x20000578
 800ae50:	200007f8 	.word	0x200007f8
 800ae54:	200009bc 	.word	0x200009bc

0800ae58 <MX_TIM8_Init>:

static void MX_TIM8_Init()
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b0a0      	sub	sp, #128	; 0x80
 800ae5c:	af00      	add	r7, sp, #0
	if (!((PWM_In_EN>>4)&1)) //default if pin is not used as a pwm input
 800ae5e:	4b7c      	ldr	r3, [pc, #496]	; (800b050 <MX_TIM8_Init+0x1f8>)
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	091b      	lsrs	r3, r3, #4
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	f003 0301 	and.w	r3, r3, #1
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d158      	bne.n	800af20 <MX_TIM8_Init+0xc8>
	{
		TIM_OC_InitTypeDef sConfigOC = {0};
 800ae6e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ae72:	2200      	movs	r2, #0
 800ae74:	601a      	str	r2, [r3, #0]
 800ae76:	605a      	str	r2, [r3, #4]
 800ae78:	609a      	str	r2, [r3, #8]
 800ae7a:	60da      	str	r2, [r3, #12]
 800ae7c:	611a      	str	r2, [r3, #16]
 800ae7e:	615a      	str	r2, [r3, #20]
 800ae80:	619a      	str	r2, [r3, #24]

		htim8.Instance = TIM8;
 800ae82:	4b74      	ldr	r3, [pc, #464]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800ae84:	4a74      	ldr	r2, [pc, #464]	; (800b058 <MX_TIM8_Init+0x200>)
 800ae86:	601a      	str	r2, [r3, #0]
		htim8.Init.Prescaler = PWM_Prescalers[4];
 800ae88:	4b74      	ldr	r3, [pc, #464]	; (800b05c <MX_TIM8_Init+0x204>)
 800ae8a:	891b      	ldrh	r3, [r3, #8]
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	4b71      	ldr	r3, [pc, #452]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800ae90:	605a      	str	r2, [r3, #4]
		htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ae92:	4b70      	ldr	r3, [pc, #448]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	609a      	str	r2, [r3, #8]
		htim8.Init.Period = 255;
 800ae98:	4b6e      	ldr	r3, [pc, #440]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800ae9a:	22ff      	movs	r2, #255	; 0xff
 800ae9c:	60da      	str	r2, [r3, #12]
		htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ae9e:	4b6d      	ldr	r3, [pc, #436]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800aea0:	2200      	movs	r2, #0
 800aea2:	611a      	str	r2, [r3, #16]
		htim8.Init.RepetitionCounter = 0;
 800aea4:	4b6b      	ldr	r3, [pc, #428]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	615a      	str	r2, [r3, #20]
		htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aeaa:	4b6a      	ldr	r3, [pc, #424]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800aeb0:	4868      	ldr	r0, [pc, #416]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800aeb2:	f7f9 ffe6 	bl	8004e82 <HAL_TIM_PWM_Init>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d001      	beq.n	800aec0 <MX_TIM8_Init+0x68>
		{
			Error_Handler();
 800aebc:	f000 f902 	bl	800b0c4 <Error_Handler>
		}

		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800aec0:	2360      	movs	r3, #96	; 0x60
 800aec2:	667b      	str	r3, [r7, #100]	; 0x64
		sConfigOC.Pulse = PWM_Pulses[4];
 800aec4:	4b66      	ldr	r3, [pc, #408]	; (800b060 <MX_TIM8_Init+0x208>)
 800aec6:	891b      	ldrh	r3, [r3, #8]
 800aec8:	66bb      	str	r3, [r7, #104]	; 0x68
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800aeca:	2300      	movs	r3, #0
 800aecc:	66fb      	str	r3, [r7, #108]	; 0x6c
		sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800aece:	2300      	movs	r3, #0
 800aed0:	673b      	str	r3, [r7, #112]	; 0x70
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800aed2:	2300      	movs	r3, #0
 800aed4:	677b      	str	r3, [r7, #116]	; 0x74
		sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800aed6:	2300      	movs	r3, #0
 800aed8:	67bb      	str	r3, [r7, #120]	; 0x78
		sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800aeda:	2300      	movs	r3, #0
 800aedc:	67fb      	str	r3, [r7, #124]	; 0x7c
		if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800aede:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800aee2:	2200      	movs	r2, #0
 800aee4:	4619      	mov	r1, r3
 800aee6:	485b      	ldr	r0, [pc, #364]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800aee8:	f7fa fb02 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <MX_TIM8_Init+0x9e>
		{
			Error_Handler();
 800aef2:	f000 f8e7 	bl	800b0c4 <Error_Handler>
		}

		HAL_TIM_MspPostInit(&htim8);
 800aef6:	4857      	ldr	r0, [pc, #348]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800aef8:	f000 fc02 	bl	800b700 <HAL_TIM_MspPostInit>

		if(PWM_Out_EN&(1<<4))
 800aefc:	4b59      	ldr	r3, [pc, #356]	; (800b064 <MX_TIM8_Init+0x20c>)
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	f003 0310 	and.w	r3, r3, #16
 800af04:	2b00      	cmp	r3, #0
 800af06:	f000 809e 	beq.w	800b046 <MX_TIM8_Init+0x1ee>
		{
			if (HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1) != HAL_OK)
 800af0a:	2100      	movs	r1, #0
 800af0c:	4851      	ldr	r0, [pc, #324]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800af0e:	f7f9 ffe3 	bl	8004ed8 <HAL_TIM_PWM_Start>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	f000 8096 	beq.w	800b046 <MX_TIM8_Init+0x1ee>
			{
				Error_Handler();
 800af1a:	f000 f8d3 	bl	800b0c4 <Error_Handler>
		if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
		{
			Error_Handler();
		}
	}
}
 800af1e:	e092      	b.n	800b046 <MX_TIM8_Init+0x1ee>
		TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800af20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800af24:	2200      	movs	r2, #0
 800af26:	601a      	str	r2, [r3, #0]
 800af28:	605a      	str	r2, [r3, #4]
 800af2a:	609a      	str	r2, [r3, #8]
 800af2c:	60da      	str	r2, [r3, #12]
 800af2e:	611a      	str	r2, [r3, #16]
		TIM_IC_InitTypeDef sConfigIC = {0};
 800af30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800af34:	2200      	movs	r2, #0
 800af36:	601a      	str	r2, [r3, #0]
 800af38:	605a      	str	r2, [r3, #4]
 800af3a:	609a      	str	r2, [r3, #8]
 800af3c:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800af42:	2200      	movs	r2, #0
 800af44:	601a      	str	r2, [r3, #0]
 800af46:	605a      	str	r2, [r3, #4]
 800af48:	609a      	str	r2, [r3, #8]
		TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800af4a:	463b      	mov	r3, r7
 800af4c:	2234      	movs	r2, #52	; 0x34
 800af4e:	2100      	movs	r1, #0
 800af50:	4618      	mov	r0, r3
 800af52:	f000 ff19 	bl	800bd88 <memset>
		htim8.Instance = TIM8;
 800af56:	4b3f      	ldr	r3, [pc, #252]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800af58:	4a3f      	ldr	r2, [pc, #252]	; (800b058 <MX_TIM8_Init+0x200>)
 800af5a:	601a      	str	r2, [r3, #0]
		htim8.Init.Prescaler = PWM_Prescalers[4];
 800af5c:	4b3f      	ldr	r3, [pc, #252]	; (800b05c <MX_TIM8_Init+0x204>)
 800af5e:	891b      	ldrh	r3, [r3, #8]
 800af60:	461a      	mov	r2, r3
 800af62:	4b3c      	ldr	r3, [pc, #240]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800af64:	605a      	str	r2, [r3, #4]
		htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af66:	4b3b      	ldr	r3, [pc, #236]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800af68:	2200      	movs	r2, #0
 800af6a:	609a      	str	r2, [r3, #8]
		htim8.Init.Period = 65535;
 800af6c:	4b39      	ldr	r3, [pc, #228]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800af6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af72:	60da      	str	r2, [r3, #12]
		htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800af74:	4b37      	ldr	r3, [pc, #220]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800af76:	2200      	movs	r2, #0
 800af78:	611a      	str	r2, [r3, #16]
		htim8.Init.RepetitionCounter = 0;
 800af7a:	4b36      	ldr	r3, [pc, #216]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	615a      	str	r2, [r3, #20]
		htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800af80:	4b34      	ldr	r3, [pc, #208]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800af82:	2200      	movs	r2, #0
 800af84:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800af86:	4833      	ldr	r0, [pc, #204]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800af88:	f7fa f86c 	bl	8005064 <HAL_TIM_IC_Init>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <MX_TIM8_Init+0x13e>
			Error_Handler();
 800af92:	f000 f897 	bl	800b0c4 <Error_Handler>
		sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800af96:	2304      	movs	r3, #4
 800af98:	653b      	str	r3, [r7, #80]	; 0x50
		sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800af9a:	2350      	movs	r3, #80	; 0x50
 800af9c:	657b      	str	r3, [r7, #84]	; 0x54
		sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800af9e:	2300      	movs	r3, #0
 800afa0:	65bb      	str	r3, [r7, #88]	; 0x58
		sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800afa2:	2300      	movs	r3, #0
 800afa4:	65fb      	str	r3, [r7, #92]	; 0x5c
		sSlaveConfig.TriggerFilter = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	663b      	str	r3, [r7, #96]	; 0x60
		if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800afaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800afae:	4619      	mov	r1, r3
 800afb0:	4828      	ldr	r0, [pc, #160]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800afb2:	f7fa fbb5 	bl	8005720 <HAL_TIM_SlaveConfigSynchro>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <MX_TIM8_Init+0x168>
			Error_Handler();
 800afbc:	f000 f882 	bl	800b0c4 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800afc0:	2300      	movs	r3, #0
 800afc2:	643b      	str	r3, [r7, #64]	; 0x40
		sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800afc4:	2301      	movs	r3, #1
 800afc6:	647b      	str	r3, [r7, #68]	; 0x44
		sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800afc8:	2300      	movs	r3, #0
 800afca:	64bb      	str	r3, [r7, #72]	; 0x48
		sConfigIC.ICFilter = 0;
 800afcc:	2300      	movs	r3, #0
 800afce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800afd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800afd4:	2200      	movs	r2, #0
 800afd6:	4619      	mov	r1, r3
 800afd8:	481e      	ldr	r0, [pc, #120]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800afda:	f7fa f9ed 	bl	80053b8 <HAL_TIM_IC_ConfigChannel>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <MX_TIM8_Init+0x190>
			Error_Handler();
 800afe4:	f000 f86e 	bl	800b0c4 <Error_Handler>
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800afe8:	2302      	movs	r3, #2
 800afea:	643b      	str	r3, [r7, #64]	; 0x40
		sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800afec:	2302      	movs	r3, #2
 800afee:	647b      	str	r3, [r7, #68]	; 0x44
		if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800aff0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aff4:	2204      	movs	r2, #4
 800aff6:	4619      	mov	r1, r3
 800aff8:	4816      	ldr	r0, [pc, #88]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800affa:	f7fa f9dd 	bl	80053b8 <HAL_TIM_IC_ConfigChannel>
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d001      	beq.n	800b008 <MX_TIM8_Init+0x1b0>
			Error_Handler();
 800b004:	f000 f85e 	bl	800b0c4 <Error_Handler>
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b008:	2300      	movs	r3, #0
 800b00a:	637b      	str	r3, [r7, #52]	; 0x34
		sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800b00c:	2300      	movs	r3, #0
 800b00e:	63bb      	str	r3, [r7, #56]	; 0x38
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b010:	2300      	movs	r3, #0
 800b012:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800b014:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b018:	4619      	mov	r1, r3
 800b01a:	480e      	ldr	r0, [pc, #56]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800b01c:	f7fb fa26 	bl	800646c <HAL_TIMEx_MasterConfigSynchronization>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <MX_TIM8_Init+0x1d2>
			Error_Handler();
 800b026:	f000 f84d 	bl	800b0c4 <Error_Handler>
		sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800b02a:	2300      	movs	r3, #0
 800b02c:	61fb      	str	r3, [r7, #28]
		sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800b02e:	2300      	movs	r3, #0
 800b030:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800b032:	463b      	mov	r3, r7
 800b034:	4619      	mov	r1, r3
 800b036:	4807      	ldr	r0, [pc, #28]	; (800b054 <MX_TIM8_Init+0x1fc>)
 800b038:	f7fb fa76 	bl	8006528 <HAL_TIMEx_ConfigBreakDeadTime>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d001      	beq.n	800b046 <MX_TIM8_Init+0x1ee>
			Error_Handler();
 800b042:	f000 f83f 	bl	800b0c4 <Error_Handler>
}
 800b046:	bf00      	nop
 800b048:	3780      	adds	r7, #128	; 0x80
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	20000486 	.word	0x20000486
 800b054:	20000138 	.word	0x20000138
 800b058:	40013400 	.word	0x40013400
 800b05c:	20000578 	.word	0x20000578
 800b060:	200007f8 	.word	0x200007f8
 800b064:	200009bc 	.word	0x200009bc

0800b068 <MX_LPTIM1_Init>:

static void MX_LPTIM1_Init(void)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	af00      	add	r7, sp, #0
	hlptim1.Instance = LPTIM1;
 800b06c:	4b13      	ldr	r3, [pc, #76]	; (800b0bc <MX_LPTIM1_Init+0x54>)
 800b06e:	4a14      	ldr	r2, [pc, #80]	; (800b0c0 <MX_LPTIM1_Init+0x58>)
 800b070:	601a      	str	r2, [r3, #0]
	hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800b072:	4b12      	ldr	r3, [pc, #72]	; (800b0bc <MX_LPTIM1_Init+0x54>)
 800b074:	2200      	movs	r2, #0
 800b076:	605a      	str	r2, [r3, #4]
	hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 800b078:	4b10      	ldr	r3, [pc, #64]	; (800b0bc <MX_LPTIM1_Init+0x54>)
 800b07a:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 800b07e:	609a      	str	r2, [r3, #8]
	hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800b080:	4b0e      	ldr	r3, [pc, #56]	; (800b0bc <MX_LPTIM1_Init+0x54>)
 800b082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b086:	615a      	str	r2, [r3, #20]
	hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800b088:	4b0c      	ldr	r3, [pc, #48]	; (800b0bc <MX_LPTIM1_Init+0x54>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	621a      	str	r2, [r3, #32]
	hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800b08e:	4b0b      	ldr	r3, [pc, #44]	; (800b0bc <MX_LPTIM1_Init+0x54>)
 800b090:	2200      	movs	r2, #0
 800b092:	625a      	str	r2, [r3, #36]	; 0x24
	hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800b094:	4b09      	ldr	r3, [pc, #36]	; (800b0bc <MX_LPTIM1_Init+0x54>)
 800b096:	2200      	movs	r2, #0
 800b098:	629a      	str	r2, [r3, #40]	; 0x28
	hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800b09a:	4b08      	ldr	r3, [pc, #32]	; (800b0bc <MX_LPTIM1_Init+0x54>)
 800b09c:	2200      	movs	r2, #0
 800b09e:	62da      	str	r2, [r3, #44]	; 0x2c
	hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800b0a0:	4b06      	ldr	r3, [pc, #24]	; (800b0bc <MX_LPTIM1_Init+0x54>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800b0a6:	4805      	ldr	r0, [pc, #20]	; (800b0bc <MX_LPTIM1_Init+0x54>)
 800b0a8:	f7f8 fc2a 	bl	8003900 <HAL_LPTIM_Init>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <MX_LPTIM1_Init+0x4e>
	{
		Error_Handler();
 800b0b2:	f000 f807 	bl	800b0c4 <Error_Handler>
	}
}
 800b0b6:	bf00      	nop
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20000650 	.word	0x20000650
 800b0c0:	40007c00 	.word	0x40007c00

0800b0c4 <Error_Handler>:


void Error_Handler(void)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(LED.PORT, LED.PIN);
 800b0c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b0cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0d0:	4611      	mov	r1, r2
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7f8 fbe2 	bl	800389c <HAL_GPIO_TogglePin>
		HAL_Delay(33);
 800b0d8:	2021      	movs	r0, #33	; 0x21
 800b0da:	f7f5 f90d 	bl	80002f8 <HAL_Delay>
		HAL_GPIO_TogglePin(LED.PORT, LED.PIN);
 800b0de:	e7f3      	b.n	800b0c8 <Error_Handler+0x4>

0800b0e0 <Parse_Voltage>:
		return 0;
	}
}

uint32_t Parse_Voltage(uint32_t raw, uint32_t raw_ground)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
	//voltage should be raw*4 after voltage divider, but component is not working with tolerances, voltage divider is 130 and 82 which is 106/41, voltage is raw*3.3/(2^10), V to mV is *1000;
	//approximate value from raw->Vcc based on measured values is (95*raw/2)-1645; note that this formula is not taken from reality, it is probably approximating a logarithimic formula but datasheet doesn't give enough details; is low enough precision that overflow is not a problem to consider at all
	uint32_t calculated=(((95*raw)/2)-1645)+((raw_ground*825)/256); //calculate current in mV
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	005b      	lsls	r3, r3, #1
 800b0f0:	4413      	add	r3, r2
 800b0f2:	015b      	lsls	r3, r3, #5
 800b0f4:	1a9b      	subs	r3, r3, r2
 800b0f6:	085a      	lsrs	r2, r3, #1
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	f240 3139 	movw	r1, #825	; 0x339
 800b0fe:	fb01 f303 	mul.w	r3, r1, r3
 800b102:	0a1b      	lsrs	r3, r3, #8
 800b104:	4413      	add	r3, r2
 800b106:	f2a3 636d 	subw	r3, r3, #1645	; 0x66d
 800b10a:	60fb      	str	r3, [r7, #12]
	//TODO: check that this function works properly for the second board assembled as well sometime

	return calculated;
 800b10c:	68fb      	ldr	r3, [r7, #12]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3714      	adds	r7, #20
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr
	...

0800b11c <Parse_Temperature>:

uint32_t Parse_Temperature(uint32_t raw)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
	uint32_t calculated=401-(raw*3791/5000); //calculate temperature in °C
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f640 62cf 	movw	r2, #3791	; 0xecf
 800b12a:	fb02 f303 	mul.w	r3, r2, r3
 800b12e:	4a07      	ldr	r2, [pc, #28]	; (800b14c <Parse_Temperature+0x30>)
 800b130:	fba2 2303 	umull	r2, r3, r2, r3
 800b134:	0b1b      	lsrs	r3, r3, #12
 800b136:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 800b13a:	3301      	adds	r3, #1
 800b13c:	60fb      	str	r3, [r7, #12]
	//TODO: get some sort of line for this and check what it looks like in reality, datasheet only gives value for 1k ohm resistor

	return calculated;
 800b13e:	68fb      	ldr	r3, [r7, #12]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3714      	adds	r7, #20
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr
 800b14c:	d1b71759 	.word	0xd1b71759

0800b150 <Calculate_PWM_DC>:
/*
		volatile uint32_t a = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
		volatile uint32_t b = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);*/

uint32_t Calculate_PWM_DC(uint32_t channel)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
	uint32_t DC=0;
 800b158:	2300      	movs	r3, #0
 800b15a:	617b      	str	r3, [r7, #20]
	uint32_t T=0, off=0, on=0;
 800b15c:	2300      	movs	r3, #0
 800b15e:	613b      	str	r3, [r7, #16]
 800b160:	2300      	movs	r3, #0
 800b162:	60fb      	str	r3, [r7, #12]
 800b164:	2300      	movs	r3, #0
 800b166:	60bb      	str	r3, [r7, #8]

	if (!(PWM_In_EN>>channel)&1)
 800b168:	4b2d      	ldr	r3, [pc, #180]	; (800b220 <Calculate_PWM_DC+0xd0>)
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	461a      	mov	r2, r3
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	fa42 f303 	asr.w	r3, r2, r3
 800b174:	2b00      	cmp	r3, #0
 800b176:	d105      	bne.n	800b184 <Calculate_PWM_DC+0x34>
	{
		Set_Error(WARN_PWM_CHANNEL_UNINITIALIZED);
 800b178:	f44f 7081 	mov.w	r0, #258	; 0x102
 800b17c:	f7fe fda6 	bl	8009ccc <Set_Error>
		return 0;
 800b180:	2300      	movs	r3, #0
 800b182:	e048      	b.n	800b216 <Calculate_PWM_DC+0xc6>
	}

	switch(channel)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b03      	cmp	r3, #3
 800b188:	d018      	beq.n	800b1bc <Calculate_PWM_DC+0x6c>
 800b18a:	2b04      	cmp	r3, #4
 800b18c:	d029      	beq.n	800b1e2 <Calculate_PWM_DC+0x92>
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d13a      	bne.n	800b208 <Calculate_PWM_DC+0xb8>
	{
	case 0:
		T=HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 800b192:	2104      	movs	r1, #4
 800b194:	4823      	ldr	r0, [pc, #140]	; (800b224 <Calculate_PWM_DC+0xd4>)
 800b196:	f7fa fb05 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b19a:	6138      	str	r0, [r7, #16]
		off=HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 800b19c:	2100      	movs	r1, #0
 800b19e:	4821      	ldr	r0, [pc, #132]	; (800b224 <Calculate_PWM_DC+0xd4>)
 800b1a0:	f7fa fb00 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b1a4:	60f8      	str	r0, [r7, #12]
		DC=(((T-off)*100)/T); //note integer division always rounds down
 800b1a6:	693a      	ldr	r2, [r7, #16]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	2264      	movs	r2, #100	; 0x64
 800b1ae:	fb02 f203 	mul.w	r2, r2, r3
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1b8:	617b      	str	r3, [r7, #20]
		break;
 800b1ba:	e02b      	b.n	800b214 <Calculate_PWM_DC+0xc4>
	case 3:
		T=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 800b1bc:	2100      	movs	r1, #0
 800b1be:	481a      	ldr	r0, [pc, #104]	; (800b228 <Calculate_PWM_DC+0xd8>)
 800b1c0:	f7fa faf0 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b1c4:	6138      	str	r0, [r7, #16]
		on=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 800b1c6:	2104      	movs	r1, #4
 800b1c8:	4817      	ldr	r0, [pc, #92]	; (800b228 <Calculate_PWM_DC+0xd8>)
 800b1ca:	f7fa faeb 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b1ce:	60b8      	str	r0, [r7, #8]
		DC=((on*100)/T);
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	2264      	movs	r2, #100	; 0x64
 800b1d4:	fb02 f203 	mul.w	r2, r2, r3
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1de:	617b      	str	r3, [r7, #20]
		break;
 800b1e0:	e018      	b.n	800b214 <Calculate_PWM_DC+0xc4>
	case 4:
		T=HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_1);
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	4811      	ldr	r0, [pc, #68]	; (800b22c <Calculate_PWM_DC+0xdc>)
 800b1e6:	f7fa fadd 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b1ea:	6138      	str	r0, [r7, #16]
		on=HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_2);
 800b1ec:	2104      	movs	r1, #4
 800b1ee:	480f      	ldr	r0, [pc, #60]	; (800b22c <Calculate_PWM_DC+0xdc>)
 800b1f0:	f7fa fad8 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b1f4:	60b8      	str	r0, [r7, #8]
		DC=((on*100)/T);
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	2264      	movs	r2, #100	; 0x64
 800b1fa:	fb02 f203 	mul.w	r2, r2, r3
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	fbb2 f3f3 	udiv	r3, r2, r3
 800b204:	617b      	str	r3, [r7, #20]
		break;
 800b206:	e005      	b.n	800b214 <Calculate_PWM_DC+0xc4>
	default:
		Set_Error(WARN_PWM_INVALID_CHANNEL);
 800b208:	f240 1001 	movw	r0, #257	; 0x101
 800b20c:	f7fe fd5e 	bl	8009ccc <Set_Error>
		return 0;
 800b210:	2300      	movs	r3, #0
 800b212:	e000      	b.n	800b216 <Calculate_PWM_DC+0xc6>
	}


	return DC; //DC ranges from 0-100
 800b214:	697b      	ldr	r3, [r7, #20]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	20000486 	.word	0x20000486
 800b224:	20000914 	.word	0x20000914
 800b228:	200001bc 	.word	0x200001bc
 800b22c:	20000138 	.word	0x20000138

0800b230 <Calculate_PWM_Freq>:

uint32_t Calculate_PWM_Freq(uint32_t channel)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
	uint32_t frequency=0;
 800b238:	2300      	movs	r3, #0
 800b23a:	60bb      	str	r3, [r7, #8]
	uint32_t T=0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	60fb      	str	r3, [r7, #12]

	if (!(PWM_In_EN>>channel)&1)
 800b240:	4b25      	ldr	r3, [pc, #148]	; (800b2d8 <Calculate_PWM_Freq+0xa8>)
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	461a      	mov	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	fa42 f303 	asr.w	r3, r2, r3
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d105      	bne.n	800b25c <Calculate_PWM_Freq+0x2c>
	{
		Set_Error(WARN_PWM_CHANNEL_UNINITIALIZED);
 800b250:	f44f 7081 	mov.w	r0, #258	; 0x102
 800b254:	f7fe fd3a 	bl	8009ccc <Set_Error>
		return 0;
 800b258:	2300      	movs	r3, #0
 800b25a:	e038      	b.n	800b2ce <Calculate_PWM_Freq+0x9e>
	}

	switch(channel)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2b03      	cmp	r3, #3
 800b260:	d009      	beq.n	800b276 <Calculate_PWM_Freq+0x46>
 800b262:	2b04      	cmp	r3, #4
 800b264:	d00d      	beq.n	800b282 <Calculate_PWM_Freq+0x52>
 800b266:	2b00      	cmp	r3, #0
 800b268:	d111      	bne.n	800b28e <Calculate_PWM_Freq+0x5e>
	{
	case 0:
		T=HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 800b26a:	2104      	movs	r1, #4
 800b26c:	481b      	ldr	r0, [pc, #108]	; (800b2dc <Calculate_PWM_Freq+0xac>)
 800b26e:	f7fa fa99 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b272:	60f8      	str	r0, [r7, #12]
		break;
 800b274:	e011      	b.n	800b29a <Calculate_PWM_Freq+0x6a>
	case 3:
		T=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 800b276:	2100      	movs	r1, #0
 800b278:	4819      	ldr	r0, [pc, #100]	; (800b2e0 <Calculate_PWM_Freq+0xb0>)
 800b27a:	f7fa fa93 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b27e:	60f8      	str	r0, [r7, #12]
		break;
 800b280:	e00b      	b.n	800b29a <Calculate_PWM_Freq+0x6a>
	case 4:
		T=HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_1);
 800b282:	2100      	movs	r1, #0
 800b284:	4817      	ldr	r0, [pc, #92]	; (800b2e4 <Calculate_PWM_Freq+0xb4>)
 800b286:	f7fa fa8d 	bl	80057a4 <HAL_TIM_ReadCapturedValue>
 800b28a:	60f8      	str	r0, [r7, #12]
		break;
 800b28c:	e005      	b.n	800b29a <Calculate_PWM_Freq+0x6a>
	default:
		Set_Error(WARN_PWM_INVALID_CHANNEL);
 800b28e:	f240 1001 	movw	r0, #257	; 0x101
 800b292:	f7fe fd1b 	bl	8009ccc <Set_Error>
		return 0;
 800b296:	2300      	movs	r3, #0
 800b298:	e019      	b.n	800b2ce <Calculate_PWM_Freq+0x9e>
	}
	frequency = (((HAL_RCC_GetHCLKFreq()*10)/(T*(PWM_Prescalers[channel]+1)))+5)/10; //calculate frequency in .1 Hz, add .5 Hz, divide by 10 to get rounded value in Hz
 800b29a:	f7f9 fb31 	bl	8004900 <HAL_RCC_GetHCLKFreq>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4413      	add	r3, r2
 800b2a6:	005b      	lsls	r3, r3, #1
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	4a0f      	ldr	r2, [pc, #60]	; (800b2e8 <Calculate_PWM_Freq+0xb8>)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	fb03 f302 	mul.w	r3, r3, r2
 800b2bc:	fbb1 f3f3 	udiv	r3, r1, r3
 800b2c0:	3305      	adds	r3, #5
 800b2c2:	4a0a      	ldr	r2, [pc, #40]	; (800b2ec <Calculate_PWM_Freq+0xbc>)
 800b2c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c8:	08db      	lsrs	r3, r3, #3
 800b2ca:	60bb      	str	r3, [r7, #8]

	//if frequency is higher than 255 Hz, two bytes must be used to send the frequency, frequency will almost surely not be over 65kHz
	return frequency;
 800b2cc:	68bb      	ldr	r3, [r7, #8]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	20000486 	.word	0x20000486
 800b2dc:	20000914 	.word	0x20000914
 800b2e0:	200001bc 	.word	0x200001bc
 800b2e4:	20000138 	.word	0x20000138
 800b2e8:	20000578 	.word	0x20000578
 800b2ec:	cccccccd 	.word	0xcccccccd

0800b2f0 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b2f4:	4b05      	ldr	r3, [pc, #20]	; (800b30c <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	4a04      	ldr	r2, [pc, #16]	; (800b30c <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800b2fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2fe:	6093      	str	r3, [r2, #8]
}
 800b300:	bf00      	nop
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	40007000 	.word	0x40007000

0800b310 <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_adc1;
extern DMA_HandleTypeDef hdma_adc2;


void HAL_MspInit(void)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b316:	4b0f      	ldr	r3, [pc, #60]	; (800b354 <HAL_MspInit+0x44>)
 800b318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b31a:	4a0e      	ldr	r2, [pc, #56]	; (800b354 <HAL_MspInit+0x44>)
 800b31c:	f043 0301 	orr.w	r3, r3, #1
 800b320:	6613      	str	r3, [r2, #96]	; 0x60
 800b322:	4b0c      	ldr	r3, [pc, #48]	; (800b354 <HAL_MspInit+0x44>)
 800b324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b326:	f003 0301 	and.w	r3, r3, #1
 800b32a:	607b      	str	r3, [r7, #4]
 800b32c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b32e:	4b09      	ldr	r3, [pc, #36]	; (800b354 <HAL_MspInit+0x44>)
 800b330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b332:	4a08      	ldr	r2, [pc, #32]	; (800b354 <HAL_MspInit+0x44>)
 800b334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b338:	6593      	str	r3, [r2, #88]	; 0x58
 800b33a:	4b06      	ldr	r3, [pc, #24]	; (800b354 <HAL_MspInit+0x44>)
 800b33c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b33e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b342:	603b      	str	r3, [r7, #0]
 800b344:	683b      	ldr	r3, [r7, #0]

  LL_PWR_DisableDeadBatteryPD();
 800b346:	f7ff ffd3 	bl	800b2f0 <LL_PWR_DisableDeadBatteryPD>
}
 800b34a:	bf00      	nop
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	40021000 	.word	0x40021000

0800b358 <HAL_ADC_MspInit>:

//counter to keep track of how many peripherals require ADC12 clock, so that deinitializing ADC1 allows ADC2 to run
static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b08c      	sub	sp, #48	; 0x30
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b360:	f107 031c 	add.w	r3, r7, #28
 800b364:	2200      	movs	r2, #0
 800b366:	601a      	str	r2, [r3, #0]
 800b368:	605a      	str	r2, [r3, #4]
 800b36a:	609a      	str	r2, [r3, #8]
 800b36c:	60da      	str	r2, [r3, #12]
 800b36e:	611a      	str	r2, [r3, #16]
	if(hadc->Instance==ADC1)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b378:	d15a      	bne.n	800b430 <HAL_ADC_MspInit+0xd8>
	{
		HAL_RCC_ADC12_CLK_ENABLED++;
 800b37a:	4b5e      	ldr	r3, [pc, #376]	; (800b4f4 <HAL_ADC_MspInit+0x19c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	3301      	adds	r3, #1
 800b380:	4a5c      	ldr	r2, [pc, #368]	; (800b4f4 <HAL_ADC_MspInit+0x19c>)
 800b382:	6013      	str	r3, [r2, #0]
		if(HAL_RCC_ADC12_CLK_ENABLED==1)
 800b384:	4b5b      	ldr	r3, [pc, #364]	; (800b4f4 <HAL_ADC_MspInit+0x19c>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d10b      	bne.n	800b3a4 <HAL_ADC_MspInit+0x4c>
		{
			__HAL_RCC_ADC12_CLK_ENABLE();
 800b38c:	4b5a      	ldr	r3, [pc, #360]	; (800b4f8 <HAL_ADC_MspInit+0x1a0>)
 800b38e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b390:	4a59      	ldr	r2, [pc, #356]	; (800b4f8 <HAL_ADC_MspInit+0x1a0>)
 800b392:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b396:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b398:	4b57      	ldr	r3, [pc, #348]	; (800b4f8 <HAL_ADC_MspInit+0x1a0>)
 800b39a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b39c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b3a0:	61bb      	str	r3, [r7, #24]
 800b3a2:	69bb      	ldr	r3, [r7, #24]
		}
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b3a4:	4b54      	ldr	r3, [pc, #336]	; (800b4f8 <HAL_ADC_MspInit+0x1a0>)
 800b3a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3a8:	4a53      	ldr	r2, [pc, #332]	; (800b4f8 <HAL_ADC_MspInit+0x1a0>)
 800b3aa:	f043 0301 	orr.w	r3, r3, #1
 800b3ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b3b0:	4b51      	ldr	r3, [pc, #324]	; (800b4f8 <HAL_ADC_MspInit+0x1a0>)
 800b3b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3b4:	f003 0301 	and.w	r3, r3, #1
 800b3b8:	617b      	str	r3, [r7, #20]
 800b3ba:	697b      	ldr	r3, [r7, #20]

		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800b3bc:	2307      	movs	r3, #7
 800b3be:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b3c0:	2303      	movs	r3, #3
 800b3c2:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3c8:	f107 031c 	add.w	r3, r7, #28
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b3d2:	f7f8 f8b1 	bl	8003538 <HAL_GPIO_Init>

		hdma_adc1.Instance = DMA1_Channel1;
 800b3d6:	4b49      	ldr	r3, [pc, #292]	; (800b4fc <HAL_ADC_MspInit+0x1a4>)
 800b3d8:	4a49      	ldr	r2, [pc, #292]	; (800b500 <HAL_ADC_MspInit+0x1a8>)
 800b3da:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800b3dc:	4b47      	ldr	r3, [pc, #284]	; (800b4fc <HAL_ADC_MspInit+0x1a4>)
 800b3de:	2205      	movs	r2, #5
 800b3e0:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b3e2:	4b46      	ldr	r3, [pc, #280]	; (800b4fc <HAL_ADC_MspInit+0x1a4>)
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800b3e8:	4b44      	ldr	r3, [pc, #272]	; (800b4fc <HAL_ADC_MspInit+0x1a4>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800b3ee:	4b43      	ldr	r3, [pc, #268]	; (800b4fc <HAL_ADC_MspInit+0x1a4>)
 800b3f0:	2280      	movs	r2, #128	; 0x80
 800b3f2:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b3f4:	4b41      	ldr	r3, [pc, #260]	; (800b4fc <HAL_ADC_MspInit+0x1a4>)
 800b3f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3fa:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b3fc:	4b3f      	ldr	r3, [pc, #252]	; (800b4fc <HAL_ADC_MspInit+0x1a4>)
 800b3fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b402:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800b404:	4b3d      	ldr	r3, [pc, #244]	; (800b4fc <HAL_ADC_MspInit+0x1a4>)
 800b406:	2220      	movs	r2, #32
 800b408:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800b40a:	4b3c      	ldr	r3, [pc, #240]	; (800b4fc <HAL_ADC_MspInit+0x1a4>)
 800b40c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b410:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800b412:	483a      	ldr	r0, [pc, #232]	; (800b4fc <HAL_ADC_MspInit+0x1a4>)
 800b414:	f7f6 fc92 	bl	8001d3c <HAL_DMA_Init>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d001      	beq.n	800b422 <HAL_ADC_MspInit+0xca>
		{
			Error_Handler();
 800b41e:	f7ff fe51 	bl	800b0c4 <Error_Handler>
		}

		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4a35      	ldr	r2, [pc, #212]	; (800b4fc <HAL_ADC_MspInit+0x1a4>)
 800b426:	655a      	str	r2, [r3, #84]	; 0x54
 800b428:	4a34      	ldr	r2, [pc, #208]	; (800b4fc <HAL_ADC_MspInit+0x1a4>)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6293      	str	r3, [r2, #40]	; 0x28
		  Error_Handler();
		}

		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
	}
}
 800b42e:	e05d      	b.n	800b4ec <HAL_ADC_MspInit+0x194>
	else if(hadc->Instance==ADC2)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a33      	ldr	r2, [pc, #204]	; (800b504 <HAL_ADC_MspInit+0x1ac>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d158      	bne.n	800b4ec <HAL_ADC_MspInit+0x194>
		HAL_RCC_ADC12_CLK_ENABLED++;
 800b43a:	4b2e      	ldr	r3, [pc, #184]	; (800b4f4 <HAL_ADC_MspInit+0x19c>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	3301      	adds	r3, #1
 800b440:	4a2c      	ldr	r2, [pc, #176]	; (800b4f4 <HAL_ADC_MspInit+0x19c>)
 800b442:	6013      	str	r3, [r2, #0]
		if(HAL_RCC_ADC12_CLK_ENABLED==1)
 800b444:	4b2b      	ldr	r3, [pc, #172]	; (800b4f4 <HAL_ADC_MspInit+0x19c>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d10b      	bne.n	800b464 <HAL_ADC_MspInit+0x10c>
		  __HAL_RCC_ADC12_CLK_ENABLE();
 800b44c:	4b2a      	ldr	r3, [pc, #168]	; (800b4f8 <HAL_ADC_MspInit+0x1a0>)
 800b44e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b450:	4a29      	ldr	r2, [pc, #164]	; (800b4f8 <HAL_ADC_MspInit+0x1a0>)
 800b452:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b456:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b458:	4b27      	ldr	r3, [pc, #156]	; (800b4f8 <HAL_ADC_MspInit+0x1a0>)
 800b45a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b45c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b460:	613b      	str	r3, [r7, #16]
 800b462:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 800b464:	4b24      	ldr	r3, [pc, #144]	; (800b4f8 <HAL_ADC_MspInit+0x1a0>)
 800b466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b468:	4a23      	ldr	r2, [pc, #140]	; (800b4f8 <HAL_ADC_MspInit+0x1a0>)
 800b46a:	f043 0320 	orr.w	r3, r3, #32
 800b46e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b470:	4b21      	ldr	r3, [pc, #132]	; (800b4f8 <HAL_ADC_MspInit+0x1a0>)
 800b472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b474:	f003 0320 	and.w	r3, r3, #32
 800b478:	60fb      	str	r3, [r7, #12]
 800b47a:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b47c:	2302      	movs	r3, #2
 800b47e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b480:	2303      	movs	r3, #3
 800b482:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b484:	2300      	movs	r3, #0
 800b486:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b488:	f107 031c 	add.w	r3, r7, #28
 800b48c:	4619      	mov	r1, r3
 800b48e:	481e      	ldr	r0, [pc, #120]	; (800b508 <HAL_ADC_MspInit+0x1b0>)
 800b490:	f7f8 f852 	bl	8003538 <HAL_GPIO_Init>
		hdma_adc2.Instance = DMA1_Channel2;
 800b494:	4b1d      	ldr	r3, [pc, #116]	; (800b50c <HAL_ADC_MspInit+0x1b4>)
 800b496:	4a1e      	ldr	r2, [pc, #120]	; (800b510 <HAL_ADC_MspInit+0x1b8>)
 800b498:	601a      	str	r2, [r3, #0]
		hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800b49a:	4b1c      	ldr	r3, [pc, #112]	; (800b50c <HAL_ADC_MspInit+0x1b4>)
 800b49c:	2224      	movs	r2, #36	; 0x24
 800b49e:	605a      	str	r2, [r3, #4]
		hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b4a0:	4b1a      	ldr	r3, [pc, #104]	; (800b50c <HAL_ADC_MspInit+0x1b4>)
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	609a      	str	r2, [r3, #8]
		hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800b4a6:	4b19      	ldr	r3, [pc, #100]	; (800b50c <HAL_ADC_MspInit+0x1b4>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	60da      	str	r2, [r3, #12]
		hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800b4ac:	4b17      	ldr	r3, [pc, #92]	; (800b50c <HAL_ADC_MspInit+0x1b4>)
 800b4ae:	2280      	movs	r2, #128	; 0x80
 800b4b0:	611a      	str	r2, [r3, #16]
		hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b4b2:	4b16      	ldr	r3, [pc, #88]	; (800b50c <HAL_ADC_MspInit+0x1b4>)
 800b4b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4b8:	615a      	str	r2, [r3, #20]
		hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b4ba:	4b14      	ldr	r3, [pc, #80]	; (800b50c <HAL_ADC_MspInit+0x1b4>)
 800b4bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4c0:	619a      	str	r2, [r3, #24]
		hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800b4c2:	4b12      	ldr	r3, [pc, #72]	; (800b50c <HAL_ADC_MspInit+0x1b4>)
 800b4c4:	2220      	movs	r2, #32
 800b4c6:	61da      	str	r2, [r3, #28]
		hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800b4c8:	4b10      	ldr	r3, [pc, #64]	; (800b50c <HAL_ADC_MspInit+0x1b4>)
 800b4ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b4ce:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800b4d0:	480e      	ldr	r0, [pc, #56]	; (800b50c <HAL_ADC_MspInit+0x1b4>)
 800b4d2:	f7f6 fc33 	bl	8001d3c <HAL_DMA_Init>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <HAL_ADC_MspInit+0x188>
		  Error_Handler();
 800b4dc:	f7ff fdf2 	bl	800b0c4 <Error_Handler>
		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4a0a      	ldr	r2, [pc, #40]	; (800b50c <HAL_ADC_MspInit+0x1b4>)
 800b4e4:	655a      	str	r2, [r3, #84]	; 0x54
 800b4e6:	4a09      	ldr	r2, [pc, #36]	; (800b50c <HAL_ADC_MspInit+0x1b4>)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6293      	str	r3, [r2, #40]	; 0x28
}
 800b4ec:	bf00      	nop
 800b4ee:	3730      	adds	r7, #48	; 0x30
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	20000088 	.word	0x20000088
 800b4f8:	40021000 	.word	0x40021000
 800b4fc:	20000694 	.word	0x20000694
 800b500:	40020008 	.word	0x40020008
 800b504:	50000100 	.word	0x50000100
 800b508:	48001400 	.word	0x48001400
 800b50c:	2000095c 	.word	0x2000095c
 800b510:	4002001c 	.word	0x4002001c

0800b514 <HAL_FDCAN_MspInit>:

}


void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b08a      	sub	sp, #40	; 0x28
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b51c:	f107 0314 	add.w	r3, r7, #20
 800b520:	2200      	movs	r2, #0
 800b522:	601a      	str	r2, [r3, #0]
 800b524:	605a      	str	r2, [r3, #4]
 800b526:	609a      	str	r2, [r3, #8]
 800b528:	60da      	str	r2, [r3, #12]
 800b52a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a1c      	ldr	r2, [pc, #112]	; (800b5a4 <HAL_FDCAN_MspInit+0x90>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d131      	bne.n	800b59a <HAL_FDCAN_MspInit+0x86>
  {
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800b536:	4b1c      	ldr	r3, [pc, #112]	; (800b5a8 <HAL_FDCAN_MspInit+0x94>)
 800b538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b53a:	4a1b      	ldr	r2, [pc, #108]	; (800b5a8 <HAL_FDCAN_MspInit+0x94>)
 800b53c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b540:	6593      	str	r3, [r2, #88]	; 0x58
 800b542:	4b19      	ldr	r3, [pc, #100]	; (800b5a8 <HAL_FDCAN_MspInit+0x94>)
 800b544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b54a:	613b      	str	r3, [r7, #16]
 800b54c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b54e:	4b16      	ldr	r3, [pc, #88]	; (800b5a8 <HAL_FDCAN_MspInit+0x94>)
 800b550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b552:	4a15      	ldr	r2, [pc, #84]	; (800b5a8 <HAL_FDCAN_MspInit+0x94>)
 800b554:	f043 0301 	orr.w	r3, r3, #1
 800b558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b55a:	4b13      	ldr	r3, [pc, #76]	; (800b5a8 <HAL_FDCAN_MspInit+0x94>)
 800b55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b55e:	f003 0301 	and.w	r3, r3, #1
 800b562:	60fb      	str	r3, [r7, #12]
 800b564:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b566:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b56a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b56c:	2302      	movs	r3, #2
 800b56e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b570:	2300      	movs	r3, #0
 800b572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b574:	2300      	movs	r3, #0
 800b576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800b578:	2309      	movs	r3, #9
 800b57a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b57c:	f107 0314 	add.w	r3, r7, #20
 800b580:	4619      	mov	r1, r3
 800b582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b586:	f7f7 ffd7 	bl	8003538 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800b58a:	2200      	movs	r2, #0
 800b58c:	2100      	movs	r1, #0
 800b58e:	2015      	movs	r0, #21
 800b590:	f7f6 fb9f 	bl	8001cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800b594:	2015      	movs	r0, #21
 800b596:	f7f6 fbb6 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  }
}
 800b59a:	bf00      	nop
 800b59c:	3728      	adds	r7, #40	; 0x28
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	40006400 	.word	0x40006400
 800b5a8:	40021000 	.word	0x40021000

0800b5ac <HAL_TIM_Base_MspInit>:

}


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b088      	sub	sp, #32
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
	if(htim_base->Instance==TIM1)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a4a      	ldr	r2, [pc, #296]	; (800b6e4 <HAL_TIM_Base_MspInit+0x138>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d114      	bne.n	800b5e8 <HAL_TIM_Base_MspInit+0x3c>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 800b5be:	4b4a      	ldr	r3, [pc, #296]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b5c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5c2:	4a49      	ldr	r2, [pc, #292]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b5c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b5c8:	6613      	str	r3, [r2, #96]	; 0x60
 800b5ca:	4b47      	ldr	r3, [pc, #284]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b5cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5d2:	61fb      	str	r3, [r7, #28]
 800b5d4:	69fb      	ldr	r3, [r7, #28]
		HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2100      	movs	r1, #0
 800b5da:	2019      	movs	r0, #25
 800b5dc:	f7f6 fb79 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800b5e0:	2019      	movs	r0, #25
 800b5e2:	f7f6 fb90 	bl	8001d06 <HAL_NVIC_EnableIRQ>
	}
	else if(htim_base->Instance==TIM17)
	{
		__HAL_RCC_TIM17_CLK_ENABLE();
	}
}
 800b5e6:	e078      	b.n	800b6da <HAL_TIM_Base_MspInit+0x12e>
	else if(htim_base->Instance==TIM6)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a3f      	ldr	r2, [pc, #252]	; (800b6ec <HAL_TIM_Base_MspInit+0x140>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d114      	bne.n	800b61c <HAL_TIM_Base_MspInit+0x70>
		__HAL_RCC_TIM6_CLK_ENABLE();
 800b5f2:	4b3d      	ldr	r3, [pc, #244]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b5f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5f6:	4a3c      	ldr	r2, [pc, #240]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b5f8:	f043 0310 	orr.w	r3, r3, #16
 800b5fc:	6593      	str	r3, [r2, #88]	; 0x58
 800b5fe:	4b3a      	ldr	r3, [pc, #232]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b602:	f003 0310 	and.w	r3, r3, #16
 800b606:	61bb      	str	r3, [r7, #24]
 800b608:	69bb      	ldr	r3, [r7, #24]
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800b60a:	2200      	movs	r2, #0
 800b60c:	2100      	movs	r1, #0
 800b60e:	2036      	movs	r0, #54	; 0x36
 800b610:	f7f6 fb5f 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b614:	2036      	movs	r0, #54	; 0x36
 800b616:	f7f6 fb76 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800b61a:	e05e      	b.n	800b6da <HAL_TIM_Base_MspInit+0x12e>
	else if(htim_base->Instance==TIM7)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a33      	ldr	r2, [pc, #204]	; (800b6f0 <HAL_TIM_Base_MspInit+0x144>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d114      	bne.n	800b650 <HAL_TIM_Base_MspInit+0xa4>
		__HAL_RCC_TIM7_CLK_ENABLE();
 800b626:	4b30      	ldr	r3, [pc, #192]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b62a:	4a2f      	ldr	r2, [pc, #188]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b62c:	f043 0320 	orr.w	r3, r3, #32
 800b630:	6593      	str	r3, [r2, #88]	; 0x58
 800b632:	4b2d      	ldr	r3, [pc, #180]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b636:	f003 0320 	and.w	r3, r3, #32
 800b63a:	617b      	str	r3, [r7, #20]
 800b63c:	697b      	ldr	r3, [r7, #20]
		HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800b63e:	2200      	movs	r2, #0
 800b640:	2100      	movs	r1, #0
 800b642:	2037      	movs	r0, #55	; 0x37
 800b644:	f7f6 fb45 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b648:	2037      	movs	r0, #55	; 0x37
 800b64a:	f7f6 fb5c 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800b64e:	e044      	b.n	800b6da <HAL_TIM_Base_MspInit+0x12e>
	else if(htim_base->Instance==TIM15)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a27      	ldr	r2, [pc, #156]	; (800b6f4 <HAL_TIM_Base_MspInit+0x148>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d114      	bne.n	800b684 <HAL_TIM_Base_MspInit+0xd8>
		__HAL_RCC_TIM15_CLK_ENABLE();
 800b65a:	4b23      	ldr	r3, [pc, #140]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b65c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b65e:	4a22      	ldr	r2, [pc, #136]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b664:	6613      	str	r3, [r2, #96]	; 0x60
 800b666:	4b20      	ldr	r3, [pc, #128]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b66a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b66e:	613b      	str	r3, [r7, #16]
 800b670:	693b      	ldr	r3, [r7, #16]
		HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800b672:	2200      	movs	r2, #0
 800b674:	2100      	movs	r1, #0
 800b676:	2018      	movs	r0, #24
 800b678:	f7f6 fb2b 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800b67c:	2018      	movs	r0, #24
 800b67e:	f7f6 fb42 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800b682:	e02a      	b.n	800b6da <HAL_TIM_Base_MspInit+0x12e>
	else if(htim_base->Instance==TIM16)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a1b      	ldr	r2, [pc, #108]	; (800b6f8 <HAL_TIM_Base_MspInit+0x14c>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d114      	bne.n	800b6b8 <HAL_TIM_Base_MspInit+0x10c>
		__HAL_RCC_TIM16_CLK_ENABLE();
 800b68e:	4b16      	ldr	r3, [pc, #88]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b692:	4a15      	ldr	r2, [pc, #84]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b698:	6613      	str	r3, [r2, #96]	; 0x60
 800b69a:	4b13      	ldr	r3, [pc, #76]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b69c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b69e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6a2:	60fb      	str	r3, [r7, #12]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	2019      	movs	r0, #25
 800b6ac:	f7f6 fb11 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800b6b0:	2019      	movs	r0, #25
 800b6b2:	f7f6 fb28 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800b6b6:	e010      	b.n	800b6da <HAL_TIM_Base_MspInit+0x12e>
	else if(htim_base->Instance==TIM17)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a0f      	ldr	r2, [pc, #60]	; (800b6fc <HAL_TIM_Base_MspInit+0x150>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d10b      	bne.n	800b6da <HAL_TIM_Base_MspInit+0x12e>
		__HAL_RCC_TIM17_CLK_ENABLE();
 800b6c2:	4b09      	ldr	r3, [pc, #36]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b6c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6c6:	4a08      	ldr	r2, [pc, #32]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b6c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b6cc:	6613      	str	r3, [r2, #96]	; 0x60
 800b6ce:	4b06      	ldr	r3, [pc, #24]	; (800b6e8 <HAL_TIM_Base_MspInit+0x13c>)
 800b6d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6d6:	60bb      	str	r3, [r7, #8]
 800b6d8:	68bb      	ldr	r3, [r7, #8]
}
 800b6da:	bf00      	nop
 800b6dc:	3720      	adds	r7, #32
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	40012c00 	.word	0x40012c00
 800b6e8:	40021000 	.word	0x40021000
 800b6ec:	40001000 	.word	0x40001000
 800b6f0:	40001400 	.word	0x40001400
 800b6f4:	40014000 	.word	0x40014000
 800b6f8:	40014400 	.word	0x40014400
 800b6fc:	40014800 	.word	0x40014800

0800b700 <HAL_TIM_MspPostInit>:
		__HAL_RCC_TIM17_CLK_DISABLE();
	}
}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b08c      	sub	sp, #48	; 0x30
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b708:	f107 031c 	add.w	r3, r7, #28
 800b70c:	2200      	movs	r2, #0
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	605a      	str	r2, [r3, #4]
 800b712:	609a      	str	r2, [r3, #8]
 800b714:	60da      	str	r2, [r3, #12]
 800b716:	611a      	str	r2, [r3, #16]
	if(htim->Instance==TIM2)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b720:	d123      	bne.n	800b76a <HAL_TIM_MspPostInit+0x6a>
	{
		if(PWM_Out_EN&(1<<0)) //TIM2 is for PB3, which is first output pin
 800b722:	4b65      	ldr	r3, [pc, #404]	; (800b8b8 <HAL_TIM_MspPostInit+0x1b8>)
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	f003 0301 	and.w	r3, r3, #1
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f000 80bf 	beq.w	800b8ae <HAL_TIM_MspPostInit+0x1ae>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 800b730:	4b62      	ldr	r3, [pc, #392]	; (800b8bc <HAL_TIM_MspPostInit+0x1bc>)
 800b732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b734:	4a61      	ldr	r2, [pc, #388]	; (800b8bc <HAL_TIM_MspPostInit+0x1bc>)
 800b736:	f043 0302 	orr.w	r3, r3, #2
 800b73a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b73c:	4b5f      	ldr	r3, [pc, #380]	; (800b8bc <HAL_TIM_MspPostInit+0x1bc>)
 800b73e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b740:	f003 0302 	and.w	r3, r3, #2
 800b744:	61bb      	str	r3, [r7, #24]
 800b746:	69bb      	ldr	r3, [r7, #24]
			GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b748:	2308      	movs	r3, #8
 800b74a:	61fb      	str	r3, [r7, #28]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b74c:	2302      	movs	r3, #2
 800b74e:	623b      	str	r3, [r7, #32]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b750:	2300      	movs	r3, #0
 800b752:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b754:	2300      	movs	r3, #0
 800b756:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b758:	2301      	movs	r3, #1
 800b75a:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b75c:	f107 031c 	add.w	r3, r7, #28
 800b760:	4619      	mov	r1, r3
 800b762:	4857      	ldr	r0, [pc, #348]	; (800b8c0 <HAL_TIM_MspPostInit+0x1c0>)
 800b764:	f7f7 fee8 	bl	8003538 <HAL_GPIO_Init>
			GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
		}
	}

}
 800b768:	e0a1      	b.n	800b8ae <HAL_TIM_MspPostInit+0x1ae>
	else if(htim->Instance==TIM3)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a55      	ldr	r2, [pc, #340]	; (800b8c4 <HAL_TIM_MspPostInit+0x1c4>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d123      	bne.n	800b7bc <HAL_TIM_MspPostInit+0xbc>
		if(PWM_Out_EN&(1<<1)) //TIM3 is for PB4, which is second output pin
 800b774:	4b50      	ldr	r3, [pc, #320]	; (800b8b8 <HAL_TIM_MspPostInit+0x1b8>)
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	f003 0302 	and.w	r3, r3, #2
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f000 8096 	beq.w	800b8ae <HAL_TIM_MspPostInit+0x1ae>
			__HAL_RCC_GPIOB_CLK_ENABLE();
 800b782:	4b4e      	ldr	r3, [pc, #312]	; (800b8bc <HAL_TIM_MspPostInit+0x1bc>)
 800b784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b786:	4a4d      	ldr	r2, [pc, #308]	; (800b8bc <HAL_TIM_MspPostInit+0x1bc>)
 800b788:	f043 0302 	orr.w	r3, r3, #2
 800b78c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b78e:	4b4b      	ldr	r3, [pc, #300]	; (800b8bc <HAL_TIM_MspPostInit+0x1bc>)
 800b790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b792:	f003 0302 	and.w	r3, r3, #2
 800b796:	617b      	str	r3, [r7, #20]
 800b798:	697b      	ldr	r3, [r7, #20]
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b79a:	2310      	movs	r3, #16
 800b79c:	61fb      	str	r3, [r7, #28]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b79e:	2302      	movs	r3, #2
 800b7a0:	623b      	str	r3, [r7, #32]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b7aa:	2302      	movs	r3, #2
 800b7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b7ae:	f107 031c 	add.w	r3, r7, #28
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	4842      	ldr	r0, [pc, #264]	; (800b8c0 <HAL_TIM_MspPostInit+0x1c0>)
 800b7b6:	f7f7 febf 	bl	8003538 <HAL_GPIO_Init>
}
 800b7ba:	e078      	b.n	800b8ae <HAL_TIM_MspPostInit+0x1ae>
	else if(htim->Instance==TIM4)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a41      	ldr	r2, [pc, #260]	; (800b8c8 <HAL_TIM_MspPostInit+0x1c8>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d122      	bne.n	800b80c <HAL_TIM_MspPostInit+0x10c>
		if(PWM_Out_EN&(1<<3)) //TIM4 is for PB6, which is fourth output pin
 800b7c6:	4b3c      	ldr	r3, [pc, #240]	; (800b8b8 <HAL_TIM_MspPostInit+0x1b8>)
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	f003 0308 	and.w	r3, r3, #8
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d06d      	beq.n	800b8ae <HAL_TIM_MspPostInit+0x1ae>
			__HAL_RCC_GPIOB_CLK_ENABLE();
 800b7d2:	4b3a      	ldr	r3, [pc, #232]	; (800b8bc <HAL_TIM_MspPostInit+0x1bc>)
 800b7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7d6:	4a39      	ldr	r2, [pc, #228]	; (800b8bc <HAL_TIM_MspPostInit+0x1bc>)
 800b7d8:	f043 0302 	orr.w	r3, r3, #2
 800b7dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b7de:	4b37      	ldr	r3, [pc, #220]	; (800b8bc <HAL_TIM_MspPostInit+0x1bc>)
 800b7e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7e2:	f003 0302 	and.w	r3, r3, #2
 800b7e6:	613b      	str	r3, [r7, #16]
 800b7e8:	693b      	ldr	r3, [r7, #16]
			GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b7ea:	2340      	movs	r3, #64	; 0x40
 800b7ec:	61fb      	str	r3, [r7, #28]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	623b      	str	r3, [r7, #32]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800b7fa:	2302      	movs	r3, #2
 800b7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b7fe:	f107 031c 	add.w	r3, r7, #28
 800b802:	4619      	mov	r1, r3
 800b804:	482e      	ldr	r0, [pc, #184]	; (800b8c0 <HAL_TIM_MspPostInit+0x1c0>)
 800b806:	f7f7 fe97 	bl	8003538 <HAL_GPIO_Init>
}
 800b80a:	e050      	b.n	800b8ae <HAL_TIM_MspPostInit+0x1ae>
	else if(htim->Instance==TIM8)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a2e      	ldr	r2, [pc, #184]	; (800b8cc <HAL_TIM_MspPostInit+0x1cc>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d124      	bne.n	800b860 <HAL_TIM_MspPostInit+0x160>
		if(PWM_Out_EN&(1<<4)) //TIM8 is for PA15, which if fourth output pin
 800b816:	4b28      	ldr	r3, [pc, #160]	; (800b8b8 <HAL_TIM_MspPostInit+0x1b8>)
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	f003 0310 	and.w	r3, r3, #16
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d045      	beq.n	800b8ae <HAL_TIM_MspPostInit+0x1ae>
			__HAL_RCC_GPIOA_CLK_ENABLE();
 800b822:	4b26      	ldr	r3, [pc, #152]	; (800b8bc <HAL_TIM_MspPostInit+0x1bc>)
 800b824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b826:	4a25      	ldr	r2, [pc, #148]	; (800b8bc <HAL_TIM_MspPostInit+0x1bc>)
 800b828:	f043 0301 	orr.w	r3, r3, #1
 800b82c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b82e:	4b23      	ldr	r3, [pc, #140]	; (800b8bc <HAL_TIM_MspPostInit+0x1bc>)
 800b830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b832:	f003 0301 	and.w	r3, r3, #1
 800b836:	60fb      	str	r3, [r7, #12]
 800b838:	68fb      	ldr	r3, [r7, #12]
			GPIO_InitStruct.Pin = GPIO_PIN_15;
 800b83a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b83e:	61fb      	str	r3, [r7, #28]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b840:	2302      	movs	r3, #2
 800b842:	623b      	str	r3, [r7, #32]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b844:	2300      	movs	r3, #0
 800b846:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b848:	2300      	movs	r3, #0
 800b84a:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800b84c:	2302      	movs	r3, #2
 800b84e:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b850:	f107 031c 	add.w	r3, r7, #28
 800b854:	4619      	mov	r1, r3
 800b856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b85a:	f7f7 fe6d 	bl	8003538 <HAL_GPIO_Init>
}
 800b85e:	e026      	b.n	800b8ae <HAL_TIM_MspPostInit+0x1ae>
	else if(htim->Instance==TIM17)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a1a      	ldr	r2, [pc, #104]	; (800b8d0 <HAL_TIM_MspPostInit+0x1d0>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d121      	bne.n	800b8ae <HAL_TIM_MspPostInit+0x1ae>
		if(PWM_Out_EN&(1<<2)) //TIM17 is for PB5, which is third output pin
 800b86a:	4b13      	ldr	r3, [pc, #76]	; (800b8b8 <HAL_TIM_MspPostInit+0x1b8>)
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	f003 0304 	and.w	r3, r3, #4
 800b872:	2b00      	cmp	r3, #0
 800b874:	d01b      	beq.n	800b8ae <HAL_TIM_MspPostInit+0x1ae>
			__HAL_RCC_GPIOB_CLK_ENABLE();
 800b876:	4b11      	ldr	r3, [pc, #68]	; (800b8bc <HAL_TIM_MspPostInit+0x1bc>)
 800b878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b87a:	4a10      	ldr	r2, [pc, #64]	; (800b8bc <HAL_TIM_MspPostInit+0x1bc>)
 800b87c:	f043 0302 	orr.w	r3, r3, #2
 800b880:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b882:	4b0e      	ldr	r3, [pc, #56]	; (800b8bc <HAL_TIM_MspPostInit+0x1bc>)
 800b884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b886:	f003 0302 	and.w	r3, r3, #2
 800b88a:	60bb      	str	r3, [r7, #8]
 800b88c:	68bb      	ldr	r3, [r7, #8]
			GPIO_InitStruct.Pin = GPIO_PIN_5;
 800b88e:	2320      	movs	r3, #32
 800b890:	61fb      	str	r3, [r7, #28]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b892:	2302      	movs	r3, #2
 800b894:	623b      	str	r3, [r7, #32]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b896:	2300      	movs	r3, #0
 800b898:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b89a:	2300      	movs	r3, #0
 800b89c:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800b89e:	230a      	movs	r3, #10
 800b8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b8a2:	f107 031c 	add.w	r3, r7, #28
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	4805      	ldr	r0, [pc, #20]	; (800b8c0 <HAL_TIM_MspPostInit+0x1c0>)
 800b8aa:	f7f7 fe45 	bl	8003538 <HAL_GPIO_Init>
}
 800b8ae:	bf00      	nop
 800b8b0:	3730      	adds	r7, #48	; 0x30
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	200009bc 	.word	0x200009bc
 800b8bc:	40021000 	.word	0x40021000
 800b8c0:	48000400 	.word	0x48000400
 800b8c4:	40000400 	.word	0x40000400
 800b8c8:	40000800 	.word	0x40000800
 800b8cc:	40013400 	.word	0x40013400
 800b8d0:	40014800 	.word	0x40014800

0800b8d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b087      	sub	sp, #28
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM2)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8e4:	d10c      	bne.n	800b900 <HAL_TIM_PWM_MspInit+0x2c>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 800b8e6:	4b24      	ldr	r3, [pc, #144]	; (800b978 <HAL_TIM_PWM_MspInit+0xa4>)
 800b8e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ea:	4a23      	ldr	r2, [pc, #140]	; (800b978 <HAL_TIM_PWM_MspInit+0xa4>)
 800b8ec:	f043 0301 	orr.w	r3, r3, #1
 800b8f0:	6593      	str	r3, [r2, #88]	; 0x58
 800b8f2:	4b21      	ldr	r3, [pc, #132]	; (800b978 <HAL_TIM_PWM_MspInit+0xa4>)
 800b8f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8f6:	f003 0301 	and.w	r3, r3, #1
 800b8fa:	617b      	str	r3, [r7, #20]
 800b8fc:	697b      	ldr	r3, [r7, #20]
	}
	else if(htim_pwm->Instance==TIM8)
	{
		__HAL_RCC_TIM8_CLK_ENABLE();
	}
}
 800b8fe:	e034      	b.n	800b96a <HAL_TIM_PWM_MspInit+0x96>
	else if(htim_pwm->Instance==TIM3)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a1d      	ldr	r2, [pc, #116]	; (800b97c <HAL_TIM_PWM_MspInit+0xa8>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d10c      	bne.n	800b924 <HAL_TIM_PWM_MspInit+0x50>
		__HAL_RCC_TIM3_CLK_ENABLE();
 800b90a:	4b1b      	ldr	r3, [pc, #108]	; (800b978 <HAL_TIM_PWM_MspInit+0xa4>)
 800b90c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b90e:	4a1a      	ldr	r2, [pc, #104]	; (800b978 <HAL_TIM_PWM_MspInit+0xa4>)
 800b910:	f043 0302 	orr.w	r3, r3, #2
 800b914:	6593      	str	r3, [r2, #88]	; 0x58
 800b916:	4b18      	ldr	r3, [pc, #96]	; (800b978 <HAL_TIM_PWM_MspInit+0xa4>)
 800b918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b91a:	f003 0302 	and.w	r3, r3, #2
 800b91e:	613b      	str	r3, [r7, #16]
 800b920:	693b      	ldr	r3, [r7, #16]
}
 800b922:	e022      	b.n	800b96a <HAL_TIM_PWM_MspInit+0x96>
	else if(htim_pwm->Instance==TIM4)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a15      	ldr	r2, [pc, #84]	; (800b980 <HAL_TIM_PWM_MspInit+0xac>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d10c      	bne.n	800b948 <HAL_TIM_PWM_MspInit+0x74>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800b92e:	4b12      	ldr	r3, [pc, #72]	; (800b978 <HAL_TIM_PWM_MspInit+0xa4>)
 800b930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b932:	4a11      	ldr	r2, [pc, #68]	; (800b978 <HAL_TIM_PWM_MspInit+0xa4>)
 800b934:	f043 0304 	orr.w	r3, r3, #4
 800b938:	6593      	str	r3, [r2, #88]	; 0x58
 800b93a:	4b0f      	ldr	r3, [pc, #60]	; (800b978 <HAL_TIM_PWM_MspInit+0xa4>)
 800b93c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b93e:	f003 0304 	and.w	r3, r3, #4
 800b942:	60fb      	str	r3, [r7, #12]
 800b944:	68fb      	ldr	r3, [r7, #12]
}
 800b946:	e010      	b.n	800b96a <HAL_TIM_PWM_MspInit+0x96>
	else if(htim_pwm->Instance==TIM8)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a0d      	ldr	r2, [pc, #52]	; (800b984 <HAL_TIM_PWM_MspInit+0xb0>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d10b      	bne.n	800b96a <HAL_TIM_PWM_MspInit+0x96>
		__HAL_RCC_TIM8_CLK_ENABLE();
 800b952:	4b09      	ldr	r3, [pc, #36]	; (800b978 <HAL_TIM_PWM_MspInit+0xa4>)
 800b954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b956:	4a08      	ldr	r2, [pc, #32]	; (800b978 <HAL_TIM_PWM_MspInit+0xa4>)
 800b958:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b95c:	6613      	str	r3, [r2, #96]	; 0x60
 800b95e:	4b06      	ldr	r3, [pc, #24]	; (800b978 <HAL_TIM_PWM_MspInit+0xa4>)
 800b960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b966:	60bb      	str	r3, [r7, #8]
 800b968:	68bb      	ldr	r3, [r7, #8]
}
 800b96a:	bf00      	nop
 800b96c:	371c      	adds	r7, #28
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	40021000 	.word	0x40021000
 800b97c:	40000400 	.word	0x40000400
 800b980:	40000800 	.word	0x40000800
 800b984:	40013400 	.word	0x40013400

0800b988 <HAL_TIM_IC_MspInit>:
	}

}

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b08e      	sub	sp, #56	; 0x38
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b994:	2200      	movs	r2, #0
 800b996:	601a      	str	r2, [r3, #0]
 800b998:	605a      	str	r2, [r3, #4]
 800b99a:	609a      	str	r2, [r3, #8]
 800b99c:	60da      	str	r2, [r3, #12]
 800b99e:	611a      	str	r2, [r3, #16]

	if(htim_ic->Instance==TIM2)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9a8:	d130      	bne.n	800ba0c <HAL_TIM_IC_MspInit+0x84>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 800b9aa:	4b51      	ldr	r3, [pc, #324]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800b9ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9ae:	4a50      	ldr	r2, [pc, #320]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800b9b0:	f043 0301 	orr.w	r3, r3, #1
 800b9b4:	6593      	str	r3, [r2, #88]	; 0x58
 800b9b6:	4b4e      	ldr	r3, [pc, #312]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800b9b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9ba:	f003 0301 	and.w	r3, r3, #1
 800b9be:	623b      	str	r3, [r7, #32]
 800b9c0:	6a3b      	ldr	r3, [r7, #32]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800b9c2:	4b4b      	ldr	r3, [pc, #300]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800b9c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9c6:	4a4a      	ldr	r2, [pc, #296]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800b9c8:	f043 0302 	orr.w	r3, r3, #2
 800b9cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b9ce:	4b48      	ldr	r3, [pc, #288]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800b9d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9d2:	f003 0302 	and.w	r3, r3, #2
 800b9d6:	61fb      	str	r3, [r7, #28]
 800b9d8:	69fb      	ldr	r3, [r7, #28]

		GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b9da:	2308      	movs	r3, #8
 800b9dc:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9de:	2302      	movs	r3, #2
 800b9e0:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b9ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	483f      	ldr	r0, [pc, #252]	; (800baf4 <HAL_TIM_IC_MspInit+0x16c>)
 800b9f6:	f7f7 fd9f 	bl	8003538 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	201c      	movs	r0, #28
 800ba00:	f7f6 f967 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ba04:	201c      	movs	r0, #28
 800ba06:	f7f6 f97e 	bl	8001d06 <HAL_NVIC_EnableIRQ>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

		HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
	}
}
 800ba0a:	e06c      	b.n	800bae6 <HAL_TIM_IC_MspInit+0x15e>
	else if(htim_ic->Instance==TIM4)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a39      	ldr	r2, [pc, #228]	; (800baf8 <HAL_TIM_IC_MspInit+0x170>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d130      	bne.n	800ba78 <HAL_TIM_IC_MspInit+0xf0>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800ba16:	4b36      	ldr	r3, [pc, #216]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800ba18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba1a:	4a35      	ldr	r2, [pc, #212]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800ba1c:	f043 0304 	orr.w	r3, r3, #4
 800ba20:	6593      	str	r3, [r2, #88]	; 0x58
 800ba22:	4b33      	ldr	r3, [pc, #204]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800ba24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba26:	f003 0304 	and.w	r3, r3, #4
 800ba2a:	61bb      	str	r3, [r7, #24]
 800ba2c:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800ba2e:	4b30      	ldr	r3, [pc, #192]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800ba30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba32:	4a2f      	ldr	r2, [pc, #188]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800ba34:	f043 0302 	orr.w	r3, r3, #2
 800ba38:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba3a:	4b2d      	ldr	r3, [pc, #180]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800ba3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba3e:	f003 0302 	and.w	r3, r3, #2
 800ba42:	617b      	str	r3, [r7, #20]
 800ba44:	697b      	ldr	r3, [r7, #20]
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ba46:	2340      	movs	r3, #64	; 0x40
 800ba48:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba52:	2300      	movs	r3, #0
 800ba54:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800ba56:	2302      	movs	r3, #2
 800ba58:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ba5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba5e:	4619      	mov	r1, r3
 800ba60:	4824      	ldr	r0, [pc, #144]	; (800baf4 <HAL_TIM_IC_MspInit+0x16c>)
 800ba62:	f7f7 fd69 	bl	8003538 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800ba66:	2200      	movs	r2, #0
 800ba68:	2100      	movs	r1, #0
 800ba6a:	201e      	movs	r0, #30
 800ba6c:	f7f6 f931 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800ba70:	201e      	movs	r0, #30
 800ba72:	f7f6 f948 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800ba76:	e036      	b.n	800bae6 <HAL_TIM_IC_MspInit+0x15e>
	else if(htim_ic->Instance==TIM8)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a1f      	ldr	r2, [pc, #124]	; (800bafc <HAL_TIM_IC_MspInit+0x174>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d131      	bne.n	800bae6 <HAL_TIM_IC_MspInit+0x15e>
		__HAL_RCC_TIM8_CLK_ENABLE();
 800ba82:	4b1b      	ldr	r3, [pc, #108]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800ba84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba86:	4a1a      	ldr	r2, [pc, #104]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800ba88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ba8c:	6613      	str	r3, [r2, #96]	; 0x60
 800ba8e:	4b18      	ldr	r3, [pc, #96]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800ba90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba96:	613b      	str	r3, [r7, #16]
 800ba98:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800ba9a:	4b15      	ldr	r3, [pc, #84]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800ba9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba9e:	4a14      	ldr	r2, [pc, #80]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800baa0:	f043 0301 	orr.w	r3, r3, #1
 800baa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800baa6:	4b12      	ldr	r3, [pc, #72]	; (800baf0 <HAL_TIM_IC_MspInit+0x168>)
 800baa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baaa:	f003 0301 	and.w	r3, r3, #1
 800baae:	60fb      	str	r3, [r7, #12]
 800bab0:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_15;
 800bab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bab6:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bab8:	2302      	movs	r3, #2
 800baba:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800babc:	2300      	movs	r3, #0
 800babe:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bac0:	2300      	movs	r3, #0
 800bac2:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800bac4:	2302      	movs	r3, #2
 800bac6:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bacc:	4619      	mov	r1, r3
 800bace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bad2:	f7f7 fd31 	bl	8003538 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800bad6:	2200      	movs	r2, #0
 800bad8:	2100      	movs	r1, #0
 800bada:	202e      	movs	r0, #46	; 0x2e
 800badc:	f7f6 f8f9 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800bae0:	202e      	movs	r0, #46	; 0x2e
 800bae2:	f7f6 f910 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800bae6:	bf00      	nop
 800bae8:	3738      	adds	r7, #56	; 0x38
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	40021000 	.word	0x40021000
 800baf4:	48000400 	.word	0x48000400
 800baf8:	40000800 	.word	0x40000800
 800bafc:	40013400 	.word	0x40013400

0800bb00 <HAL_LPTIM_MspInit>:
		HAL_NVIC_DisableIRQ(TIM8_CC_IRQn);
	}
}

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
	if(hlptim->Instance==LPTIM1)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a0d      	ldr	r2, [pc, #52]	; (800bb44 <HAL_LPTIM_MspInit+0x44>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d113      	bne.n	800bb3a <HAL_LPTIM_MspInit+0x3a>
	{
		__HAL_RCC_LPTIM1_CLK_ENABLE();
 800bb12:	4b0d      	ldr	r3, [pc, #52]	; (800bb48 <HAL_LPTIM_MspInit+0x48>)
 800bb14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb16:	4a0c      	ldr	r2, [pc, #48]	; (800bb48 <HAL_LPTIM_MspInit+0x48>)
 800bb18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb1c:	6593      	str	r3, [r2, #88]	; 0x58
 800bb1e:	4b0a      	ldr	r3, [pc, #40]	; (800bb48 <HAL_LPTIM_MspInit+0x48>)
 800bb20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb26:	60fb      	str	r3, [r7, #12]
 800bb28:	68fb      	ldr	r3, [r7, #12]

		HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	2031      	movs	r0, #49	; 0x31
 800bb30:	f7f6 f8cf 	bl	8001cd2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800bb34:	2031      	movs	r0, #49	; 0x31
 800bb36:	f7f6 f8e6 	bl	8001d06 <HAL_NVIC_EnableIRQ>
	}
}
 800bb3a:	bf00      	nop
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	40007c00 	.word	0x40007c00
 800bb48:	40021000 	.word	0x40021000

0800bb4c <NMI_Handler>:

//external variables
extern uint8_t CanTimerFlag;

void NMI_Handler(void)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	af00      	add	r7, sp, #0

}
 800bb50:	bf00      	nop
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <HardFault_Handler>:

void HardFault_Handler(void)
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	af00      	add	r7, sp, #0
  while (1)
 800bb5e:	e7fe      	b.n	800bb5e <HardFault_Handler+0x4>

0800bb60 <MemManage_Handler>:

  }
}

void MemManage_Handler(void)
{
 800bb60:	b480      	push	{r7}
 800bb62:	af00      	add	r7, sp, #0
  while (1)
 800bb64:	e7fe      	b.n	800bb64 <MemManage_Handler+0x4>

0800bb66 <BusFault_Handler>:

  }
}

void BusFault_Handler(void)
{
 800bb66:	b480      	push	{r7}
 800bb68:	af00      	add	r7, sp, #0
  while (1)
 800bb6a:	e7fe      	b.n	800bb6a <BusFault_Handler+0x4>

0800bb6c <UsageFault_Handler>:

  }
}

void UsageFault_Handler(void)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	af00      	add	r7, sp, #0
  while (1)
 800bb70:	e7fe      	b.n	800bb70 <UsageFault_Handler+0x4>

0800bb72 <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 800bb72:	b480      	push	{r7}
 800bb74:	af00      	add	r7, sp, #0

}
 800bb76:	bf00      	nop
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 800bb80:	b480      	push	{r7}
 800bb82:	af00      	add	r7, sp, #0

}
 800bb84:	bf00      	nop
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr

0800bb8e <PendSV_Handler>:

void PendSV_Handler(void)
{
 800bb8e:	b480      	push	{r7}
 800bb90:	af00      	add	r7, sp, #0

}
 800bb92:	bf00      	nop
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <SysTick_Handler>:

void SysTick_Handler(void)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800bba0:	f7f4 fb8c 	bl	80002bc <HAL_IncTick>
}
 800bba4:	bf00      	nop
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <DMA1_Channel1_IRQHandler>:


void DMA1_Channel1_IRQHandler(void)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 800bbac:	4802      	ldr	r0, [pc, #8]	; (800bbb8 <DMA1_Channel1_IRQHandler+0x10>)
 800bbae:	f7f6 fa41 	bl	8002034 <HAL_DMA_IRQHandler>
}
 800bbb2:	bf00      	nop
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20000694 	.word	0x20000694

0800bbbc <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800bbc0:	4802      	ldr	r0, [pc, #8]	; (800bbcc <DMA1_Channel2_IRQHandler+0x10>)
 800bbc2:	f7f6 fa37 	bl	8002034 <HAL_DMA_IRQHandler>
}
 800bbc6:	bf00      	nop
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	2000095c 	.word	0x2000095c

0800bbd0 <FDCAN1_IT0_IRQHandler>:


void FDCAN1_IT0_IRQHandler(void)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(&hfdcan);
 800bbd4:	4802      	ldr	r0, [pc, #8]	; (800bbe0 <FDCAN1_IT0_IRQHandler+0x10>)
 800bbd6:	f7f6 ffd9 	bl	8002b8c <HAL_FDCAN_IRQHandler>
}
 800bbda:	bf00      	nop
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	20000420 	.word	0x20000420

0800bbe4 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 800bbe8:	4802      	ldr	r0, [pc, #8]	; (800bbf4 <TIM6_DAC_IRQHandler+0x10>)
 800bbea:	f7f9 fa66 	bl	80050ba <HAL_TIM_IRQHandler>
}
 800bbee:	bf00      	nop
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	200007b8 	.word	0x200007b8

0800bbf8 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim7);
 800bbfc:	4802      	ldr	r0, [pc, #8]	; (800bc08 <TIM7_IRQHandler+0x10>)
 800bbfe:	f7f9 fa5c 	bl	80050ba <HAL_TIM_IRQHandler>
}
 800bc02:	bf00      	nop
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	20000a90 	.word	0x20000a90

0800bc0c <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	af00      	add	r7, sp, #0
	//we don't care or want to do anything with TIM1 BRK
	HAL_TIM_IRQHandler(&htim15);
 800bc10:	4802      	ldr	r0, [pc, #8]	; (800bc1c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800bc12:	f7f9 fa52 	bl	80050ba <HAL_TIM_IRQHandler>
}
 800bc16:	bf00      	nop
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	20000310 	.word	0x20000310

0800bc20 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	af00      	add	r7, sp, #0
	//this will work because IRQHandler checks to see what event happened
	//however, IRQHandler is not very efficient function for the things we are using here, code could be faster checking registers and calling callback function directly
	//but no time for writing that now
	HAL_TIM_IRQHandler(&htim1);
 800bc24:	4803      	ldr	r0, [pc, #12]	; (800bc34 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800bc26:	f7f9 fa48 	bl	80050ba <HAL_TIM_IRQHandler>
	HAL_TIM_IRQHandler(&htim16);
 800bc2a:	4803      	ldr	r0, [pc, #12]	; (800bc38 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800bc2c:	f7f9 fa45 	bl	80050ba <HAL_TIM_IRQHandler>
}
 800bc30:	bf00      	nop
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	20000804 	.word	0x20000804
 800bc38:	20000a50 	.word	0x20000a50

0800bc3c <TIM2_IRQHandler>:

//it seems like the interrupts for PWM inputs aren't a thing
void TIM2_IRQHandler(void)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800bc40:	4802      	ldr	r0, [pc, #8]	; (800bc4c <TIM2_IRQHandler+0x10>)
 800bc42:	f7f9 fa3a 	bl	80050ba <HAL_TIM_IRQHandler>
}
 800bc46:	bf00      	nop
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	20000914 	.word	0x20000914

0800bc50 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim4);
 800bc54:	4802      	ldr	r0, [pc, #8]	; (800bc60 <TIM4_IRQHandler+0x10>)
 800bc56:	f7f9 fa30 	bl	80050ba <HAL_TIM_IRQHandler>
}
 800bc5a:	bf00      	nop
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	200001bc 	.word	0x200001bc

0800bc64 <TIM8_CC_IRQHandler>:

void TIM8_CC_IRQHandler(void)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim8);
 800bc68:	4802      	ldr	r0, [pc, #8]	; (800bc74 <TIM8_CC_IRQHandler+0x10>)
 800bc6a:	f7f9 fa26 	bl	80050ba <HAL_TIM_IRQHandler>
}
 800bc6e:	bf00      	nop
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	20000138 	.word	0x20000138

0800bc78 <LPTIM1_IRQHandler>:

void LPTIM1_IRQHandler(void)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	af00      	add	r7, sp, #0
	HAL_LPTIM_IRQHandler(&hlptim1);
 800bc7c:	4802      	ldr	r0, [pc, #8]	; (800bc88 <LPTIM1_IRQHandler+0x10>)
 800bc7e:	f7f7 ff3d 	bl	8003afc <HAL_LPTIM_IRQHandler>
}
 800bc82:	bf00      	nop
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	20000650 	.word	0x20000650

0800bc8c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800bc90:	2008      	movs	r0, #8
 800bc92:	f7f7 fe1d 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
}
 800bc96:	bf00      	nop
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800bc9e:	2020      	movs	r0, #32
 800bca0:	f7f7 fe16 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800bca4:	2040      	movs	r0, #64	; 0x40
 800bca6:	f7f7 fe13 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
}
 800bcaa:	bf00      	nop
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800bcb2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bcb6:	f7f7 fe0b 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
}
 800bcba:	bf00      	nop
 800bcbc:	bd80      	pop	{r7, pc}
	...

0800bcc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800bcc4:	4b08      	ldr	r3, [pc, #32]	; (800bce8 <SystemInit+0x28>)
 800bcc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcca:	4a07      	ldr	r2, [pc, #28]	; (800bce8 <SystemInit+0x28>)
 800bccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bcd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bcd4:	4b04      	ldr	r3, [pc, #16]	; (800bce8 <SystemInit+0x28>)
 800bcd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bcda:	609a      	str	r2, [r3, #8]
#endif
}
 800bcdc:	bf00      	nop
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	e000ed00 	.word	0xe000ed00

0800bcec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800bcec:	480d      	ldr	r0, [pc, #52]	; (800bd24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800bcee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800bcf0:	480d      	ldr	r0, [pc, #52]	; (800bd28 <LoopForever+0x6>)
  ldr r1, =_edata
 800bcf2:	490e      	ldr	r1, [pc, #56]	; (800bd2c <LoopForever+0xa>)
  ldr r2, =_sidata
 800bcf4:	4a0e      	ldr	r2, [pc, #56]	; (800bd30 <LoopForever+0xe>)
  movs r3, #0
 800bcf6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800bcf8:	e002      	b.n	800bd00 <LoopCopyDataInit>

0800bcfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bcfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bcfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bcfe:	3304      	adds	r3, #4

0800bd00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bd00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bd02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bd04:	d3f9      	bcc.n	800bcfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bd06:	4a0b      	ldr	r2, [pc, #44]	; (800bd34 <LoopForever+0x12>)
  ldr r4, =_ebss
 800bd08:	4c0b      	ldr	r4, [pc, #44]	; (800bd38 <LoopForever+0x16>)
  movs r3, #0
 800bd0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bd0c:	e001      	b.n	800bd12 <LoopFillZerobss>

0800bd0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bd0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bd10:	3204      	adds	r2, #4

0800bd12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bd12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bd14:	d3fb      	bcc.n	800bd0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800bd16:	f7ff ffd3 	bl	800bcc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bd1a:	f000 f811 	bl	800bd40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800bd1e:	f7fc fbf3 	bl	8008508 <main>

0800bd22 <LoopForever>:

LoopForever:
    b LoopForever
 800bd22:	e7fe      	b.n	800bd22 <LoopForever>
  ldr   r0, =_estack
 800bd24:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800bd28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bd2c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800bd30:	0800bed0 	.word	0x0800bed0
  ldr r2, =_sbss
 800bd34:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800bd38:	20000b34 	.word	0x20000b34

0800bd3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800bd3c:	e7fe      	b.n	800bd3c <ADC1_2_IRQHandler>
	...

0800bd40 <__libc_init_array>:
 800bd40:	b570      	push	{r4, r5, r6, lr}
 800bd42:	4e0d      	ldr	r6, [pc, #52]	; (800bd78 <__libc_init_array+0x38>)
 800bd44:	4c0d      	ldr	r4, [pc, #52]	; (800bd7c <__libc_init_array+0x3c>)
 800bd46:	1ba4      	subs	r4, r4, r6
 800bd48:	10a4      	asrs	r4, r4, #2
 800bd4a:	2500      	movs	r5, #0
 800bd4c:	42a5      	cmp	r5, r4
 800bd4e:	d109      	bne.n	800bd64 <__libc_init_array+0x24>
 800bd50:	4e0b      	ldr	r6, [pc, #44]	; (800bd80 <__libc_init_array+0x40>)
 800bd52:	4c0c      	ldr	r4, [pc, #48]	; (800bd84 <__libc_init_array+0x44>)
 800bd54:	f000 f820 	bl	800bd98 <_init>
 800bd58:	1ba4      	subs	r4, r4, r6
 800bd5a:	10a4      	asrs	r4, r4, #2
 800bd5c:	2500      	movs	r5, #0
 800bd5e:	42a5      	cmp	r5, r4
 800bd60:	d105      	bne.n	800bd6e <__libc_init_array+0x2e>
 800bd62:	bd70      	pop	{r4, r5, r6, pc}
 800bd64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd68:	4798      	blx	r3
 800bd6a:	3501      	adds	r5, #1
 800bd6c:	e7ee      	b.n	800bd4c <__libc_init_array+0xc>
 800bd6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd72:	4798      	blx	r3
 800bd74:	3501      	adds	r5, #1
 800bd76:	e7f2      	b.n	800bd5e <__libc_init_array+0x1e>
 800bd78:	0800bec8 	.word	0x0800bec8
 800bd7c:	0800bec8 	.word	0x0800bec8
 800bd80:	0800bec8 	.word	0x0800bec8
 800bd84:	0800becc 	.word	0x0800becc

0800bd88 <memset>:
 800bd88:	4402      	add	r2, r0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d100      	bne.n	800bd92 <memset+0xa>
 800bd90:	4770      	bx	lr
 800bd92:	f803 1b01 	strb.w	r1, [r3], #1
 800bd96:	e7f9      	b.n	800bd8c <memset+0x4>

0800bd98 <_init>:
 800bd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9a:	bf00      	nop
 800bd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd9e:	bc08      	pop	{r3}
 800bda0:	469e      	mov	lr, r3
 800bda2:	4770      	bx	lr

0800bda4 <_fini>:
 800bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda6:	bf00      	nop
 800bda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdaa:	bc08      	pop	{r3}
 800bdac:	469e      	mov	lr, r3
 800bdae:	4770      	bx	lr
