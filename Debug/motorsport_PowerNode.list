
motorsport_PowerNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003724  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080038fc  080038fc  000138fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003954  08003954  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08003954  08003954  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003954  08003954  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  0800395c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000044  080039a0  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  080039a0  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d172  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f65  00000000  00000000  0002d1e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af8  00000000  00000000  0002f150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f0  00000000  00000000  0002fc48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ebd5  00000000  00000000  00030638  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000945b  00000000  00000000  0004f20d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c887d  00000000  00000000  00058668  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120ee5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b5c  00000000  00000000  00120f60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000044 	.word	0x20000044
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080038e4 	.word	0x080038e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000048 	.word	0x20000048
 8000214:	080038e4 	.word	0x080038e4

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f000 f95a 	bl	80004dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f003 fa2b 	bl	8003694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f966 	bl	8000542 <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f000 f932 	bl	80004f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	20000040 	.word	0x20000040
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	20000060 	.word	0x20000060
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000060 	.word	0x20000060

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f003 0307 	and.w	r3, r3, #7
 800034a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <__NVIC_SetPriorityGrouping+0x44>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000352:	68ba      	ldr	r2, [r7, #8]
 8000354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000358:	4013      	ands	r3, r2
 800035a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <__NVIC_SetPriorityGrouping+0x44>)
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	60d3      	str	r3, [r2, #12]
}
 8000374:	bf00      	nop
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <__NVIC_GetPriorityGrouping+0x18>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	0a1b      	lsrs	r3, r3, #8
 800038e:	f003 0307 	and.w	r3, r3, #7
}
 8000392:	4618      	mov	r0, r3
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db0b      	blt.n	80003ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	f003 021f 	and.w	r2, r3, #31
 80003b8:	4907      	ldr	r1, [pc, #28]	; (80003d8 <__NVIC_EnableIRQ+0x38>)
 80003ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003be:	095b      	lsrs	r3, r3, #5
 80003c0:	2001      	movs	r0, #1
 80003c2:	fa00 f202 	lsl.w	r2, r0, r2
 80003c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000e100 	.word	0xe000e100

080003dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	6039      	str	r1, [r7, #0]
 80003e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db0a      	blt.n	8000406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	b2da      	uxtb	r2, r3
 80003f4:	490c      	ldr	r1, [pc, #48]	; (8000428 <__NVIC_SetPriority+0x4c>)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	0112      	lsls	r2, r2, #4
 80003fc:	b2d2      	uxtb	r2, r2
 80003fe:	440b      	add	r3, r1
 8000400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000404:	e00a      	b.n	800041c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	b2da      	uxtb	r2, r3
 800040a:	4908      	ldr	r1, [pc, #32]	; (800042c <__NVIC_SetPriority+0x50>)
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	f003 030f 	and.w	r3, r3, #15
 8000412:	3b04      	subs	r3, #4
 8000414:	0112      	lsls	r2, r2, #4
 8000416:	b2d2      	uxtb	r2, r2
 8000418:	440b      	add	r3, r1
 800041a:	761a      	strb	r2, [r3, #24]
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	e000e100 	.word	0xe000e100
 800042c:	e000ed00 	.word	0xe000ed00

08000430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000430:	b480      	push	{r7}
 8000432:	b089      	sub	sp, #36	; 0x24
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f003 0307 	and.w	r3, r3, #7
 8000442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000444:	69fb      	ldr	r3, [r7, #28]
 8000446:	f1c3 0307 	rsb	r3, r3, #7
 800044a:	2b04      	cmp	r3, #4
 800044c:	bf28      	it	cs
 800044e:	2304      	movcs	r3, #4
 8000450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	3304      	adds	r3, #4
 8000456:	2b06      	cmp	r3, #6
 8000458:	d902      	bls.n	8000460 <NVIC_EncodePriority+0x30>
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	3b03      	subs	r3, #3
 800045e:	e000      	b.n	8000462 <NVIC_EncodePriority+0x32>
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000464:	f04f 32ff 	mov.w	r2, #4294967295
 8000468:	69bb      	ldr	r3, [r7, #24]
 800046a:	fa02 f303 	lsl.w	r3, r2, r3
 800046e:	43da      	mvns	r2, r3
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	401a      	ands	r2, r3
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000478:	f04f 31ff 	mov.w	r1, #4294967295
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	43d9      	mvns	r1, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000488:	4313      	orrs	r3, r2
         );
}
 800048a:	4618      	mov	r0, r3
 800048c:	3724      	adds	r7, #36	; 0x24
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004a8:	d301      	bcc.n	80004ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004aa:	2301      	movs	r3, #1
 80004ac:	e00f      	b.n	80004ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <SysTick_Config+0x40>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	3b01      	subs	r3, #1
 80004b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004b6:	210f      	movs	r1, #15
 80004b8:	f04f 30ff 	mov.w	r0, #4294967295
 80004bc:	f7ff ff8e 	bl	80003dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <SysTick_Config+0x40>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004c6:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <SysTick_Config+0x40>)
 80004c8:	2207      	movs	r2, #7
 80004ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004cc:	2300      	movs	r3, #0
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	e000e010 	.word	0xe000e010

080004dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f7ff ff29 	bl	800033c <__NVIC_SetPriorityGrouping>
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b086      	sub	sp, #24
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	4603      	mov	r3, r0
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
 80004fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000500:	f7ff ff40 	bl	8000384 <__NVIC_GetPriorityGrouping>
 8000504:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	68b9      	ldr	r1, [r7, #8]
 800050a:	6978      	ldr	r0, [r7, #20]
 800050c:	f7ff ff90 	bl	8000430 <NVIC_EncodePriority>
 8000510:	4602      	mov	r2, r0
 8000512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000516:	4611      	mov	r1, r2
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ff5f 	bl	80003dc <__NVIC_SetPriority>
}
 800051e:	bf00      	nop
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff33 	bl	80003a0 <__NVIC_EnableIRQ>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ffa4 	bl	8000498 <SysTick_Config>
 8000550:	4603      	mov	r3, r0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000576:	f003 031f 	and.w	r3, r3, #31
 800057a:	2204      	movs	r2, #4
 800057c:	409a      	lsls	r2, r3
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	4013      	ands	r3, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	d026      	beq.n	80005d4 <HAL_DMA_IRQHandler+0x7a>
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	2b00      	cmp	r3, #0
 800058e:	d021      	beq.n	80005d4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f003 0320 	and.w	r3, r3, #32
 800059a:	2b00      	cmp	r3, #0
 800059c:	d107      	bne.n	80005ae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f022 0204 	bic.w	r2, r2, #4
 80005ac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b2:	f003 021f 	and.w	r2, r3, #31
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ba:	2104      	movs	r1, #4
 80005bc:	fa01 f202 	lsl.w	r2, r1, r2
 80005c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d071      	beq.n	80006ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80005d2:	e06c      	b.n	80006ae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d8:	f003 031f 	and.w	r3, r3, #31
 80005dc:	2202      	movs	r2, #2
 80005de:	409a      	lsls	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4013      	ands	r3, r2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d02e      	beq.n	8000646 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d029      	beq.n	8000646 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 0320 	and.w	r3, r3, #32
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d10b      	bne.n	8000618 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f022 020a 	bic.w	r2, r2, #10
 800060e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2201      	movs	r2, #1
 8000614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061c:	f003 021f 	and.w	r2, r3, #31
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	2102      	movs	r1, #2
 8000626:	fa01 f202 	lsl.w	r2, r1, r2
 800062a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2200      	movs	r2, #0
 8000630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000638:	2b00      	cmp	r3, #0
 800063a:	d038      	beq.n	80006ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000644:	e033      	b.n	80006ae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064a:	f003 031f 	and.w	r3, r3, #31
 800064e:	2208      	movs	r2, #8
 8000650:	409a      	lsls	r2, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	4013      	ands	r3, r2
 8000656:	2b00      	cmp	r3, #0
 8000658:	d02a      	beq.n	80006b0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	f003 0308 	and.w	r3, r3, #8
 8000660:	2b00      	cmp	r3, #0
 8000662:	d025      	beq.n	80006b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f022 020e 	bic.w	r2, r2, #14
 8000672:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000678:	f003 021f 	and.w	r2, r3, #31
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	2101      	movs	r1, #1
 8000682:	fa01 f202 	lsl.w	r2, r1, r2
 8000686:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2201      	movs	r2, #1
 800068c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2201      	movs	r2, #1
 8000692:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d004      	beq.n	80006b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
}
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d101      	bne.n	80006ca <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e147      	b.n	800095a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d106      	bne.n	80006e4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f002 fffc 	bl	80036dc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	699a      	ldr	r2, [r3, #24]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f022 0210 	bic.w	r2, r2, #16
 80006f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006f4:	f7ff fdf4 	bl	80002e0 <HAL_GetTick>
 80006f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80006fa:	e012      	b.n	8000722 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80006fc:	f7ff fdf0 	bl	80002e0 <HAL_GetTick>
 8000700:	4602      	mov	r2, r0
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	2b0a      	cmp	r3, #10
 8000708:	d90b      	bls.n	8000722 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070e:	f043 0201 	orr.w	r2, r3, #1
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2203      	movs	r2, #3
 800071a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e11b      	b.n	800095a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0308 	and.w	r3, r3, #8
 800072c:	2b08      	cmp	r3, #8
 800072e:	d0e5      	beq.n	80006fc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	699a      	ldr	r2, [r3, #24]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f042 0201 	orr.w	r2, r2, #1
 800073e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000740:	f7ff fdce 	bl	80002e0 <HAL_GetTick>
 8000744:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000746:	e012      	b.n	800076e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000748:	f7ff fdca 	bl	80002e0 <HAL_GetTick>
 800074c:	4602      	mov	r2, r0
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	2b0a      	cmp	r3, #10
 8000754:	d90b      	bls.n	800076e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800075a:	f043 0201 	orr.w	r2, r3, #1
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2203      	movs	r2, #3
 8000766:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e0f5      	b.n	800095a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0e5      	beq.n	8000748 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	699a      	ldr	r2, [r3, #24]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f042 0202 	orr.w	r2, r2, #2
 800078a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a74      	ldr	r2, [pc, #464]	; (8000964 <HAL_FDCAN_Init+0x2ac>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d103      	bne.n	800079e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000796:	4a74      	ldr	r2, [pc, #464]	; (8000968 <HAL_FDCAN_Init+0x2b0>)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	7c1b      	ldrb	r3, [r3, #16]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d108      	bne.n	80007b8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	699a      	ldr	r2, [r3, #24]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80007b4:	619a      	str	r2, [r3, #24]
 80007b6:	e007      	b.n	80007c8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	699a      	ldr	r2, [r3, #24]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007c6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7c5b      	ldrb	r3, [r3, #17]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d108      	bne.n	80007e2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	699a      	ldr	r2, [r3, #24]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007de:	619a      	str	r2, [r3, #24]
 80007e0:	e007      	b.n	80007f2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	699a      	ldr	r2, [r3, #24]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80007f0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7c9b      	ldrb	r3, [r3, #18]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d108      	bne.n	800080c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	699a      	ldr	r2, [r3, #24]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000808:	619a      	str	r2, [r3, #24]
 800080a:	e007      	b.n	800081c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	699a      	ldr	r2, [r3, #24]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800081a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689a      	ldr	r2, [r3, #8]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	430a      	orrs	r2, r1
 8000830:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	699a      	ldr	r2, [r3, #24]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000840:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	691a      	ldr	r2, [r3, #16]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f022 0210 	bic.w	r2, r2, #16
 8000850:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d108      	bne.n	800086c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	699a      	ldr	r2, [r3, #24]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f042 0204 	orr.w	r2, r2, #4
 8000868:	619a      	str	r2, [r3, #24]
 800086a:	e02c      	b.n	80008c6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d028      	beq.n	80008c6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	2b02      	cmp	r3, #2
 800087a:	d01c      	beq.n	80008b6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	699a      	ldr	r2, [r3, #24]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800088a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	691a      	ldr	r2, [r3, #16]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f042 0210 	orr.w	r2, r2, #16
 800089a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d110      	bne.n	80008c6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	699a      	ldr	r2, [r3, #24]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f042 0220 	orr.w	r2, r2, #32
 80008b2:	619a      	str	r2, [r3, #24]
 80008b4:	e007      	b.n	80008c6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	699a      	ldr	r2, [r3, #24]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f042 0220 	orr.w	r2, r2, #32
 80008c4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80008d6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6a1b      	ldr	r3, [r3, #32]
 80008dc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80008de:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80008ee:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80008f0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80008fa:	d115      	bne.n	8000928 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000900:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000906:	3b01      	subs	r3, #1
 8000908:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800090a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000910:	3b01      	subs	r3, #1
 8000912:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000914:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091c:	3b01      	subs	r3, #1
 800091e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000924:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000926:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	430a      	orrs	r2, r1
 800093a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 fcb8 	bl	80012b4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2200      	movs	r2, #0
 800094e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2201      	movs	r2, #1
 8000954:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40006400 	.word	0x40006400
 8000968:	40006500 	.word	0x40006500

0800096c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800096c:	b480      	push	{r7}
 800096e:	b087      	sub	sp, #28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800097c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800097e:	7dfb      	ldrb	r3, [r7, #23]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d002      	beq.n	800098a <HAL_FDCAN_ConfigFilter+0x1e>
 8000984:	7dfb      	ldrb	r3, [r7, #23]
 8000986:	2b02      	cmp	r3, #2
 8000988:	d13d      	bne.n	8000a06 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d119      	bne.n	80009c6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800099e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	691b      	ldr	r3, [r3, #16]
 80009a4:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80009a6:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	e01d      	b.n	8000a02 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	075a      	lsls	r2, r3, #29
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	079a      	lsls	r2, r3, #30
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	4313      	orrs	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	00db      	lsls	r3, r3, #3
 80009ec:	4413      	add	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	3304      	adds	r3, #4
 80009fa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e006      	b.n	8000a14 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0a:	f043 0202 	orr.w	r2, r3, #2
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
  }
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	371c      	adds	r7, #28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
 8000a2c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d116      	bne.n	8000a68 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a42:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	011a      	lsls	r2, r3, #4
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	431a      	orrs	r2, r3
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	431a      	orrs	r2, r3
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                         (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                                         (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                                         (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e006      	b.n	8000a76 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6c:	f043 0204 	orr.w	r2, r3, #4
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
  }
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b085      	sub	sp, #20
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d11f      	bne.n	8000ada <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	2b40      	cmp	r3, #64	; 0x40
 8000a9e:	d10d      	bne.n	8000abc <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000aa8:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	025a      	lsls	r2, r3, #9
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000aba:	e00c      	b.n	8000ad6 <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ac4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	021a      	lsls	r2, r3, #8
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Return function status */
    return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e006      	b.n	8000ae8 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ade:	f043 0204 	orr.w	r2, r3, #4
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
  }
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d110      	bne.n	8000b2a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	699a      	ldr	r2, [r3, #24]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f022 0201 	bic.w	r2, r2, #1
 8000b1e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e006      	b.n	8000b38 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2e:	f043 0204 	orr.w	r2, r3, #4
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
  }
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d12c      	bne.n	8000bb6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d007      	beq.n	8000b7c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e023      	b.n	8000bc4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000b84:	0c1b      	lsrs	r3, r3, #16
 8000b86:	f003 0303 	and.w	r3, r3, #3
 8000b8a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f000 fbe4 	bl	8001360 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	409a      	lsls	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e006      	b.n	8000bc4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bba:	f043 0208 	orr.w	r2, r3, #8
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
  }
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b08b      	sub	sp, #44	; 0x2c
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000be0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8000be2:	7efb      	ldrb	r3, [r7, #27]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	f040 80bc 	bne.w	8000d62 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	2b40      	cmp	r3, #64	; 0x40
 8000bee:	d121      	bne.n	8000c34 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bf8:	f003 030f 	and.w	r3, r3, #15
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d107      	bne.n	8000c10 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e0af      	b.n	8000d70 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	f003 0303 	and.w	r3, r3, #3
 8000c1e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8000c24:	69fa      	ldr	r2, [r7, #28]
 8000c26:	4613      	mov	r3, r2
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	4413      	add	r3, r2
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	440b      	add	r3, r1
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
 8000c32:	e020      	b.n	8000c76 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c3c:	f003 030f 	and.w	r3, r3, #15
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d107      	bne.n	8000c54 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e08d      	b.n	8000d70 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000c68:	69fa      	ldr	r2, [r7, #28]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	4413      	add	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	440b      	add	r3, r1
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d107      	bne.n	8000c9a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	0c9b      	lsrs	r3, r3, #18
 8000c90:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	e005      	b.n	8000ca6 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	0e1b      	lsrs	r3, r3, #24
 8000cf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	0fda      	lsrs	r2, r3, #31
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
 8000d18:	e00a      	b.n	8000d30 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
 8000d1e:	441a      	add	r2, r3
 8000d20:	6839      	ldr	r1, [r7, #0]
 8000d22:	6a3b      	ldr	r3, [r7, #32]
 8000d24:	440b      	add	r3, r1
 8000d26:	7812      	ldrb	r2, [r2, #0]
 8000d28:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8000d2a:	6a3b      	ldr	r3, [r7, #32]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	623b      	str	r3, [r7, #32]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0c1b      	lsrs	r3, r3, #16
 8000d36:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <HAL_FDCAN_GetRxMessage+0x1b0>)
 8000d38:	5cd3      	ldrb	r3, [r2, r3]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	6a3b      	ldr	r3, [r7, #32]
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d3eb      	bcc.n	8000d1a <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	2b40      	cmp	r3, #64	; 0x40
 8000d46:	d105      	bne.n	8000d54 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	69fa      	ldr	r2, [r7, #28]
 8000d4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8000d52:	e004      	b.n	8000d5e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	69fa      	ldr	r2, [r7, #28]
 8000d5a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e006      	b.n	8000d70 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d66:	f043 0208 	orr.w	r2, r3, #8
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
  }
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	372c      	adds	r7, #44	; 0x2c
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	08003904 	.word	0x08003904

08000d80 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000d90:	f003 0307 	and.w	r3, r3, #7
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b087      	sub	sp, #28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000db6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000db8:	7dfb      	ldrb	r3, [r7, #23]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d003      	beq.n	8000dc6 <HAL_FDCAN_ActivateNotification+0x22>
 8000dbe:	7dfb      	ldrb	r3, [r7, #23]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	f040 80c8 	bne.w	8000f56 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dcc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d004      	beq.n	8000de2 <HAL_FDCAN_ActivateNotification+0x3e>
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d03b      	beq.n	8000e5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d004      	beq.n	8000df6 <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d031      	beq.n	8000e5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d004      	beq.n	8000e0a <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d027      	beq.n	8000e5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d004      	beq.n	8000e1e <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d01d      	beq.n	8000e5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d004      	beq.n	8000e32 <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d013      	beq.n	8000e5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d004      	beq.n	8000e46 <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	f003 0320 	and.w	r3, r3, #32
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d009      	beq.n	8000e5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d00c      	beq.n	8000e6a <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d107      	bne.n	8000e6a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f042 0201 	orr.w	r2, r2, #1
 8000e68:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	f003 0307 	and.w	r3, r3, #7
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <HAL_FDCAN_ActivateNotification+0xda>
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d13b      	bne.n	8000ef6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d004      	beq.n	8000e92 <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d131      	bne.n	8000ef6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d004      	beq.n	8000ea6 <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d127      	bne.n	8000ef6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d004      	beq.n	8000eba <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d11d      	bne.n	8000ef6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d004      	beq.n	8000ece <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	f003 0310 	and.w	r3, r3, #16
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d113      	bne.n	8000ef6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d004      	beq.n	8000ee2 <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	f003 0320 	and.w	r3, r3, #32
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d109      	bne.n	8000ef6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00c      	beq.n	8000f06 <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d007      	beq.n	8000f06 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f042 0202 	orr.w	r2, r2, #2
 8000f04:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d009      	beq.n	8000f24 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d009      	beq.n	8000f42 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e006      	b.n	8000f64 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5a:	f043 0202 	orr.w	r2, r3, #2
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
  }
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	371c      	adds	r7, #28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f7e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa2:	6a3a      	ldr	r2, [r7, #32]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000fb2:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fba:	69fa      	ldr	r2, [r7, #28]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fc6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8000fca:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fde:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fe2:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4013      	ands	r3, r2
 8000fee:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00d      	beq.n	800101a <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001008:	2b00      	cmp	r3, #0
 800100a:	d006      	beq.n	800101a <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2240      	movs	r2, #64	; 0x40
 8001012:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f92e 	bl	8001276 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001024:	2b00      	cmp	r3, #0
 8001026:	d01b      	beq.n	8001060 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800102e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001032:	2b00      	cmp	r3, #0
 8001034:	d014      	beq.n	8001060 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800103e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001056:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001058:	6939      	ldr	r1, [r7, #16]
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f8ec 	bl	8001238 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	2b00      	cmp	r3, #0
 8001064:	d007      	beq.n	8001076 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800106c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800106e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f8b6 	bl	80011e2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d007      	beq.n	800108c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6a3a      	ldr	r2, [r7, #32]
 8001082:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001084:	6a39      	ldr	r1, [r7, #32]
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f002 f846 	bl	8003118 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d007      	beq.n	80010a2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800109a:	69f9      	ldr	r1, [r7, #28]
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 f8ab 	bl	80011f8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00e      	beq.n	80010ce <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f8a0 	bl	800120e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d01a      	beq.n	8001112 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d013      	beq.n	8001112 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80010f2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4013      	ands	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800110a:	68f9      	ldr	r1, [r7, #12]
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 f888 	bl	8001222 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00e      	beq.n	800113e <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d007      	beq.n	800113e <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001136:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f888 	bl	800124e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00e      	beq.n	800116a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001162:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f87c 	bl	8001262 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d011      	beq.n	800119c <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00a      	beq.n	800119c <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800118e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001194:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d007      	beq.n	80011b2 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80011aa:	6979      	ldr	r1, [r7, #20]
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f876 	bl	800129e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d009      	beq.n	80011cc <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f858 	bl	800128a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80012be:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012ce:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d6:	041a      	lsls	r2, r3, #16
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012f4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fc:	061a      	lsls	r2, r3, #24
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	e005      	b.n	8001342 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3304      	adds	r3, #4
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	429a      	cmp	r2, r3
 800134c:	d3f3      	bcc.n	8001336 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	4000a400 	.word	0x4000a400

08001360 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	; 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10a      	bne.n	800138c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800137e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001386:	4313      	orrs	r3, r2
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	e00a      	b.n	80013a2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001394:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800139a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800139c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013a0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80013ac:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80013b2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80013b8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	4613      	mov	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	3304      	adds	r3, #4
 80013de:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	3304      	adds	r3, #4
 80013ea:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e020      	b.n	8001434 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3303      	adds	r3, #3
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3302      	adds	r3, #2
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	440b      	add	r3, r1
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800140a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	440b      	add	r3, r1
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001418:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	440a      	add	r2, r1
 8001420:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001422:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	3304      	adds	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3304      	adds	r3, #4
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0c1b      	lsrs	r3, r3, #16
 800143a:	4a06      	ldr	r2, [pc, #24]	; (8001454 <FDCAN_CopyMessageToRAM+0xf4>)
 800143c:	5cd3      	ldrb	r3, [r2, r3]
 800143e:	461a      	mov	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	4293      	cmp	r3, r2
 8001444:	d3d5      	bcc.n	80013f2 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8001446:	bf00      	nop
 8001448:	3724      	adds	r7, #36	; 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	08003904 	.word	0x08003904

08001458 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800146a:	4b24      	ldr	r3, [pc, #144]	; (80014fc <HAL_FLASH_Program+0xa4>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d101      	bne.n	8001476 <HAL_FLASH_Program+0x1e>
 8001472:	2302      	movs	r3, #2
 8001474:	e03e      	b.n	80014f4 <HAL_FLASH_Program+0x9c>
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <HAL_FLASH_Program+0xa4>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800147c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001480:	f000 f87c 	bl	800157c <FLASH_WaitForLastOperation>
 8001484:	4603      	mov	r3, r0
 8001486:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001488:	7dfb      	ldrb	r3, [r7, #23]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d12e      	bne.n	80014ec <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <HAL_FLASH_Program+0xa4>)
 8001490:	2200      	movs	r2, #0
 8001492:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d107      	bne.n	80014aa <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800149a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	f000 f8c0 	bl	8001624 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80014a4:	2301      	movs	r3, #1
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	e010      	b.n	80014cc <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d002      	beq.n	80014b6 <HAL_FLASH_Program+0x5e>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d10a      	bne.n	80014cc <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	68b8      	ldr	r0, [r7, #8]
 80014bc:	f000 f8d6 	bl	800166c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d102      	bne.n	80014cc <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80014c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014ca:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d0:	f000 f854 	bl	800157c <FLASH_WaitForLastOperation>
 80014d4:	4603      	mov	r3, r0
 80014d6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d006      	beq.n	80014ec <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_FLASH_Program+0xa8>)
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	4906      	ldr	r1, [pc, #24]	; (8001500 <HAL_FLASH_Program+0xa8>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_FLASH_Program+0xa4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000008 	.word	0x20000008
 8001500:	40022000 	.word	0x40022000

08001504 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_FLASH_Unlock+0x38>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	2b00      	cmp	r3, #0
 8001514:	da0b      	bge.n	800152e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_FLASH_Unlock+0x38>)
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_FLASH_Unlock+0x3c>)
 800151a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <HAL_FLASH_Unlock+0x38>)
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_FLASH_Unlock+0x40>)
 8001520:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_FLASH_Unlock+0x38>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	2b00      	cmp	r3, #0
 8001528:	da01      	bge.n	800152e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800152e:	79fb      	ldrb	r3, [r7, #7]
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40022000 	.word	0x40022000
 8001540:	45670123 	.word	0x45670123
 8001544:	cdef89ab 	.word	0xcdef89ab

08001548 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_FLASH_Lock+0x30>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_FLASH_Lock+0x30>)
 8001558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800155c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_FLASH_Lock+0x30>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	2b00      	cmp	r3, #0
 8001564:	da01      	bge.n	800156a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800156a:	79fb      	ldrb	r3, [r7, #7]
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40022000 	.word	0x40022000

0800157c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001584:	f7fe feac 	bl	80002e0 <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800158a:	e009      	b.n	80015a0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 800158c:	f7fe fea8 	bl	80002e0 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	d201      	bcs.n	80015a0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e038      	b.n	8001612 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <FLASH_WaitForLastOperation+0xa0>)
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ac:	d0ee      	beq.n	800158c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80015ae:	4b1b      	ldr	r3, [pc, #108]	; (800161c <FLASH_WaitForLastOperation+0xa0>)
 80015b0:	691a      	ldr	r2, [r3, #16]
 80015b2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80015b6:	4013      	ands	r3, r2
 80015b8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d01e      	beq.n	80015fe <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <FLASH_WaitForLastOperation+0xa4>)
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	4a15      	ldr	r2, [pc, #84]	; (8001620 <FLASH_WaitForLastOperation+0xa4>)
 80015ca:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d007      	beq.n	80015e6 <FLASH_WaitForLastOperation+0x6a>
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <FLASH_WaitForLastOperation+0xa0>)
 80015d8:	699a      	ldr	r2, [r3, #24]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80015e0:	490e      	ldr	r1, [pc, #56]	; (800161c <FLASH_WaitForLastOperation+0xa0>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	618b      	str	r3, [r1, #24]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d004      	beq.n	80015fa <FLASH_WaitForLastOperation+0x7e>
 80015f0:	4a0a      	ldr	r2, [pc, #40]	; (800161c <FLASH_WaitForLastOperation+0xa0>)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015f8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e009      	b.n	8001612 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <FLASH_WaitForLastOperation+0xa0>)
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b01      	cmp	r3, #1
 8001608:	d102      	bne.n	8001610 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <FLASH_WaitForLastOperation+0xa0>)
 800160c:	2201      	movs	r2, #1
 800160e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40022000 	.word	0x40022000
 8001620:	20000008 	.word	0x20000008

08001624 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001624:	b490      	push	{r4, r7}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <FLASH_Program_DoubleWord+0x44>)
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <FLASH_Program_DoubleWord+0x44>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001642:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8001646:	e9d7 1200 	ldrd	r1, r2, [r7]
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	f04f 0400 	mov.w	r4, #0
 8001652:	0013      	movs	r3, r2
 8001654:	2400      	movs	r4, #0
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	3204      	adds	r2, #4
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bc90      	pop	{r4, r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40022000 	.word	0x40022000

0800166c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8001676:	2340      	movs	r3, #64	; 0x40
 8001678:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <FLASH_Program_Fast+0x64>)
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <FLASH_Program_Fast+0x64>)
 8001688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800168c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800168e:	f3ef 8310 	mrs	r3, PRIMASK
 8001692:	60fb      	str	r3, [r7, #12]
  return(result);
 8001694:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8001696:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001698:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	3304      	adds	r3, #4
 80016a6:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3304      	adds	r3, #4
 80016ac:	617b      	str	r3, [r7, #20]
    row_index--;
 80016ae:	7ffb      	ldrb	r3, [r7, #31]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80016b4:	7ffb      	ldrb	r3, [r7, #31]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1ef      	bne.n	800169a <FLASH_Program_Fast+0x2e>
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80016c4:	bf00      	nop
 80016c6:	3724      	adds	r7, #36	; 0x24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40022000 	.word	0x40022000

080016d4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016de:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <HAL_FLASHEx_Erase+0x134>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_FLASHEx_Erase+0x16>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e089      	b.n	80017fe <HAL_FLASHEx_Erase+0x12a>
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <HAL_FLASHEx_Erase+0x134>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f4:	f7ff ff42 	bl	800157c <FLASH_WaitForLastOperation>
 80016f8:	4603      	mov	r3, r0
 80016fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d179      	bne.n	80017f6 <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <HAL_FLASHEx_Erase+0x134>)
 8001704:	2200      	movs	r2, #0
 8001706:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001708:	4b40      	ldr	r3, [pc, #256]	; (800180c <HAL_FLASHEx_Erase+0x138>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001710:	2b00      	cmp	r3, #0
 8001712:	d019      	beq.n	8001748 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001714:	4b3d      	ldr	r3, [pc, #244]	; (800180c <HAL_FLASHEx_Erase+0x138>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a3c      	ldr	r2, [pc, #240]	; (800180c <HAL_FLASHEx_Erase+0x138>)
 800171a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800171e:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001720:	4b3a      	ldr	r3, [pc, #232]	; (800180c <HAL_FLASHEx_Erase+0x138>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001728:	2b00      	cmp	r3, #0
 800172a:	d009      	beq.n	8001740 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800172c:	4b37      	ldr	r3, [pc, #220]	; (800180c <HAL_FLASHEx_Erase+0x138>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a36      	ldr	r2, [pc, #216]	; (800180c <HAL_FLASHEx_Erase+0x138>)
 8001732:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001736:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001738:	4b33      	ldr	r3, [pc, #204]	; (8001808 <HAL_FLASHEx_Erase+0x134>)
 800173a:	2203      	movs	r2, #3
 800173c:	771a      	strb	r2, [r3, #28]
 800173e:	e016      	b.n	800176e <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001740:	4b31      	ldr	r3, [pc, #196]	; (8001808 <HAL_FLASHEx_Erase+0x134>)
 8001742:	2201      	movs	r2, #1
 8001744:	771a      	strb	r2, [r3, #28]
 8001746:	e012      	b.n	800176e <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001748:	4b30      	ldr	r3, [pc, #192]	; (800180c <HAL_FLASHEx_Erase+0x138>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001750:	2b00      	cmp	r3, #0
 8001752:	d009      	beq.n	8001768 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <HAL_FLASHEx_Erase+0x138>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a2c      	ldr	r2, [pc, #176]	; (800180c <HAL_FLASHEx_Erase+0x138>)
 800175a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800175e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <HAL_FLASHEx_Erase+0x134>)
 8001762:	2202      	movs	r2, #2
 8001764:	771a      	strb	r2, [r3, #28]
 8001766:	e002      	b.n	800176e <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001768:	4b27      	ldr	r3, [pc, #156]	; (8001808 <HAL_FLASHEx_Erase+0x134>)
 800176a:	2200      	movs	r2, #0
 800176c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d111      	bne.n	800179a <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f848 	bl	8001810 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001780:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001784:	f7ff fefa 	bl	800157c <FLASH_WaitForLastOperation>
 8001788:	4603      	mov	r3, r0
 800178a:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <HAL_FLASHEx_Erase+0x138>)
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	4a1e      	ldr	r2, [pc, #120]	; (800180c <HAL_FLASHEx_Erase+0x138>)
 8001792:	f023 0304 	bic.w	r3, r3, #4
 8001796:	6153      	str	r3, [r2, #20]
 8001798:	e02b      	b.n	80017f2 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	e01b      	b.n	80017e2 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4619      	mov	r1, r3
 80017b0:	68b8      	ldr	r0, [r7, #8]
 80017b2:	f000 f84b 	bl	800184c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ba:	f7ff fedf 	bl	800157c <FLASH_WaitForLastOperation>
 80017be:	4603      	mov	r3, r0
 80017c0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_FLASHEx_Erase+0x138>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_FLASHEx_Erase+0x138>)
 80017c8:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80017cc:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	601a      	str	r2, [r3, #0]
          break;
 80017da:	e00a      	b.n	80017f2 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	3301      	adds	r3, #1
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d3db      	bcc.n	80017aa <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80017f2:	f000 f84f 	bl	8001894 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <HAL_FLASHEx_Erase+0x134>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]

  return status;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000008 	.word	0x20000008
 800180c:	40022000 	.word	0x40022000

08001810 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <FLASH_MassErase+0x38>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <FLASH_MassErase+0x38>)
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <FLASH_MassErase+0x38>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	4a05      	ldr	r2, [pc, #20]	; (8001848 <FLASH_MassErase+0x38>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001838:	6153      	str	r3, [r2, #20]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40022000 	.word	0x40022000

0800184c <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <FLASH_PageErase+0x44>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001866:	490a      	ldr	r1, [pc, #40]	; (8001890 <FLASH_PageErase+0x44>)
 8001868:	4313      	orrs	r3, r2
 800186a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <FLASH_PageErase+0x44>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	4a07      	ldr	r2, [pc, #28]	; (8001890 <FLASH_PageErase+0x44>)
 8001872:	f043 0302 	orr.w	r3, r3, #2
 8001876:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <FLASH_PageErase+0x44>)
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <FLASH_PageErase+0x44>)
 800187e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001882:	6153      	str	r3, [r2, #20]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	40022000 	.word	0x40022000

08001894 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <FLASH_FlushCaches+0x80>)
 800189c:	7f1b      	ldrb	r3, [r3, #28]
 800189e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d002      	beq.n	80018ac <FLASH_FlushCaches+0x18>
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d111      	bne.n	80018d0 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <FLASH_FlushCaches+0x84>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a19      	ldr	r2, [pc, #100]	; (8001918 <FLASH_FlushCaches+0x84>)
 80018b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <FLASH_FlushCaches+0x84>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a16      	ldr	r2, [pc, #88]	; (8001918 <FLASH_FlushCaches+0x84>)
 80018be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018c2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <FLASH_FlushCaches+0x84>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a13      	ldr	r2, [pc, #76]	; (8001918 <FLASH_FlushCaches+0x84>)
 80018ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d002      	beq.n	80018dc <FLASH_FlushCaches+0x48>
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d111      	bne.n	8001900 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <FLASH_FlushCaches+0x84>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <FLASH_FlushCaches+0x84>)
 80018e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <FLASH_FlushCaches+0x84>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <FLASH_FlushCaches+0x84>)
 80018ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <FLASH_FlushCaches+0x84>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <FLASH_FlushCaches+0x84>)
 80018fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018fe:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <FLASH_FlushCaches+0x80>)
 8001902:	2200      	movs	r2, #0
 8001904:	771a      	strb	r2, [r3, #28]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000008 	.word	0x20000008
 8001918:	40022000 	.word	0x40022000

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800192a:	e15a      	b.n	8001be2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2101      	movs	r1, #1
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 814c 	beq.w	8001bdc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x38>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b12      	cmp	r3, #18
 8001952:	d123      	bne.n	800199c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	08da      	lsrs	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3208      	adds	r2, #8
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	08da      	lsrs	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3208      	adds	r2, #8
 8001996:	6939      	ldr	r1, [r7, #16]
 8001998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0203 	and.w	r2, r3, #3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d00b      	beq.n	80019f0 <HAL_GPIO_Init+0xd4>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d007      	beq.n	80019f0 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019e4:	2b11      	cmp	r3, #17
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b12      	cmp	r3, #18
 80019ee:	d130      	bne.n	8001a52 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a26:	2201      	movs	r2, #1
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	091b      	lsrs	r3, r3, #4
 8001a3c:	f003 0201 	and.w	r2, r3, #1
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 80a6 	beq.w	8001bdc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a90:	4b5b      	ldr	r3, [pc, #364]	; (8001c00 <HAL_GPIO_Init+0x2e4>)
 8001a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a94:	4a5a      	ldr	r2, [pc, #360]	; (8001c00 <HAL_GPIO_Init+0x2e4>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6613      	str	r3, [r2, #96]	; 0x60
 8001a9c:	4b58      	ldr	r3, [pc, #352]	; (8001c00 <HAL_GPIO_Init+0x2e4>)
 8001a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa8:	4a56      	ldr	r2, [pc, #344]	; (8001c04 <HAL_GPIO_Init+0x2e8>)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ad2:	d01f      	beq.n	8001b14 <HAL_GPIO_Init+0x1f8>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a4c      	ldr	r2, [pc, #304]	; (8001c08 <HAL_GPIO_Init+0x2ec>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d019      	beq.n	8001b10 <HAL_GPIO_Init+0x1f4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a4b      	ldr	r2, [pc, #300]	; (8001c0c <HAL_GPIO_Init+0x2f0>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d013      	beq.n	8001b0c <HAL_GPIO_Init+0x1f0>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a4a      	ldr	r2, [pc, #296]	; (8001c10 <HAL_GPIO_Init+0x2f4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d00d      	beq.n	8001b08 <HAL_GPIO_Init+0x1ec>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a49      	ldr	r2, [pc, #292]	; (8001c14 <HAL_GPIO_Init+0x2f8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d007      	beq.n	8001b04 <HAL_GPIO_Init+0x1e8>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a48      	ldr	r2, [pc, #288]	; (8001c18 <HAL_GPIO_Init+0x2fc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d101      	bne.n	8001b00 <HAL_GPIO_Init+0x1e4>
 8001afc:	2305      	movs	r3, #5
 8001afe:	e00a      	b.n	8001b16 <HAL_GPIO_Init+0x1fa>
 8001b00:	2306      	movs	r3, #6
 8001b02:	e008      	b.n	8001b16 <HAL_GPIO_Init+0x1fa>
 8001b04:	2304      	movs	r3, #4
 8001b06:	e006      	b.n	8001b16 <HAL_GPIO_Init+0x1fa>
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e004      	b.n	8001b16 <HAL_GPIO_Init+0x1fa>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e002      	b.n	8001b16 <HAL_GPIO_Init+0x1fa>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_GPIO_Init+0x1fa>
 8001b14:	2300      	movs	r3, #0
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	f002 0203 	and.w	r2, r2, #3
 8001b1c:	0092      	lsls	r2, r2, #2
 8001b1e:	4093      	lsls	r3, r2
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b26:	4937      	ldr	r1, [pc, #220]	; (8001c04 <HAL_GPIO_Init+0x2e8>)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b34:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b58:	4a30      	ldr	r2, [pc, #192]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b82:	4a26      	ldr	r2, [pc, #152]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bac:	4a1b      	ldr	r2, [pc, #108]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bd6:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3301      	adds	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f47f ae9d 	bne.w	800192c <HAL_GPIO_Init+0x10>
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40010000 	.word	0x40010000
 8001c08:	48000400 	.word	0x48000400
 8001c0c:	48000800 	.word	0x48000800
 8001c10:	48000c00 	.word	0x48000c00
 8001c14:	48001000 	.word	0x48001000
 8001c18:	48001400 	.word	0x48001400
 8001c1c:	40010400 	.word	0x40010400

08001c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c3e:	887a      	ldrh	r2, [r7, #2]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695a      	ldr	r2, [r3, #20]
 8001c60:	887b      	ldrh	r3, [r7, #2]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c68:	887a      	ldrh	r2, [r7, #2]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001c6e:	e002      	b.n	8001c76 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c70:	887a      	ldrh	r2, [r7, #2]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	619a      	str	r2, [r3, #24]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d141      	bne.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c92:	4b4b      	ldr	r3, [pc, #300]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9e:	d131      	bne.n	8001d04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ca0:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ca6:	4a46      	ldr	r2, [pc, #280]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb0:	4b43      	ldr	r3, [pc, #268]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cb8:	4a41      	ldr	r2, [pc, #260]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cc0:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2232      	movs	r2, #50	; 0x32
 8001cc6:	fb02 f303 	mul.w	r3, r2, r3
 8001cca:	4a3f      	ldr	r2, [pc, #252]	; (8001dc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	0c9b      	lsrs	r3, r3, #18
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cd6:	e002      	b.n	8001cde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cde:	4b38      	ldr	r3, [pc, #224]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cea:	d102      	bne.n	8001cf2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f2      	bne.n	8001cd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cf2:	4b33      	ldr	r3, [pc, #204]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cfe:	d158      	bne.n	8001db2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e057      	b.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d04:	4b2e      	ldr	r3, [pc, #184]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d0a:	4a2d      	ldr	r2, [pc, #180]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d14:	e04d      	b.n	8001db2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d1c:	d141      	bne.n	8001da2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d1e:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2a:	d131      	bne.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d2c:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d32:	4a23      	ldr	r2, [pc, #140]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d44:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2232      	movs	r2, #50	; 0x32
 8001d52:	fb02 f303 	mul.w	r3, r2, r3
 8001d56:	4a1c      	ldr	r2, [pc, #112]	; (8001dc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d58:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5c:	0c9b      	lsrs	r3, r3, #18
 8001d5e:	3301      	adds	r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d62:	e002      	b.n	8001d6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d76:	d102      	bne.n	8001d7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f2      	bne.n	8001d64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d8a:	d112      	bne.n	8001db2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e011      	b.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001da0:	e007      	b.n	8001db2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	20000040 	.word	0x20000040
 8001dc8:	431bde83 	.word	0x431bde83

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e308      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d075      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dea:	4ba3      	ldr	r3, [pc, #652]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df4:	4ba0      	ldr	r3, [pc, #640]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	2b0c      	cmp	r3, #12
 8001e02:	d102      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3e>
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d002      	beq.n	8001e10 <HAL_RCC_OscConfig+0x44>
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d10b      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	4b99      	ldr	r3, [pc, #612]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d05b      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x108>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d157      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e2e3      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e30:	d106      	bne.n	8001e40 <HAL_RCC_OscConfig+0x74>
 8001e32:	4b91      	ldr	r3, [pc, #580]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a90      	ldr	r2, [pc, #576]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e01d      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x98>
 8001e4a:	4b8b      	ldr	r3, [pc, #556]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a8a      	ldr	r2, [pc, #552]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b88      	ldr	r3, [pc, #544]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a87      	ldr	r2, [pc, #540]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e64:	4b84      	ldr	r3, [pc, #528]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a83      	ldr	r2, [pc, #524]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b81      	ldr	r3, [pc, #516]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a80      	ldr	r2, [pc, #512]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7fe fa2c 	bl	80002e0 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7fe fa28 	bl	80002e0 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e2a8      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e9e:	4b76      	ldr	r3, [pc, #472]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0xc0>
 8001eaa:	e014      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe fa18 	bl	80002e0 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7fe fa14 	bl	80002e0 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	; 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e294      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ec6:	4b6c      	ldr	r3, [pc, #432]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xe8>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d075      	beq.n	8001fce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ee2:	4b65      	ldr	r3, [pc, #404]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eec:	4b62      	ldr	r3, [pc, #392]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_OscConfig+0x136>
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d002      	beq.n	8001f08 <HAL_RCC_OscConfig+0x13c>
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d11f      	bne.n	8001f48 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f08:	4b5b      	ldr	r3, [pc, #364]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_OscConfig+0x154>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e267      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f20:	4b55      	ldr	r3, [pc, #340]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	4952      	ldr	r1, [pc, #328]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f34:	4b51      	ldr	r3, [pc, #324]	; (800207c <HAL_RCC_OscConfig+0x2b0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe f985 	bl	8000248 <HAL_InitTick>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d043      	beq.n	8001fcc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e253      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d023      	beq.n	8001f98 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f50:	4b49      	ldr	r3, [pc, #292]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a48      	ldr	r2, [pc, #288]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7fe f9c0 	bl	80002e0 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f64:	f7fe f9bc 	bl	80002e0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e23c      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f76:	4b40      	ldr	r3, [pc, #256]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f82:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	061b      	lsls	r3, r3, #24
 8001f90:	4939      	ldr	r1, [pc, #228]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
 8001f96:	e01a      	b.n	8001fce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f98:	4b37      	ldr	r3, [pc, #220]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a36      	ldr	r2, [pc, #216]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7fe f99c 	bl	80002e0 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fac:	f7fe f998 	bl	80002e0 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e218      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fbe:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x1e0>
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d03c      	beq.n	8002054 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01c      	beq.n	800201c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe2:	4b25      	ldr	r3, [pc, #148]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe8:	4a23      	ldr	r2, [pc, #140]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff2:	f7fe f975 	bl	80002e0 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7fe f971 	bl	80002e0 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e1f1      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 800200e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0ef      	beq.n	8001ffa <HAL_RCC_OscConfig+0x22e>
 800201a:	e01b      	b.n	8002054 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201c:	4b16      	ldr	r3, [pc, #88]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 800201e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002022:	4a15      	ldr	r2, [pc, #84]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202c:	f7fe f958 	bl	80002e0 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002034:	f7fe f954 	bl	80002e0 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e1d4      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1ef      	bne.n	8002034 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80ab 	beq.w	80021b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002066:	4b04      	ldr	r3, [pc, #16]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d106      	bne.n	8002080 <HAL_RCC_OscConfig+0x2b4>
 8002072:	2301      	movs	r3, #1
 8002074:	e005      	b.n	8002082 <HAL_RCC_OscConfig+0x2b6>
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	20000000 	.word	0x20000000
 8002080:	2300      	movs	r3, #0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00d      	beq.n	80020a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	4baf      	ldr	r3, [pc, #700]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	4aae      	ldr	r2, [pc, #696]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002090:	6593      	str	r3, [r2, #88]	; 0x58
 8002092:	4bac      	ldr	r3, [pc, #688]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800209e:	2301      	movs	r3, #1
 80020a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a2:	4ba9      	ldr	r3, [pc, #676]	; (8002348 <HAL_RCC_OscConfig+0x57c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d118      	bne.n	80020e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ae:	4ba6      	ldr	r3, [pc, #664]	; (8002348 <HAL_RCC_OscConfig+0x57c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4aa5      	ldr	r2, [pc, #660]	; (8002348 <HAL_RCC_OscConfig+0x57c>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ba:	f7fe f911 	bl	80002e0 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c2:	f7fe f90d 	bl	80002e0 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e18d      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d4:	4b9c      	ldr	r3, [pc, #624]	; (8002348 <HAL_RCC_OscConfig+0x57c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d108      	bne.n	80020fa <HAL_RCC_OscConfig+0x32e>
 80020e8:	4b96      	ldr	r3, [pc, #600]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	4a95      	ldr	r2, [pc, #596]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020f8:	e024      	b.n	8002144 <HAL_RCC_OscConfig+0x378>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d110      	bne.n	8002124 <HAL_RCC_OscConfig+0x358>
 8002102:	4b90      	ldr	r3, [pc, #576]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	4a8e      	ldr	r2, [pc, #568]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002112:	4b8c      	ldr	r3, [pc, #560]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002118:	4a8a      	ldr	r2, [pc, #552]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002122:	e00f      	b.n	8002144 <HAL_RCC_OscConfig+0x378>
 8002124:	4b87      	ldr	r3, [pc, #540]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	4a86      	ldr	r2, [pc, #536]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002134:	4b83      	ldr	r3, [pc, #524]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	4a82      	ldr	r2, [pc, #520]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d016      	beq.n	800217a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7fe f8c8 	bl	80002e0 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002152:	e00a      	b.n	800216a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002154:	f7fe f8c4 	bl	80002e0 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e142      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800216a:	4b76      	ldr	r3, [pc, #472]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0ed      	beq.n	8002154 <HAL_RCC_OscConfig+0x388>
 8002178:	e015      	b.n	80021a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217a:	f7fe f8b1 	bl	80002e0 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002180:	e00a      	b.n	8002198 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002182:	f7fe f8ad 	bl	80002e0 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e12b      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002198:	4b6a      	ldr	r3, [pc, #424]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1ed      	bne.n	8002182 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021a6:	7ffb      	ldrb	r3, [r7, #31]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d105      	bne.n	80021b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ac:	4b65      	ldr	r3, [pc, #404]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	4a64      	ldr	r2, [pc, #400]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 80021b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d03c      	beq.n	800223e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01c      	beq.n	8002206 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021cc:	4b5d      	ldr	r3, [pc, #372]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 80021ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021d2:	4a5c      	ldr	r2, [pc, #368]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021dc:	f7fe f880 	bl	80002e0 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021e4:	f7fe f87c 	bl	80002e0 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0fc      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021f6:	4b53      	ldr	r3, [pc, #332]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 80021f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ef      	beq.n	80021e4 <HAL_RCC_OscConfig+0x418>
 8002204:	e01b      	b.n	800223e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002206:	4b4f      	ldr	r3, [pc, #316]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800220c:	4a4d      	ldr	r2, [pc, #308]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002216:	f7fe f863 	bl	80002e0 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800221e:	f7fe f85f 	bl	80002e0 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0df      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002230:	4b44      	ldr	r3, [pc, #272]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002232:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1ef      	bne.n	800221e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80d3 	beq.w	80023ee <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002248:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b0c      	cmp	r3, #12
 8002252:	f000 808d 	beq.w	8002370 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d15a      	bne.n	8002314 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225e:	4b39      	ldr	r3, [pc, #228]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a38      	ldr	r2, [pc, #224]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002264:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226a:	f7fe f839 	bl	80002e0 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002272:	f7fe f835 	bl	80002e0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e0b5      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002284:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f0      	bne.n	8002272 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002290:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_RCC_OscConfig+0x580>)
 8002296:	4013      	ands	r3, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6a11      	ldr	r1, [r2, #32]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022a0:	3a01      	subs	r2, #1
 80022a2:	0112      	lsls	r2, r2, #4
 80022a4:	4311      	orrs	r1, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80022aa:	0212      	lsls	r2, r2, #8
 80022ac:	4311      	orrs	r1, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022b2:	0852      	lsrs	r2, r2, #1
 80022b4:	3a01      	subs	r2, #1
 80022b6:	0552      	lsls	r2, r2, #21
 80022b8:	4311      	orrs	r1, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022be:	0852      	lsrs	r2, r2, #1
 80022c0:	3a01      	subs	r2, #1
 80022c2:	0652      	lsls	r2, r2, #25
 80022c4:	4311      	orrs	r1, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022ca:	06d2      	lsls	r2, r2, #27
 80022cc:	430a      	orrs	r2, r1
 80022ce:	491d      	ldr	r1, [pc, #116]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1a      	ldr	r2, [pc, #104]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 80022da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4a17      	ldr	r2, [pc, #92]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 80022e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7fd fff8 	bl	80002e0 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f4:	f7fd fff4 	bl	80002e0 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e074      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x528>
 8002312:	e06c      	b.n	80023ee <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 800231a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800231e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002326:	f023 0303 	bic.w	r3, r3, #3
 800232a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_RCC_OscConfig+0x578>)
 8002332:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7fd ffd0 	bl	80002e0 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002342:	e00e      	b.n	8002362 <HAL_RCC_OscConfig+0x596>
 8002344:	40021000 	.word	0x40021000
 8002348:	40007000 	.word	0x40007000
 800234c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7fd ffc6 	bl	80002e0 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e046      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002362:	4b25      	ldr	r3, [pc, #148]	; (80023f8 <HAL_RCC_OscConfig+0x62c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x584>
 800236e:	e03e      	b.n	80023ee <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e039      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800237c:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <HAL_RCC_OscConfig+0x62c>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f003 0203 	and.w	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	429a      	cmp	r2, r3
 800238e:	d12c      	bne.n	80023ea <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	3b01      	subs	r3, #1
 800239c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239e:	429a      	cmp	r2, r3
 80023a0:	d123      	bne.n	80023ea <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d11b      	bne.n	80023ea <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d113      	bne.n	80023ea <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	085b      	lsrs	r3, r3, #1
 80023ce:	3b01      	subs	r3, #1
 80023d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e0:	085b      	lsrs	r3, r3, #1
 80023e2:	3b01      	subs	r3, #1
 80023e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000

080023fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e11e      	b.n	8002652 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002414:	4b91      	ldr	r3, [pc, #580]	; (800265c <HAL_RCC_ClockConfig+0x260>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d910      	bls.n	8002444 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b8e      	ldr	r3, [pc, #568]	; (800265c <HAL_RCC_ClockConfig+0x260>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 020f 	bic.w	r2, r3, #15
 800242a:	498c      	ldr	r1, [pc, #560]	; (800265c <HAL_RCC_ClockConfig+0x260>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b8a      	ldr	r3, [pc, #552]	; (800265c <HAL_RCC_ClockConfig+0x260>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e106      	b.n	8002652 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d073      	beq.n	8002538 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d129      	bne.n	80024ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002458:	4b81      	ldr	r3, [pc, #516]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0f4      	b.n	8002652 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002468:	f000 f964 	bl	8002734 <RCC_GetSysClockFreqFromPLLSource>
 800246c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4a7c      	ldr	r2, [pc, #496]	; (8002664 <HAL_RCC_ClockConfig+0x268>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d93f      	bls.n	80024f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002476:	4b7a      	ldr	r3, [pc, #488]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800248a:	2b00      	cmp	r3, #0
 800248c:	d033      	beq.n	80024f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002492:	2b00      	cmp	r3, #0
 8002494:	d12f      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002496:	4b72      	ldr	r3, [pc, #456]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800249e:	4a70      	ldr	r2, [pc, #448]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 80024a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	e024      	b.n	80024f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024b4:	4b6a      	ldr	r3, [pc, #424]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d109      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0c6      	b.n	8002652 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c4:	4b66      	ldr	r3, [pc, #408]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0be      	b.n	8002652 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80024d4:	f000 f8ce 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4a61      	ldr	r2, [pc, #388]	; (8002664 <HAL_RCC_ClockConfig+0x268>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d909      	bls.n	80024f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024e2:	4b5f      	ldr	r3, [pc, #380]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024ea:	4a5d      	ldr	r2, [pc, #372]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 80024ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	4b5a      	ldr	r3, [pc, #360]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f023 0203 	bic.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4957      	ldr	r1, [pc, #348]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002504:	4313      	orrs	r3, r2
 8002506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002508:	f7fd feea 	bl	80002e0 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7fd fee6 	bl	80002e0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e095      	b.n	8002652 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	4b4e      	ldr	r3, [pc, #312]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 020c 	and.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d1eb      	bne.n	8002510 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d023      	beq.n	800258c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002550:	4b43      	ldr	r3, [pc, #268]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4a42      	ldr	r2, [pc, #264]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002556:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800255a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002568:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002570:	4a3b      	ldr	r2, [pc, #236]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002572:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002576:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002578:	4b39      	ldr	r3, [pc, #228]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4936      	ldr	r1, [pc, #216]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
 800258a:	e008      	b.n	800259e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2b80      	cmp	r3, #128	; 0x80
 8002590:	d105      	bne.n	800259e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002592:	4b33      	ldr	r3, [pc, #204]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	4a32      	ldr	r2, [pc, #200]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002598:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800259c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800259e:	4b2f      	ldr	r3, [pc, #188]	; (800265c <HAL_RCC_ClockConfig+0x260>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d21d      	bcs.n	80025e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ac:	4b2b      	ldr	r3, [pc, #172]	; (800265c <HAL_RCC_ClockConfig+0x260>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 020f 	bic.w	r2, r3, #15
 80025b4:	4929      	ldr	r1, [pc, #164]	; (800265c <HAL_RCC_ClockConfig+0x260>)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025bc:	f7fd fe90 	bl	80002e0 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	e00a      	b.n	80025da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c4:	f7fd fe8c 	bl	80002e0 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e03b      	b.n	8002652 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_RCC_ClockConfig+0x260>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1ed      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f4:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4917      	ldr	r1, [pc, #92]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	490f      	ldr	r1, [pc, #60]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002626:	f000 f825 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 800262a:	4601      	mov	r1, r0
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	4a0c      	ldr	r2, [pc, #48]	; (8002668 <HAL_RCC_ClockConfig+0x26c>)
 8002638:	5cd3      	ldrb	r3, [r2, r3]
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	fa21 f303 	lsr.w	r3, r1, r3
 8002642:	4a0a      	ldr	r2, [pc, #40]	; (800266c <HAL_RCC_ClockConfig+0x270>)
 8002644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_RCC_ClockConfig+0x274>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd fdfc 	bl	8000248 <HAL_InitTick>
 8002650:	4603      	mov	r3, r0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40022000 	.word	0x40022000
 8002660:	40021000 	.word	0x40021000
 8002664:	04c4b400 	.word	0x04c4b400
 8002668:	08003944 	.word	0x08003944
 800266c:	20000040 	.word	0x20000040
 8002670:	20000000 	.word	0x20000000

08002674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800267a:	4b2c      	ldr	r3, [pc, #176]	; (800272c <HAL_RCC_GetSysClockFreq+0xb8>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d102      	bne.n	800268c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002686:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	e047      	b.n	800271c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <HAL_RCC_GetSysClockFreq+0xb8>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b08      	cmp	r3, #8
 8002696:	d102      	bne.n	800269e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002698:	4b25      	ldr	r3, [pc, #148]	; (8002730 <HAL_RCC_GetSysClockFreq+0xbc>)
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	e03e      	b.n	800271c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800269e:	4b23      	ldr	r3, [pc, #140]	; (800272c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d136      	bne.n	8002718 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	3301      	adds	r3, #1
 80026c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d10c      	bne.n	80026e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026c8:	4a19      	ldr	r2, [pc, #100]	; (8002730 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	4a16      	ldr	r2, [pc, #88]	; (800272c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d2:	68d2      	ldr	r2, [r2, #12]
 80026d4:	0a12      	lsrs	r2, r2, #8
 80026d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	617b      	str	r3, [r7, #20]
      break;
 80026e0:	e00c      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026e2:	4a13      	ldr	r2, [pc, #76]	; (8002730 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ec:	68d2      	ldr	r2, [r2, #12]
 80026ee:	0a12      	lsrs	r2, r2, #8
 80026f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]
      break;
 80026fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	0e5b      	lsrs	r3, r3, #25
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	3301      	adds	r3, #1
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	e001      	b.n	800271c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800271c:	693b      	ldr	r3, [r7, #16]
}
 800271e:	4618      	mov	r0, r3
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	00f42400 	.word	0x00f42400

08002734 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800273a:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	3301      	adds	r3, #1
 8002750:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d10c      	bne.n	8002772 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002758:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002762:	68d2      	ldr	r2, [r2, #12]
 8002764:	0a12      	lsrs	r2, r2, #8
 8002766:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	617b      	str	r3, [r7, #20]
    break;
 8002770:	e00c      	b.n	800278c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002772:	4a11      	ldr	r2, [pc, #68]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800277c:	68d2      	ldr	r2, [r2, #12]
 800277e:	0a12      	lsrs	r2, r2, #8
 8002780:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002784:	fb02 f303 	mul.w	r3, r2, r3
 8002788:	617b      	str	r3, [r7, #20]
    break;
 800278a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	0e5b      	lsrs	r3, r3, #25
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	3301      	adds	r3, #1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027a6:	687b      	ldr	r3, [r7, #4]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	40021000 	.word	0x40021000
 80027b8:	00f42400 	.word	0x00f42400

080027bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027c4:	2300      	movs	r3, #0
 80027c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027c8:	2300      	movs	r3, #0
 80027ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8098 	beq.w	800290a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027de:	4b43      	ldr	r3, [pc, #268]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10d      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	4b40      	ldr	r3, [pc, #256]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ee:	4a3f      	ldr	r2, [pc, #252]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f4:	6593      	str	r3, [r2, #88]	; 0x58
 80027f6:	4b3d      	ldr	r3, [pc, #244]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002802:	2301      	movs	r3, #1
 8002804:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002806:	4b3a      	ldr	r3, [pc, #232]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a39      	ldr	r2, [pc, #228]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002810:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002812:	f7fd fd65 	bl	80002e0 <HAL_GetTick>
 8002816:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002818:	e009      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281a:	f7fd fd61 	bl	80002e0 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d902      	bls.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	74fb      	strb	r3, [r7, #19]
        break;
 800282c:	e005      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800282e:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0ef      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800283a:	7cfb      	ldrb	r3, [r7, #19]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d159      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002840:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d01e      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	429a      	cmp	r2, r3
 800285a:	d019      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800285c:	4b23      	ldr	r3, [pc, #140]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002866:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002868:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002878:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002888:	4a18      	ldr	r2, [pc, #96]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fd fd21 	bl	80002e0 <HAL_GetTick>
 800289e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a0:	e00b      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7fd fd1d 	bl	80002e0 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d902      	bls.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	74fb      	strb	r3, [r7, #19]
            break;
 80028b8:	e006      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ba:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0ec      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	4903      	ldr	r1, [pc, #12]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028e4:	e008      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e6:	7cfb      	ldrb	r3, [r7, #19]
 80028e8:	74bb      	strb	r3, [r7, #18]
 80028ea:	e005      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f4:	7cfb      	ldrb	r3, [r7, #19]
 80028f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f8:	7c7b      	ldrb	r3, [r7, #17]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d105      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fe:	4ba6      	ldr	r3, [pc, #664]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	4aa5      	ldr	r2, [pc, #660]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002908:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002916:	4ba0      	ldr	r3, [pc, #640]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f023 0203 	bic.w	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	499c      	ldr	r1, [pc, #624]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002938:	4b97      	ldr	r3, [pc, #604]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	f023 020c 	bic.w	r2, r3, #12
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	4994      	ldr	r1, [pc, #592]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800295a:	4b8f      	ldr	r3, [pc, #572]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	498b      	ldr	r1, [pc, #556]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800297c:	4b86      	ldr	r3, [pc, #536]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	4983      	ldr	r1, [pc, #524]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0320 	and.w	r3, r3, #32
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800299e:	4b7e      	ldr	r3, [pc, #504]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	497a      	ldr	r1, [pc, #488]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029c0:	4b75      	ldr	r3, [pc, #468]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	4972      	ldr	r1, [pc, #456]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029e2:	4b6d      	ldr	r3, [pc, #436]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	4969      	ldr	r1, [pc, #420]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a04:	4b64      	ldr	r3, [pc, #400]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4961      	ldr	r1, [pc, #388]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a26:	4b5c      	ldr	r3, [pc, #368]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	4958      	ldr	r1, [pc, #352]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d015      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a48:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	4950      	ldr	r1, [pc, #320]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a66:	d105      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a68:	4b4b      	ldr	r3, [pc, #300]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a4a      	ldr	r2, [pc, #296]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d015      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a80:	4b45      	ldr	r3, [pc, #276]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	4942      	ldr	r1, [pc, #264]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a9e:	d105      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa0:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a3c      	ldr	r2, [pc, #240]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aaa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d015      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ab8:	4b37      	ldr	r3, [pc, #220]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4934      	ldr	r1, [pc, #208]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad8:	4b2f      	ldr	r3, [pc, #188]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4a2e      	ldr	r2, [pc, #184]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d015      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002af0:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afe:	4926      	ldr	r1, [pc, #152]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b0e:	d105      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b10:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a20      	ldr	r2, [pc, #128]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d015      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b28:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	4918      	ldr	r1, [pc, #96]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b46:	d105      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d015      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b60:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	490a      	ldr	r1, [pc, #40]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000

08002b9c <Switch_Power>:


const pinPort *switches[] = {&U5IN0, &U5IN1, &U6IN0, &U6IN1, &U7IN0, &U7IN1};

void Switch_Power(uint8_t enableSwitching, uint8_t newState)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	460a      	mov	r2, r1
 8002ba6:	71fb      	strb	r3, [r7, #7]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	71bb      	strb	r3, [r7, #6]
	for(uint32_t i=0; i<6; i++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e020      	b.n	8002bf4 <Switch_Power+0x58>
	{
		if ((1<<i) & enableSwitching)
 8002bb2:	79fa      	ldrb	r2, [r7, #7]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	fa42 f303 	asr.w	r3, r2, r3
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d015      	beq.n	8002bee <Switch_Power+0x52>
		{
			HAL_GPIO_WritePin(switches[i]->PORT, switches[i]->PIN, ((1<<i)&newState)>>i);
 8002bc2:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <Switch_Power+0x68>)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	4a0d      	ldr	r2, [pc, #52]	; (8002c04 <Switch_Power+0x68>)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd4:	8899      	ldrh	r1, [r3, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	79bb      	ldrb	r3, [r7, #6]
 8002bde:	401a      	ands	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	fa42 f303 	asr.w	r3, r2, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	f7ff f819 	bl	8001c20 <HAL_GPIO_WritePin>
	for(uint32_t i=0; i<6; i++)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d9db      	bls.n	8002bb2 <Switch_Power+0x16>
		}
	}
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000028 	.word	0x20000028

08002c08 <Config_Setup>:
#include "main.h"
#include "config.h"


void Config_Setup(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
	if(Flash_Read(FLASH_PAGE_63)==0xFFFFFFFF) //initialize the flash to avoid errors
 8002c0c:	4807      	ldr	r0, [pc, #28]	; (8002c2c <Config_Setup+0x24>)
 8002c0e:	f000 f9f3 	bl	8002ff8 <Flash_Read>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d104      	bne.n	8002c24 <Config_Setup+0x1c>

		Config_1();

#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_0();
 8002c1a:	f000 f809 	bl	8002c30 <Config_0>

#endif

		Config_Write_Flash();
 8002c1e:	f000 f84d 	bl	8002cbc <Config_Write_Flash>
	}
	else //if flash is not blank read in values from flash
	{
		Config_Read_Flash();
	}
}
 8002c22:	e001      	b.n	8002c28 <Config_Setup+0x20>
		Config_Read_Flash();
 8002c24:	f000 f8d4 	bl	8002dd0 <Config_Read_Flash>
}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	0801f800 	.word	0x0801f800

08002c30 <Config_0>:


void Config_0(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0

	Digital_In_EN = 0xb00000000;

#else //in this case we test digital inputs

	Digital_In_EN = 0b00011101; //bit for PB4 is 0 to ensure it isn't used as PB4 seemed to have hardware problems
 8002c34:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <Config_0+0x80>)
 8002c36:	221d      	movs	r2, #29
 8002c38:	601a      	str	r2, [r3, #0]

#endif

	Can_IDs[0] = 0x0F;
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <Config_0+0x84>)
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	601a      	str	r2, [r3, #0]
	Can_DLCs[0] = 1;
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <Config_0+0x88>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
	Can_IDs[1] = 0xFF;
 8002c46:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <Config_0+0x84>)
 8002c48:	22ff      	movs	r2, #255	; 0xff
 8002c4a:	605a      	str	r2, [r3, #4]
	Can_DLCs[1] = 0;
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <Config_0+0x88>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	605a      	str	r2, [r3, #4]
	Can_IDs[2] = -1;
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <Config_0+0x84>)
 8002c54:	f04f 32ff 	mov.w	r2, #4294967295
 8002c58:	609a      	str	r2, [r3, #8]
	Can_DLCs[2] = 4;
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <Config_0+0x88>)
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	609a      	str	r2, [r3, #8]
	Can_IDs[3] = -1;
 8002c60:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <Config_0+0x84>)
 8002c62:	f04f 32ff 	mov.w	r2, #4294967295
 8002c66:	60da      	str	r2, [r3, #12]
	Can_DLCs[3] = 0;
 8002c68:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <Config_0+0x88>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	60da      	str	r2, [r3, #12]
	Can_IDs[4] = -1;
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <Config_0+0x84>)
 8002c70:	f04f 32ff 	mov.w	r2, #4294967295
 8002c74:	611a      	str	r2, [r3, #16]
	Can_DLCs[4] = 0;
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <Config_0+0x88>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
	Can_IDs[5] = -1;
 8002c7c:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <Config_0+0x84>)
 8002c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c82:	615a      	str	r2, [r3, #20]
	Can_DLCs[5] = 0;
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <Config_0+0x88>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	615a      	str	r2, [r3, #20]
	Can_IDs[6] = -1;
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <Config_0+0x84>)
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c90:	619a      	str	r2, [r3, #24]
	Can_DLCs[6] = 0;
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <Config_0+0x88>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
	Can_IDs[7] = -1;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <Config_0+0x84>)
 8002c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9e:	61da      	str	r2, [r3, #28]
	Can_DLCs[7] = 0;
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <Config_0+0x88>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	61da      	str	r2, [r3, #28]
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	20000080 	.word	0x20000080
 8002cb4:	2000028c 	.word	0x2000028c
 8002cb8:	200002cc 	.word	0x200002cc

08002cbc <Config_Write_Flash>:
	//TODO: setup code for each node that will be in the car
}


void Config_Write_Flash(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
 8002cc2:	af00      	add	r7, sp, #0
	uint32_t data[512] = {0};
 8002cc4:	463b      	mov	r3, r7
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2100      	movs	r1, #0
 8002cd0:	f000 fe00 	bl	80038d4 <memset>

	//bytes: [enable falling edge to can], [enable rising edge to can], [digital in interrupt enable], [digital in enable]
	data[DIGITAL_IN_0_POS]=Digital_In_EN+(Digital_In_Interrupt_EN<<8)+(Digital_In_Interrupt_Can_Rising<<16)+(Digital_In_Interrupt_Can_Falling<<24); //TODO: set this to be the things it should be for digital_in
 8002cd4:	4b35      	ldr	r3, [pc, #212]	; (8002dac <Config_Write_Flash+0xf0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	021a      	lsls	r2, r3, #8
 8002cda:	4b35      	ldr	r3, [pc, #212]	; (8002db0 <Config_Write_Flash+0xf4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	441a      	add	r2, r3
 8002ce0:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <Config_Write_Flash+0xf8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	041b      	lsls	r3, r3, #16
 8002ce6:	441a      	add	r2, r3
 8002ce8:	4b33      	ldr	r3, [pc, #204]	; (8002db8 <Config_Write_Flash+0xfc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	061b      	lsls	r3, r3, #24
 8002cee:	441a      	add	r2, r3
 8002cf0:	463b      	mov	r3, r7
 8002cf2:	601a      	str	r2, [r3, #0]
	//bytes: [unused], [unused], [enable rising edge switch power], [enable falling edge switch power]
	data[DIGITAL_IN_1_POS]=(0)+(0)+(Digital_In_Interrupt_Power_Rising<<16)+(Digital_In_Interrupt_Power_Falling<<24);
 8002cf4:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <Config_Write_Flash+0x100>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	041a      	lsls	r2, r3, #16
 8002cfa:	4b31      	ldr	r3, [pc, #196]	; (8002dc0 <Config_Write_Flash+0x104>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	061b      	lsls	r3, r3, #24
 8002d00:	441a      	add	r2, r3
 8002d02:	463b      	mov	r3, r7
 8002d04:	605a      	str	r2, [r3, #4]
	//bytes: [unused], [can dlc], [can id high], [can id low] x8 //any can id outside the valid range of 0 to 2047 should be treated as disabled
	data[CAN_ID_0_POS]=(0)+(Can_DLCs[0]<<16)+(Can_IDs[0]&0xFFFF);
 8002d06:	4b2f      	ldr	r3, [pc, #188]	; (8002dc4 <Config_Write_Flash+0x108>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	041a      	lsls	r2, r3, #16
 8002d0c:	4b2e      	ldr	r3, [pc, #184]	; (8002dc8 <Config_Write_Flash+0x10c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	441a      	add	r2, r3
 8002d14:	463b      	mov	r3, r7
 8002d16:	609a      	str	r2, [r3, #8]
	data[CAN_ID_1_POS]=(0)+(Can_DLCs[1]<<16)+(Can_IDs[1]&0xFFFF);
 8002d18:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <Config_Write_Flash+0x108>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	041a      	lsls	r2, r3, #16
 8002d1e:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <Config_Write_Flash+0x10c>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	441a      	add	r2, r3
 8002d26:	463b      	mov	r3, r7
 8002d28:	60da      	str	r2, [r3, #12]
	data[CAN_ID_2_POS]=(0)+(Can_DLCs[2]<<16)+(Can_IDs[2]&0xFFFF);
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <Config_Write_Flash+0x108>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	041a      	lsls	r2, r3, #16
 8002d30:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <Config_Write_Flash+0x10c>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	441a      	add	r2, r3
 8002d38:	463b      	mov	r3, r7
 8002d3a:	611a      	str	r2, [r3, #16]
	data[CAN_ID_3_POS]=(0)+(Can_DLCs[3]<<16)+(Can_IDs[3]&0xFFFF);
 8002d3c:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <Config_Write_Flash+0x108>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	041a      	lsls	r2, r3, #16
 8002d42:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <Config_Write_Flash+0x10c>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	441a      	add	r2, r3
 8002d4a:	463b      	mov	r3, r7
 8002d4c:	615a      	str	r2, [r3, #20]
	data[CAN_ID_4_POS]=(0)+(Can_DLCs[4]<<16)+(Can_IDs[4]&0xFFFF);
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <Config_Write_Flash+0x108>)
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	041a      	lsls	r2, r3, #16
 8002d54:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <Config_Write_Flash+0x10c>)
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	441a      	add	r2, r3
 8002d5c:	463b      	mov	r3, r7
 8002d5e:	619a      	str	r2, [r3, #24]
	data[CAN_ID_5_POS]=(0)+(Can_DLCs[5]<<16)+(Can_IDs[5]&0xFFFF);
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <Config_Write_Flash+0x108>)
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	041a      	lsls	r2, r3, #16
 8002d66:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <Config_Write_Flash+0x10c>)
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	441a      	add	r2, r3
 8002d6e:	463b      	mov	r3, r7
 8002d70:	61da      	str	r2, [r3, #28]
	data[CAN_ID_6_POS]=(0)+(Can_DLCs[6]<<16)+(Can_IDs[6]&0xFFFF);
 8002d72:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <Config_Write_Flash+0x108>)
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	041a      	lsls	r2, r3, #16
 8002d78:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <Config_Write_Flash+0x10c>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	441a      	add	r2, r3
 8002d80:	463b      	mov	r3, r7
 8002d82:	621a      	str	r2, [r3, #32]
	data[CAN_ID_7_POS]=(0)+(Can_DLCs[7]<<16)+(Can_IDs[7]&0xFFFF);
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <Config_Write_Flash+0x108>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	041a      	lsls	r2, r3, #16
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <Config_Write_Flash+0x10c>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	441a      	add	r2, r3
 8002d92:	463b      	mov	r3, r7
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24

	Flash_Write(FLASH_PAGE_63, 63, data, 10);
 8002d96:	463a      	mov	r2, r7
 8002d98:	230a      	movs	r3, #10
 8002d9a:	213f      	movs	r1, #63	; 0x3f
 8002d9c:	480b      	ldr	r0, [pc, #44]	; (8002dcc <Config_Write_Flash+0x110>)
 8002d9e:	f000 f895 	bl	8002ecc <Flash_Write>
}
 8002da2:	bf00      	nop
 8002da4:	f507 6700 	add.w	r7, r7, #2048	; 0x800
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000274 	.word	0x20000274
 8002db0:	20000080 	.word	0x20000080
 8002db4:	20000068 	.word	0x20000068
 8002db8:	20000064 	.word	0x20000064
 8002dbc:	20000388 	.word	0x20000388
 8002dc0:	20000384 	.word	0x20000384
 8002dc4:	200002cc 	.word	0x200002cc
 8002dc8:	2000028c 	.word	0x2000028c
 8002dcc:	0801f800 	.word	0x0801f800

08002dd0 <Config_Read_Flash>:

void Config_Read_Flash(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
	Digital_In_EN = (0b00011101&(DIGITAL_IN_0>>0)); //bit for PB4 is 0 to ensure it isn't used as PB4 seemed to have hardware problems
 8002dd4:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <Config_Read_Flash+0xcc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 031d 	and.w	r3, r3, #29
 8002ddc:	4a30      	ldr	r2, [pc, #192]	; (8002ea0 <Config_Read_Flash+0xd0>)
 8002dde:	6013      	str	r3, [r2, #0]

	Can_IDs[0] = ((CAN_ID_0>>0)&0xFFFF);
 8002de0:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <Config_Read_Flash+0xd4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	4a30      	ldr	r2, [pc, #192]	; (8002ea8 <Config_Read_Flash+0xd8>)
 8002de8:	6013      	str	r3, [r2, #0]
	Can_DLCs[0] = ((CAN_ID_0>>16)&0xFF);
 8002dea:	4b2e      	ldr	r3, [pc, #184]	; (8002ea4 <Config_Read_Flash+0xd4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	0c1b      	lsrs	r3, r3, #16
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	4a2e      	ldr	r2, [pc, #184]	; (8002eac <Config_Read_Flash+0xdc>)
 8002df4:	6013      	str	r3, [r2, #0]
	Can_IDs[1] = ((CAN_ID_1>>0)&0xFFFF);
 8002df6:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <Config_Read_Flash+0xe0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	4a2a      	ldr	r2, [pc, #168]	; (8002ea8 <Config_Read_Flash+0xd8>)
 8002dfe:	6053      	str	r3, [r2, #4]
	Can_DLCs[1] = ((CAN_ID_1>>16)&0xFF);
 8002e00:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <Config_Read_Flash+0xe0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	0c1b      	lsrs	r3, r3, #16
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	4a28      	ldr	r2, [pc, #160]	; (8002eac <Config_Read_Flash+0xdc>)
 8002e0a:	6053      	str	r3, [r2, #4]
	Can_IDs[2] = ((CAN_ID_2>>0)&0xFFFF);
 8002e0c:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <Config_Read_Flash+0xe4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4a25      	ldr	r2, [pc, #148]	; (8002ea8 <Config_Read_Flash+0xd8>)
 8002e14:	6093      	str	r3, [r2, #8]
	Can_DLCs[2] = ((CAN_ID_2>>16)&0xFF);
 8002e16:	4b27      	ldr	r3, [pc, #156]	; (8002eb4 <Config_Read_Flash+0xe4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	0c1b      	lsrs	r3, r3, #16
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	4a23      	ldr	r2, [pc, #140]	; (8002eac <Config_Read_Flash+0xdc>)
 8002e20:	6093      	str	r3, [r2, #8]
	Can_IDs[3] = ((CAN_ID_3>>0)&0xFFFF);
 8002e22:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <Config_Read_Flash+0xe8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4a1f      	ldr	r2, [pc, #124]	; (8002ea8 <Config_Read_Flash+0xd8>)
 8002e2a:	60d3      	str	r3, [r2, #12]
	Can_DLCs[3] = ((CAN_ID_3>>16)&0xFF);
 8002e2c:	4b22      	ldr	r3, [pc, #136]	; (8002eb8 <Config_Read_Flash+0xe8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	4a1d      	ldr	r2, [pc, #116]	; (8002eac <Config_Read_Flash+0xdc>)
 8002e36:	60d3      	str	r3, [r2, #12]
	Can_IDs[4] = ((CAN_ID_4>>0)&0xFFFF);
 8002e38:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <Config_Read_Flash+0xec>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <Config_Read_Flash+0xd8>)
 8002e40:	6113      	str	r3, [r2, #16]
	Can_DLCs[4] = ((CAN_ID_4>>16)&0xFF);
 8002e42:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <Config_Read_Flash+0xec>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	0c1b      	lsrs	r3, r3, #16
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	4a18      	ldr	r2, [pc, #96]	; (8002eac <Config_Read_Flash+0xdc>)
 8002e4c:	6113      	str	r3, [r2, #16]
	Can_IDs[5] = ((CAN_ID_5>>0)&0xFFFF);
 8002e4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <Config_Read_Flash+0xf0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <Config_Read_Flash+0xd8>)
 8002e56:	6153      	str	r3, [r2, #20]
	Can_DLCs[5] = ((CAN_ID_5>>16)&0xFF);
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <Config_Read_Flash+0xf0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0c1b      	lsrs	r3, r3, #16
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	4a12      	ldr	r2, [pc, #72]	; (8002eac <Config_Read_Flash+0xdc>)
 8002e62:	6153      	str	r3, [r2, #20]
	Can_IDs[6] = ((CAN_ID_6>>0)&0xFFFF);
 8002e64:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <Config_Read_Flash+0xf4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ea8 <Config_Read_Flash+0xd8>)
 8002e6c:	6193      	str	r3, [r2, #24]
	Can_DLCs[6] = ((CAN_ID_6>>16)&0xFF);
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <Config_Read_Flash+0xf4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	0c1b      	lsrs	r3, r3, #16
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <Config_Read_Flash+0xdc>)
 8002e78:	6193      	str	r3, [r2, #24]
	Can_IDs[7] = ((CAN_ID_7>>0)&0xFFFF);
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <Config_Read_Flash+0xf8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <Config_Read_Flash+0xd8>)
 8002e82:	61d3      	str	r3, [r2, #28]
	Can_DLCs[7] = ((CAN_ID_7>>16)&0xFF);
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <Config_Read_Flash+0xf8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	4a07      	ldr	r2, [pc, #28]	; (8002eac <Config_Read_Flash+0xdc>)
 8002e8e:	61d3      	str	r3, [r2, #28]
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	0801f800 	.word	0x0801f800
 8002ea0:	20000080 	.word	0x20000080
 8002ea4:	0801f808 	.word	0x0801f808
 8002ea8:	2000028c 	.word	0x2000028c
 8002eac:	200002cc 	.word	0x200002cc
 8002eb0:	0801f80c 	.word	0x0801f80c
 8002eb4:	0801f810 	.word	0x0801f810
 8002eb8:	0801f814 	.word	0x0801f814
 8002ebc:	0801f818 	.word	0x0801f818
 8002ec0:	0801f81c 	.word	0x0801f81c
 8002ec4:	0801f820 	.word	0x0801f820
 8002ec8:	0801f824 	.word	0x0801f824

08002ecc <Flash_Write>:


void Flash_Write(uint32_t Flash_Address, uint32_t Page, uint32_t Flash_Data[512], int Data_Words)
{
 8002ecc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002ed0:	b08c      	sub	sp, #48	; 0x30
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	603b      	str	r3, [r7, #0]
	FLASH_EraseInitTypeDef pEraseInit;
	uint32_t pError = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	613b      	str	r3, [r7, #16]

	pEraseInit.Page = Page;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	61fb      	str	r3, [r7, #28]
	pEraseInit.NbPages = 1;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	623b      	str	r3, [r7, #32]
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eec:	b672      	cpsid	i

	__disable_irq();
	if(HAL_FLASH_Unlock() != HAL_OK)
 8002eee:	f7fe fb09 	bl	8001504 <HAL_FLASH_Unlock>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <Flash_Write+0x32>
  __ASM volatile ("cpsie i" : : : "memory");
 8002ef8:	b662      	cpsie	i
	{
		__enable_irq();
		Error_Handler();
 8002efa:	f000 fbad 	bl	8003658 <Error_Handler>
	}

	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0) { }
 8002efe:	bf00      	nop
 8002f00:	4b3c      	ldr	r3, [pc, #240]	; (8002ff4 <Flash_Write+0x128>)
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0c:	d0f8      	beq.n	8002f00 <Flash_Write+0x34>

	if(HAL_FLASHEx_Erase(&pEraseInit, &pError) != HAL_OK)
 8002f0e:	f107 0210 	add.w	r2, r7, #16
 8002f12:	f107 0314 	add.w	r3, r7, #20
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe fbdb 	bl	80016d4 <HAL_FLASHEx_Erase>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d009      	beq.n	8002f38 <Flash_Write+0x6c>
 8002f24:	b662      	cpsie	i
	{
		__enable_irq();
		while(1)
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8002f26:	2108      	movs	r1, #8
 8002f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f2c:	f7fe fe90 	bl	8001c50 <HAL_GPIO_TogglePin>
			HAL_Delay(33);
 8002f30:	2021      	movs	r0, #33	; 0x21
 8002f32:	f7fd f9e1 	bl	80002f8 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8002f36:	e7f6      	b.n	8002f26 <Flash_Write+0x5a>
		}
	}

	uint64_t data;
	for(int i=0; i<((Data_Words+1)/2); i++) //here we want integer division that rounds up instead of down
 8002f38:	2300      	movs	r3, #0
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3c:	e042      	b.n	8002fc4 <Flash_Write+0xf8>
	{
		data=(uint64_t)Flash_Data[i*2];
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	461a      	mov	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4413      	add	r3, r2
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f04f 0400 	mov.w	r4, #0
 8002f4e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		if((i*2)+1<Data_Words)
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	3301      	adds	r3, #1
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	dd17      	ble.n	8002f8e <Flash_Write+0xc2>
		{
			data+=((uint64_t)Flash_Data[i*2+1]<<32);
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	3304      	adds	r3, #4
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0b00 	mov.w	fp, #0
 8002f74:	f04f 0c00 	mov.w	ip, #0
 8002f78:	468c      	mov	ip, r1
 8002f7a:	f04f 0b00 	mov.w	fp, #0
 8002f7e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002f82:	eb1b 0301 	adds.w	r3, fp, r1
 8002f86:	eb4c 0402 	adc.w	r4, ip, r2
 8002f8a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		}

			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Flash_Address+i*0x08, data) != HAL_OK)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	461a      	mov	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	18d1      	adds	r1, r2, r3
 8002f98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7fe fa5b 	bl	8001458 <HAL_FLASH_Program>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <Flash_Write+0xe2>
 8002fa8:	b662      	cpsie	i
			{
				__enable_irq();
				Error_Handler();
 8002faa:	f000 fb55 	bl	8003658 <Error_Handler>
			}
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0) { }
 8002fae:	bf00      	nop
 8002fb0:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <Flash_Write+0x128>)
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbc:	d0f8      	beq.n	8002fb0 <Flash_Write+0xe4>
	for(int i=0; i<((Data_Words+1)/2); i++) //here we want integer division that rounds up instead of down
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	0fda      	lsrs	r2, r3, #31
 8002fca:	4413      	add	r3, r2
 8002fcc:	105b      	asrs	r3, r3, #1
 8002fce:	461a      	mov	r2, r3
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	dbb3      	blt.n	8002f3e <Flash_Write+0x72>
	}

	if(HAL_FLASH_Lock() != HAL_OK)
 8002fd6:	f7fe fab7 	bl	8001548 <HAL_FLASH_Lock>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <Flash_Write+0x11a>
 8002fe0:	b662      	cpsie	i
	{
		__enable_irq();
		Error_Handler();
 8002fe2:	f000 fb39 	bl	8003658 <Error_Handler>
 8002fe6:	b662      	cpsie	i
	}
	__enable_irq();
}
 8002fe8:	bf00      	nop
 8002fea:	3730      	adds	r7, #48	; 0x30
 8002fec:	46bd      	mov	sp, r7
 8002fee:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40022000 	.word	0x40022000

08002ff8 <Flash_Read>:

uint32_t Flash_Read(uint32_t Flash_Address)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	return *(uint32_t*)Flash_Address;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <main>:
uint32_t ADC1ConvertedValues[3];
uint32_t ADC2ConvertedValues[3];


int main(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
	HAL_Init();
 8003016:	f7fd f8ff 	bl	8000218 <HAL_Init>

	SystemClock_Config();
 800301a:	f000 f8b2 	bl	8003182 <SystemClock_Config>

	Config_Setup();
 800301e:	f7ff fdf3 	bl	8002c08 <Config_Setup>


	MX_GPIO_Init();
 8003022:	f000 f9f3 	bl	800340c <MX_GPIO_Init>
	MX_DMA_Init();
 8003026:	f000 f9bf 	bl	80033a8 <MX_DMA_Init>
	//MX_ADC1_Init();
	//MX_ADC2_Init();
	MX_FDCAN_Init();
 800302a:	f000 f911 	bl	8003250 <MX_FDCAN_Init>
	while(1)
	{
		//example commands stored here
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)); //reading pins may be wanted with interrupts at some time, and it may be wanted to debounce some digital inputs

		for(int i=0; i<8; i++)
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	e006      	b.n	8003042 <main+0x32>
			{
			CanSend(i);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f80a 	bl	8003050 <CanSend>
		for(int i=0; i<8; i++)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3301      	adds	r3, #1
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b07      	cmp	r3, #7
 8003046:	ddf5      	ble.n	8003034 <main+0x24>
			}
		HAL_Delay(100);
 8003048:	2064      	movs	r0, #100	; 0x64
 800304a:	f7fd f955 	bl	80002f8 <HAL_Delay>
		for(int i=0; i<8; i++)
 800304e:	e7ee      	b.n	800302e <main+0x1e>

08003050 <CanSend>:
	}
}


uint32_t CanSend(uint32_t message)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08e      	sub	sp, #56	; 0x38
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	//TODO: maybe have warning states based on these if statements
	if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) < 1)
 8003058:	482b      	ldr	r0, [pc, #172]	; (8003108 <CanSend+0xb8>)
 800305a:	f7fd fe91 	bl	8000d80 <HAL_FDCAN_GetTxFifoFreeLevel>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d102      	bne.n	800306a <CanSend+0x1a>
	{
		return -1;
 8003064:	f04f 33ff 	mov.w	r3, #4294967295
 8003068:	e04a      	b.n	8003100 <CanSend+0xb0>
	}

	if(Can_IDs[message]>2047)
 800306a:	4a28      	ldr	r2, [pc, #160]	; (800310c <CanSend+0xbc>)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003076:	d302      	bcc.n	800307e <CanSend+0x2e>
	{
		return -1;
 8003078:	f04f 33ff 	mov.w	r3, #4294967295
 800307c:	e040      	b.n	8003100 <CanSend+0xb0>
		//TODO: for sure we want warning for trying to send disabled message
	}
	else if(Can_DLCs[message]==0)
 800307e:	4a24      	ldr	r2, [pc, #144]	; (8003110 <CanSend+0xc0>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d102      	bne.n	8003090 <CanSend+0x40>
	{
		return -1;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295
 800308e:	e037      	b.n	8003100 <CanSend+0xb0>
		//TODO: set warning for trying to send message with 0 DLC
	}
	else if(Can_DLCs[message]>8)
 8003090:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <CanSend+0xc0>)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d902      	bls.n	80030a2 <CanSend+0x52>
	{
		return -1;
 800309c:	f04f 33ff 	mov.w	r3, #4294967295
 80030a0:	e02e      	b.n	8003100 <CanSend+0xb0>
		//TODO: set warning for trying to send too long message
	}

	FDCAN_TxHeaderTypeDef TxHeader;

	TxHeader.Identifier = Can_IDs[message];
 80030a2:	4a1a      	ldr	r2, [pc, #104]	; (800310c <CanSend+0xbc>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	617b      	str	r3, [r7, #20]
	TxHeader.DataLength = (Can_DLCs[message]<<16);
 80030ac:	4a18      	ldr	r2, [pc, #96]	; (8003110 <CanSend+0xc0>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	623b      	str	r3, [r7, #32]
	uint8_t CANTxData[8] = { 0x88, 0xFF, 0x00, 0x01, 0x12, 0x11, 0x22, 0x23 }; //TODO: tx data based on values from flash somehow
 80030b8:	4a16      	ldr	r2, [pc, #88]	; (8003114 <CanSend+0xc4>)
 80030ba:	f107 030c 	add.w	r3, r7, #12
 80030be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030c2:	e883 0003 	stmia.w	r3, {r0, r1}

	TxHeader.IdType = FDCAN_STANDARD_ID;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80030d2:	2300      	movs	r3, #0
 80030d4:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80030d6:	2300      	movs	r3, #0
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80030da:	2300      	movs	r3, #0
 80030dc:	633b      	str	r3, [r7, #48]	; 0x30
	TxHeader.MessageMarker = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	637b      	str	r3, [r7, #52]	; 0x34

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 80030e2:	f107 020c 	add.w	r2, r7, #12
 80030e6:	f107 0314 	add.w	r3, r7, #20
 80030ea:	4619      	mov	r1, r3
 80030ec:	4806      	ldr	r0, [pc, #24]	; (8003108 <CanSend+0xb8>)
 80030ee:	f7fd fd29 	bl	8000b44 <HAL_FDCAN_AddMessageToTxFifoQ>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <CanSend+0xae>
	{
		return -1;
 80030f8:	f04f 33ff 	mov.w	r3, #4294967295
 80030fc:	e000      	b.n	8003100 <CanSend+0xb0>
		//Error_Handler();
	}

	return 0;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3738      	adds	r7, #56	; 0x38
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20000110 	.word	0x20000110
 800310c:	2000028c 	.word	0x2000028c
 8003110:	200002cc 	.word	0x200002cc
 8003114:	080038fc 	.word	0x080038fc

08003118 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08e      	sub	sp, #56	; 0x38
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t CANRxData[8];

	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d026      	beq.n	800317a <HAL_FDCAN_RxFifo0Callback+0x62>
	{
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, CANRxData) != HAL_OK)
 800312c:	f107 0308 	add.w	r3, r7, #8
 8003130:	f107 0210 	add.w	r2, r7, #16
 8003134:	2140      	movs	r1, #64	; 0x40
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fd fd48 	bl	8000bcc <HAL_FDCAN_GetRxMessage>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_FDCAN_RxFifo0Callback+0x2e>
		{
			Error_Handler();
 8003142:	f000 fa89 	bl	8003658 <Error_Handler>
			//TODO: move to error can message
		}

		if (RxHeader.Identifier == CANID_SYNC)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b80      	cmp	r3, #128	; 0x80
 800314a:	d016      	beq.n	800317a <HAL_FDCAN_RxFifo0Callback+0x62>
		{
			//TODO: put logic for sync message here
		}
		else if (RxHeader.Identifier == CANID_CONFIG)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003152:	d10e      	bne.n	8003172 <HAL_FDCAN_RxFifo0Callback+0x5a>
		{
			//TODO: put logic here for toggling output pins and pwm frequencies
			//TODO: logic for writing config to flash
			if(CANRxData[0] == ID)
 8003154:	7a3b      	ldrb	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10e      	bne.n	8003178 <HAL_FDCAN_RxFifo0Callback+0x60>
			{
				switch(CANRxData[1])
 800315a:	7a7b      	ldrb	r3, [r7, #9]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d000      	beq.n	8003162 <HAL_FDCAN_RxFifo0Callback+0x4a>
				case SWITCH_POWER:
					Switch_Power(CANRxData[2], CANRxData[3]);
					break;
				default:
					//TODO: warning to canbus for undefined configuration command
					break;
 8003160:	e00b      	b.n	800317a <HAL_FDCAN_RxFifo0Callback+0x62>
					Switch_Power(CANRxData[2], CANRxData[3]);
 8003162:	7abb      	ldrb	r3, [r7, #10]
 8003164:	461a      	mov	r2, r3
 8003166:	7afb      	ldrb	r3, [r7, #11]
 8003168:	4619      	mov	r1, r3
 800316a:	4610      	mov	r0, r2
 800316c:	f7ff fd16 	bl	8002b9c <Switch_Power>
					break;
 8003170:	e003      	b.n	800317a <HAL_FDCAN_RxFifo0Callback+0x62>
				}
			}
		}
		else
		{
			Error_Handler();
 8003172:	f000 fa71 	bl	8003658 <Error_Handler>
			//TODO: move to error can message
		}
	}
}
 8003176:	e000      	b.n	800317a <HAL_FDCAN_RxFifo0Callback+0x62>
			}
 8003178:	bf00      	nop
}
 800317a:	bf00      	nop
 800317c:	3738      	adds	r7, #56	; 0x38
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <SystemClock_Config>:



void SystemClock_Config(void)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b0a4      	sub	sp, #144	; 0x90
 8003186:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003188:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800318c:	2238      	movs	r2, #56	; 0x38
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fb9f 	bl	80038d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003196:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	609a      	str	r2, [r3, #8]
 80031a2:	60da      	str	r2, [r3, #12]
 80031a4:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031a6:	463b      	mov	r3, r7
 80031a8:	2244      	movs	r2, #68	; 0x44
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fb91 	bl	80038d4 <memset>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80031b2:	2000      	movs	r0, #0
 80031b4:	f7fe fd66 	bl	8001c84 <HAL_PWREx_ControlVoltageScaling>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031b8:	2301      	movs	r3, #1
 80031ba:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80031bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80031c0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031c2:	2302      	movs	r3, #2
 80031c4:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031c6:	2303      	movs	r3, #3
 80031c8:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80031ca:	2304      	movs	r3, #4
 80031cc:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80031ce:	2355      	movs	r3, #85	; 0x55
 80031d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031d4:	2302      	movs	r3, #2
 80031d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031da:	2302      	movs	r3, #2
 80031dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031e0:	2302      	movs	r3, #2
 80031e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe fdee 	bl	8001dcc <HAL_RCC_OscConfig>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <SystemClock_Config+0x78>
	{
		Error_Handler();
 80031f6:	f000 fa2f 	bl	8003658 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 80031fa:	230f      	movs	r3, #15
 80031fc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031fe:	2303      	movs	r3, #3
 8003200:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003202:	2300      	movs	r3, #0
 8003204:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003206:	2300      	movs	r3, #0
 8003208:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800320a:	2300      	movs	r3, #0
 800320c:	657b      	str	r3, [r7, #84]	; 0x54

	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 800320e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003212:	2108      	movs	r1, #8
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff f8f1 	bl	80023fc <HAL_RCC_ClockConfig>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8003220:	f000 fa1a 	bl	8003658 <Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
 8003224:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8003228:	603b      	str	r3, [r7, #0]
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800322a:	2300      	movs	r3, #0
 800322c:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800322e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003232:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003234:	463b      	mov	r3, r7
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fac0 	bl	80027bc <HAL_RCCEx_PeriphCLKConfig>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8003242:	f000 fa09 	bl	8003658 <Error_Handler>
	}
}
 8003246:	bf00      	nop
 8003248:	3790      	adds	r7, #144	; 0x90
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <MX_FDCAN_Init>:
		Error_Handler();
	}
}

static void MX_FDCAN_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef	sFilterConfig;

	hfdcan.Instance = FDCAN1;
 8003256:	4b52      	ldr	r3, [pc, #328]	; (80033a0 <MX_FDCAN_Init+0x150>)
 8003258:	4a52      	ldr	r2, [pc, #328]	; (80033a4 <MX_FDCAN_Init+0x154>)
 800325a:	601a      	str	r2, [r3, #0]
	hfdcan.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800325c:	4b50      	ldr	r3, [pc, #320]	; (80033a0 <MX_FDCAN_Init+0x150>)
 800325e:	2200      	movs	r2, #0
 8003260:	605a      	str	r2, [r3, #4]
	hfdcan.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003262:	4b4f      	ldr	r3, [pc, #316]	; (80033a0 <MX_FDCAN_Init+0x150>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
	hfdcan.Init.Mode = FDCAN_MODE_NORMAL;
 8003268:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <MX_FDCAN_Init+0x150>)
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
	hfdcan.Init.AutoRetransmission = DISABLE;
 800326e:	4b4c      	ldr	r3, [pc, #304]	; (80033a0 <MX_FDCAN_Init+0x150>)
 8003270:	2200      	movs	r2, #0
 8003272:	741a      	strb	r2, [r3, #16]
	hfdcan.Init.TransmitPause = DISABLE;
 8003274:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <MX_FDCAN_Init+0x150>)
 8003276:	2200      	movs	r2, #0
 8003278:	745a      	strb	r2, [r3, #17]
	hfdcan.Init.ProtocolException = DISABLE;
 800327a:	4b49      	ldr	r3, [pc, #292]	; (80033a0 <MX_FDCAN_Init+0x150>)
 800327c:	2200      	movs	r2, #0
 800327e:	749a      	strb	r2, [r3, #18]
	hfdcan.Init.NominalPrescaler = 1;
 8003280:	4b47      	ldr	r3, [pc, #284]	; (80033a0 <MX_FDCAN_Init+0x150>)
 8003282:	2201      	movs	r2, #1
 8003284:	615a      	str	r2, [r3, #20]
	hfdcan.Init.NominalSyncJumpWidth = 1;
 8003286:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <MX_FDCAN_Init+0x150>)
 8003288:	2201      	movs	r2, #1
 800328a:	619a      	str	r2, [r3, #24]
	hfdcan.Init.NominalTimeSeg1 = 13;
 800328c:	4b44      	ldr	r3, [pc, #272]	; (80033a0 <MX_FDCAN_Init+0x150>)
 800328e:	220d      	movs	r2, #13
 8003290:	61da      	str	r2, [r3, #28]
	hfdcan.Init.NominalTimeSeg2 = 2;
 8003292:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <MX_FDCAN_Init+0x150>)
 8003294:	2202      	movs	r2, #2
 8003296:	621a      	str	r2, [r3, #32]
	hfdcan.Init.DataPrescaler = 1;
 8003298:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <MX_FDCAN_Init+0x150>)
 800329a:	2201      	movs	r2, #1
 800329c:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan.Init.DataSyncJumpWidth = 1;
 800329e:	4b40      	ldr	r3, [pc, #256]	; (80033a0 <MX_FDCAN_Init+0x150>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan.Init.DataTimeSeg1 = 1;
 80032a4:	4b3e      	ldr	r3, [pc, #248]	; (80033a0 <MX_FDCAN_Init+0x150>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan.Init.DataTimeSeg2 = 1;
 80032aa:	4b3d      	ldr	r3, [pc, #244]	; (80033a0 <MX_FDCAN_Init+0x150>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan.Init.StdFiltersNbr = 2;
 80032b0:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <MX_FDCAN_Init+0x150>)
 80032b2:	2202      	movs	r2, #2
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan.Init.ExtFiltersNbr = 0;
 80032b6:	4b3a      	ldr	r3, [pc, #232]	; (80033a0 <MX_FDCAN_Init+0x150>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80032bc:	4b38      	ldr	r3, [pc, #224]	; (80033a0 <MX_FDCAN_Init+0x150>)
 80032be:	2200      	movs	r2, #0
 80032c0:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_FDCAN_Init(&hfdcan) != HAL_OK)
 80032c2:	4837      	ldr	r0, [pc, #220]	; (80033a0 <MX_FDCAN_Init+0x150>)
 80032c4:	f7fd f9f8 	bl	80006b8 <HAL_FDCAN_Init>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_FDCAN_Init+0x82>
	{
		Error_Handler();
 80032ce:	f000 f9c3 	bl	8003658 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 80032d2:	2201      	movs	r2, #1
 80032d4:	2140      	movs	r1, #64	; 0x40
 80032d6:	4832      	ldr	r0, [pc, #200]	; (80033a0 <MX_FDCAN_Init+0x150>)
 80032d8:	f7fd fbd3 	bl	8000a82 <HAL_FDCAN_ConfigRxFifoOverwrite>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <MX_FDCAN_Init+0x96>
	{
		Error_Handler();
 80032e2:	f000 f9b9 	bl	8003658 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 80032e6:	2201      	movs	r2, #1
 80032e8:	2141      	movs	r1, #65	; 0x41
 80032ea:	482d      	ldr	r0, [pc, #180]	; (80033a0 <MX_FDCAN_Init+0x150>)
 80032ec:	f7fd fbc9 	bl	8000a82 <HAL_FDCAN_ConfigRxFifoOverwrite>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_FDCAN_Init+0xaa>
	{
		Error_Handler();
 80032f6:	f000 f9af 	bl	8003658 <Error_Handler>
	}

	//only accept config/request can messages and sync can messages
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80032fa:	2300      	movs	r3, #0
 80032fc:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8003302:	2302      	movs	r3, #2
 8003304:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003306:	2301      	movs	r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_CONFIG;
 800330a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800330e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8003310:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003314:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 8003316:	463b      	mov	r3, r7
 8003318:	4619      	mov	r1, r3
 800331a:	4821      	ldr	r0, [pc, #132]	; (80033a0 <MX_FDCAN_Init+0x150>)
 800331c:	f7fd fb26 	bl	800096c <HAL_FDCAN_ConfigFilter>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <MX_FDCAN_Init+0xda>
	{
		Error_Handler();
 8003326:	f000 f997 	bl	8003658 <Error_Handler>
	}

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800332a:	2300      	movs	r3, #0
 800332c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 1;
 800332e:	2301      	movs	r3, #1
 8003330:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8003332:	2302      	movs	r3, #2
 8003334:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003336:	2301      	movs	r3, #1
 8003338:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_SYNC;
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 800333e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003342:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 8003344:	463b      	mov	r3, r7
 8003346:	4619      	mov	r1, r3
 8003348:	4815      	ldr	r0, [pc, #84]	; (80033a0 <MX_FDCAN_Init+0x150>)
 800334a:	f7fd fb0f 	bl	800096c <HAL_FDCAN_ConfigFilter>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <MX_FDCAN_Init+0x108>
	{
		Error_Handler();
 8003354:	f000 f980 	bl	8003658 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 8003358:	2301      	movs	r3, #1
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	2301      	movs	r3, #1
 800335e:	2202      	movs	r2, #2
 8003360:	2102      	movs	r1, #2
 8003362:	480f      	ldr	r0, [pc, #60]	; (80033a0 <MX_FDCAN_Init+0x150>)
 8003364:	f7fd fb5c 	bl	8000a20 <HAL_FDCAN_ConfigGlobalFilter>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <MX_FDCAN_Init+0x122>
	{
		Error_Handler();
 800336e:	f000 f973 	bl	8003658 <Error_Handler>
	}

	if(HAL_FDCAN_Start(&hfdcan) != HAL_OK)
 8003372:	480b      	ldr	r0, [pc, #44]	; (80033a0 <MX_FDCAN_Init+0x150>)
 8003374:	f7fd fbbe 	bl	8000af4 <HAL_FDCAN_Start>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_FDCAN_Init+0x132>
	{
		Error_Handler();
 800337e:	f000 f96b 	bl	8003658 <Error_Handler>
	}
	if(HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8003382:	2200      	movs	r2, #0
 8003384:	2101      	movs	r1, #1
 8003386:	4806      	ldr	r0, [pc, #24]	; (80033a0 <MX_FDCAN_Init+0x150>)
 8003388:	f7fd fd0c 	bl	8000da4 <HAL_FDCAN_ActivateNotification>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <MX_FDCAN_Init+0x146>
	{
		Error_Handler();
 8003392:	f000 f961 	bl	8003658 <Error_Handler>
	}
}
 8003396:	bf00      	nop
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000110 	.word	0x20000110
 80033a4:	40006400 	.word	0x40006400

080033a8 <MX_DMA_Init>:

static void MX_DMA_Init(void) 
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80033ae:	4b16      	ldr	r3, [pc, #88]	; (8003408 <MX_DMA_Init+0x60>)
 80033b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b2:	4a15      	ldr	r2, [pc, #84]	; (8003408 <MX_DMA_Init+0x60>)
 80033b4:	f043 0304 	orr.w	r3, r3, #4
 80033b8:	6493      	str	r3, [r2, #72]	; 0x48
 80033ba:	4b13      	ldr	r3, [pc, #76]	; (8003408 <MX_DMA_Init+0x60>)
 80033bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	607b      	str	r3, [r7, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033c6:	4b10      	ldr	r3, [pc, #64]	; (8003408 <MX_DMA_Init+0x60>)
 80033c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ca:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <MX_DMA_Init+0x60>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	6493      	str	r3, [r2, #72]	; 0x48
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <MX_DMA_Init+0x60>)
 80033d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	2100      	movs	r1, #0
 80033e2:	200b      	movs	r0, #11
 80033e4:	f7fd f885 	bl	80004f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80033e8:	200b      	movs	r0, #11
 80033ea:	f7fd f89c 	bl	8000526 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80033ee:	2200      	movs	r2, #0
 80033f0:	2100      	movs	r1, #0
 80033f2:	200c      	movs	r0, #12
 80033f4:	f7fd f87d 	bl	80004f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80033f8:	200c      	movs	r0, #12
 80033fa:	f7fd f894 	bl	8000526 <HAL_NVIC_EnableIRQ>

}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000

0800340c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003412:	f107 030c 	add.w	r3, r7, #12
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	605a      	str	r2, [r3, #4]
 800341c:	609a      	str	r2, [r3, #8]
 800341e:	60da      	str	r2, [r3, #12]
 8003420:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003422:	4b8a      	ldr	r3, [pc, #552]	; (800364c <MX_GPIO_Init+0x240>)
 8003424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003426:	4a89      	ldr	r2, [pc, #548]	; (800364c <MX_GPIO_Init+0x240>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800342e:	4b87      	ldr	r3, [pc, #540]	; (800364c <MX_GPIO_Init+0x240>)
 8003430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800343a:	4b84      	ldr	r3, [pc, #528]	; (800364c <MX_GPIO_Init+0x240>)
 800343c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343e:	4a83      	ldr	r2, [pc, #524]	; (800364c <MX_GPIO_Init+0x240>)
 8003440:	f043 0302 	orr.w	r3, r3, #2
 8003444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003446:	4b81      	ldr	r3, [pc, #516]	; (800364c <MX_GPIO_Init+0x240>)
 8003448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003452:	4b7e      	ldr	r3, [pc, #504]	; (800364c <MX_GPIO_Init+0x240>)
 8003454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003456:	4a7d      	ldr	r2, [pc, #500]	; (800364c <MX_GPIO_Init+0x240>)
 8003458:	f043 0320 	orr.w	r3, r3, #32
 800345c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800345e:	4b7b      	ldr	r3, [pc, #492]	; (800364c <MX_GPIO_Init+0x240>)
 8003460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	683b      	ldr	r3, [r7, #0]

	//led pin, sel pins, and in pins should always be outputs
	//led pin and sel pins should always start low, in pins should start based on configuration
	//TODO: somewhere else check and set the default for IN pins
	//TODO: in analog reading section use SEL0 and SEL1 for multisense multiplexing
	HAL_GPIO_WritePin(LED.PORT, LED.PIN, 0);
 800346a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800346e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003472:	2200      	movs	r2, #0
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe fbd3 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL0.PORT, SEL0.PIN, 0);
 800347a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800347e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003482:	2200      	movs	r2, #0
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe fbcb 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL1.PORT, SEL1.PIN, 0);
 800348a:	4b71      	ldr	r3, [pc, #452]	; (8003650 <MX_GPIO_Init+0x244>)
 800348c:	2101      	movs	r1, #1
 800348e:	2200      	movs	r2, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe fbc5 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U5IN0.PORT, U5IN0.PIN, 1);
 8003496:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800349a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800349e:	2201      	movs	r2, #1
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fe fbbd 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U5IN1.PORT, U5IN1.PIN, 1);
 80034a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034aa:	2180      	movs	r1, #128	; 0x80
 80034ac:	2201      	movs	r2, #1
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fbb6 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U6IN0.PORT, U6IN0.PIN, 1);
 80034b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034b8:	2140      	movs	r1, #64	; 0x40
 80034ba:	2201      	movs	r2, #1
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fe fbaf 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U6IN1.PORT, U6IN1.PIN, 0);
 80034c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034c6:	2120      	movs	r1, #32
 80034c8:	2200      	movs	r2, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe fba8 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U7IN0.PORT, U7IN0.PIN, 0);
 80034d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034d4:	2110      	movs	r1, #16
 80034d6:	2200      	movs	r2, #0
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fe fba1 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U7IN1.PORT, U7IN1.PIN, 0);
 80034de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034e2:	2108      	movs	r1, #8
 80034e4:	2200      	movs	r2, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fb9a 	bl	8001c20 <HAL_GPIO_WritePin>

	//all outputs on portA assigned here
	GPIO_InitStruct.Pin = LED.PIN|SEL0.PIN|U5IN0.PIN|U5IN1.PIN|U6IN0.PIN|U6IN1.PIN|U7IN0.PIN|U7IN1.PIN;
 80034ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034f4:	4313      	orrs	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034fc:	4313      	orrs	r3, r2
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2280      	movs	r2, #128	; 0x80
 8003502:	4313      	orrs	r3, r2
 8003504:	b29b      	uxth	r3, r3
 8003506:	2240      	movs	r2, #64	; 0x40
 8003508:	4313      	orrs	r3, r2
 800350a:	b29b      	uxth	r3, r3
 800350c:	2220      	movs	r2, #32
 800350e:	4313      	orrs	r3, r2
 8003510:	b29b      	uxth	r3, r3
 8003512:	2210      	movs	r2, #16
 8003514:	4313      	orrs	r3, r2
 8003516:	b29b      	uxth	r3, r3
 8003518:	2208      	movs	r2, #8
 800351a:	4313      	orrs	r3, r2
 800351c:	b29b      	uxth	r3, r3
 800351e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003520:	2301      	movs	r3, #1
 8003522:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003528:	2300      	movs	r3, #0
 800352a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352c:	f107 030c 	add.w	r3, r7, #12
 8003530:	4619      	mov	r1, r3
 8003532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003536:	f7fe f9f1 	bl	800191c <HAL_GPIO_Init>

	//all outputs on portB assigned here
	GPIO_InitStruct.Pin = SEL1.PIN;
 800353a:	2301      	movs	r3, #1
 800353c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800353e:	2301      	movs	r3, #1
 8003540:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003546:	2300      	movs	r3, #0
 8003548:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800354a:	f107 030c 	add.w	r3, r7, #12
 800354e:	4619      	mov	r1, r3
 8003550:	483f      	ldr	r0, [pc, #252]	; (8003650 <MX_GPIO_Init+0x244>)
 8003552:	f7fe f9e3 	bl	800191c <HAL_GPIO_Init>


	if(Digital_In_EN && (1<<0))
 8003556:	4b3f      	ldr	r3, [pc, #252]	; (8003654 <MX_GPIO_Init+0x248>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d012      	beq.n	8003584 <MX_GPIO_Init+0x178>
	{
		HAL_GPIO_WritePin(DIO3.PORT, DIO3.PIN, GPIO_PIN_RESET);
 800355e:	4b3c      	ldr	r3, [pc, #240]	; (8003650 <MX_GPIO_Init+0x244>)
 8003560:	2108      	movs	r1, #8
 8003562:	2200      	movs	r2, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe fb5b 	bl	8001c20 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO3.PIN;
 800356a:	2308      	movs	r3, #8
 800356c:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800356e:	2300      	movs	r3, #0
 8003570:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO3.PORT, &GPIO_InitStruct);
 8003576:	4a36      	ldr	r2, [pc, #216]	; (8003650 <MX_GPIO_Init+0x244>)
 8003578:	f107 030c 	add.w	r3, r7, #12
 800357c:	4619      	mov	r1, r3
 800357e:	4610      	mov	r0, r2
 8003580:	f7fe f9cc 	bl	800191c <HAL_GPIO_Init>
	else if (1)
	{
		//here we configure pins intended for PWM purposes
	}

	if(Digital_In_EN && (1<<1))
 8003584:	4b33      	ldr	r3, [pc, #204]	; (8003654 <MX_GPIO_Init+0x248>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d012      	beq.n	80035b2 <MX_GPIO_Init+0x1a6>
	{
		HAL_GPIO_WritePin(DIO4.PORT, DIO4.PIN, GPIO_PIN_RESET);
 800358c:	4b30      	ldr	r3, [pc, #192]	; (8003650 <MX_GPIO_Init+0x244>)
 800358e:	2110      	movs	r1, #16
 8003590:	2200      	movs	r2, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe fb44 	bl	8001c20 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO4.PIN;
 8003598:	2310      	movs	r3, #16
 800359a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO4.PORT, &GPIO_InitStruct);
 80035a4:	4a2a      	ldr	r2, [pc, #168]	; (8003650 <MX_GPIO_Init+0x244>)
 80035a6:	f107 030c 	add.w	r3, r7, #12
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f7fe f9b5 	bl	800191c <HAL_GPIO_Init>
	else if (1)
	{
		//here we configure pins intended for PWM purposes
	}

	if(Digital_In_EN && (1<<2))
 80035b2:	4b28      	ldr	r3, [pc, #160]	; (8003654 <MX_GPIO_Init+0x248>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d012      	beq.n	80035e0 <MX_GPIO_Init+0x1d4>
	{
		HAL_GPIO_WritePin(DIO5.PORT, DIO5.PIN, GPIO_PIN_RESET);
 80035ba:	4b25      	ldr	r3, [pc, #148]	; (8003650 <MX_GPIO_Init+0x244>)
 80035bc:	2120      	movs	r1, #32
 80035be:	2200      	movs	r2, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe fb2d 	bl	8001c20 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO5.PIN;
 80035c6:	2320      	movs	r3, #32
 80035c8:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO5.PORT, &GPIO_InitStruct);
 80035d2:	4a1f      	ldr	r2, [pc, #124]	; (8003650 <MX_GPIO_Init+0x244>)
 80035d4:	f107 030c 	add.w	r3, r7, #12
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f7fe f99e 	bl	800191c <HAL_GPIO_Init>
	else if (1)
	{
		//here we configure pins intended for PWM purposes
	}

	if(Digital_In_EN && (1<<3))
 80035e0:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <MX_GPIO_Init+0x248>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d012      	beq.n	800360e <MX_GPIO_Init+0x202>
	{
		HAL_GPIO_WritePin(DIO6.PORT, DIO6.PIN, GPIO_PIN_RESET);
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <MX_GPIO_Init+0x244>)
 80035ea:	2140      	movs	r1, #64	; 0x40
 80035ec:	2200      	movs	r2, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe fb16 	bl	8001c20 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO6.PIN;
 80035f4:	2340      	movs	r3, #64	; 0x40
 80035f6:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO6.PORT, &GPIO_InitStruct);
 8003600:	4a13      	ldr	r2, [pc, #76]	; (8003650 <MX_GPIO_Init+0x244>)
 8003602:	f107 030c 	add.w	r3, r7, #12
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f7fe f987 	bl	800191c <HAL_GPIO_Init>
	else if (1)
	{
		//here we configure pins intended for PWM purposes
	}

	if(Digital_In_EN && (1<<4))
 800360e:	4b11      	ldr	r3, [pc, #68]	; (8003654 <MX_GPIO_Init+0x248>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <MX_GPIO_Init+0x238>
	{
		HAL_GPIO_WritePin(DIO15.PORT, DIO15.PIN, GPIO_PIN_RESET);
 8003616:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800361a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800361e:	2200      	movs	r2, #0
 8003620:	4618      	mov	r0, r3
 8003622:	f7fe fafd 	bl	8001c20 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = DIO15.PIN;
 8003626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800362a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800362c:	2300      	movs	r3, #0
 800362e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DIO15.PORT, &GPIO_InitStruct);
 8003634:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003638:	f107 030c 	add.w	r3, r7, #12
 800363c:	4619      	mov	r1, r3
 800363e:	4610      	mov	r0, r2
 8003640:	f7fe f96c 	bl	800191c <HAL_GPIO_Init>
	}
	else if (1)
	{
		//here we configure pins intended for PWM purposes
	}
}
 8003644:	bf00      	nop
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40021000 	.word	0x40021000
 8003650:	48000400 	.word	0x48000400
 8003654:	20000080 	.word	0x20000080

08003658 <Error_Handler>:


void Error_Handler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(LED.PORT, LED.PIN);
 800365c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003660:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe faf2 	bl	8001c50 <HAL_GPIO_TogglePin>
		HAL_Delay(33);
 800366c:	2021      	movs	r0, #33	; 0x21
 800366e:	f7fc fe43 	bl	80002f8 <HAL_Delay>
		HAL_GPIO_TogglePin(LED.PORT, LED.PIN);
 8003672:	e7f3      	b.n	800365c <Error_Handler+0x4>

08003674 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4a04      	ldr	r2, [pc, #16]	; (8003690 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800367e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003682:	6093      	str	r3, [r2, #8]
}
 8003684:	bf00      	nop
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40007000 	.word	0x40007000

08003694 <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_adc1;
extern DMA_HandleTypeDef hdma_adc2;


void HAL_MspInit(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <HAL_MspInit+0x44>)
 800369c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369e:	4a0e      	ldr	r2, [pc, #56]	; (80036d8 <HAL_MspInit+0x44>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6613      	str	r3, [r2, #96]	; 0x60
 80036a6:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <HAL_MspInit+0x44>)
 80036a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	607b      	str	r3, [r7, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036b2:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <HAL_MspInit+0x44>)
 80036b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b6:	4a08      	ldr	r2, [pc, #32]	; (80036d8 <HAL_MspInit+0x44>)
 80036b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036bc:	6593      	str	r3, [r2, #88]	; 0x58
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_MspInit+0x44>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	683b      	ldr	r3, [r7, #0]

  LL_PWR_DisableDeadBatteryPD();
 80036ca:	f7ff ffd3 	bl	8003674 <LL_PWR_DisableDeadBatteryPD>
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_FDCAN_MspInit>:

}


void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	; 0x28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	f107 0314 	add.w	r3, r7, #20
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1c      	ldr	r2, [pc, #112]	; (800376c <HAL_FDCAN_MspInit+0x90>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d131      	bne.n	8003762 <HAL_FDCAN_MspInit+0x86>
  {
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80036fe:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <HAL_FDCAN_MspInit+0x94>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	4a1b      	ldr	r2, [pc, #108]	; (8003770 <HAL_FDCAN_MspInit+0x94>)
 8003704:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003708:	6593      	str	r3, [r2, #88]	; 0x58
 800370a:	4b19      	ldr	r3, [pc, #100]	; (8003770 <HAL_FDCAN_MspInit+0x94>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003716:	4b16      	ldr	r3, [pc, #88]	; (8003770 <HAL_FDCAN_MspInit+0x94>)
 8003718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371a:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_FDCAN_MspInit+0x94>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003722:	4b13      	ldr	r3, [pc, #76]	; (8003770 <HAL_FDCAN_MspInit+0x94>)
 8003724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800372e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373c:	2300      	movs	r3, #0
 800373e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003740:	2309      	movs	r3, #9
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	4619      	mov	r1, r3
 800374a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800374e:	f7fe f8e5 	bl	800191c <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003752:	2200      	movs	r2, #0
 8003754:	2100      	movs	r1, #0
 8003756:	2015      	movs	r0, #21
 8003758:	f7fc fecb 	bl	80004f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800375c:	2015      	movs	r0, #21
 800375e:	f7fc fee2 	bl	8000526 <HAL_NVIC_EnableIRQ>
  }
}
 8003762:	bf00      	nop
 8003764:	3728      	adds	r7, #40	; 0x28
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40006400 	.word	0x40006400
 8003770:	40021000 	.word	0x40021000

08003774 <NMI_Handler>:
extern FDCAN_HandleTypeDef hfdcan;
extern DMA_HandleTypeDef hdma_adc1;
extern DMA_HandleTypeDef hdma_adc2;

void NMI_Handler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0

}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0
  while (1)
 8003786:	e7fe      	b.n	8003786 <HardFault_Handler+0x4>

08003788 <MemManage_Handler>:

  }
}

void MemManage_Handler(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  while (1)
 800378c:	e7fe      	b.n	800378c <MemManage_Handler+0x4>

0800378e <BusFault_Handler>:

  }
}

void BusFault_Handler(void)
{
 800378e:	b480      	push	{r7}
 8003790:	af00      	add	r7, sp, #0
  while (1)
 8003792:	e7fe      	b.n	8003792 <BusFault_Handler+0x4>

08003794 <UsageFault_Handler>:

  }
}

void UsageFault_Handler(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  while (1)
 8003798:	e7fe      	b.n	8003798 <UsageFault_Handler+0x4>

0800379a <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 800379a:	b480      	push	{r7}
 800379c:	af00      	add	r7, sp, #0

}
 800379e:	bf00      	nop
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0

}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <PendSV_Handler>:

void PendSV_Handler(void)
{
 80037b6:	b480      	push	{r7}
 80037b8:	af00      	add	r7, sp, #0

}
 80037ba:	bf00      	nop
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80037c8:	f7fc fd78 	bl	80002bc <HAL_IncTick>
}
 80037cc:	bf00      	nop
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <DMA1_Channel1_IRQHandler>:


void DMA1_Channel1_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 80037d4:	4802      	ldr	r0, [pc, #8]	; (80037e0 <DMA1_Channel1_IRQHandler+0x10>)
 80037d6:	f7fc fec0 	bl	800055a <HAL_DMA_IRQHandler>
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000214 	.word	0x20000214

080037e4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 80037e8:	4802      	ldr	r0, [pc, #8]	; (80037f4 <DMA1_Channel2_IRQHandler+0x10>)
 80037ea:	f7fc feb6 	bl	800055a <HAL_DMA_IRQHandler>
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	200002ec 	.word	0x200002ec

080037f8 <FDCAN1_IT0_IRQHandler>:


void FDCAN1_IT0_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(&hfdcan);
 80037fc:	4802      	ldr	r0, [pc, #8]	; (8003808 <FDCAN1_IT0_IRQHandler+0x10>)
 80037fe:	f7fd fbb7 	bl	8000f70 <HAL_FDCAN_IRQHandler>
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000110 	.word	0x20000110

0800380c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003810:	4b08      	ldr	r3, [pc, #32]	; (8003834 <SystemInit+0x28>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	4a07      	ldr	r2, [pc, #28]	; (8003834 <SystemInit+0x28>)
 8003818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800381c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <SystemInit+0x28>)
 8003822:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003826:	609a      	str	r2, [r3, #8]
#endif
}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003838:	480d      	ldr	r0, [pc, #52]	; (8003870 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800383a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800383c:	480d      	ldr	r0, [pc, #52]	; (8003874 <LoopForever+0x6>)
  ldr r1, =_edata
 800383e:	490e      	ldr	r1, [pc, #56]	; (8003878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003840:	4a0e      	ldr	r2, [pc, #56]	; (800387c <LoopForever+0xe>)
  movs r3, #0
 8003842:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003844:	e002      	b.n	800384c <LoopCopyDataInit>

08003846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800384a:	3304      	adds	r3, #4

0800384c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800384c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800384e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003850:	d3f9      	bcc.n	8003846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003852:	4a0b      	ldr	r2, [pc, #44]	; (8003880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003854:	4c0b      	ldr	r4, [pc, #44]	; (8003884 <LoopForever+0x16>)
  movs r3, #0
 8003856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003858:	e001      	b.n	800385e <LoopFillZerobss>

0800385a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800385a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800385c:	3204      	adds	r2, #4

0800385e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800385e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003860:	d3fb      	bcc.n	800385a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003862:	f7ff ffd3 	bl	800380c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003866:	f000 f811 	bl	800388c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800386a:	f7ff fbd1 	bl	8003010 <main>

0800386e <LoopForever>:

LoopForever:
    b LoopForever
 800386e:	e7fe      	b.n	800386e <LoopForever>
  ldr   r0, =_estack
 8003870:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003878:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 800387c:	0800395c 	.word	0x0800395c
  ldr r2, =_sbss
 8003880:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8003884:	2000039c 	.word	0x2000039c

08003888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003888:	e7fe      	b.n	8003888 <ADC1_2_IRQHandler>
	...

0800388c <__libc_init_array>:
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	4e0d      	ldr	r6, [pc, #52]	; (80038c4 <__libc_init_array+0x38>)
 8003890:	4c0d      	ldr	r4, [pc, #52]	; (80038c8 <__libc_init_array+0x3c>)
 8003892:	1ba4      	subs	r4, r4, r6
 8003894:	10a4      	asrs	r4, r4, #2
 8003896:	2500      	movs	r5, #0
 8003898:	42a5      	cmp	r5, r4
 800389a:	d109      	bne.n	80038b0 <__libc_init_array+0x24>
 800389c:	4e0b      	ldr	r6, [pc, #44]	; (80038cc <__libc_init_array+0x40>)
 800389e:	4c0c      	ldr	r4, [pc, #48]	; (80038d0 <__libc_init_array+0x44>)
 80038a0:	f000 f820 	bl	80038e4 <_init>
 80038a4:	1ba4      	subs	r4, r4, r6
 80038a6:	10a4      	asrs	r4, r4, #2
 80038a8:	2500      	movs	r5, #0
 80038aa:	42a5      	cmp	r5, r4
 80038ac:	d105      	bne.n	80038ba <__libc_init_array+0x2e>
 80038ae:	bd70      	pop	{r4, r5, r6, pc}
 80038b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038b4:	4798      	blx	r3
 80038b6:	3501      	adds	r5, #1
 80038b8:	e7ee      	b.n	8003898 <__libc_init_array+0xc>
 80038ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038be:	4798      	blx	r3
 80038c0:	3501      	adds	r5, #1
 80038c2:	e7f2      	b.n	80038aa <__libc_init_array+0x1e>
 80038c4:	08003954 	.word	0x08003954
 80038c8:	08003954 	.word	0x08003954
 80038cc:	08003954 	.word	0x08003954
 80038d0:	08003958 	.word	0x08003958

080038d4 <memset>:
 80038d4:	4402      	add	r2, r0
 80038d6:	4603      	mov	r3, r0
 80038d8:	4293      	cmp	r3, r2
 80038da:	d100      	bne.n	80038de <memset+0xa>
 80038dc:	4770      	bx	lr
 80038de:	f803 1b01 	strb.w	r1, [r3], #1
 80038e2:	e7f9      	b.n	80038d8 <memset+0x4>

080038e4 <_init>:
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e6:	bf00      	nop
 80038e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ea:	bc08      	pop	{r3}
 80038ec:	469e      	mov	lr, r3
 80038ee:	4770      	bx	lr

080038f0 <_fini>:
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	bf00      	nop
 80038f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f6:	bc08      	pop	{r3}
 80038f8:	469e      	mov	lr, r3
 80038fa:	4770      	bx	lr
